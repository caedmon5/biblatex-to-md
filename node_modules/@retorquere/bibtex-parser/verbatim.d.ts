export type Entry = {
    input: string;
    type: string;
    key: string;
    fields: Record<string, string>;
};
export interface ParseError {
    error: string;
    input?: string;
}
export interface ParserOptions {
    /**
     * stop parsing after `max_entries` entries have been found. Useful for quick detection if a text file is in fact a bibtex file
     */
    max_entries?: number;
    /**
      * preload these strings
      */
    strings?: string | Record<string, string>;
}
export declare class Library {
    parsing: string;
    entries: Entry[];
    strings: Record<string, string>;
    comments: string[];
    errors: ParseError[];
    preambles: string[];
    private default_strings;
    private pos;
    private linebreaks;
    private input;
    private max_entries;
    constructor(input: string, options?: ParserOptions);
    parse(): void;
    parseAsync(): Promise<void>;
    private isWhitespace;
    private match;
    private tryMatch;
    private skipWhitespace;
    private value_braces;
    private value_quotes;
    private single_value;
    location(): string;
    error(err: ParseError): void;
    private value;
    private key;
    private key_equals_value;
    private entry;
    private directive;
    private string;
    private preamble;
    private comment;
    private hasMore;
    private bibtex;
    private bibtexAsync;
    private matchGuard;
    private parseNext;
}
/**
 * Parses a bibtex source in verbatim mode. Good for detection of bibtex and for later LaTeX-reparsing.
 */
export declare function parse(input: string, options?: ParserOptions): Library;
export declare const promises: {
    parse(input: string, options?: ParserOptions): Promise<Library>;
};
//# sourceMappingURL=verbatim.d.ts.map