/**
 * A JabRef group.
 */
export interface Group {
    /**
     * the group name
     */
    name: string;
    /**
     * The citation keys which are specified to belong to this group, after intersection calculation has been applied
     */
    entries: string[];
    /**
     * Sub-groups under this group
     */
    groups: Group[];
}
export interface JabRefMetadata {
    /**
     * The root groups. You can find the nested groups in their `groups` property
     */
    root: Group[];
    /**
     * JabRef since 3.8 has changed their groups format. Entries have a `groups` field which has the names of the groups they belong to -- this name does not have to be unique in the groups hierarchy so if you
     * have multiple groups with the same name, it's not well-defined where the entries should end up. This property gives you the for each group name the first time the group showed up in the hierarchy. Note that
     * keys from the entries themselves have *not* yet been added to the [[Group]]s. You need to combine this yourself as you're parsing the entries.
     */
    groups: {
        [key: string]: Group;
    };
    /**
     * The base path for file paths
     */
    fileDirectory?: string;
    /**
     * The JabRef metadata format version
     */
    groupsversion?: number;
    /**
     * The JabRef metadata database type
     */
    databaseType?: string;
}
/**
 * Import the JabRef groups from the `@string` comments in which they were stored. You would typically pass the comments parsed by [[bibtex.parse]] in here.
 *
 * JabRef knows several group types, and this parser parses most, but not all of them:
 *
 * * independent group: the keys listed in the group are the entries that are considered to belong to it
 * * intersection: the keys listed in the group are considered to belong to the group if they're also in the parent group
 * * union: the keys listed in the group are considered to belong to the group, and also the keys that are in the parent group
 * * query: not supported by this parser
 */
export declare function parse(comments: string[]): {
    comments: string[];
    jabref: JabRefMetadata;
};
//# sourceMappingURL=jabref.d.ts.map