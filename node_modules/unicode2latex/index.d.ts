export type TeXChar = {
    math?: string;
    text?: string;
    macrospacer?: boolean;
    alt?: string[];
};
export type CharMap = Record<string, TeXChar>;
export type TeXMap = {
    base: CharMap;
    package: Record<string, CharMap>;
    provides: Record<string, string>;
    stopgap: string;
};
export declare const biblatex: TeXMap;
export declare const bibtex: TeXMap;
export declare const minimal: TeXMap;
export declare const latex2unicode: Record<string, string>;
export declare const combining: {
    macros: string[];
    tolatex: Record<string, {
        macro: string;
        mode: 'text' | 'math';
    }>;
    tounicode: Record<string, string>;
    regex: string;
};
export type MapOptions = {
    packages?: string[];
    math?: string;
    text?: string;
    ascii?: string;
    charmap?: CharMap;
};
export declare function replace_macro_spacers(latex: string): string;
export type TranslateOptions = {
    bracemath?: boolean;
    preservemacrospacers?: boolean;
    packages?: Set<string>;
};
export declare class Transform {
    private map;
    private mode;
    constructor(mode: 'bibtex' | 'biblatex' | 'minimal', options?: MapOptions);
    tolatex(text: string, options?: TranslateOptions): string;
}
