"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/@unified-latex/unified-latex-util-print-raw/index.cjs
var require_unified_latex_util_print_raw = __commonJS({
  "node_modules/@unified-latex/unified-latex-util-print-raw/index.cjs"(exports2) {
    "use strict";
    Object.defineProperty(exports2, Symbol.toStringTag, { value: "Module" });
    var linebreak = Symbol("linebreak");
    var ESCAPE = "\\";
    function _printRaw(node) {
      if (typeof node === "string") {
        return [node];
      }
      if (Array.isArray(node)) {
        return [].concat(
          ...node.map((n) => _printRaw(n))
        );
      }
      let argsString, escape;
      switch (node.type) {
        case "root":
          return _printRaw(node.content);
        case "argument":
          return [node.openMark, ..._printRaw(node.content), node.closeMark];
        case "comment":
          let suffix = node.suffixParbreak ? "" : linebreak;
          let leadingWhitespace = "";
          if (node.sameline && node.leadingWhitespace) {
            leadingWhitespace = " ";
          }
          if (node.sameline) {
            return [
              leadingWhitespace,
              "%",
              ..._printRaw(node.content),
              suffix
            ];
          }
          return [linebreak, "%", ..._printRaw(node.content), suffix];
        case "environment":
        case "mathenv":
        case "verbatim":
          let env = _printRaw(node.env);
          let envStart = [ESCAPE + "begin{", ...env, "}"];
          let envEnd = [ESCAPE + "end{", ...env, "}"];
          argsString = node.args == null ? [] : _printRaw(node.args);
          return [
            ...envStart,
            ...argsString,
            ..._printRaw(node.content),
            ...envEnd
          ];
        case "displaymath":
          return [ESCAPE + "[", ..._printRaw(node.content), ESCAPE + "]"];
        case "group":
          return ["{", ..._printRaw(node.content), "}"];
        case "inlinemath":
          return ["$", ..._printRaw(node.content), "$"];
        case "macro":
          argsString = node.args == null ? [] : _printRaw(node.args);
          escape = node.escapeToken == null ? ESCAPE : node.escapeToken;
          return [escape, ..._printRaw(node.content), ...argsString];
        case "parbreak":
          return [linebreak, linebreak];
        case "string":
          return [node.content];
        case "verb":
          return [
            ESCAPE,
            node.env,
            node.escape,
            ..._printRaw(node.content),
            node.escape
          ];
        case "whitespace":
          return [" "];
        default:
          console.warn(
            "Cannot find render for node ",
            node,
            `(of type ${typeof node})`
          );
          return ["" + node];
      }
    }
    function printRaw(node, options) {
      const asArray = options != null ? options.asArray : false;
      const printedTokens = _printRaw(node);
      if (asArray) {
        return printedTokens;
      }
      return printedTokens.map((x) => x === linebreak ? "\n" : x).join("");
    }
    exports2.linebreak = linebreak;
    exports2.printRaw = printRaw;
  }
});

// node_modules/@unified-latex/unified-latex-util-match/index.cjs
var require_unified_latex_util_match = __commonJS({
  "node_modules/@unified-latex/unified-latex-util-match/index.cjs"(exports2) {
    "use strict";
    Object.defineProperty(exports2, Symbol.toStringTag, { value: "Module" });
    var unifiedLatexUtilPrintRaw = require_unified_latex_util_print_raw();
    function createMacroMatcher(macros) {
      const macrosHash = Array.isArray(macros) ? macros.length > 0 ? typeof macros[0] === "string" ? Object.fromEntries(
        macros.map((macro2) => {
          if (typeof macro2 !== "string") {
            throw new Error("Wrong branch of map function");
          }
          return [macro2, {}];
        })
      ) : Object.fromEntries(
        macros.map((macro2) => {
          if (typeof macro2 === "string") {
            throw new Error("Wrong branch of map function");
          }
          if (macro2.escapeToken != null) {
            return [
              macro2.content,
              { escapeToken: macro2.escapeToken }
            ];
          }
          return [macro2.content, {}];
        })
      ) : {} : macros;
      return function matchAgainstMacros(node) {
        if (node == null || node.type !== "macro") {
          return false;
        }
        const spec = macrosHash[node.content];
        if (!spec) {
          return false;
        }
        if (typeof spec === "object" && "escapeToken" in spec) {
          return spec.escapeToken == null || spec.escapeToken === node.escapeToken;
        }
        return true;
      };
    }
    function createEnvironmentMatcher(macros) {
      const environmentsHash = Array.isArray(macros) ? Object.fromEntries(
        macros.map((str) => {
          return [str, {}];
        })
      ) : macros;
      return function matchAgainstEnvironments(node) {
        if (!match.anyEnvironment(node)) {
          return false;
        }
        const envName = unifiedLatexUtilPrintRaw.printRaw(node.env);
        const spec = environmentsHash[envName];
        if (!spec) {
          return false;
        }
        return true;
      };
    }
    var match = {
      macro(node, macroName) {
        if (node == null) {
          return false;
        }
        return node.type === "macro" && (macroName == null || node.content === macroName);
      },
      anyMacro(node) {
        return match.macro(node);
      },
      environment(node, envName) {
        if (node == null) {
          return false;
        }
        return (node.type === "environment" || node.type === "mathenv") && (envName == null || unifiedLatexUtilPrintRaw.printRaw(node.env) === envName);
      },
      anyEnvironment(node) {
        return match.environment(node);
      },
      comment(node) {
        if (node == null) {
          return false;
        }
        return node.type === "comment";
      },
      parbreak(node) {
        if (node == null) {
          return false;
        }
        return node.type === "parbreak";
      },
      whitespace(node) {
        if (node == null) {
          return false;
        }
        return node.type === "whitespace";
      },
      /**
       * Matches whitespace or a comment with leading whitespace.
       */
      whitespaceLike(node) {
        if (node == null) {
          return false;
        }
        return node.type === "whitespace" || node.type === "whitespace" && node.leadingWhitespace === true;
      },
      string(node, value) {
        if (node == null) {
          return false;
        }
        return node.type === "string" && (value == null || node.content === value);
      },
      anyString(node) {
        return match.string(node);
      },
      group(node) {
        if (node == null) {
          return false;
        }
        return node.type === "group";
      },
      argument(node) {
        if (node == null) {
          return false;
        }
        return node.type === "argument";
      },
      blankArgument(node) {
        if (!match.argument(node)) {
          return false;
        }
        return node.openMark === "" && node.closeMark === "" && node.content.length === 0;
      },
      math(node) {
        if (node == null) {
          return false;
        }
        return node.type === "displaymath" || node.type === "inlinemath";
      },
      createMacroMatcher,
      createEnvironmentMatcher
    };
    var {
      anyEnvironment,
      anyMacro,
      anyString,
      argument,
      blankArgument,
      comment,
      environment,
      group,
      macro,
      math,
      parbreak,
      string,
      whitespace
    } = match;
    exports2.anyEnvironment = anyEnvironment;
    exports2.anyMacro = anyMacro;
    exports2.anyString = anyString;
    exports2.argument = argument;
    exports2.blankArgument = blankArgument;
    exports2.comment = comment;
    exports2.environment = environment;
    exports2.group = group;
    exports2.macro = macro;
    exports2.match = match;
    exports2.math = math;
    exports2.parbreak = parbreak;
    exports2.string = string;
    exports2.whitespace = whitespace;
  }
});

// node_modules/@unified-latex/unified-latex-util-visit/index.cjs
var require_unified_latex_util_visit = __commonJS({
  "node_modules/@unified-latex/unified-latex-util-visit/index.cjs"(exports2) {
    "use strict";
    Object.defineProperty(exports2, Symbol.toStringTag, { value: "Module" });
    var unifiedLatexUtilMatch = require_unified_latex_util_match();
    function listMathChildren(node) {
      const NULL_RETURN = { enter: [], leave: [] };
      if (Array.isArray(node)) {
        return NULL_RETURN;
      }
      if (unifiedLatexUtilMatch.match.math(node)) {
        return { enter: ["content"], leave: [] };
      }
      const renderInfo = node._renderInfo || {};
      if (renderInfo.inMathMode == null) {
        return NULL_RETURN;
      }
      if (unifiedLatexUtilMatch.match.macro(node)) {
        if (renderInfo.inMathMode === true) {
          return { enter: ["args"], leave: [] };
        } else if (renderInfo.inMathMode === false) {
          return { enter: [], leave: ["args"] };
        }
      }
      if (unifiedLatexUtilMatch.match.environment(node)) {
        if (renderInfo.inMathMode === true) {
          return { enter: ["content"], leave: [] };
        } else {
          return { enter: [], leave: ["content"] };
        }
      }
      return NULL_RETURN;
    }
    var CONTINUE = Symbol("continue");
    var SKIP = Symbol("skip");
    var EXIT = Symbol("exit");
    var DEFAULT_CONTEXT = {
      inMathMode: false,
      hasMathModeAncestor: false
    };
    function visit(tree, visitor, options) {
      const {
        startingContext = DEFAULT_CONTEXT,
        test = () => true,
        includeArrays = false
      } = options || {};
      let enter;
      let leave;
      if (typeof visitor === "function") {
        enter = visitor;
      } else if (visitor && typeof visitor === "object") {
        enter = visitor.enter;
        leave = visitor.leave;
      }
      walk(tree, {
        key: void 0,
        index: void 0,
        parents: [],
        containingArray: void 0,
        context: { ...startingContext }
      });
      function walk(node, { key, index, parents, context, containingArray }) {
        const nodePassesTest = includeArrays ? test(node, { key, index, parents, context, containingArray }) : !Array.isArray(node) && test(node, { key, index, parents, context, containingArray });
        const result = enter && nodePassesTest ? toResult(
          enter(node, {
            key,
            index,
            parents,
            context,
            containingArray
          })
        ) : [CONTINUE];
        if (result[0] === EXIT) {
          return result;
        }
        if (result[0] === SKIP) {
          return leave && nodePassesTest ? toResult(
            leave(node, {
              key,
              index,
              parents,
              context,
              containingArray
            })
          ) : result;
        }
        if (Array.isArray(node)) {
          for (let index2 = 0; index2 > -1 && index2 < node.length; index2++) {
            const item = node[index2];
            const result2 = walk(item, {
              key,
              index: index2,
              parents,
              context,
              containingArray: node
            });
            if (result2[0] === EXIT) {
              return result2;
            }
            if (typeof result2[1] === "number") {
              index2 = result2[1] - 1;
            }
          }
        } else {
          let childProps = ["content", "args"];
          switch (node.type) {
            case "macro":
              childProps = ["args"];
              break;
            case "comment":
            case "string":
            case "verb":
            case "verbatim":
              childProps = [];
              break;
          }
          const mathModeProps = listMathChildren(node);
          for (const key2 of childProps) {
            const value = node[key2];
            const grandparents = [node].concat(parents);
            if (value == null) {
              continue;
            }
            const newContext = { ...context };
            if (mathModeProps.enter.includes(key2)) {
              newContext.inMathMode = true;
              newContext.hasMathModeAncestor = true;
            } else if (mathModeProps.leave.includes(key2)) {
              newContext.inMathMode = false;
            }
            const result2 = walk(value, {
              key: key2,
              index: void 0,
              parents: grandparents,
              context: newContext,
              containingArray: void 0
            });
            if (result2[0] === EXIT) {
              return result2;
            }
          }
        }
        return leave && nodePassesTest ? toResult(
          leave(node, {
            key,
            index,
            parents,
            context,
            containingArray
          })
        ) : result;
      }
    }
    function toResult(value) {
      if (value == null) {
        return [CONTINUE];
      }
      if (Array.isArray(value)) {
        return value;
      }
      if (typeof value === "number") {
        return [CONTINUE, value];
      }
      return [value];
    }
    exports2.CONTINUE = CONTINUE;
    exports2.EXIT = EXIT;
    exports2.SKIP = SKIP;
    exports2.visit = visit;
  }
});

// node_modules/@unified-latex/unified-latex-util-trim/index.cjs
var require_unified_latex_util_trim = __commonJS({
  "node_modules/@unified-latex/unified-latex-util-trim/index.cjs"(exports2) {
    "use strict";
    Object.defineProperty(exports2, Symbol.toStringTag, { value: "Module" });
    var unifiedLatexUtilMatch = require_unified_latex_util_match();
    var unifiedLatexUtilVisit = require_unified_latex_util_visit();
    function trim(nodes) {
      if (!Array.isArray(nodes)) {
        console.warn("Trying to trim a non-array ast", nodes);
        return nodes;
      }
      const { trimmedStart } = trimStart(nodes);
      const { trimmedEnd } = trimEnd(nodes);
      return { trimmedStart, trimmedEnd };
    }
    function trimStart(nodes) {
      const { start } = amountOfLeadingAndTrailingWhitespace(nodes);
      nodes.splice(0, start);
      for (const leadingToken of nodes) {
        if (!unifiedLatexUtilMatch.match.comment(leadingToken)) {
          break;
        }
        if (leadingToken.leadingWhitespace || leadingToken.sameline) {
          leadingToken.leadingWhitespace = false;
        }
        if (start > 0 && leadingToken.sameline) {
          leadingToken.sameline = false;
        }
      }
      return { trimmedStart: start };
    }
    function trimEnd(nodes) {
      const { end } = amountOfLeadingAndTrailingWhitespace(nodes);
      nodes.splice(nodes.length - end, end);
      for (let i = nodes.length - 1; i >= 0; i--) {
        const trailingToken = nodes[i];
        if (!unifiedLatexUtilMatch.match.comment(trailingToken)) {
          break;
        }
        delete trailingToken.suffixParbreak;
        if (unifiedLatexUtilMatch.match.comment(trailingToken) && trailingToken.leadingWhitespace && !trailingToken.sameline) {
          trailingToken.leadingWhitespace = false;
        }
      }
      return { trimmedEnd: end };
    }
    function amountOfLeadingAndTrailingWhitespace(ast) {
      let start = 0;
      let end = 0;
      for (const node of ast) {
        if (unifiedLatexUtilMatch.match.whitespace(node) || unifiedLatexUtilMatch.match.parbreak(node)) {
          start++;
        } else {
          break;
        }
      }
      if (start === ast.length) {
        return { start, end: 0 };
      }
      for (let i = ast.length - 1; i >= 0; i--) {
        const node = ast[i];
        if (unifiedLatexUtilMatch.match.whitespace(node) || unifiedLatexUtilMatch.match.parbreak(node)) {
          end++;
        } else {
          break;
        }
      }
      return { start, end };
    }
    var unifiedLatexTrimEnvironmentContents = function unifiedLatexTrimEnvironmentContents2() {
      return (tree) => {
        unifiedLatexUtilVisit.visit(tree, (node) => {
          if (!(unifiedLatexUtilMatch.match.math(node) || unifiedLatexUtilMatch.match.anyEnvironment(node))) {
            return;
          }
          let firstNode = node.content[0];
          if (unifiedLatexUtilMatch.match.comment(firstNode) && firstNode.sameline) {
            firstNode.suffixParbreak = false;
            trimEnd(node.content);
            const { trimmedStart } = trimStart(node.content.slice(1));
            node.content.splice(1, trimmedStart);
          } else {
            trim(node.content);
          }
        });
      };
    };
    var unifiedLatexTrimRoot = function unifiedLatexTrimRoot2() {
      return (tree) => {
        trim(tree.content);
      };
    };
    function hasWhitespaceEquivalent(nodes) {
      let start = false;
      let end = false;
      for (let i = 0; i < nodes.length; i++) {
        const node = nodes[i];
        if (unifiedLatexUtilMatch.match.comment(node)) {
          if (node.leadingWhitespace) {
            start = true;
            break;
          }
          continue;
        }
        if (unifiedLatexUtilMatch.match.whitespace(node)) {
          start = true;
        }
        break;
      }
      for (let j = nodes.length - 1; j >= 0; j--) {
        const node = nodes[j];
        if (unifiedLatexUtilMatch.match.comment(node)) {
          if (node.leadingWhitespace) {
            end = true;
            break;
          }
          continue;
        }
        if (unifiedLatexUtilMatch.match.whitespace(node)) {
          end = true;
        }
        break;
      }
      return { start, end };
    }
    exports2.hasWhitespaceEquivalent = hasWhitespaceEquivalent;
    exports2.trim = trim;
    exports2.trimEnd = trimEnd;
    exports2.trimStart = trimStart;
    exports2.unifiedLatexTrimEnvironmentContents = unifiedLatexTrimEnvironmentContents;
    exports2.unifiedLatexTrimRoot = unifiedLatexTrimRoot;
  }
});

// node_modules/@unified-latex/unified-latex-util-split/index.cjs
var require_unified_latex_util_split = __commonJS({
  "node_modules/@unified-latex/unified-latex-util-split/index.cjs"(exports2) {
    "use strict";
    Object.defineProperty(exports2, Symbol.toStringTag, { value: "Module" });
    var unifiedLatexUtilMatch = require_unified_latex_util_match();
    function splitOnCondition(nodes, splitFunc = () => false, options) {
      if (!Array.isArray(nodes)) {
        throw new Error(`Can only split an Array, not ${nodes}`);
      }
      const { onlySplitOnFirstOccurrence = false } = options || {};
      const splitIndices = [];
      for (let i = 0; i < nodes.length; i++) {
        if (splitFunc(nodes[i])) {
          splitIndices.push(i);
          if (onlySplitOnFirstOccurrence) {
            break;
          }
        }
      }
      if (splitIndices.length === 0) {
        return { segments: [nodes], separators: [] };
      }
      let separators = splitIndices.map((i) => nodes[i]);
      let segments = splitIndices.map((splitEnd, i) => {
        const splitStart = i === 0 ? 0 : splitIndices[i - 1] + 1;
        return nodes.slice(splitStart, splitEnd);
      });
      segments.push(
        nodes.slice(splitIndices[splitIndices.length - 1] + 1, nodes.length)
      );
      return { segments, separators };
    }
    function splitOnMacro(ast, macroName) {
      if (typeof macroName === "string") {
        macroName = [macroName];
      }
      if (!Array.isArray(macroName)) {
        throw new Error("Type coercion failed");
      }
      const isSeparator = unifiedLatexUtilMatch.match.createMacroMatcher(macroName);
      const { segments, separators } = splitOnCondition(ast, isSeparator);
      return { segments, macros: separators };
    }
    function unsplitOnMacro({
      segments,
      macros
    }) {
      if (segments.length === 0) {
        console.warn("Trying to join zero segments");
        return [];
      }
      if (segments.length !== macros.length + 1) {
        console.warn(
          "Mismatch between lengths of macros and segments when trying to unsplit"
        );
      }
      let ret = segments[0];
      for (let i = 0; i < macros.length; i++) {
        ret = ret.concat(macros[i]).concat(segments[i + 1]);
      }
      return ret;
    }
    function arrayJoin(array, sep) {
      return array.flatMap((item, i) => {
        if (i === 0) {
          return item;
        }
        if (Array.isArray(sep)) {
          return [...sep, ...item];
        } else {
          return [sep, ...item];
        }
      });
    }
    exports2.arrayJoin = arrayJoin;
    exports2.splitOnCondition = splitOnCondition;
    exports2.splitOnMacro = splitOnMacro;
    exports2.unsplitOnMacro = unsplitOnMacro;
  }
});

// node_modules/@unified-latex/unified-latex-util-replace/index.cjs
var require_unified_latex_util_replace = __commonJS({
  "node_modules/@unified-latex/unified-latex-util-replace/index.cjs"(exports2) {
    "use strict";
    Object.defineProperty(exports2, Symbol.toStringTag, { value: "Module" });
    var unifiedLatexUtilVisit = require_unified_latex_util_visit();
    var unifiedLatexUtilMatch = require_unified_latex_util_match();
    var unifiedLatexUtilTrim = require_unified_latex_util_trim();
    var unifiedLatexUtilSplit = require_unified_latex_util_split();
    function replaceNode(ast, visitor) {
      unifiedLatexUtilVisit.visit(ast, {
        leave: (node, info) => {
          let replacement = visitor(node, info);
          if (typeof replacement === "undefined" || replacement === node) {
            return;
          }
          if (!info.containingArray || info.index == null) {
            throw new Error(
              "Trying to replace node, but cannot find containing array"
            );
          }
          if (replacement === null || Array.isArray(replacement) && replacement.length === 0) {
            info.containingArray.splice(info.index, 1);
            return info.index;
          }
          if (!Array.isArray(replacement)) {
            replacement = [replacement];
          }
          info.containingArray.splice(info.index, 1, ...replacement);
          return info.index + replacement.length;
        }
      });
    }
    function firstSignificantNode(nodes, parbreaksAreInsignificant) {
      const index = firstSignificantNodeIndex(nodes, parbreaksAreInsignificant);
      if (index == null) {
        return null;
      }
      return nodes[index];
    }
    function lastSignificantNode(nodes, parbreaksAreInsignificant) {
      const index = lastSignificantNodeIndex(nodes, parbreaksAreInsignificant);
      if (index == null) {
        return null;
      }
      return nodes[index];
    }
    function lastSignificantNodeIndex(nodes, parbreaksAreInsignificant) {
      for (let i = nodes.length - 1; i >= 0; i--) {
        const node = nodes[i];
        if (unifiedLatexUtilMatch.match.whitespace(node) || unifiedLatexUtilMatch.match.comment(node) || parbreaksAreInsignificant && unifiedLatexUtilMatch.match.parbreak(node)) {
          continue;
        }
        return i;
      }
      return void 0;
    }
    function firstSignificantNodeIndex(nodes, parbreaksAreInsignificant) {
      for (let i = 0; i < nodes.length; i++) {
        const node = nodes[i];
        if (unifiedLatexUtilMatch.match.whitespace(node) || unifiedLatexUtilMatch.match.comment(node) || parbreaksAreInsignificant && unifiedLatexUtilMatch.match.parbreak(node)) {
          continue;
        }
        return i;
      }
      return void 0;
    }
    function isSpaceLike(node) {
      return unifiedLatexUtilMatch.match.whitespace(node) || unifiedLatexUtilMatch.match.comment(node) && Boolean(node.leadingWhitespace);
    }
    function joinWithoutExcessWhitespace(head, tail) {
      if (tail.length === 0) {
        return;
      }
      if (head.length === 0) {
        head.push(...tail);
        return;
      }
      const headEnd = head[head.length - 1];
      const tailStart = tail[0];
      if (unifiedLatexUtilMatch.match.whitespace(headEnd) && unifiedLatexUtilMatch.match.whitespace(tailStart)) {
        head.push(...tail.slice(1));
        return;
      }
      if (!isSpaceLike(headEnd) || !isSpaceLike(tailStart)) {
        if (unifiedLatexUtilMatch.match.whitespace(headEnd) && unifiedLatexUtilMatch.match.comment(tailStart)) {
          const comment2 = {
            type: "comment",
            content: tailStart.content,
            sameline: true,
            leadingWhitespace: true
          };
          tail = tail.slice(1);
          unifiedLatexUtilTrim.trimStart(tail);
          head.pop();
          head.push(comment2, ...tail);
          return;
        }
        head.push(...tail);
        return;
      }
      if (unifiedLatexUtilMatch.match.comment(headEnd) && unifiedLatexUtilMatch.match.comment(tailStart)) {
        if (tailStart.leadingWhitespace || tailStart.sameline) {
          head.push(
            { type: "comment", content: tailStart.content },
            ...tail.slice(1)
          );
          return;
        }
        head.push(...tail);
        return;
      }
      let comment = unifiedLatexUtilMatch.match.comment(headEnd) ? headEnd : tailStart;
      if (!unifiedLatexUtilMatch.match.comment(comment)) {
        throw new Error(
          `Expected a comment but found ${JSON.stringify(comment)}`
        );
      }
      if (!comment.leadingWhitespace || !comment.sameline) {
        comment = {
          type: "comment",
          content: comment.content,
          leadingWhitespace: true,
          sameline: true
        };
      }
      head.pop();
      head.push(comment, ...tail.slice(1));
    }
    function wrapSignificantContent(content, wrapper) {
      let hoistUntil = 0;
      let hoistAfter = content.length;
      for (let i = 0; i < content.length; i++) {
        if (unifiedLatexUtilMatch.match.whitespace(content[i]) || unifiedLatexUtilMatch.match.comment(content[i])) {
          hoistUntil = i + 1;
          continue;
        }
        break;
      }
      for (let j = content.length - 1; j >= 0; j--) {
        if (unifiedLatexUtilMatch.match.whitespace(content[j]) || unifiedLatexUtilMatch.match.comment(content[j])) {
          hoistAfter = j;
          continue;
        }
        break;
      }
      if (hoistUntil === 0 && hoistAfter === content.length) {
        return ensureArray(wrapper(content));
      }
      const frontMatter = content.slice(0, hoistUntil);
      const middle = content.slice(hoistUntil, hoistAfter);
      const backMatter = content.slice(hoistAfter, content.length);
      return frontMatter.concat(wrapper(middle), backMatter);
    }
    function ensureArray(x) {
      if (!Array.isArray(x)) {
        return [x];
      }
      return x;
    }
    function replaceStreamingCommandInArray(nodes, isStreamingCommand, replacer) {
      while (nodes.length > 0 && isStreamingCommand(nodes[nodes.length - 1])) {
        nodes.pop();
        unifiedLatexUtilTrim.trimEnd(nodes);
      }
      const foundStreamingCommands = [];
      for (let i = nodes.length - 1; i >= 0; i--) {
        const node = nodes[i];
        if (isStreamingCommand(node)) {
          const wrapper = (content) => replacer(content, node);
          let tail = nodes.slice(i + 1);
          unifiedLatexUtilTrim.trimStart(tail);
          tail = wrapSignificantContent(tail, wrapper);
          foundStreamingCommands.push(node);
          nodes.splice(i);
          joinWithoutExcessWhitespace(nodes, tail);
        }
      }
      return { foundStreamingCommands };
    }
    function replaceStreamingCommandInGroup(group, isStreamingCommand, replacer, options) {
      const content = group.content;
      let popFromGroup = isStreamingCommand(firstSignificantNode(content));
      let innerProcessed = replaceStreamingCommand(
        content,
        isStreamingCommand,
        replacer,
        options
      );
      if (innerProcessed.length === 0) {
        return [];
      }
      if (popFromGroup) {
        return innerProcessed;
      } else {
        return [{ type: "group", content: innerProcessed }];
      }
    }
    function replaceStreamingCommand(ast, isStreamingCommand, replacer, options) {
      if (typeof isStreamingCommand !== "function") {
        throw new Error(
          `'isStreamingCommand' must be a function, not '${typeof isStreamingCommand}'`
        );
      }
      const {
        macrosThatBreakPars = [
          "part",
          "chapter",
          "section",
          "subsection",
          "subsubsection",
          "vspace",
          "smallskip",
          "medskip",
          "bigskip",
          "hfill"
        ],
        environmentsThatDontBreakPars = []
      } = options || {};
      let processedContent = [];
      if (unifiedLatexUtilMatch.match.group(ast)) {
        processedContent = replaceStreamingCommandInGroup(
          ast,
          isStreamingCommand,
          replacer
        );
      }
      if (Array.isArray(ast)) {
        const nodes = ast;
        let scanIndex = nodes.length;
        let sliceIndex = scanIndex;
        while (scanIndex > 0 && (isStreamingCommand(nodes[scanIndex - 1]) || unifiedLatexUtilMatch.match.whitespace(nodes[scanIndex - 1]))) {
          scanIndex--;
          if (isStreamingCommand(nodes[scanIndex])) {
            sliceIndex = scanIndex;
          }
        }
        if (sliceIndex !== nodes.length) {
          nodes.splice(sliceIndex);
        }
        const macroThatBreaks = unifiedLatexUtilMatch.match.createMacroMatcher(macrosThatBreakPars);
        const envThatDoesntBreak = unifiedLatexUtilMatch.match.createEnvironmentMatcher(
          environmentsThatDontBreakPars
        );
        const isPar = (node) => unifiedLatexUtilMatch.match.parbreak(node) || unifiedLatexUtilMatch.match.macro(node, "par") || macroThatBreaks(node) || unifiedLatexUtilMatch.match.environment(node) && !envThatDoesntBreak(node) || node.type === "displaymath";
        const splitByPar = unifiedLatexUtilSplit.splitOnCondition(nodes, isPar);
        splitByPar.separators = splitByPar.separators.map(
          (sep) => unifiedLatexUtilMatch.match.macro(sep, "par") ? { type: "parbreak" } : sep
        );
        const replacers = [];
        let segments = splitByPar.segments.map((segment) => {
          if (segment.length === 0) {
            return segment;
          }
          function applyAccumulatedReplacers(nodes2) {
            if (replacers.length === 0) {
              return nodes2;
            }
            return wrapSignificantContent(
              nodes2,
              composeReplacers(replacers)
            );
          }
          const { foundStreamingCommands } = replaceStreamingCommandInArray(
            segment,
            isStreamingCommand,
            replacer
          );
          const ret = applyAccumulatedReplacers(segment);
          foundStreamingCommands.forEach((macro) => {
            replacers.push((nodes2) => {
              const ret2 = replacer(nodes2, macro);
              if (!Array.isArray(ret2)) {
                return [ret2];
              }
              return ret2;
            });
          });
          return ret;
        });
        if (segments.length > 1) {
          segments.forEach((segment, i) => {
            if (i === 0) {
              unifiedLatexUtilTrim.trimEnd(segment);
            } else if (i === segments.length - 1) {
              unifiedLatexUtilTrim.trimStart(segment);
            } else {
              unifiedLatexUtilTrim.trim(segment);
            }
          });
        }
        processedContent = unifiedLatexUtilSplit.unsplitOnMacro({
          segments,
          macros: splitByPar.separators
        });
      }
      return processedContent;
    }
    function composeReplacers(replacers) {
      if (replacers.length === 0) {
        throw new Error("Cannot compose zero replacement functions");
      }
      return (nodes) => {
        let ret = nodes;
        for (let i = 0; i < replacers.length; i++) {
          const func = replacers[i];
          ret = func(ret);
        }
        return ret;
      };
    }
    function replaceNodeDuringVisit(replacement, info) {
      const parent = info.parents[0];
      if (!parent) {
        throw new Error(`Cannot replace node: parent not found`);
      }
      const container = parent[info.key];
      if (!Array.isArray(container)) {
        throw new Error(`Cannot replace node: containing array not found`);
      }
      if (info.index == null) {
        throw new Error(`Cannot replace node: node index undefined`);
      }
      if (!Array.isArray(replacement)) {
        container[info.index] = replacement;
      } else {
        container.splice(info.index, 1, ...replacement);
      }
    }
    var unifiedLatexReplaceStreamingCommands = function unifiedLatexReplaceStreamingCommands2(options) {
      const { replacers = {} } = options || {};
      const isReplaceable = unifiedLatexUtilMatch.match.createMacroMatcher(replacers);
      return (tree) => {
        unifiedLatexUtilVisit.visit(
          tree,
          (group, info) => {
            if (info.context.hasMathModeAncestor || !group.content.some(isReplaceable)) {
              return;
            }
            let fixed = replaceStreamingCommand(
              group,
              isReplaceable,
              (content, command) => {
                return replacers[command.content](content, command);
              }
            );
            if (!info.containingArray || info.index == null) {
              return;
            }
            const prevToken = info.containingArray[info.index - 1];
            const nextToken = info.containingArray[info.index + 1];
            if (unifiedLatexUtilMatch.match.whitespaceLike(prevToken) && unifiedLatexUtilMatch.match.whitespaceLike(fixed[0])) {
              unifiedLatexUtilTrim.trimStart(fixed);
            }
            if (unifiedLatexUtilMatch.match.whitespaceLike(nextToken) && unifiedLatexUtilMatch.match.whitespaceLike(fixed[fixed.length - 1])) {
              unifiedLatexUtilTrim.trimEnd(fixed);
            }
            replaceNodeDuringVisit(fixed, info);
          },
          { test: unifiedLatexUtilMatch.match.group }
        );
        unifiedLatexUtilVisit.visit(
          tree,
          (nodes, info) => {
            if (info.context.hasMathModeAncestor || !nodes.some(isReplaceable)) {
              return;
            }
            const replaced = replaceStreamingCommand(
              nodes,
              isReplaceable,
              (content, command) => {
                return replacers[command.content](content, command);
              }
            );
            if (replaced !== nodes) {
              nodes.length = 0;
              nodes.push(...replaced);
            }
          },
          { includeArrays: true, test: Array.isArray }
        );
      };
    };
    exports2.firstSignificantNode = firstSignificantNode;
    exports2.firstSignificantNodeIndex = firstSignificantNodeIndex;
    exports2.lastSignificantNode = lastSignificantNode;
    exports2.lastSignificantNodeIndex = lastSignificantNodeIndex;
    exports2.replaceNode = replaceNode;
    exports2.replaceNodeDuringVisit = replaceNodeDuringVisit;
    exports2.replaceStreamingCommand = replaceStreamingCommand;
    exports2.replaceStreamingCommandInGroup = replaceStreamingCommandInGroup;
    exports2.unifiedLatexReplaceStreamingCommands = unifiedLatexReplaceStreamingCommands;
  }
});

// node_modules/@unified-latex/unified-latex-util-pegjs/index.cjs
var require_unified_latex_util_pegjs = __commonJS({
  "node_modules/@unified-latex/unified-latex-util-pegjs/index.cjs"(exports2) {
    "use strict";
    Object.defineProperty(exports2, Symbol.toStringTag, { value: "Module" });
    var unifiedLatexUtilMatch = require_unified_latex_util_match();
    function decorateArrayForPegjs(array) {
      array.charAt = function(i) {
        return this[i];
      };
      array.charCodeAt = () => 0;
      array.substring = function(i, j) {
        return this.slice(i, j);
      };
      array.replace = function(a, b) {
        const ret = JSON.stringify(this);
        return ret.replace(a, b);
      };
      return array;
    }
    function splitStringsIntoSingleChars(nodes) {
      return nodes.flatMap(
        (node) => unifiedLatexUtilMatch.match.anyString(node) ? Array.from(node.content).map((c) => ({
          type: "string",
          content: c
        })) : node
      );
    }
    var _LatexPegParser = (
      // Generated by Peggy 3.0.2.
      //
      // https://peggyjs.org/
      function() {
        function peg$subclass(child, parent) {
          function C() {
            this.constructor = child;
          }
          C.prototype = parent.prototype;
          child.prototype = new C();
        }
        function peg$SyntaxError(message, expected, found, location) {
          var self2 = Error.call(this, message);
          if (Object.setPrototypeOf) {
            Object.setPrototypeOf(self2, peg$SyntaxError.prototype);
          }
          self2.expected = expected;
          self2.found = found;
          self2.location = location;
          self2.name = "SyntaxError";
          return self2;
        }
        peg$subclass(peg$SyntaxError, Error);
        function peg$padEnd(str, targetLength, padString) {
          padString = padString || " ";
          if (str.length > targetLength) {
            return str;
          }
          targetLength -= str.length;
          padString += padString.repeat(targetLength);
          return str + padString.slice(0, targetLength);
        }
        peg$SyntaxError.prototype.format = function(sources) {
          var str = "Error: " + this.message;
          if (this.location) {
            var src = null;
            var k;
            for (k = 0; k < sources.length; k++) {
              if (sources[k].source === this.location.source) {
                src = sources[k].text.split(/\r\n|\n|\r/g);
                break;
              }
            }
            var s = this.location.start;
            var offset_s = this.location.source && typeof this.location.source.offset === "function" ? this.location.source.offset(s) : s;
            var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
            if (src) {
              var e = this.location.end;
              var filler = peg$padEnd("", offset_s.line.toString().length, " ");
              var line = src[s.line - 1];
              var last = s.line === e.line ? e.column : line.length + 1;
              var hatLen = last - s.column || 1;
              str += "\n --> " + loc + "\n" + filler + " |\n" + offset_s.line + " | " + line + "\n" + filler + " | " + peg$padEnd("", s.column - 1, " ") + peg$padEnd("", hatLen, "^");
            } else {
              str += "\n at " + loc;
            }
          }
          return str;
        };
        peg$SyntaxError.buildMessage = function(expected, found) {
          var DESCRIBE_EXPECTATION_FNS = {
            literal: function(expectation) {
              return '"' + literalEscape(expectation.text) + '"';
            },
            class: function(expectation) {
              var escapedParts = expectation.parts.map(function(part) {
                return Array.isArray(part) ? classEscape(part[0]) + "-" + classEscape(part[1]) : classEscape(part);
              });
              return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
            },
            any: function() {
              return "any character";
            },
            end: function() {
              return "end of input";
            },
            other: function(expectation) {
              return expectation.description;
            }
          };
          function hex(ch) {
            return ch.charCodeAt(0).toString(16).toUpperCase();
          }
          function literalEscape(s) {
            return s.replace(/\\/g, "\\\\").replace(/"/g, '\\"').replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(ch) {
              return "\\x0" + hex(ch);
            }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
              return "\\x" + hex(ch);
            });
          }
          function classEscape(s) {
            return s.replace(/\\/g, "\\\\").replace(/\]/g, "\\]").replace(/\^/g, "\\^").replace(/-/g, "\\-").replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(ch) {
              return "\\x0" + hex(ch);
            }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
              return "\\x" + hex(ch);
            });
          }
          function describeExpectation(expectation) {
            return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
          }
          function describeExpected(expected2) {
            var descriptions = expected2.map(describeExpectation);
            var i, j;
            descriptions.sort();
            if (descriptions.length > 0) {
              for (i = 1, j = 1; i < descriptions.length; i++) {
                if (descriptions[i - 1] !== descriptions[i]) {
                  descriptions[j] = descriptions[i];
                  j++;
                }
              }
              descriptions.length = j;
            }
            switch (descriptions.length) {
              case 1:
                return descriptions[0];
              case 2:
                return descriptions[0] + " or " + descriptions[1];
              default:
                return descriptions.slice(0, -1).join(", ") + ", or " + descriptions[descriptions.length - 1];
            }
          }
          function describeFound(found2) {
            return found2 ? '"' + literalEscape(found2) + '"' : "end of input";
          }
          return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
        };
        function peg$parse(input, options) {
          options = options !== void 0 ? options : {};
          var peg$FAILED = {};
          var peg$source = options.grammarSource;
          var peg$startRuleFunctions = { document: peg$parsedocument, math: peg$parsemath };
          var peg$startRuleFunction = peg$parsedocument;
          var peg$c0 = "%";
          var peg$c1 = ".";
          var peg$c2 = "verb*";
          var peg$c3 = "verb";
          var peg$c4 = "[";
          var peg$c5 = "]";
          var peg$c6 = "lstinline";
          var peg$c7 = "mintinline";
          var peg$c8 = "mint";
          var peg$c9 = "minted";
          var peg$c10 = "verbatim*";
          var peg$c11 = "verbatim";
          var peg$c12 = "filecontents*";
          var peg$c13 = "filecontents";
          var peg$c14 = "comment";
          var peg$c15 = "lstlisting";
          var peg$c16 = "(";
          var peg$c17 = ")";
          var peg$c18 = "begin";
          var peg$c19 = "end";
          var peg$c20 = "equation*";
          var peg$c21 = "equation";
          var peg$c22 = "align*";
          var peg$c23 = "align";
          var peg$c24 = "alignat*";
          var peg$c25 = "alignat";
          var peg$c26 = "gather*";
          var peg$c27 = "gather";
          var peg$c28 = "multline*";
          var peg$c29 = "multline";
          var peg$c30 = "flalign*";
          var peg$c31 = "flalign";
          var peg$c32 = "split";
          var peg$c33 = "math";
          var peg$c34 = "displaymath";
          var peg$c35 = "\\";
          var peg$c36 = "{";
          var peg$c37 = "}";
          var peg$c38 = "$";
          var peg$c39 = "&";
          var peg$c40 = "\r";
          var peg$c41 = "\n";
          var peg$c42 = "\r\n";
          var peg$c43 = "#";
          var peg$c44 = "^";
          var peg$c45 = "_";
          var peg$c46 = "\0";
          var peg$r0 = /^[^ \t\n\r]/;
          var peg$r1 = /^[ \t]/;
          var peg$r2 = /^[a-zA-Z]/;
          var peg$r3 = /^[0-9]/;
          var peg$r4 = /^[.,;:\-*\/()!?=+<>[\]`'"~]/;
          var peg$e0 = peg$otherExpectation("document");
          var peg$e1 = peg$otherExpectation("math");
          var peg$e2 = peg$otherExpectation("token");
          var peg$e3 = peg$anyExpectation();
          var peg$e4 = peg$otherExpectation("parbreak");
          var peg$e5 = peg$otherExpectation("math token");
          var peg$e6 = peg$otherExpectation("nonchar token");
          var peg$e7 = peg$literalExpectation("%", false);
          var peg$e8 = peg$otherExpectation("whitespace");
          var peg$e9 = peg$otherExpectation("number");
          var peg$e10 = peg$literalExpectation(".", false);
          var peg$e11 = peg$otherExpectation("special macro");
          var peg$e12 = peg$literalExpectation("verb*", false);
          var peg$e13 = peg$literalExpectation("verb", false);
          var peg$e14 = peg$literalExpectation("[", false);
          var peg$e15 = peg$literalExpectation("]", false);
          var peg$e16 = peg$classExpectation([" ", "	", "\n", "\r"], true, false);
          var peg$e17 = peg$otherExpectation("verbatim listings");
          var peg$e18 = peg$literalExpectation("lstinline", false);
          var peg$e19 = peg$otherExpectation("verbatim minted");
          var peg$e20 = peg$literalExpectation("mintinline", false);
          var peg$e21 = peg$literalExpectation("mint", false);
          var peg$e22 = peg$otherExpectation("verbatim minted environment");
          var peg$e23 = peg$literalExpectation("minted", false);
          var peg$e24 = peg$otherExpectation("verbatim environment");
          var peg$e25 = peg$literalExpectation("verbatim*", false);
          var peg$e26 = peg$literalExpectation("verbatim", false);
          var peg$e27 = peg$literalExpectation("filecontents*", false);
          var peg$e28 = peg$literalExpectation("filecontents", false);
          var peg$e29 = peg$literalExpectation("comment", false);
          var peg$e30 = peg$literalExpectation("lstlisting", false);
          var peg$e31 = peg$otherExpectation("macro");
          var peg$e32 = peg$otherExpectation("group");
          var peg$e33 = peg$otherExpectation("environment");
          var peg$e34 = peg$otherExpectation("math environment");
          var peg$e36 = peg$literalExpectation("(", false);
          var peg$e37 = peg$literalExpectation(")", false);
          var peg$e38 = peg$literalExpectation("begin", false);
          var peg$e39 = peg$literalExpectation("end", false);
          var peg$e40 = peg$literalExpectation("equation*", false);
          var peg$e41 = peg$literalExpectation("equation", false);
          var peg$e42 = peg$literalExpectation("align*", false);
          var peg$e43 = peg$literalExpectation("align", false);
          var peg$e44 = peg$literalExpectation("alignat*", false);
          var peg$e45 = peg$literalExpectation("alignat", false);
          var peg$e46 = peg$literalExpectation("gather*", false);
          var peg$e47 = peg$literalExpectation("gather", false);
          var peg$e48 = peg$literalExpectation("multline*", false);
          var peg$e49 = peg$literalExpectation("multline", false);
          var peg$e50 = peg$literalExpectation("flalign*", false);
          var peg$e51 = peg$literalExpectation("flalign", false);
          var peg$e52 = peg$literalExpectation("split", false);
          var peg$e53 = peg$literalExpectation("math", false);
          var peg$e54 = peg$literalExpectation("displaymath", false);
          var peg$e55 = peg$otherExpectation("escape");
          var peg$e56 = peg$literalExpectation("\\", false);
          var peg$e57 = peg$literalExpectation("{", false);
          var peg$e58 = peg$literalExpectation("}", false);
          var peg$e59 = peg$literalExpectation("$", false);
          var peg$e60 = peg$literalExpectation("&", false);
          var peg$e61 = peg$otherExpectation("newline");
          var peg$e62 = peg$literalExpectation("\r", false);
          var peg$e63 = peg$literalExpectation("\n", false);
          var peg$e64 = peg$literalExpectation("\r\n", false);
          var peg$e65 = peg$literalExpectation("#", false);
          var peg$e66 = peg$literalExpectation("^", false);
          var peg$e67 = peg$literalExpectation("_", false);
          var peg$e68 = peg$literalExpectation("\0", false);
          var peg$e69 = peg$classExpectation([" ", "	"], false, false);
          var peg$e70 = peg$otherExpectation("letter");
          var peg$e71 = peg$classExpectation([["a", "z"], ["A", "Z"]], false, false);
          var peg$e72 = peg$otherExpectation("digit");
          var peg$e73 = peg$classExpectation([["0", "9"]], false, false);
          var peg$e74 = peg$otherExpectation("punctuation");
          var peg$e75 = peg$classExpectation([".", ",", ";", ":", "-", "*", "/", "(", ")", "!", "?", "=", "+", "<", ">", "[", "]", "`", "'", '"', "~"], false, false);
          var peg$e76 = peg$otherExpectation("full comment");
          var peg$e77 = peg$otherExpectation("comment");
          var peg$f0 = function(content) {
            return createNode("root", { content: content.flatMap((x) => x) });
          };
          var peg$f1 = function(t) {
            return t;
          };
          var peg$f2 = function(eq) {
            return createNode("inlinemath", { content: eq.flatMap((x) => x) });
          };
          var peg$f3 = function(s) {
            return createNode("string", { content: s });
          };
          var peg$f4 = function(s) {
            return createNode("string", { content: s });
          };
          var peg$f5 = function() {
            return createNode("parbreak");
          };
          var peg$f6 = function(x) {
            return x;
          };
          var peg$f7 = function(x) {
            return x;
          };
          var peg$f8 = function() {
            return createNode("macro", { content: "^", escapeToken: "" });
          };
          var peg$f9 = function() {
            return createNode("macro", { content: "_", escapeToken: "" });
          };
          var peg$f10 = function(s) {
            return createNode("string", { content: s });
          };
          var peg$f11 = function() {
            return createNode("whitespace");
          };
          var peg$f12 = function(a, b) {
            return a.join("") + "." + b.join("");
          };
          var peg$f13 = function(b) {
            return "." + b.join("");
          };
          var peg$f14 = function(a) {
            return a.join("") + ".";
          };
          var peg$f15 = function(s) {
            return createNode("string", { content: s });
          };
          var peg$f16 = function(env, e, end) {
            return end == e;
          };
          var peg$f17 = function(env, e, x) {
            return x;
          };
          var peg$f18 = function(env, e, x, end) {
            return end == e;
          };
          var peg$f19 = function(env, e, x) {
            return createNode("verb", {
              env,
              escape: e,
              content: x.join("")
            });
          };
          var peg$f20 = function(x) {
            return x;
          };
          var peg$f21 = function(x) {
            return createNode("displaymath", { content: x.flatMap((x2) => x2) });
          };
          var peg$f22 = function(x) {
            return x;
          };
          var peg$f23 = function(x) {
            return createNode("inlinemath", { content: x.flatMap((x2) => x2) });
          };
          var peg$f24 = function(x) {
            return x;
          };
          var peg$f25 = function(x) {
            return createNode("displaymath", { content: x.flatMap((x2) => x2) });
          };
          var peg$f26 = function(end) {
            return end.type === "string" && end.content === "]";
          };
          var peg$f27 = function(x) {
            return x;
          };
          var peg$f28 = function(o) {
            return [
              createNode("string", { content: "[" }),
              ...o,
              createNode("string", { content: "]" })
            ];
          };
          var peg$f29 = function(x) {
            return x;
          };
          var peg$f30 = function(v) {
            return createNode("group", {
              content: createNode("string", { content: v.join("") })
            });
          };
          var peg$f31 = function(d, end) {
            return end == d;
          };
          var peg$f32 = function(d, x) {
            return x;
          };
          var peg$f33 = function(d, v, end) {
            return end == d;
          };
          var peg$f34 = function(d, v) {
            return [
              createNode("string", { content: d }),
              createNode("string", { content: v.join("") }),
              createNode("string", { content: d })
            ];
          };
          var peg$f35 = function(macro, option, verbatim) {
            return [
              createNode("macro", { content: macro }),
              ...option || [],
              ...[].concat(verbatim)
            ];
          };
          var peg$f36 = function(macro, option, language, verbatim) {
            return [
              createNode("macro", { content: macro }),
              ...option || [],
              language,
              ...[].concat(verbatim)
            ];
          };
          var peg$f37 = function(env, option, language, end_env) {
            return compare_env({ content: [env] }, end_env);
          };
          var peg$f38 = function(env, option, language, body) {
            const content = [
              ...option || [],
              language,
              { type: "string", content: body }
            ];
            return createNode("environment", {
              env,
              content
            });
          };
          var peg$f39 = function(env, end_env) {
            return compare_env({ content: [env] }, end_env);
          };
          var peg$f40 = function(env, x) {
            return x;
          };
          var peg$f41 = function(env, body) {
            return createNode("verbatim", {
              env,
              content: body
            });
          };
          var peg$f42 = function(n) {
            return n.join("");
          };
          var peg$f43 = function(n) {
            return n;
          };
          var peg$f44 = function(m) {
            return createNode("macro", { content: m });
          };
          var peg$f45 = function(c) {
            return c;
          };
          var peg$f46 = function(x) {
            return createNode("group", { content: x.flatMap((x2) => x2) });
          };
          var peg$f47 = function(g) {
            return text().slice(1, -1);
          };
          var peg$f48 = function(env, env_comment, end_env) {
            return compare_env(env, end_env);
          };
          var peg$f49 = function(env, env_comment, x) {
            return x;
          };
          var peg$f50 = function(env, env_comment, body) {
            body = body.flatMap((x) => x);
            return createNode("environment", {
              env,
              content: env_comment ? [env_comment, ...body] : body
            });
          };
          var peg$f51 = function(env, env_comment, end_env) {
            return compare_env({ content: [env] }, end_env);
          };
          var peg$f52 = function(env, env_comment, x) {
            return x;
          };
          var peg$f53 = function(env, env_comment, body) {
            body = body.flatMap((x) => x);
            return createNode("mathenv", {
              env,
              content: env_comment ? [env_comment, ...body] : body
            });
          };
          var peg$f56 = function(e) {
            return createNode("string", { content: e });
          };
          var peg$f57 = function() {
            return createNode("string", { content: "\\" });
          };
          var peg$f58 = function(s) {
            return createNode("string", { content: s });
          };
          var peg$f59 = function(s) {
            return createNode("string", { content: s });
          };
          var peg$f60 = function(s) {
            return createNode("string", { content: s });
          };
          var peg$f61 = function(s) {
            return createNode("string", { content: s });
          };
          var peg$f62 = function(s) {
            return createNode("string", { content: s });
          };
          var peg$f63 = function(s) {
            return createNode("string", { content: s });
          };
          var peg$f64 = function(s) {
            return createNode("string", { content: s });
          };
          var peg$f65 = function() {
            return " ";
          };
          var peg$f66 = function(p) {
            return createNode("string", { content: p });
          };
          var peg$f67 = function(leading_sp, comment) {
            return createNode("comment", {
              ...comment,
              sameline: false,
              leadingWhitespace: leading_sp.length > 0
            });
          };
          var peg$f68 = function(spaces, x) {
            return createNode("comment", {
              ...x,
              sameline: true,
              leadingWhitespace: spaces.length > 0
            });
          };
          var peg$f69 = function(c) {
            return c;
          };
          var peg$f70 = function(c) {
            return { content: c.join(""), suffixParbreak: true };
          };
          var peg$f71 = function(c) {
            return c;
          };
          var peg$f72 = function(c) {
            return { content: c.join("") };
          };
          var peg$f73 = function() {
            var loc = location();
            return loc.start.column === 1;
          };
          var peg$currPos = 0;
          var peg$savedPos = 0;
          var peg$posDetailsCache = [{ line: 1, column: 1 }];
          var peg$maxFailPos = 0;
          var peg$maxFailExpected = [];
          var peg$silentFails = 0;
          var peg$resultsCache = {};
          var peg$result;
          if ("startRule" in options) {
            if (!(options.startRule in peg$startRuleFunctions)) {
              throw new Error(`Can't start parsing from rule "` + options.startRule + '".');
            }
            peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
          }
          function text() {
            return input.substring(peg$savedPos, peg$currPos);
          }
          function location() {
            return peg$computeLocation(peg$savedPos, peg$currPos);
          }
          function peg$literalExpectation(text2, ignoreCase) {
            return { type: "literal", text: text2, ignoreCase };
          }
          function peg$classExpectation(parts, inverted, ignoreCase) {
            return { type: "class", parts, inverted, ignoreCase };
          }
          function peg$anyExpectation() {
            return { type: "any" };
          }
          function peg$endExpectation() {
            return { type: "end" };
          }
          function peg$otherExpectation(description) {
            return { type: "other", description };
          }
          function peg$computePosDetails(pos) {
            var details = peg$posDetailsCache[pos];
            var p;
            if (details) {
              return details;
            } else {
              p = pos - 1;
              while (!peg$posDetailsCache[p]) {
                p--;
              }
              details = peg$posDetailsCache[p];
              details = {
                line: details.line,
                column: details.column
              };
              while (p < pos) {
                if (input.charCodeAt(p) === 10) {
                  details.line++;
                  details.column = 1;
                } else {
                  details.column++;
                }
                p++;
              }
              peg$posDetailsCache[pos] = details;
              return details;
            }
          }
          function peg$computeLocation(startPos, endPos, offset2) {
            var startPosDetails = peg$computePosDetails(startPos);
            var endPosDetails = peg$computePosDetails(endPos);
            var res = {
              source: peg$source,
              start: {
                offset: startPos,
                line: startPosDetails.line,
                column: startPosDetails.column
              },
              end: {
                offset: endPos,
                line: endPosDetails.line,
                column: endPosDetails.column
              }
            };
            return res;
          }
          function peg$fail(expected2) {
            if (peg$currPos < peg$maxFailPos) {
              return;
            }
            if (peg$currPos > peg$maxFailPos) {
              peg$maxFailPos = peg$currPos;
              peg$maxFailExpected = [];
            }
            peg$maxFailExpected.push(expected2);
          }
          function peg$buildStructuredError(expected2, found, location2) {
            return new peg$SyntaxError(
              peg$SyntaxError.buildMessage(expected2, found),
              expected2,
              found,
              location2
            );
          }
          function peg$parsedocument() {
            var s0, s1, s2;
            var key = peg$currPos * 52 + 0;
            var cached = peg$resultsCache[key];
            if (cached) {
              peg$currPos = cached.nextPos;
              return cached.result;
            }
            peg$silentFails++;
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parsetoken();
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$parsetoken();
            }
            peg$savedPos = s0;
            s1 = peg$f0(s1);
            s0 = s1;
            peg$silentFails--;
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e0);
            }
            peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
            return s0;
          }
          function peg$parsemath() {
            var s0, s1;
            var key = peg$currPos * 52 + 1;
            var cached = peg$resultsCache[key];
            if (cached) {
              peg$currPos = cached.nextPos;
              return cached.result;
            }
            peg$silentFails++;
            s0 = [];
            s1 = peg$parsemath_token();
            while (s1 !== peg$FAILED) {
              s0.push(s1);
              s1 = peg$parsemath_token();
            }
            peg$silentFails--;
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e1);
            }
            peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
            return s0;
          }
          function peg$parsetoken() {
            var s0, s1, s2, s3, s4, s5;
            var key = peg$currPos * 52 + 2;
            var cached = peg$resultsCache[key];
            if (cached) {
              peg$currPos = cached.nextPos;
              return cached.result;
            }
            peg$silentFails++;
            s0 = peg$parsespecial_macro();
            if (s0 === peg$FAILED) {
              s0 = peg$parsemacro();
              if (s0 === peg$FAILED) {
                s0 = peg$parsefull_comment();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsegroup();
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parsemath_shift();
                    if (s1 !== peg$FAILED) {
                      s2 = [];
                      s3 = peg$currPos;
                      s4 = peg$currPos;
                      peg$silentFails++;
                      s5 = peg$parsemath_shift();
                      peg$silentFails--;
                      if (s5 === peg$FAILED) {
                        s4 = void 0;
                      } else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                      }
                      if (s4 !== peg$FAILED) {
                        s5 = peg$parsemath_token();
                        if (s5 !== peg$FAILED) {
                          peg$savedPos = s3;
                          s3 = peg$f1(s5);
                        } else {
                          peg$currPos = s3;
                          s3 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                      }
                      if (s3 !== peg$FAILED) {
                        while (s3 !== peg$FAILED) {
                          s2.push(s3);
                          s3 = peg$currPos;
                          s4 = peg$currPos;
                          peg$silentFails++;
                          s5 = peg$parsemath_shift();
                          peg$silentFails--;
                          if (s5 === peg$FAILED) {
                            s4 = void 0;
                          } else {
                            peg$currPos = s4;
                            s4 = peg$FAILED;
                          }
                          if (s4 !== peg$FAILED) {
                            s5 = peg$parsemath_token();
                            if (s5 !== peg$FAILED) {
                              peg$savedPos = s3;
                              s3 = peg$f1(s5);
                            } else {
                              peg$currPos = s3;
                              s3 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                          }
                        }
                      } else {
                        s2 = peg$FAILED;
                      }
                      if (s2 !== peg$FAILED) {
                        s3 = peg$parsemath_shift();
                        if (s3 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s0 = peg$f2(s2);
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$parsealignment_tab();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseparbreak();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parsemacro_parameter();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parseignore();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parsenumber();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parsewhitespace();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parsepunctuation();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    s1 = peg$currPos;
                                    s2 = [];
                                    s3 = peg$currPos;
                                    s4 = peg$currPos;
                                    peg$silentFails++;
                                    s5 = peg$parsenonchar_token();
                                    peg$silentFails--;
                                    if (s5 === peg$FAILED) {
                                      s4 = void 0;
                                    } else {
                                      peg$currPos = s4;
                                      s4 = peg$FAILED;
                                    }
                                    if (s4 !== peg$FAILED) {
                                      if (input.length > peg$currPos) {
                                        s5 = input.charAt(peg$currPos);
                                        peg$currPos++;
                                      } else {
                                        s5 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                          peg$fail(peg$e3);
                                        }
                                      }
                                      if (s5 !== peg$FAILED) {
                                        s4 = [s4, s5];
                                        s3 = s4;
                                      } else {
                                        peg$currPos = s3;
                                        s3 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s3;
                                      s3 = peg$FAILED;
                                    }
                                    if (s3 !== peg$FAILED) {
                                      while (s3 !== peg$FAILED) {
                                        s2.push(s3);
                                        s3 = peg$currPos;
                                        s4 = peg$currPos;
                                        peg$silentFails++;
                                        s5 = peg$parsenonchar_token();
                                        peg$silentFails--;
                                        if (s5 === peg$FAILED) {
                                          s4 = void 0;
                                        } else {
                                          peg$currPos = s4;
                                          s4 = peg$FAILED;
                                        }
                                        if (s4 !== peg$FAILED) {
                                          if (input.length > peg$currPos) {
                                            s5 = input.charAt(peg$currPos);
                                            peg$currPos++;
                                          } else {
                                            s5 = peg$FAILED;
                                            if (peg$silentFails === 0) {
                                              peg$fail(peg$e3);
                                            }
                                          }
                                          if (s5 !== peg$FAILED) {
                                            s4 = [s4, s5];
                                            s3 = s4;
                                          } else {
                                            peg$currPos = s3;
                                            s3 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s3;
                                          s3 = peg$FAILED;
                                        }
                                      }
                                    } else {
                                      s2 = peg$FAILED;
                                    }
                                    if (s2 !== peg$FAILED) {
                                      s1 = input.substring(s1, peg$currPos);
                                    } else {
                                      s1 = s2;
                                    }
                                    if (s1 !== peg$FAILED) {
                                      peg$savedPos = s0;
                                      s1 = peg$f3(s1);
                                    }
                                    s0 = s1;
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$parsebegin_group();
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$parseend_group();
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$parsemath_shift();
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$currPos;
                                            if (input.length > peg$currPos) {
                                              s1 = input.charAt(peg$currPos);
                                              peg$currPos++;
                                            } else {
                                              s1 = peg$FAILED;
                                              if (peg$silentFails === 0) {
                                                peg$fail(peg$e3);
                                              }
                                            }
                                            if (s1 !== peg$FAILED) {
                                              peg$savedPos = s0;
                                              s1 = peg$f4(s1);
                                            }
                                            s0 = s1;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e2);
              }
            }
            peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
            return s0;
          }
          function peg$parseparbreak() {
            var s0, s1, s2, s3, s4, s5, s6, s7;
            var key = peg$currPos * 52 + 3;
            var cached = peg$resultsCache[key];
            if (cached) {
              peg$currPos = cached.nextPos;
              return cached.result;
            }
            peg$silentFails++;
            s0 = peg$currPos;
            s1 = peg$currPos;
            s2 = [];
            s3 = peg$parsesp();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parsesp();
            }
            s3 = peg$parsenl();
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$currPos;
              s6 = [];
              s7 = peg$parsesp();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parsesp();
              }
              s7 = peg$parsenl();
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
              if (s5 !== peg$FAILED) {
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$currPos;
                  s6 = [];
                  s7 = peg$parsesp();
                  while (s7 !== peg$FAILED) {
                    s6.push(s7);
                    s7 = peg$parsesp();
                  }
                  s7 = peg$parsenl();
                  if (s7 !== peg$FAILED) {
                    s6 = [s6, s7];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                }
              } else {
                s4 = peg$FAILED;
              }
              if (s4 !== peg$FAILED) {
                s5 = [];
                s6 = peg$parsesp();
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  s6 = peg$parsesp();
                }
                s6 = peg$currPos;
                peg$silentFails++;
                s7 = peg$parsecomment_start();
                peg$silentFails--;
                if (s7 === peg$FAILED) {
                  s6 = void 0;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                  s2 = [s2, s3, s4, s5, s6];
                  s1 = s2;
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
            if (s1 === peg$FAILED) {
              s1 = peg$currPos;
              s2 = [];
              s3 = peg$parsesp();
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parsesp();
              }
              s3 = peg$parsenl();
              if (s3 !== peg$FAILED) {
                s4 = [];
                s5 = peg$currPos;
                s6 = [];
                s7 = peg$parsesp();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parsesp();
                }
                s7 = peg$parsenl();
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
                if (s5 !== peg$FAILED) {
                  while (s5 !== peg$FAILED) {
                    s4.push(s5);
                    s5 = peg$currPos;
                    s6 = [];
                    s7 = peg$parsesp();
                    while (s7 !== peg$FAILED) {
                      s6.push(s7);
                      s7 = peg$parsesp();
                    }
                    s7 = peg$parsenl();
                    if (s7 !== peg$FAILED) {
                      s6 = [s6, s7];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  }
                } else {
                  s4 = peg$FAILED;
                }
                if (s4 !== peg$FAILED) {
                  s2 = [s2, s3, s4];
                  s1 = s2;
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f5();
            }
            s0 = s1;
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e4);
              }
            }
            peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
            return s0;
          }
          function peg$parsemath_token() {
            var s0, s1, s2, s3, s4;
            var key = peg$currPos * 52 + 4;
            var cached = peg$resultsCache[key];
            if (cached) {
              peg$currPos = cached.nextPos;
              return cached.result;
            }
            peg$silentFails++;
            s0 = peg$parsespecial_macro();
            if (s0 === peg$FAILED) {
              s0 = peg$parsemacro();
              if (s0 === peg$FAILED) {
                s0 = peg$parsefull_comment();
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = [];
                  s2 = peg$parsewhitespace();
                  while (s2 !== peg$FAILED) {
                    s1.push(s2);
                    s2 = peg$parsewhitespace();
                  }
                  s2 = peg$parsegroup();
                  if (s2 !== peg$FAILED) {
                    s3 = [];
                    s4 = peg$parsewhitespace();
                    while (s4 !== peg$FAILED) {
                      s3.push(s4);
                      s4 = peg$parsewhitespace();
                    }
                    peg$savedPos = s0;
                    s0 = peg$f6(s2);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = [];
                    s2 = peg$parsewhitespace();
                    while (s2 !== peg$FAILED) {
                      s1.push(s2);
                      s2 = peg$parsewhitespace();
                    }
                    s2 = peg$parsealignment_tab();
                    if (s2 !== peg$FAILED) {
                      s3 = [];
                      s4 = peg$parsewhitespace();
                      while (s4 !== peg$FAILED) {
                        s3.push(s4);
                        s4 = peg$parsewhitespace();
                      }
                      peg$savedPos = s0;
                      s0 = peg$f7(s2);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$parsemacro_parameter();
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = [];
                        s2 = peg$parsewhitespace();
                        while (s2 !== peg$FAILED) {
                          s1.push(s2);
                          s2 = peg$parsewhitespace();
                        }
                        s2 = peg$parsesuperscript();
                        if (s2 !== peg$FAILED) {
                          s3 = [];
                          s4 = peg$parsewhitespace();
                          while (s4 !== peg$FAILED) {
                            s3.push(s4);
                            s4 = peg$parsewhitespace();
                          }
                          peg$savedPos = s0;
                          s0 = peg$f8();
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = [];
                          s2 = peg$parsewhitespace();
                          while (s2 !== peg$FAILED) {
                            s1.push(s2);
                            s2 = peg$parsewhitespace();
                          }
                          s2 = peg$parsesubscript();
                          if (s2 !== peg$FAILED) {
                            s3 = [];
                            s4 = peg$parsewhitespace();
                            while (s4 !== peg$FAILED) {
                              s3.push(s4);
                              s4 = peg$parsewhitespace();
                            }
                            peg$savedPos = s0;
                            s0 = peg$f9();
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$parseignore();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parsewhitespace();
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                if (input.length > peg$currPos) {
                                  s1 = input.charAt(peg$currPos);
                                  peg$currPos++;
                                } else {
                                  s1 = peg$FAILED;
                                  if (peg$silentFails === 0) {
                                    peg$fail(peg$e3);
                                  }
                                }
                                if (s1 !== peg$FAILED) {
                                  peg$savedPos = s0;
                                  s1 = peg$f10(s1);
                                }
                                s0 = s1;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e5);
              }
            }
            peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
            return s0;
          }
          function peg$parsenonchar_token() {
            var s0;
            var key = peg$currPos * 52 + 5;
            var cached = peg$resultsCache[key];
            if (cached) {
              peg$currPos = cached.nextPos;
              return cached.result;
            }
            peg$silentFails++;
            s0 = peg$parseescape();
            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 37) {
                s0 = peg$c0;
                peg$currPos++;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e7);
                }
              }
              if (s0 === peg$FAILED) {
                s0 = peg$parsebegin_group();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseend_group();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsemath_shift();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parsealignment_tab();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parsenl();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parsemacro_parameter();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parseignore();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parsesp();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parsepunctuation();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parseEOF();
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              if (peg$silentFails === 0) {
                peg$fail(peg$e6);
              }
            }
            peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
            return s0;
          }
          function peg$parsewhitespace() {
            var s0, s1, s2, s3, s4, s5, s6, s7;
            var key = peg$currPos * 52 + 6;
            var cached = peg$resultsCache[key];
            if (cached) {
              peg$currPos = cached.nextPos;
              return cached.result;
            }
            peg$silentFails++;
            s0 = peg$currPos;
            s1 = peg$currPos;
            s2 = peg$parsenl();
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$parsesp();
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parsesp();
              }
              s2 = [s2, s3];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
            if (s1 === peg$FAILED) {
              s1 = peg$currPos;
              s2 = [];
              s3 = peg$parsesp();
              if (s3 !== peg$FAILED) {
                while (s3 !== peg$FAILED) {
                  s2.push(s3);
                  s3 = peg$parsesp();
                }
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parsenl();
                if (s3 !== peg$FAILED) {
                  s4 = peg$currPos;
                  peg$silentFails++;
                  s5 = peg$parsecomment_start();
                  peg$silentFails--;
                  if (s5 === peg$FAILED) {
                    s4 = void 0;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                  if (s4 !== peg$FAILED) {
                    s5 = [];
                    s6 = peg$parsesp();
                    while (s6 !== peg$FAILED) {
                      s5.push(s6);
                      s6 = peg$parsesp();
                    }
                    s6 = peg$currPos;
                    peg$silentFails++;
                    s7 = peg$parsenl();
                    peg$silentFails--;
                    if (s7 === peg$FAILED) {
                      s6 = void 0;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                    if (s6 !== peg$FAILED) {
                      s2 = [s2, s3, s4, s5, s6];
                      s1 = s2;
                    } else {
                      peg$currPos = s1;
                      s1 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
              if (s1 === peg$FAILED) {
                s1 = [];
                s2 = peg$parsesp();
                if (s2 !== peg$FAILED) {
                  while (s2 !== peg$FAILED) {
                    s1.push(s2);
                    s2 = peg$parsesp();
                  }
                } else {
                  s1 = peg$FAILED;
                }
              }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f11();
            }
            s0 = s1;
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e8);
              }
            }
            peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
            return s0;
          }
          function peg$parsenumber() {
            var s0, s1, s2, s3, s4, s5;
            var key = peg$currPos * 52 + 7;
            var cached = peg$resultsCache[key];
            if (cached) {
              peg$currPos = cached.nextPos;
              return cached.result;
            }
            peg$silentFails++;
            s0 = peg$currPos;
            s1 = peg$currPos;
            s2 = [];
            s3 = peg$parsenum();
            if (s3 !== peg$FAILED) {
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parsenum();
              }
            } else {
              s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 46) {
                s3 = peg$c1;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e10);
                }
              }
              if (s3 !== peg$FAILED) {
                s4 = [];
                s5 = peg$parsenum();
                if (s5 !== peg$FAILED) {
                  while (s5 !== peg$FAILED) {
                    s4.push(s5);
                    s5 = peg$parsenum();
                  }
                } else {
                  s4 = peg$FAILED;
                }
                if (s4 !== peg$FAILED) {
                  peg$savedPos = s1;
                  s1 = peg$f12(s2, s4);
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
            if (s1 === peg$FAILED) {
              s1 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 46) {
                s2 = peg$c1;
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e10);
                }
              }
              if (s2 !== peg$FAILED) {
                s3 = [];
                s4 = peg$parsenum();
                if (s4 !== peg$FAILED) {
                  while (s4 !== peg$FAILED) {
                    s3.push(s4);
                    s4 = peg$parsenum();
                  }
                } else {
                  s3 = peg$FAILED;
                }
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s1;
                  s1 = peg$f13(s3);
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
              if (s1 === peg$FAILED) {
                s1 = peg$currPos;
                s2 = [];
                s3 = peg$parsenum();
                if (s3 !== peg$FAILED) {
                  while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$parsenum();
                  }
                } else {
                  s2 = peg$FAILED;
                }
                if (s2 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 46) {
                    s3 = peg$c1;
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$e10);
                    }
                  }
                  if (s3 !== peg$FAILED) {
                    peg$savedPos = s1;
                    s1 = peg$f14(s2);
                  } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f15(s1);
            }
            s0 = s1;
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e9);
              }
            }
            peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
            return s0;
          }
          function peg$parsespecial_macro() {
            var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;
            var key = peg$currPos * 52 + 8;
            var cached = peg$resultsCache[key];
            if (cached) {
              peg$currPos = cached.nextPos;
              return cached.result;
            }
            peg$silentFails++;
            s0 = peg$currPos;
            s1 = peg$parseescape();
            if (s1 !== peg$FAILED) {
              if (input.substr(peg$currPos, 5) === peg$c2) {
                s2 = peg$c2;
                peg$currPos += 5;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e12);
                }
              }
              if (s2 === peg$FAILED) {
                if (input.substr(peg$currPos, 4) === peg$c3) {
                  s2 = peg$c3;
                  peg$currPos += 4;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e13);
                  }
                }
              }
              if (s2 !== peg$FAILED) {
                if (input.length > peg$currPos) {
                  s3 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e3);
                  }
                }
                if (s3 !== peg$FAILED) {
                  s4 = [];
                  s5 = peg$currPos;
                  s6 = peg$currPos;
                  peg$silentFails++;
                  s7 = peg$currPos;
                  if (input.length > peg$currPos) {
                    s8 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$e3);
                    }
                  }
                  if (s8 !== peg$FAILED) {
                    peg$savedPos = peg$currPos;
                    s9 = peg$f16(s2, s3, s8);
                    if (s9) {
                      s9 = void 0;
                    } else {
                      s9 = peg$FAILED;
                    }
                    if (s9 !== peg$FAILED) {
                      s8 = [s8, s9];
                      s7 = s8;
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                  peg$silentFails--;
                  if (s7 === peg$FAILED) {
                    s6 = void 0;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                  if (s6 !== peg$FAILED) {
                    if (input.length > peg$currPos) {
                      s7 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s7 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$e3);
                      }
                    }
                    if (s7 !== peg$FAILED) {
                      peg$savedPos = s5;
                      s5 = peg$f17(s2, s3, s7);
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                  while (s5 !== peg$FAILED) {
                    s4.push(s5);
                    s5 = peg$currPos;
                    s6 = peg$currPos;
                    peg$silentFails++;
                    s7 = peg$currPos;
                    if (input.length > peg$currPos) {
                      s8 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$e3);
                      }
                    }
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = peg$currPos;
                      s9 = peg$f16(s2, s3, s8);
                      if (s9) {
                        s9 = void 0;
                      } else {
                        s9 = peg$FAILED;
                      }
                      if (s9 !== peg$FAILED) {
                        s8 = [s8, s9];
                        s7 = s8;
                      } else {
                        peg$currPos = s7;
                        s7 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                    peg$silentFails--;
                    if (s7 === peg$FAILED) {
                      s6 = void 0;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                    if (s6 !== peg$FAILED) {
                      if (input.length > peg$currPos) {
                        s7 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s7 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$e3);
                        }
                      }
                      if (s7 !== peg$FAILED) {
                        peg$savedPos = s5;
                        s5 = peg$f17(s2, s3, s7);
                      } else {
                        peg$currPos = s5;
                        s5 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  }
                  s5 = peg$currPos;
                  if (input.length > peg$currPos) {
                    s6 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$e3);
                    }
                  }
                  if (s6 !== peg$FAILED) {
                    peg$savedPos = peg$currPos;
                    s7 = peg$f18(s2, s3, s4, s6);
                    if (s7) {
                      s7 = void 0;
                    } else {
                      s7 = peg$FAILED;
                    }
                    if (s7 !== peg$FAILED) {
                      s6 = [s6, s7];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f19(s2, s3, s4);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$parseverbatim_listings();
              if (s0 === peg$FAILED) {
                s0 = peg$parseverbatim_minted();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseverbatim_minted_environment();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseverbatim_environment();
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = peg$parsebegin_display_math();
                      if (s1 !== peg$FAILED) {
                        s2 = [];
                        s3 = peg$currPos;
                        s4 = peg$currPos;
                        peg$silentFails++;
                        s5 = peg$parseend_display_math();
                        peg$silentFails--;
                        if (s5 === peg$FAILED) {
                          s4 = void 0;
                        } else {
                          peg$currPos = s4;
                          s4 = peg$FAILED;
                        }
                        if (s4 !== peg$FAILED) {
                          s5 = peg$parsemath_token();
                          if (s5 !== peg$FAILED) {
                            peg$savedPos = s3;
                            s3 = peg$f20(s5);
                          } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s3;
                          s3 = peg$FAILED;
                        }
                        while (s3 !== peg$FAILED) {
                          s2.push(s3);
                          s3 = peg$currPos;
                          s4 = peg$currPos;
                          peg$silentFails++;
                          s5 = peg$parseend_display_math();
                          peg$silentFails--;
                          if (s5 === peg$FAILED) {
                            s4 = void 0;
                          } else {
                            peg$currPos = s4;
                            s4 = peg$FAILED;
                          }
                          if (s4 !== peg$FAILED) {
                            s5 = peg$parsemath_token();
                            if (s5 !== peg$FAILED) {
                              peg$savedPos = s3;
                              s3 = peg$f20(s5);
                            } else {
                              peg$currPos = s3;
                              s3 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                          }
                        }
                        s3 = peg$parseend_display_math();
                        if (s3 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s0 = peg$f21(s2);
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parsebegin_inline_math();
                        if (s1 !== peg$FAILED) {
                          s2 = [];
                          s3 = peg$currPos;
                          s4 = peg$currPos;
                          peg$silentFails++;
                          s5 = peg$parseend_inline_math();
                          peg$silentFails--;
                          if (s5 === peg$FAILED) {
                            s4 = void 0;
                          } else {
                            peg$currPos = s4;
                            s4 = peg$FAILED;
                          }
                          if (s4 !== peg$FAILED) {
                            s5 = peg$parsemath_token();
                            if (s5 !== peg$FAILED) {
                              peg$savedPos = s3;
                              s3 = peg$f22(s5);
                            } else {
                              peg$currPos = s3;
                              s3 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                          }
                          while (s3 !== peg$FAILED) {
                            s2.push(s3);
                            s3 = peg$currPos;
                            s4 = peg$currPos;
                            peg$silentFails++;
                            s5 = peg$parseend_inline_math();
                            peg$silentFails--;
                            if (s5 === peg$FAILED) {
                              s4 = void 0;
                            } else {
                              peg$currPos = s4;
                              s4 = peg$FAILED;
                            }
                            if (s4 !== peg$FAILED) {
                              s5 = peg$parsemath_token();
                              if (s5 !== peg$FAILED) {
                                peg$savedPos = s3;
                                s3 = peg$f22(s5);
                              } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s3;
                              s3 = peg$FAILED;
                            }
                          }
                          s3 = peg$parseend_inline_math();
                          if (s3 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s0 = peg$f23(s2);
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = peg$parsemath_shift();
                          if (s1 !== peg$FAILED) {
                            s2 = peg$parsemath_shift();
                            if (s2 !== peg$FAILED) {
                              s3 = [];
                              s4 = peg$currPos;
                              s5 = peg$currPos;
                              peg$silentFails++;
                              s6 = peg$currPos;
                              s7 = peg$parsemath_shift();
                              if (s7 !== peg$FAILED) {
                                s8 = peg$parsemath_shift();
                                if (s8 !== peg$FAILED) {
                                  s7 = [s7, s8];
                                  s6 = s7;
                                } else {
                                  peg$currPos = s6;
                                  s6 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s6;
                                s6 = peg$FAILED;
                              }
                              peg$silentFails--;
                              if (s6 === peg$FAILED) {
                                s5 = void 0;
                              } else {
                                peg$currPos = s5;
                                s5 = peg$FAILED;
                              }
                              if (s5 !== peg$FAILED) {
                                s6 = peg$parsemath_token();
                                if (s6 !== peg$FAILED) {
                                  peg$savedPos = s4;
                                  s4 = peg$f24(s6);
                                } else {
                                  peg$currPos = s4;
                                  s4 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s4;
                                s4 = peg$FAILED;
                              }
                              while (s4 !== peg$FAILED) {
                                s3.push(s4);
                                s4 = peg$currPos;
                                s5 = peg$currPos;
                                peg$silentFails++;
                                s6 = peg$currPos;
                                s7 = peg$parsemath_shift();
                                if (s7 !== peg$FAILED) {
                                  s8 = peg$parsemath_shift();
                                  if (s8 !== peg$FAILED) {
                                    s7 = [s7, s8];
                                    s6 = s7;
                                  } else {
                                    peg$currPos = s6;
                                    s6 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s6;
                                  s6 = peg$FAILED;
                                }
                                peg$silentFails--;
                                if (s6 === peg$FAILED) {
                                  s5 = void 0;
                                } else {
                                  peg$currPos = s5;
                                  s5 = peg$FAILED;
                                }
                                if (s5 !== peg$FAILED) {
                                  s6 = peg$parsemath_token();
                                  if (s6 !== peg$FAILED) {
                                    peg$savedPos = s4;
                                    s4 = peg$f24(s6);
                                  } else {
                                    peg$currPos = s4;
                                    s4 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s4;
                                  s4 = peg$FAILED;
                                }
                              }
                              s4 = peg$parsemath_shift();
                              if (s4 !== peg$FAILED) {
                                s5 = peg$parsemath_shift();
                                if (s5 !== peg$FAILED) {
                                  peg$savedPos = s0;
                                  s0 = peg$f25(s3);
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$parsemath_environment();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parseenvironment();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e11);
              }
            }
            peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
            return s0;
          }
          function peg$parsesquare_bracket_argument() {
            var s0, s1, s2, s3, s4, s5, s6, s7;
            var key = peg$currPos * 52 + 9;
            var cached = peg$resultsCache[key];
            if (cached) {
              peg$currPos = cached.nextPos;
              return cached.result;
            }
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 91) {
              s1 = peg$c4;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e14);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$currPos;
              s4 = peg$currPos;
              peg$silentFails++;
              s5 = peg$currPos;
              s6 = peg$parsetoken();
              if (s6 !== peg$FAILED) {
                peg$savedPos = peg$currPos;
                s7 = peg$f26(s6);
                if (s7) {
                  s7 = void 0;
                } else {
                  s7 = peg$FAILED;
                }
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
              peg$silentFails--;
              if (s5 === peg$FAILED) {
                s4 = void 0;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parsetoken();
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s3;
                  s3 = peg$f27(s5);
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$currPos;
                s4 = peg$currPos;
                peg$silentFails++;
                s5 = peg$currPos;
                s6 = peg$parsetoken();
                if (s6 !== peg$FAILED) {
                  peg$savedPos = peg$currPos;
                  s7 = peg$f26(s6);
                  if (s7) {
                    s7 = void 0;
                  } else {
                    s7 = peg$FAILED;
                  }
                  if (s7 !== peg$FAILED) {
                    s6 = [s6, s7];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
                peg$silentFails--;
                if (s5 === peg$FAILED) {
                  s4 = void 0;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parsetoken();
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s3;
                    s3 = peg$f27(s5);
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              }
              if (input.charCodeAt(peg$currPos) === 93) {
                s3 = peg$c5;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e15);
                }
              }
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f28(s2);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
            return s0;
          }
          function peg$parseverbatim_group() {
            var s0, s1, s2, s3, s4, s5;
            var key = peg$currPos * 52 + 10;
            var cached = peg$resultsCache[key];
            if (cached) {
              peg$currPos = cached.nextPos;
              return cached.result;
            }
            s0 = peg$currPos;
            s1 = peg$parsebegin_group();
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$currPos;
              s4 = peg$currPos;
              peg$silentFails++;
              s5 = peg$parseend_group();
              peg$silentFails--;
              if (s5 === peg$FAILED) {
                s4 = void 0;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
              if (s4 !== peg$FAILED) {
                if (input.length > peg$currPos) {
                  s5 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e3);
                  }
                }
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s3;
                  s3 = peg$f29(s5);
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$currPos;
                s4 = peg$currPos;
                peg$silentFails++;
                s5 = peg$parseend_group();
                peg$silentFails--;
                if (s5 === peg$FAILED) {
                  s4 = void 0;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
                if (s4 !== peg$FAILED) {
                  if (input.length > peg$currPos) {
                    s5 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$e3);
                    }
                  }
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s3;
                    s3 = peg$f29(s5);
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              }
              s3 = peg$parseend_group();
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f30(s2);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
            return s0;
          }
          function peg$parseverbatim_delimited_by_char() {
            var s0, s1, s2, s3, s4, s5, s6, s7;
            var key = peg$currPos * 52 + 11;
            var cached = peg$resultsCache[key];
            if (cached) {
              peg$currPos = cached.nextPos;
              return cached.result;
            }
            s0 = peg$currPos;
            if (peg$r0.test(input.charAt(peg$currPos))) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e16);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$currPos;
              s4 = peg$currPos;
              peg$silentFails++;
              s5 = peg$currPos;
              if (input.length > peg$currPos) {
                s6 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e3);
                }
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = peg$currPos;
                s7 = peg$f31(s1, s6);
                if (s7) {
                  s7 = void 0;
                } else {
                  s7 = peg$FAILED;
                }
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
              peg$silentFails--;
              if (s5 === peg$FAILED) {
                s4 = void 0;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
              if (s4 !== peg$FAILED) {
                if (input.length > peg$currPos) {
                  s5 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e3);
                  }
                }
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s3;
                  s3 = peg$f32(s1, s5);
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$currPos;
                s4 = peg$currPos;
                peg$silentFails++;
                s5 = peg$currPos;
                if (input.length > peg$currPos) {
                  s6 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e3);
                  }
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = peg$currPos;
                  s7 = peg$f31(s1, s6);
                  if (s7) {
                    s7 = void 0;
                  } else {
                    s7 = peg$FAILED;
                  }
                  if (s7 !== peg$FAILED) {
                    s6 = [s6, s7];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
                peg$silentFails--;
                if (s5 === peg$FAILED) {
                  s4 = void 0;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
                if (s4 !== peg$FAILED) {
                  if (input.length > peg$currPos) {
                    s5 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$e3);
                    }
                  }
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s3;
                    s3 = peg$f32(s1, s5);
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              }
              s3 = peg$currPos;
              if (input.length > peg$currPos) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e3);
                }
              }
              if (s4 !== peg$FAILED) {
                peg$savedPos = peg$currPos;
                s5 = peg$f33(s1, s2, s4);
                if (s5) {
                  s5 = void 0;
                } else {
                  s5 = peg$FAILED;
                }
                if (s5 !== peg$FAILED) {
                  s4 = [s4, s5];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f34(s1, s2);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
            return s0;
          }
          function peg$parseverbatim_listings() {
            var s0, s1, s2, s3, s4;
            var key = peg$currPos * 52 + 12;
            var cached = peg$resultsCache[key];
            if (cached) {
              peg$currPos = cached.nextPos;
              return cached.result;
            }
            peg$silentFails++;
            s0 = peg$currPos;
            s1 = peg$parseescape();
            if (s1 !== peg$FAILED) {
              if (input.substr(peg$currPos, 9) === peg$c6) {
                s2 = peg$c6;
                peg$currPos += 9;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e18);
                }
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parsesquare_bracket_argument();
                if (s3 === peg$FAILED) {
                  s3 = null;
                }
                s4 = peg$parseverbatim_group();
                if (s4 === peg$FAILED) {
                  s4 = peg$parseverbatim_delimited_by_char();
                }
                if (s4 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f35(s2, s3, s4);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e17);
              }
            }
            peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
            return s0;
          }
          function peg$parseverbatim_minted() {
            var s0, s1, s2, s3, s4, s5;
            var key = peg$currPos * 52 + 13;
            var cached = peg$resultsCache[key];
            if (cached) {
              peg$currPos = cached.nextPos;
              return cached.result;
            }
            peg$silentFails++;
            s0 = peg$currPos;
            s1 = peg$parseescape();
            if (s1 !== peg$FAILED) {
              if (input.substr(peg$currPos, 10) === peg$c7) {
                s2 = peg$c7;
                peg$currPos += 10;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e20);
                }
              }
              if (s2 === peg$FAILED) {
                if (input.substr(peg$currPos, 4) === peg$c8) {
                  s2 = peg$c8;
                  peg$currPos += 4;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e21);
                  }
                }
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parsesquare_bracket_argument();
                if (s3 === peg$FAILED) {
                  s3 = null;
                }
                s4 = peg$parsegroup();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseverbatim_group();
                  if (s5 === peg$FAILED) {
                    s5 = peg$parseverbatim_delimited_by_char();
                  }
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f36(s2, s3, s4, s5);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e19);
              }
            }
            peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
            return s0;
          }
          function peg$parseverbatim_minted_environment() {
            var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;
            var key = peg$currPos * 52 + 14;
            var cached = peg$resultsCache[key];
            if (cached) {
              peg$currPos = cached.nextPos;
              return cached.result;
            }
            peg$silentFails++;
            s0 = peg$currPos;
            s1 = peg$parsebegin_env();
            if (s1 !== peg$FAILED) {
              s2 = peg$parsebegin_group();
              if (s2 !== peg$FAILED) {
                if (input.substr(peg$currPos, 6) === peg$c9) {
                  s3 = peg$c9;
                  peg$currPos += 6;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e23);
                  }
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseend_group();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parsesquare_bracket_argument();
                    if (s5 === peg$FAILED) {
                      s5 = null;
                    }
                    s6 = peg$parsegroup();
                    if (s6 !== peg$FAILED) {
                      s7 = peg$currPos;
                      s8 = [];
                      s9 = peg$currPos;
                      s10 = peg$currPos;
                      peg$silentFails++;
                      s11 = peg$currPos;
                      s12 = peg$parseend_env();
                      if (s12 !== peg$FAILED) {
                        s13 = peg$parsegroup();
                        if (s13 !== peg$FAILED) {
                          peg$savedPos = peg$currPos;
                          s14 = peg$f37(s3, s5, s6, s13);
                          if (s14) {
                            s14 = void 0;
                          } else {
                            s14 = peg$FAILED;
                          }
                          if (s14 !== peg$FAILED) {
                            s12 = [s12, s13, s14];
                            s11 = s12;
                          } else {
                            peg$currPos = s11;
                            s11 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s11;
                          s11 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s11;
                        s11 = peg$FAILED;
                      }
                      peg$silentFails--;
                      if (s11 === peg$FAILED) {
                        s10 = void 0;
                      } else {
                        peg$currPos = s10;
                        s10 = peg$FAILED;
                      }
                      if (s10 !== peg$FAILED) {
                        if (input.length > peg$currPos) {
                          s11 = input.charAt(peg$currPos);
                          peg$currPos++;
                        } else {
                          s11 = peg$FAILED;
                          if (peg$silentFails === 0) {
                            peg$fail(peg$e3);
                          }
                        }
                        if (s11 !== peg$FAILED) {
                          s10 = [s10, s11];
                          s9 = s10;
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                      while (s9 !== peg$FAILED) {
                        s8.push(s9);
                        s9 = peg$currPos;
                        s10 = peg$currPos;
                        peg$silentFails++;
                        s11 = peg$currPos;
                        s12 = peg$parseend_env();
                        if (s12 !== peg$FAILED) {
                          s13 = peg$parsegroup();
                          if (s13 !== peg$FAILED) {
                            peg$savedPos = peg$currPos;
                            s14 = peg$f37(s3, s5, s6, s13);
                            if (s14) {
                              s14 = void 0;
                            } else {
                              s14 = peg$FAILED;
                            }
                            if (s14 !== peg$FAILED) {
                              s12 = [s12, s13, s14];
                              s11 = s12;
                            } else {
                              peg$currPos = s11;
                              s11 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s11;
                            s11 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s11;
                          s11 = peg$FAILED;
                        }
                        peg$silentFails--;
                        if (s11 === peg$FAILED) {
                          s10 = void 0;
                        } else {
                          peg$currPos = s10;
                          s10 = peg$FAILED;
                        }
                        if (s10 !== peg$FAILED) {
                          if (input.length > peg$currPos) {
                            s11 = input.charAt(peg$currPos);
                            peg$currPos++;
                          } else {
                            s11 = peg$FAILED;
                            if (peg$silentFails === 0) {
                              peg$fail(peg$e3);
                            }
                          }
                          if (s11 !== peg$FAILED) {
                            s10 = [s10, s11];
                            s9 = s10;
                          } else {
                            peg$currPos = s9;
                            s9 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                      }
                      s7 = input.substring(s7, peg$currPos);
                      s8 = peg$parseend_env();
                      if (s8 !== peg$FAILED) {
                        s9 = peg$parsebegin_group();
                        if (s9 !== peg$FAILED) {
                          if (input.substr(peg$currPos, 6) === peg$c9) {
                            s10 = peg$c9;
                            peg$currPos += 6;
                          } else {
                            s10 = peg$FAILED;
                            if (peg$silentFails === 0) {
                              peg$fail(peg$e23);
                            }
                          }
                          if (s10 !== peg$FAILED) {
                            s11 = peg$parseend_group();
                            if (s11 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s0 = peg$f38(s3, s5, s6, s7);
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e22);
              }
            }
            peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
            return s0;
          }
          function peg$parseverbatim_environment() {
            var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;
            var key = peg$currPos * 52 + 15;
            var cached = peg$resultsCache[key];
            if (cached) {
              peg$currPos = cached.nextPos;
              return cached.result;
            }
            peg$silentFails++;
            s0 = peg$currPos;
            s1 = peg$parsebegin_env();
            if (s1 !== peg$FAILED) {
              s2 = peg$parsebegin_group();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseverbatim_env_name();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseend_group();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$currPos;
                    s6 = [];
                    s7 = peg$currPos;
                    s8 = peg$currPos;
                    peg$silentFails++;
                    s9 = peg$currPos;
                    s10 = peg$parseend_env();
                    if (s10 !== peg$FAILED) {
                      s11 = peg$parsegroup();
                      if (s11 !== peg$FAILED) {
                        peg$savedPos = peg$currPos;
                        s12 = peg$f39(s3, s11);
                        if (s12) {
                          s12 = void 0;
                        } else {
                          s12 = peg$FAILED;
                        }
                        if (s12 !== peg$FAILED) {
                          s10 = [s10, s11, s12];
                          s9 = s10;
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                    peg$silentFails--;
                    if (s9 === peg$FAILED) {
                      s8 = void 0;
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                    if (s8 !== peg$FAILED) {
                      if (input.length > peg$currPos) {
                        s9 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$e3);
                        }
                      }
                      if (s9 !== peg$FAILED) {
                        peg$savedPos = s7;
                        s7 = peg$f40(s3, s9);
                      } else {
                        peg$currPos = s7;
                        s7 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                    while (s7 !== peg$FAILED) {
                      s6.push(s7);
                      s7 = peg$currPos;
                      s8 = peg$currPos;
                      peg$silentFails++;
                      s9 = peg$currPos;
                      s10 = peg$parseend_env();
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parsegroup();
                        if (s11 !== peg$FAILED) {
                          peg$savedPos = peg$currPos;
                          s12 = peg$f39(s3, s11);
                          if (s12) {
                            s12 = void 0;
                          } else {
                            s12 = peg$FAILED;
                          }
                          if (s12 !== peg$FAILED) {
                            s10 = [s10, s11, s12];
                            s9 = s10;
                          } else {
                            peg$currPos = s9;
                            s9 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                      peg$silentFails--;
                      if (s9 === peg$FAILED) {
                        s8 = void 0;
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                      if (s8 !== peg$FAILED) {
                        if (input.length > peg$currPos) {
                          s9 = input.charAt(peg$currPos);
                          peg$currPos++;
                        } else {
                          s9 = peg$FAILED;
                          if (peg$silentFails === 0) {
                            peg$fail(peg$e3);
                          }
                        }
                        if (s9 !== peg$FAILED) {
                          peg$savedPos = s7;
                          s7 = peg$f40(s3, s9);
                        } else {
                          peg$currPos = s7;
                          s7 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s7;
                        s7 = peg$FAILED;
                      }
                    }
                    s5 = input.substring(s5, peg$currPos);
                    s6 = peg$parseend_env();
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parsebegin_group();
                      if (s7 !== peg$FAILED) {
                        s8 = peg$parseverbatim_env_name();
                        if (s8 !== peg$FAILED) {
                          s9 = peg$parseend_group();
                          if (s9 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s0 = peg$f41(s3, s5);
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e24);
              }
            }
            peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
            return s0;
          }
          function peg$parseverbatim_env_name() {
            var s0;
            var key = peg$currPos * 52 + 16;
            var cached = peg$resultsCache[key];
            if (cached) {
              peg$currPos = cached.nextPos;
              return cached.result;
            }
            if (input.substr(peg$currPos, 9) === peg$c10) {
              s0 = peg$c10;
              peg$currPos += 9;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e25);
              }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 8) === peg$c11) {
                s0 = peg$c11;
                peg$currPos += 8;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e26);
                }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 13) === peg$c12) {
                  s0 = peg$c12;
                  peg$currPos += 13;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e27);
                  }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 12) === peg$c13) {
                    s0 = peg$c13;
                    peg$currPos += 12;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$e28);
                    }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 7) === peg$c14) {
                      s0 = peg$c14;
                      peg$currPos += 7;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$e29);
                      }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 10) === peg$c15) {
                        s0 = peg$c15;
                        peg$currPos += 10;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$e30);
                        }
                      }
                    }
                  }
                }
              }
            }
            peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
            return s0;
          }
          function peg$parsemacro() {
            var s0, s1, s2, s3, s4;
            var key = peg$currPos * 52 + 17;
            var cached = peg$resultsCache[key];
            if (cached) {
              peg$currPos = cached.nextPos;
              return cached.result;
            }
            peg$silentFails++;
            s0 = peg$currPos;
            s1 = peg$currPos;
            s2 = peg$parseescape();
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$parsechar();
              if (s4 !== peg$FAILED) {
                while (s4 !== peg$FAILED) {
                  s3.push(s4);
                  s4 = peg$parsechar();
                }
              } else {
                s3 = peg$FAILED;
              }
              if (s3 !== peg$FAILED) {
                peg$savedPos = s1;
                s1 = peg$f42(s3);
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
            if (s1 === peg$FAILED) {
              s1 = peg$currPos;
              s2 = peg$parseescape();
              if (s2 !== peg$FAILED) {
                if (input.length > peg$currPos) {
                  s3 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e3);
                  }
                }
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s1;
                  s1 = peg$f43(s3);
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f44(s1);
            }
            s0 = s1;
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e31);
              }
            }
            peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
            return s0;
          }
          function peg$parsegroup() {
            var s0, s1, s2, s3, s4, s5;
            var key = peg$currPos * 52 + 18;
            var cached = peg$resultsCache[key];
            if (cached) {
              peg$currPos = cached.nextPos;
              return cached.result;
            }
            peg$silentFails++;
            s0 = peg$currPos;
            s1 = peg$parsebegin_group();
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$currPos;
              s4 = peg$currPos;
              peg$silentFails++;
              s5 = peg$parseend_group();
              peg$silentFails--;
              if (s5 === peg$FAILED) {
                s4 = void 0;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parsetoken();
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s3;
                  s3 = peg$f45(s5);
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$currPos;
                s4 = peg$currPos;
                peg$silentFails++;
                s5 = peg$parseend_group();
                peg$silentFails--;
                if (s5 === peg$FAILED) {
                  s4 = void 0;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parsetoken();
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s3;
                    s3 = peg$f45(s5);
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              }
              s3 = peg$parseend_group();
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f46(s2);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e32);
              }
            }
            peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
            return s0;
          }
          function peg$parsegroup_contents_as_string() {
            var s0, s1;
            var key = peg$currPos * 52 + 19;
            var cached = peg$resultsCache[key];
            if (cached) {
              peg$currPos = cached.nextPos;
              return cached.result;
            }
            s0 = peg$currPos;
            s1 = peg$parsegroup();
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f47();
            }
            s0 = s1;
            peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
            return s0;
          }
          function peg$parseenvironment() {
            var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;
            var key = peg$currPos * 52 + 20;
            var cached = peg$resultsCache[key];
            if (cached) {
              peg$currPos = cached.nextPos;
              return cached.result;
            }
            peg$silentFails++;
            s0 = peg$currPos;
            s1 = peg$parsebegin_env();
            if (s1 !== peg$FAILED) {
              s2 = peg$parsegroup_contents_as_string();
              if (s2 !== peg$FAILED) {
                s3 = peg$parsesameline_comment();
                if (s3 === peg$FAILED) {
                  s3 = null;
                }
                s4 = [];
                s5 = peg$currPos;
                s6 = peg$currPos;
                peg$silentFails++;
                s7 = peg$currPos;
                s8 = peg$parseend_env();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsegroup_contents_as_string();
                  if (s9 !== peg$FAILED) {
                    peg$savedPos = peg$currPos;
                    s10 = peg$f48(s2, s3, s9);
                    if (s10) {
                      s10 = void 0;
                    } else {
                      s10 = peg$FAILED;
                    }
                    if (s10 !== peg$FAILED) {
                      s8 = [s8, s9, s10];
                      s7 = s8;
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
                peg$silentFails--;
                if (s7 === peg$FAILED) {
                  s6 = void 0;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsetoken();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s5;
                    s5 = peg$f49(s2, s3, s7);
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$currPos;
                  s6 = peg$currPos;
                  peg$silentFails++;
                  s7 = peg$currPos;
                  s8 = peg$parseend_env();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parsegroup_contents_as_string();
                    if (s9 !== peg$FAILED) {
                      peg$savedPos = peg$currPos;
                      s10 = peg$f48(s2, s3, s9);
                      if (s10) {
                        s10 = void 0;
                      } else {
                        s10 = peg$FAILED;
                      }
                      if (s10 !== peg$FAILED) {
                        s8 = [s8, s9, s10];
                        s7 = s8;
                      } else {
                        peg$currPos = s7;
                        s7 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                  peg$silentFails--;
                  if (s7 === peg$FAILED) {
                    s6 = void 0;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parsetoken();
                    if (s7 !== peg$FAILED) {
                      peg$savedPos = s5;
                      s5 = peg$f49(s2, s3, s7);
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                }
                s5 = peg$parseend_env();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parsegroup_contents_as_string();
                  if (s6 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f50(s2, s3, s4);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e33);
              }
            }
            peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
            return s0;
          }
          function peg$parsemath_environment() {
            var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;
            var key = peg$currPos * 52 + 21;
            var cached = peg$resultsCache[key];
            if (cached) {
              peg$currPos = cached.nextPos;
              return cached.result;
            }
            peg$silentFails++;
            s0 = peg$currPos;
            s1 = peg$parsebegin_env();
            if (s1 !== peg$FAILED) {
              s2 = peg$parsebegin_group();
              if (s2 !== peg$FAILED) {
                s3 = peg$parsemath_env_name();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseend_group();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parsesameline_comment();
                    if (s5 === peg$FAILED) {
                      s5 = null;
                    }
                    s6 = [];
                    s7 = peg$currPos;
                    s8 = peg$currPos;
                    peg$silentFails++;
                    s9 = peg$currPos;
                    s10 = peg$parseend_env();
                    if (s10 !== peg$FAILED) {
                      s11 = peg$parsegroup();
                      if (s11 !== peg$FAILED) {
                        peg$savedPos = peg$currPos;
                        s12 = peg$f51(s3, s5, s11);
                        if (s12) {
                          s12 = void 0;
                        } else {
                          s12 = peg$FAILED;
                        }
                        if (s12 !== peg$FAILED) {
                          s10 = [s10, s11, s12];
                          s9 = s10;
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                    peg$silentFails--;
                    if (s9 === peg$FAILED) {
                      s8 = void 0;
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parsemath_token();
                      if (s9 !== peg$FAILED) {
                        peg$savedPos = s7;
                        s7 = peg$f52(s3, s5, s9);
                      } else {
                        peg$currPos = s7;
                        s7 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                    while (s7 !== peg$FAILED) {
                      s6.push(s7);
                      s7 = peg$currPos;
                      s8 = peg$currPos;
                      peg$silentFails++;
                      s9 = peg$currPos;
                      s10 = peg$parseend_env();
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parsegroup();
                        if (s11 !== peg$FAILED) {
                          peg$savedPos = peg$currPos;
                          s12 = peg$f51(s3, s5, s11);
                          if (s12) {
                            s12 = void 0;
                          } else {
                            s12 = peg$FAILED;
                          }
                          if (s12 !== peg$FAILED) {
                            s10 = [s10, s11, s12];
                            s9 = s10;
                          } else {
                            peg$currPos = s9;
                            s9 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                      peg$silentFails--;
                      if (s9 === peg$FAILED) {
                        s8 = void 0;
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                      if (s8 !== peg$FAILED) {
                        s9 = peg$parsemath_token();
                        if (s9 !== peg$FAILED) {
                          peg$savedPos = s7;
                          s7 = peg$f52(s3, s5, s9);
                        } else {
                          peg$currPos = s7;
                          s7 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s7;
                        s7 = peg$FAILED;
                      }
                    }
                    s7 = peg$parseend_env();
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parsebegin_group();
                      if (s8 !== peg$FAILED) {
                        s9 = peg$parsemath_env_name();
                        if (s9 !== peg$FAILED) {
                          s10 = peg$parseend_group();
                          if (s10 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s0 = peg$f53(s3, s5, s6);
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e34);
              }
            }
            peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
            return s0;
          }
          function peg$parsebegin_display_math() {
            var s0, s1, s2;
            var key = peg$currPos * 52 + 23;
            var cached = peg$resultsCache[key];
            if (cached) {
              peg$currPos = cached.nextPos;
              return cached.result;
            }
            s0 = peg$currPos;
            s1 = peg$parseescape();
            if (s1 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 91) {
                s2 = peg$c4;
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e14);
                }
              }
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
            return s0;
          }
          function peg$parseend_display_math() {
            var s0, s1, s2;
            var key = peg$currPos * 52 + 24;
            var cached = peg$resultsCache[key];
            if (cached) {
              peg$currPos = cached.nextPos;
              return cached.result;
            }
            s0 = peg$currPos;
            s1 = peg$parseescape();
            if (s1 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 93) {
                s2 = peg$c5;
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e15);
                }
              }
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
            return s0;
          }
          function peg$parsebegin_inline_math() {
            var s0, s1, s2;
            var key = peg$currPos * 52 + 25;
            var cached = peg$resultsCache[key];
            if (cached) {
              peg$currPos = cached.nextPos;
              return cached.result;
            }
            s0 = peg$currPos;
            s1 = peg$parseescape();
            if (s1 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 40) {
                s2 = peg$c16;
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e36);
                }
              }
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
            return s0;
          }
          function peg$parseend_inline_math() {
            var s0, s1, s2;
            var key = peg$currPos * 52 + 26;
            var cached = peg$resultsCache[key];
            if (cached) {
              peg$currPos = cached.nextPos;
              return cached.result;
            }
            s0 = peg$currPos;
            s1 = peg$parseescape();
            if (s1 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s2 = peg$c17;
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e37);
                }
              }
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
            return s0;
          }
          function peg$parsebegin_env() {
            var s0, s1, s2;
            var key = peg$currPos * 52 + 27;
            var cached = peg$resultsCache[key];
            if (cached) {
              peg$currPos = cached.nextPos;
              return cached.result;
            }
            s0 = peg$currPos;
            s1 = peg$parseescape();
            if (s1 !== peg$FAILED) {
              if (input.substr(peg$currPos, 5) === peg$c18) {
                s2 = peg$c18;
                peg$currPos += 5;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e38);
                }
              }
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
            return s0;
          }
          function peg$parseend_env() {
            var s0, s1, s2;
            var key = peg$currPos * 52 + 28;
            var cached = peg$resultsCache[key];
            if (cached) {
              peg$currPos = cached.nextPos;
              return cached.result;
            }
            s0 = peg$currPos;
            s1 = peg$parseescape();
            if (s1 !== peg$FAILED) {
              if (input.substr(peg$currPos, 3) === peg$c19) {
                s2 = peg$c19;
                peg$currPos += 3;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e39);
                }
              }
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
            return s0;
          }
          function peg$parsemath_env_name() {
            var s0, s1;
            var key = peg$currPos * 52 + 29;
            var cached = peg$resultsCache[key];
            if (cached) {
              peg$currPos = cached.nextPos;
              return cached.result;
            }
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 9) === peg$c20) {
              s1 = peg$c20;
              peg$currPos += 9;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e40);
              }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 8) === peg$c21) {
                s1 = peg$c21;
                peg$currPos += 8;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e41);
                }
              }
              if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 6) === peg$c22) {
                  s1 = peg$c22;
                  peg$currPos += 6;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e42);
                  }
                }
                if (s1 === peg$FAILED) {
                  if (input.substr(peg$currPos, 5) === peg$c23) {
                    s1 = peg$c23;
                    peg$currPos += 5;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$e43);
                    }
                  }
                  if (s1 === peg$FAILED) {
                    if (input.substr(peg$currPos, 8) === peg$c24) {
                      s1 = peg$c24;
                      peg$currPos += 8;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$e44);
                      }
                    }
                    if (s1 === peg$FAILED) {
                      if (input.substr(peg$currPos, 7) === peg$c25) {
                        s1 = peg$c25;
                        peg$currPos += 7;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$e45);
                        }
                      }
                      if (s1 === peg$FAILED) {
                        if (input.substr(peg$currPos, 7) === peg$c26) {
                          s1 = peg$c26;
                          peg$currPos += 7;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) {
                            peg$fail(peg$e46);
                          }
                        }
                        if (s1 === peg$FAILED) {
                          if (input.substr(peg$currPos, 6) === peg$c27) {
                            s1 = peg$c27;
                            peg$currPos += 6;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) {
                              peg$fail(peg$e47);
                            }
                          }
                          if (s1 === peg$FAILED) {
                            if (input.substr(peg$currPos, 9) === peg$c28) {
                              s1 = peg$c28;
                              peg$currPos += 9;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) {
                                peg$fail(peg$e48);
                              }
                            }
                            if (s1 === peg$FAILED) {
                              if (input.substr(peg$currPos, 8) === peg$c29) {
                                s1 = peg$c29;
                                peg$currPos += 8;
                              } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                  peg$fail(peg$e49);
                                }
                              }
                              if (s1 === peg$FAILED) {
                                if (input.substr(peg$currPos, 8) === peg$c30) {
                                  s1 = peg$c30;
                                  peg$currPos += 8;
                                } else {
                                  s1 = peg$FAILED;
                                  if (peg$silentFails === 0) {
                                    peg$fail(peg$e50);
                                  }
                                }
                                if (s1 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 7) === peg$c31) {
                                    s1 = peg$c31;
                                    peg$currPos += 7;
                                  } else {
                                    s1 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                      peg$fail(peg$e51);
                                    }
                                  }
                                  if (s1 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 5) === peg$c32) {
                                      s1 = peg$c32;
                                      peg$currPos += 5;
                                    } else {
                                      s1 = peg$FAILED;
                                      if (peg$silentFails === 0) {
                                        peg$fail(peg$e52);
                                      }
                                    }
                                    if (s1 === peg$FAILED) {
                                      if (input.substr(peg$currPos, 4) === peg$c33) {
                                        s1 = peg$c33;
                                        peg$currPos += 4;
                                      } else {
                                        s1 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                          peg$fail(peg$e53);
                                        }
                                      }
                                      if (s1 === peg$FAILED) {
                                        if (input.substr(peg$currPos, 11) === peg$c34) {
                                          s1 = peg$c34;
                                          peg$currPos += 11;
                                        } else {
                                          s1 = peg$FAILED;
                                          if (peg$silentFails === 0) {
                                            peg$fail(peg$e54);
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f56(s1);
            }
            s0 = s1;
            peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
            return s0;
          }
          function peg$parseescape() {
            var s0, s1;
            var key = peg$currPos * 52 + 30;
            var cached = peg$resultsCache[key];
            if (cached) {
              peg$currPos = cached.nextPos;
              return cached.result;
            }
            peg$silentFails++;
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 92) {
              s1 = peg$c35;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e56);
              }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f57();
            }
            s0 = s1;
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e55);
              }
            }
            peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
            return s0;
          }
          function peg$parsebegin_group() {
            var s0, s1;
            var key = peg$currPos * 52 + 31;
            var cached = peg$resultsCache[key];
            if (cached) {
              peg$currPos = cached.nextPos;
              return cached.result;
            }
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 123) {
              s1 = peg$c36;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e57);
              }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f58(s1);
            }
            s0 = s1;
            peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
            return s0;
          }
          function peg$parseend_group() {
            var s0, s1;
            var key = peg$currPos * 52 + 32;
            var cached = peg$resultsCache[key];
            if (cached) {
              peg$currPos = cached.nextPos;
              return cached.result;
            }
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 125) {
              s1 = peg$c37;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e58);
              }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f59(s1);
            }
            s0 = s1;
            peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
            return s0;
          }
          function peg$parsemath_shift() {
            var s0, s1;
            var key = peg$currPos * 52 + 33;
            var cached = peg$resultsCache[key];
            if (cached) {
              peg$currPos = cached.nextPos;
              return cached.result;
            }
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 36) {
              s1 = peg$c38;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e59);
              }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f60(s1);
            }
            s0 = s1;
            peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
            return s0;
          }
          function peg$parsealignment_tab() {
            var s0, s1;
            var key = peg$currPos * 52 + 34;
            var cached = peg$resultsCache[key];
            if (cached) {
              peg$currPos = cached.nextPos;
              return cached.result;
            }
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 38) {
              s1 = peg$c39;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e60);
              }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f61(s1);
            }
            s0 = s1;
            peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
            return s0;
          }
          function peg$parsenl() {
            var s0, s1, s2;
            var key = peg$currPos * 52 + 35;
            var cached = peg$resultsCache[key];
            if (cached) {
              peg$currPos = cached.nextPos;
              return cached.result;
            }
            peg$silentFails++;
            s0 = peg$currPos;
            s1 = peg$currPos;
            peg$silentFails++;
            if (input.charCodeAt(peg$currPos) === 13) {
              s2 = peg$c40;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e62);
              }
            }
            peg$silentFails--;
            if (s2 === peg$FAILED) {
              s1 = void 0;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 10) {
                s2 = peg$c41;
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e63);
                }
              }
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 13) {
                s0 = peg$c40;
                peg$currPos++;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e62);
                }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c42) {
                  s0 = peg$c42;
                  peg$currPos += 2;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e64);
                  }
                }
              }
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e61);
              }
            }
            peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
            return s0;
          }
          function peg$parsemacro_parameter() {
            var s0, s1;
            var key = peg$currPos * 52 + 36;
            var cached = peg$resultsCache[key];
            if (cached) {
              peg$currPos = cached.nextPos;
              return cached.result;
            }
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 35) {
              s1 = peg$c43;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e65);
              }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f62(s1);
            }
            s0 = s1;
            peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
            return s0;
          }
          function peg$parsesuperscript() {
            var s0, s1;
            var key = peg$currPos * 52 + 37;
            var cached = peg$resultsCache[key];
            if (cached) {
              peg$currPos = cached.nextPos;
              return cached.result;
            }
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 94) {
              s1 = peg$c44;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e66);
              }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f63(s1);
            }
            s0 = s1;
            peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
            return s0;
          }
          function peg$parsesubscript() {
            var s0, s1;
            var key = peg$currPos * 52 + 38;
            var cached = peg$resultsCache[key];
            if (cached) {
              peg$currPos = cached.nextPos;
              return cached.result;
            }
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 95) {
              s1 = peg$c45;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e67);
              }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f64(s1);
            }
            s0 = s1;
            peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
            return s0;
          }
          function peg$parseignore() {
            var s0;
            var key = peg$currPos * 52 + 39;
            var cached = peg$resultsCache[key];
            if (cached) {
              peg$currPos = cached.nextPos;
              return cached.result;
            }
            if (input.charCodeAt(peg$currPos) === 0) {
              s0 = peg$c46;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e68);
              }
            }
            peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
            return s0;
          }
          function peg$parsesp() {
            var s0, s1, s2;
            var key = peg$currPos * 52 + 40;
            var cached = peg$resultsCache[key];
            if (cached) {
              peg$currPos = cached.nextPos;
              return cached.result;
            }
            peg$silentFails++;
            s0 = peg$currPos;
            s1 = [];
            if (peg$r1.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e69);
              }
            }
            if (s2 !== peg$FAILED) {
              while (s2 !== peg$FAILED) {
                s1.push(s2);
                if (peg$r1.test(input.charAt(peg$currPos))) {
                  s2 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e69);
                  }
                }
              }
            } else {
              s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f65();
            }
            s0 = s1;
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e8);
              }
            }
            peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
            return s0;
          }
          function peg$parsechar() {
            var s0;
            var key = peg$currPos * 52 + 41;
            var cached = peg$resultsCache[key];
            if (cached) {
              peg$currPos = cached.nextPos;
              return cached.result;
            }
            peg$silentFails++;
            if (peg$r2.test(input.charAt(peg$currPos))) {
              s0 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e71);
              }
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              if (peg$silentFails === 0) {
                peg$fail(peg$e70);
              }
            }
            peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
            return s0;
          }
          function peg$parsenum() {
            var s0;
            var key = peg$currPos * 52 + 42;
            var cached = peg$resultsCache[key];
            if (cached) {
              peg$currPos = cached.nextPos;
              return cached.result;
            }
            peg$silentFails++;
            if (peg$r3.test(input.charAt(peg$currPos))) {
              s0 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e73);
              }
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              if (peg$silentFails === 0) {
                peg$fail(peg$e72);
              }
            }
            peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
            return s0;
          }
          function peg$parsepunctuation() {
            var s0, s1;
            var key = peg$currPos * 52 + 43;
            var cached = peg$resultsCache[key];
            if (cached) {
              peg$currPos = cached.nextPos;
              return cached.result;
            }
            peg$silentFails++;
            s0 = peg$currPos;
            if (peg$r4.test(input.charAt(peg$currPos))) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e75);
              }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f66(s1);
            }
            s0 = s1;
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e74);
              }
            }
            peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
            return s0;
          }
          function peg$parsecomment_start() {
            var s0;
            var key = peg$currPos * 52 + 44;
            var cached = peg$resultsCache[key];
            if (cached) {
              peg$currPos = cached.nextPos;
              return cached.result;
            }
            if (input.charCodeAt(peg$currPos) === 37) {
              s0 = peg$c0;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e7);
              }
            }
            peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
            return s0;
          }
          function peg$parsefull_comment() {
            var s0;
            var key = peg$currPos * 52 + 45;
            var cached = peg$resultsCache[key];
            if (cached) {
              peg$currPos = cached.nextPos;
              return cached.result;
            }
            peg$silentFails++;
            s0 = peg$parseownline_comment();
            if (s0 === peg$FAILED) {
              s0 = peg$parsesameline_comment();
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              if (peg$silentFails === 0) {
                peg$fail(peg$e76);
              }
            }
            peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
            return s0;
          }
          function peg$parseownline_comment() {
            var s0, s1, s2, s3;
            var key = peg$currPos * 52 + 46;
            var cached = peg$resultsCache[key];
            if (cached) {
              peg$currPos = cached.nextPos;
              return cached.result;
            }
            s0 = peg$currPos;
            s1 = peg$currPos;
            s2 = [];
            s3 = peg$parsesp();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parsesp();
            }
            s3 = peg$parsenl();
            if (s3 !== peg$FAILED) {
              s2 = [s2, s3];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
            if (s1 === peg$FAILED) {
              s1 = null;
            }
            s2 = peg$parseleading_sp();
            if (s2 !== peg$FAILED) {
              s3 = peg$parsecomment();
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f67(s2, s3);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
            return s0;
          }
          function peg$parsesameline_comment() {
            var s0, s1, s2;
            var key = peg$currPos * 52 + 47;
            var cached = peg$resultsCache[key];
            if (cached) {
              peg$currPos = cached.nextPos;
              return cached.result;
            }
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parsesp();
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$parsesp();
            }
            s2 = peg$parsecomment();
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f68(s1, s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
            return s0;
          }
          function peg$parsecomment() {
            var s0, s1, s2, s3, s4, s5, s6, s7;
            var key = peg$currPos * 52 + 48;
            var cached = peg$resultsCache[key];
            if (cached) {
              peg$currPos = cached.nextPos;
              return cached.result;
            }
            peg$silentFails++;
            s0 = peg$currPos;
            s1 = peg$parsecomment_start();
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$currPos;
              s4 = peg$currPos;
              peg$silentFails++;
              s5 = peg$parsenl();
              peg$silentFails--;
              if (s5 === peg$FAILED) {
                s4 = void 0;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
              if (s4 !== peg$FAILED) {
                if (input.length > peg$currPos) {
                  s5 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e3);
                  }
                }
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s3;
                  s3 = peg$f69(s5);
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$currPos;
                s4 = peg$currPos;
                peg$silentFails++;
                s5 = peg$parsenl();
                peg$silentFails--;
                if (s5 === peg$FAILED) {
                  s4 = void 0;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
                if (s4 !== peg$FAILED) {
                  if (input.length > peg$currPos) {
                    s5 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$e3);
                    }
                  }
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s3;
                    s3 = peg$f69(s5);
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              }
              s3 = peg$currPos;
              peg$silentFails++;
              s4 = peg$parseparbreak();
              peg$silentFails--;
              if (s4 !== peg$FAILED) {
                peg$currPos = s3;
                s3 = void 0;
              } else {
                s3 = peg$FAILED;
              }
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f70(s2);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parsecomment_start();
              if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$currPos;
                s4 = peg$currPos;
                peg$silentFails++;
                s5 = peg$parsenl();
                peg$silentFails--;
                if (s5 === peg$FAILED) {
                  s4 = void 0;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
                if (s4 !== peg$FAILED) {
                  if (input.length > peg$currPos) {
                    s5 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$e3);
                    }
                  }
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s3;
                    s3 = peg$f71(s5);
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
                while (s3 !== peg$FAILED) {
                  s2.push(s3);
                  s3 = peg$currPos;
                  s4 = peg$currPos;
                  peg$silentFails++;
                  s5 = peg$parsenl();
                  peg$silentFails--;
                  if (s5 === peg$FAILED) {
                    s4 = void 0;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                  if (s4 !== peg$FAILED) {
                    if (input.length > peg$currPos) {
                      s5 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s5 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$e3);
                      }
                    }
                    if (s5 !== peg$FAILED) {
                      peg$savedPos = s3;
                      s3 = peg$f71(s5);
                    } else {
                      peg$currPos = s3;
                      s3 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                }
                s3 = peg$currPos;
                s4 = peg$parsenl();
                if (s4 !== peg$FAILED) {
                  s5 = [];
                  s6 = peg$parsesp();
                  while (s6 !== peg$FAILED) {
                    s5.push(s6);
                    s6 = peg$parsesp();
                  }
                  s6 = peg$currPos;
                  peg$silentFails++;
                  s7 = peg$parsecomment_start();
                  peg$silentFails--;
                  if (s7 === peg$FAILED) {
                    s6 = void 0;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                  if (s6 !== peg$FAILED) {
                    s4 = [s4, s5, s6];
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
                if (s3 === peg$FAILED) {
                  s3 = peg$parsenl();
                  if (s3 === peg$FAILED) {
                    s3 = peg$parseEOF();
                  }
                }
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f72(s2);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e77);
              }
            }
            peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
            return s0;
          }
          function peg$parseleading_sp() {
            var s0, s1, s2, s3, s4;
            var key = peg$currPos * 52 + 49;
            var cached = peg$resultsCache[key];
            if (cached) {
              peg$currPos = cached.nextPos;
              return cached.result;
            }
            s0 = peg$currPos;
            s1 = peg$currPos;
            s2 = peg$parsestart_of_line();
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$parsesp();
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parsesp();
              }
              s2 = [s2, s3];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
              s0 = input.substring(s0, peg$currPos);
            } else {
              s0 = s1;
            }
            peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
            return s0;
          }
          function peg$parsestart_of_line() {
            var s0;
            var key = peg$currPos * 52 + 50;
            var cached = peg$resultsCache[key];
            if (cached) {
              peg$currPos = cached.nextPos;
              return cached.result;
            }
            peg$savedPos = peg$currPos;
            s0 = peg$f73();
            if (s0) {
              s0 = void 0;
            } else {
              s0 = peg$FAILED;
            }
            peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
            return s0;
          }
          function peg$parseEOF() {
            var s0, s1;
            var key = peg$currPos * 52 + 51;
            var cached = peg$resultsCache[key];
            if (cached) {
              peg$currPos = cached.nextPos;
              return cached.result;
            }
            s0 = peg$currPos;
            peg$silentFails++;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e3);
              }
            }
            peg$silentFails--;
            if (s1 === peg$FAILED) {
              s0 = void 0;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
            return s0;
          }
          function toString(e) {
            if (typeof e === "string") {
              return e;
            }
            if (typeof e.content === "string") {
              return e.content;
            }
            if (e && e.type === "whitespace") {
              return " ";
            }
            return e;
          }
          function compare_env(g1, g2) {
            const g1Name = typeof g1 === "string" ? g1 : g1.content.map(toString).join("");
            const g2Name = typeof g2 === "string" ? g2 : g2.content.map(toString).join("");
            return g1Name === g2Name;
          }
          function createNode(type, extra = {}) {
            return { type, ...extra, position: location() };
          }
          peg$result = peg$startRuleFunction();
          if (peg$result !== peg$FAILED && peg$currPos === input.length) {
            return peg$result;
          } else {
            if (peg$result !== peg$FAILED && peg$currPos < input.length) {
              peg$fail(peg$endExpectation());
            }
            throw peg$buildStructuredError(
              peg$maxFailExpected,
              peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
              peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
            );
          }
        }
        return {
          SyntaxError: peg$SyntaxError,
          parse: peg$parse
        };
      }()
    );
    var _AlignEnvironmentPegParser = (
      // Generated by Peggy 3.0.2.
      //
      // https://peggyjs.org/
      function() {
        function peg$subclass(child, parent) {
          function C() {
            this.constructor = child;
          }
          C.prototype = parent.prototype;
          child.prototype = new C();
        }
        function peg$SyntaxError(message, expected, found, location) {
          var self2 = Error.call(this, message);
          if (Object.setPrototypeOf) {
            Object.setPrototypeOf(self2, peg$SyntaxError.prototype);
          }
          self2.expected = expected;
          self2.found = found;
          self2.location = location;
          self2.name = "SyntaxError";
          return self2;
        }
        peg$subclass(peg$SyntaxError, Error);
        function peg$padEnd(str, targetLength, padString) {
          padString = padString || " ";
          if (str.length > targetLength) {
            return str;
          }
          targetLength -= str.length;
          padString += padString.repeat(targetLength);
          return str + padString.slice(0, targetLength);
        }
        peg$SyntaxError.prototype.format = function(sources) {
          var str = "Error: " + this.message;
          if (this.location) {
            var src = null;
            var k;
            for (k = 0; k < sources.length; k++) {
              if (sources[k].source === this.location.source) {
                src = sources[k].text.split(/\r\n|\n|\r/g);
                break;
              }
            }
            var s = this.location.start;
            var offset_s = this.location.source && typeof this.location.source.offset === "function" ? this.location.source.offset(s) : s;
            var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
            if (src) {
              var e = this.location.end;
              var filler = peg$padEnd("", offset_s.line.toString().length, " ");
              var line = src[s.line - 1];
              var last = s.line === e.line ? e.column : line.length + 1;
              var hatLen = last - s.column || 1;
              str += "\n --> " + loc + "\n" + filler + " |\n" + offset_s.line + " | " + line + "\n" + filler + " | " + peg$padEnd("", s.column - 1, " ") + peg$padEnd("", hatLen, "^");
            } else {
              str += "\n at " + loc;
            }
          }
          return str;
        };
        peg$SyntaxError.buildMessage = function(expected, found) {
          var DESCRIBE_EXPECTATION_FNS = {
            literal: function(expectation) {
              return '"' + literalEscape(expectation.text) + '"';
            },
            class: function(expectation) {
              var escapedParts = expectation.parts.map(function(part) {
                return Array.isArray(part) ? classEscape(part[0]) + "-" + classEscape(part[1]) : classEscape(part);
              });
              return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
            },
            any: function() {
              return "any character";
            },
            end: function() {
              return "end of input";
            },
            other: function(expectation) {
              return expectation.description;
            }
          };
          function hex(ch) {
            return ch.charCodeAt(0).toString(16).toUpperCase();
          }
          function literalEscape(s) {
            return s.replace(/\\/g, "\\\\").replace(/"/g, '\\"').replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(ch) {
              return "\\x0" + hex(ch);
            }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
              return "\\x" + hex(ch);
            });
          }
          function classEscape(s) {
            return s.replace(/\\/g, "\\\\").replace(/\]/g, "\\]").replace(/\^/g, "\\^").replace(/-/g, "\\-").replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(ch) {
              return "\\x0" + hex(ch);
            }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
              return "\\x" + hex(ch);
            });
          }
          function describeExpectation(expectation) {
            return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
          }
          function describeExpected(expected2) {
            var descriptions = expected2.map(describeExpectation);
            var i, j;
            descriptions.sort();
            if (descriptions.length > 0) {
              for (i = 1, j = 1; i < descriptions.length; i++) {
                if (descriptions[i - 1] !== descriptions[i]) {
                  descriptions[j] = descriptions[i];
                  j++;
                }
              }
              descriptions.length = j;
            }
            switch (descriptions.length) {
              case 1:
                return descriptions[0];
              case 2:
                return descriptions[0] + " or " + descriptions[1];
              default:
                return descriptions.slice(0, -1).join(", ") + ", or " + descriptions[descriptions.length - 1];
            }
          }
          function describeFound(found2) {
            return found2 ? '"' + literalEscape(found2) + '"' : "end of input";
          }
          return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
        };
        function peg$parse(input, options) {
          options = options !== void 0 ? options : {};
          var peg$FAILED = {};
          var peg$source = options.grammarSource;
          var peg$startRuleFunctions = { body: peg$parsebody };
          var peg$startRuleFunction = peg$parsebody;
          var peg$e0 = peg$anyExpectation();
          var peg$f0 = function() {
            return [];
          };
          var peg$f1 = function(x) {
            return { cells: [], colSeps: [], ...x };
          };
          var peg$f2 = function(rowItems, rowSep, trailingComment) {
            return { ...rowItems, rowSep, trailingComment };
          };
          var peg$f3 = function(rowItems, trailingComment) {
            return { ...rowItems, rowSep: null, trailingComment };
          };
          var peg$f4 = function(x) {
            return x;
          };
          var peg$f5 = function(x) {
            return {
              cells: [],
              colSeps: [],
              rowSep: null,
              trailingComment: x
            };
          };
          var peg$f6 = function(x) {
            return x;
          };
          var peg$f7 = function(colSep, cell) {
            return { colSep, cell };
          };
          var peg$f8 = function(colSep) {
            return { colSep };
          };
          var peg$f9 = function(a, b) {
            return processRow(a, b);
          };
          var peg$f10 = function(b) {
            return processRow(null, b);
          };
          var peg$f11 = function(tok) {
            return options.isSameLineComment(tok);
          };
          var peg$f12 = function(tok) {
            return tok;
          };
          var peg$f13 = function(tok) {
            return options.isOwnLineComment(tok);
          };
          var peg$f14 = function(tok) {
            return tok;
          };
          var peg$f15 = function(tok) {
            return options.isWhitespace(tok);
          };
          var peg$f16 = function(tok) {
            return tok;
          };
          var peg$f17 = function(tok) {
            return options.isRowSep(tok);
          };
          var peg$f18 = function(tok) {
            return tok;
          };
          var peg$f19 = function(tok) {
            return options.isColSep(tok);
          };
          var peg$f20 = function(tok) {
            return tok;
          };
          var peg$currPos = 0;
          var peg$posDetailsCache = [{ line: 1, column: 1 }];
          var peg$maxFailPos = 0;
          var peg$maxFailExpected = [];
          var peg$silentFails = 0;
          var peg$result;
          if ("startRule" in options) {
            if (!(options.startRule in peg$startRuleFunctions)) {
              throw new Error(`Can't start parsing from rule "` + options.startRule + '".');
            }
            peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
          }
          function peg$anyExpectation() {
            return { type: "any" };
          }
          function peg$endExpectation() {
            return { type: "end" };
          }
          function peg$computePosDetails(pos) {
            var details = peg$posDetailsCache[pos];
            var p;
            if (details) {
              return details;
            } else {
              p = pos - 1;
              while (!peg$posDetailsCache[p]) {
                p--;
              }
              details = peg$posDetailsCache[p];
              details = {
                line: details.line,
                column: details.column
              };
              while (p < pos) {
                if (input.charCodeAt(p) === 10) {
                  details.line++;
                  details.column = 1;
                } else {
                  details.column++;
                }
                p++;
              }
              peg$posDetailsCache[pos] = details;
              return details;
            }
          }
          function peg$computeLocation(startPos, endPos, offset2) {
            var startPosDetails = peg$computePosDetails(startPos);
            var endPosDetails = peg$computePosDetails(endPos);
            var res = {
              source: peg$source,
              start: {
                offset: startPos,
                line: startPosDetails.line,
                column: startPosDetails.column
              },
              end: {
                offset: endPos,
                line: endPosDetails.line,
                column: endPosDetails.column
              }
            };
            return res;
          }
          function peg$fail(expected2) {
            if (peg$currPos < peg$maxFailPos) {
              return;
            }
            if (peg$currPos > peg$maxFailPos) {
              peg$maxFailPos = peg$currPos;
              peg$maxFailExpected = [];
            }
            peg$maxFailExpected.push(expected2);
          }
          function peg$buildStructuredError(expected2, found, location2) {
            return new peg$SyntaxError(
              peg$SyntaxError.buildMessage(expected2, found),
              expected2,
              found,
              location2
            );
          }
          function peg$parsebody() {
            var s0, s1;
            s0 = [];
            s1 = peg$parsecomment_only_line();
            if (s1 === peg$FAILED) {
              s1 = peg$parserow_with_end();
              if (s1 === peg$FAILED) {
                s1 = peg$parserow_without_end();
              }
            }
            if (s1 !== peg$FAILED) {
              while (s1 !== peg$FAILED) {
                s0.push(s1);
                s1 = peg$parsecomment_only_line();
                if (s1 === peg$FAILED) {
                  s1 = peg$parserow_with_end();
                  if (s1 === peg$FAILED) {
                    s1 = peg$parserow_without_end();
                  }
                }
              }
            } else {
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseEOL();
              if (s1 !== peg$FAILED) {
                s1 = peg$f0();
              }
              s0 = s1;
            }
            return s0;
          }
          function peg$parserow_with_end() {
            var s0, s1, s2, s3;
            s0 = peg$currPos;
            s1 = peg$currPos;
            s2 = peg$parserow_items();
            if (s2 === peg$FAILED) {
              s2 = null;
            }
            s2 = peg$f1(s2);
            s1 = s2;
            s2 = peg$parserow_sep();
            if (s2 !== peg$FAILED) {
              s3 = peg$parsetrailing_comment();
              if (s3 === peg$FAILED) {
                s3 = null;
              }
              s0 = peg$f2(s1, s2, s3);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parserow_without_end() {
            var s0, s1, s2;
            s0 = peg$currPos;
            s1 = peg$parserow_items();
            if (s1 !== peg$FAILED) {
              s2 = peg$parsetrailing_comment();
              if (s2 === peg$FAILED) {
                s2 = null;
              }
              s0 = peg$f3(s1, s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parsetrailing_comment() {
            var s0, s1, s2;
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parsewhitespace();
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$parsewhitespace();
            }
            s2 = peg$parsesame_line_comment();
            if (s2 !== peg$FAILED) {
              s0 = peg$f4(s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parsecomment_only_line() {
            var s0, s1, s2;
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parsewhitespace();
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$parsewhitespace();
            }
            s2 = peg$parseown_line_comment();
            if (s2 !== peg$FAILED) {
              s0 = peg$f5(s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parsetoken() {
            var s0, s1, s2;
            s0 = peg$currPos;
            s1 = peg$currPos;
            peg$silentFails++;
            s2 = peg$parserow_sep();
            if (s2 === peg$FAILED) {
              s2 = peg$parsecol_sep();
              if (s2 === peg$FAILED) {
                s2 = peg$parsetrailing_comment();
                if (s2 === peg$FAILED) {
                  s2 = peg$parseown_line_comment();
                }
              }
            }
            peg$silentFails--;
            if (s2 === peg$FAILED) {
              s1 = void 0;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
              if (input.length > peg$currPos) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e0);
                }
              }
              if (s2 !== peg$FAILED) {
                s0 = peg$f6(s2);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parsecell() {
            var s0, s1, s2;
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parsetoken();
            if (s2 !== peg$FAILED) {
              while (s2 !== peg$FAILED) {
                s1.push(s2);
                s2 = peg$parsetoken();
              }
            } else {
              s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
              s0 = input.substring(s0, peg$currPos);
            } else {
              s0 = s1;
            }
            return s0;
          }
          function peg$parseseparated_cell() {
            var s0, s1, s2;
            s0 = peg$currPos;
            s1 = peg$parsecol_sep();
            if (s1 !== peg$FAILED) {
              s2 = peg$parsecell();
              if (s2 !== peg$FAILED) {
                s0 = peg$f7(s1, s2);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parsecol_sep();
              if (s1 !== peg$FAILED) {
                s1 = peg$f8(s1);
              }
              s0 = s1;
            }
            return s0;
          }
          function peg$parserow_items() {
            var s0, s1, s2, s3;
            s0 = peg$currPos;
            s1 = peg$parsecell();
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$parseseparated_cell();
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parseseparated_cell();
              }
              s0 = peg$f9(s1, s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = [];
              s2 = peg$parseseparated_cell();
              if (s2 !== peg$FAILED) {
                while (s2 !== peg$FAILED) {
                  s1.push(s2);
                  s2 = peg$parseseparated_cell();
                }
              } else {
                s1 = peg$FAILED;
              }
              if (s1 !== peg$FAILED) {
                s1 = peg$f10(s1);
              }
              s0 = s1;
            }
            return s0;
          }
          function peg$parsesame_line_comment() {
            var s0, s1, s2;
            s0 = peg$currPos;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e0);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$f11(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s0 = peg$f12(s1);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parseown_line_comment() {
            var s0, s1, s2;
            s0 = peg$currPos;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e0);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$f13(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s0 = peg$f14(s1);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parsewhitespace() {
            var s0, s1, s2;
            s0 = peg$currPos;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e0);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$f15(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s0 = peg$f16(s1);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parserow_sep() {
            var s0, s1, s2;
            s0 = peg$currPos;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e0);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$f17(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s0 = peg$f18(s1);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parsecol_sep() {
            var s0, s1, s2;
            s0 = peg$currPos;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e0);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$f19(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s0 = peg$f20(s1);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parseEOL() {
            var s0, s1;
            s0 = peg$currPos;
            peg$silentFails++;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e0);
              }
            }
            peg$silentFails--;
            if (s1 === peg$FAILED) {
              s0 = void 0;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function processRow(leadCell, otherCells) {
            const cells = [leadCell || []];
            const seps = [];
            for (const x of otherCells) {
              cells.push(x.cell || []);
              seps.push(x.colSep);
            }
            return { cells, colSeps: seps };
          }
          if (!options.isWhitespace) {
            try {
              Object.assign(
                options,
                createMatchers(["\\", "hline", "cr"], ["&"])
              );
            } catch (e) {
              console.warn("Error when initializing parser", e);
            }
          }
          peg$result = peg$startRuleFunction();
          if (peg$result !== peg$FAILED && peg$currPos === input.length) {
            return peg$result;
          } else {
            if (peg$result !== peg$FAILED && peg$currPos < input.length) {
              peg$fail(peg$endExpectation());
            }
            throw peg$buildStructuredError(
              peg$maxFailExpected,
              peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
              peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
            );
          }
        }
        return {
          SyntaxError: peg$SyntaxError,
          parse: peg$parse
        };
      }()
    );
    var _ArgSpecPegParser = (
      // Generated by Peggy 3.0.2.
      //
      // https://peggyjs.org/
      function() {
        function peg$subclass(child, parent) {
          function C() {
            this.constructor = child;
          }
          C.prototype = parent.prototype;
          child.prototype = new C();
        }
        function peg$SyntaxError(message, expected, found, location) {
          var self2 = Error.call(this, message);
          if (Object.setPrototypeOf) {
            Object.setPrototypeOf(self2, peg$SyntaxError.prototype);
          }
          self2.expected = expected;
          self2.found = found;
          self2.location = location;
          self2.name = "SyntaxError";
          return self2;
        }
        peg$subclass(peg$SyntaxError, Error);
        function peg$padEnd(str, targetLength, padString) {
          padString = padString || " ";
          if (str.length > targetLength) {
            return str;
          }
          targetLength -= str.length;
          padString += padString.repeat(targetLength);
          return str + padString.slice(0, targetLength);
        }
        peg$SyntaxError.prototype.format = function(sources) {
          var str = "Error: " + this.message;
          if (this.location) {
            var src = null;
            var k;
            for (k = 0; k < sources.length; k++) {
              if (sources[k].source === this.location.source) {
                src = sources[k].text.split(/\r\n|\n|\r/g);
                break;
              }
            }
            var s = this.location.start;
            var offset_s = this.location.source && typeof this.location.source.offset === "function" ? this.location.source.offset(s) : s;
            var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
            if (src) {
              var e = this.location.end;
              var filler = peg$padEnd("", offset_s.line.toString().length, " ");
              var line = src[s.line - 1];
              var last = s.line === e.line ? e.column : line.length + 1;
              var hatLen = last - s.column || 1;
              str += "\n --> " + loc + "\n" + filler + " |\n" + offset_s.line + " | " + line + "\n" + filler + " | " + peg$padEnd("", s.column - 1, " ") + peg$padEnd("", hatLen, "^");
            } else {
              str += "\n at " + loc;
            }
          }
          return str;
        };
        peg$SyntaxError.buildMessage = function(expected, found) {
          var DESCRIBE_EXPECTATION_FNS = {
            literal: function(expectation) {
              return '"' + literalEscape(expectation.text) + '"';
            },
            class: function(expectation) {
              var escapedParts = expectation.parts.map(function(part) {
                return Array.isArray(part) ? classEscape(part[0]) + "-" + classEscape(part[1]) : classEscape(part);
              });
              return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
            },
            any: function() {
              return "any character";
            },
            end: function() {
              return "end of input";
            },
            other: function(expectation) {
              return expectation.description;
            }
          };
          function hex(ch) {
            return ch.charCodeAt(0).toString(16).toUpperCase();
          }
          function literalEscape(s) {
            return s.replace(/\\/g, "\\\\").replace(/"/g, '\\"').replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(ch) {
              return "\\x0" + hex(ch);
            }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
              return "\\x" + hex(ch);
            });
          }
          function classEscape(s) {
            return s.replace(/\\/g, "\\\\").replace(/\]/g, "\\]").replace(/\^/g, "\\^").replace(/-/g, "\\-").replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(ch) {
              return "\\x0" + hex(ch);
            }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
              return "\\x" + hex(ch);
            });
          }
          function describeExpectation(expectation) {
            return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
          }
          function describeExpected(expected2) {
            var descriptions = expected2.map(describeExpectation);
            var i, j;
            descriptions.sort();
            if (descriptions.length > 0) {
              for (i = 1, j = 1; i < descriptions.length; i++) {
                if (descriptions[i - 1] !== descriptions[i]) {
                  descriptions[j] = descriptions[i];
                  j++;
                }
              }
              descriptions.length = j;
            }
            switch (descriptions.length) {
              case 1:
                return descriptions[0];
              case 2:
                return descriptions[0] + " or " + descriptions[1];
              default:
                return descriptions.slice(0, -1).join(", ") + ", or " + descriptions[descriptions.length - 1];
            }
          }
          function describeFound(found2) {
            return found2 ? '"' + literalEscape(found2) + '"' : "end of input";
          }
          return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
        };
        function peg$parse(input, options) {
          options = options !== void 0 ? options : {};
          var peg$FAILED = {};
          var peg$source = options.grammarSource;
          var peg$startRuleFunctions = { args_spec_list: peg$parseargs_spec_list };
          var peg$startRuleFunction = peg$parseargs_spec_list;
          var peg$c1 = "v";
          var peg$c2 = "b";
          var peg$c3 = "!";
          var peg$c4 = "D";
          var peg$c5 = "d";
          var peg$c6 = "s";
          var peg$c7 = "O";
          var peg$c8 = "o";
          var peg$c9 = "e";
          var peg$c10 = "E";
          var peg$c11 = "t";
          var peg$c12 = "R";
          var peg$c13 = "r";
          var peg$c14 = "u";
          var peg$c15 = "m";
          var peg$c16 = "{";
          var peg$c17 = "}";
          var peg$c18 = " ";
          var peg$c19 = "\n";
          var peg$c20 = "\r";
          var peg$c21 = "\\";
          var peg$r0 = /^[{ ]/;
          var peg$r1 = /^[a-zA-Z]/;
          var peg$r2 = /^[{}]/;
          var peg$e0 = peg$literalExpectation("+", false);
          var peg$e1 = peg$literalExpectation("v", false);
          var peg$e2 = peg$anyExpectation();
          var peg$e3 = peg$literalExpectation("b", false);
          var peg$e4 = peg$literalExpectation("!", false);
          var peg$e5 = peg$literalExpectation("D", false);
          var peg$e6 = peg$literalExpectation("d", false);
          var peg$e7 = peg$literalExpectation("s", false);
          var peg$e8 = peg$literalExpectation("O", false);
          var peg$e9 = peg$literalExpectation("o", false);
          var peg$e10 = peg$literalExpectation("e", false);
          var peg$e11 = peg$literalExpectation("E", false);
          var peg$e12 = peg$literalExpectation("t", false);
          var peg$e13 = peg$literalExpectation("R", false);
          var peg$e14 = peg$literalExpectation("r", false);
          var peg$e15 = peg$literalExpectation("u", false);
          var peg$e16 = peg$classExpectation(["{", " "], false, false);
          var peg$e17 = peg$literalExpectation("m", false);
          var peg$e18 = peg$literalExpectation("{", false);
          var peg$e19 = peg$literalExpectation("}", false);
          var peg$e20 = peg$literalExpectation(" ", false);
          var peg$e21 = peg$literalExpectation("\n", false);
          var peg$e22 = peg$literalExpectation("\r", false);
          var peg$e23 = peg$literalExpectation("\\", false);
          var peg$e24 = peg$classExpectation([["a", "z"], ["A", "Z"]], false, false);
          var peg$e25 = peg$classExpectation(["{", "}"], false, false);
          var peg$f0 = function(x) {
            return x;
          };
          var peg$f1 = function(spec) {
            return spec;
          };
          var peg$f2 = function(spec) {
            return spec;
          };
          var peg$f3 = function(openBrace) {
            return createNode("verbatim", { openBrace, closeBrace: openBrace });
          };
          var peg$f4 = function() {
            return createNode("body");
          };
          var peg$f5 = function(leading_bang, spec) {
            return leading_bang ? { ...spec, noLeadingWhitespace: true } : spec;
          };
          var peg$f6 = function(braceSpec, defaultArg) {
            return createNode("optional", { ...braceSpec, defaultArg });
          };
          var peg$f7 = function(braceSpec) {
            return createNode("optional", braceSpec);
          };
          var peg$f8 = function() {
            return createNode("optionalStar");
          };
          var peg$f9 = function(g) {
            return createNode("optional", { defaultArg: g });
          };
          var peg$f10 = function() {
            return createNode("optional");
          };
          var peg$f11 = function(args) {
            return createNode("embellishment", {
              embellishmentTokens: args
            });
          };
          var peg$f12 = function(args, g) {
            return createNode("embellishment", {
              embellishmentTokens: args,
              defaultArg: g
            });
          };
          var peg$f13 = function(tok) {
            return createNode("optionalToken", { token: tok });
          };
          var peg$f14 = function(braceSpec, defaultArg) {
            return createNode("mandatory", { ...braceSpec, defaultArg });
          };
          var peg$f15 = function(braceSpec) {
            return createNode("mandatory", braceSpec);
          };
          var peg$f16 = function(stopTokens) {
            return createNode("until", { stopTokens });
          };
          var peg$f17 = function(x) {
            return [x];
          };
          var peg$f18 = function(g) {
            return g.content;
          };
          var peg$f19 = function() {
            return createNode("mandatory");
          };
          var peg$f20 = function(openBrace, closeBrace) {
            return { openBrace, closeBrace };
          };
          var peg$f21 = function(g) {
            return g.content.map(groupToStr).join("");
          };
          var peg$f22 = function(t) {
            return [t];
          };
          var peg$f23 = function(args) {
            return args.filter((a) => !a.match(/^\s*$/));
          };
          var peg$f24 = function(content) {
            return { type: "group", content };
          };
          var peg$f25 = function() {
            return "";
          };
          var peg$currPos = 0;
          var peg$posDetailsCache = [{ line: 1, column: 1 }];
          var peg$maxFailPos = 0;
          var peg$maxFailExpected = [];
          var peg$silentFails = 0;
          var peg$result;
          if ("startRule" in options) {
            if (!(options.startRule in peg$startRuleFunctions)) {
              throw new Error(`Can't start parsing from rule "` + options.startRule + '".');
            }
            peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
          }
          function peg$literalExpectation(text2, ignoreCase) {
            return { type: "literal", text: text2, ignoreCase };
          }
          function peg$classExpectation(parts, inverted, ignoreCase) {
            return { type: "class", parts, inverted, ignoreCase };
          }
          function peg$anyExpectation() {
            return { type: "any" };
          }
          function peg$endExpectation() {
            return { type: "end" };
          }
          function peg$computePosDetails(pos) {
            var details = peg$posDetailsCache[pos];
            var p;
            if (details) {
              return details;
            } else {
              p = pos - 1;
              while (!peg$posDetailsCache[p]) {
                p--;
              }
              details = peg$posDetailsCache[p];
              details = {
                line: details.line,
                column: details.column
              };
              while (p < pos) {
                if (input.charCodeAt(p) === 10) {
                  details.line++;
                  details.column = 1;
                } else {
                  details.column++;
                }
                p++;
              }
              peg$posDetailsCache[pos] = details;
              return details;
            }
          }
          function peg$computeLocation(startPos, endPos, offset2) {
            var startPosDetails = peg$computePosDetails(startPos);
            var endPosDetails = peg$computePosDetails(endPos);
            var res = {
              source: peg$source,
              start: {
                offset: startPos,
                line: startPosDetails.line,
                column: startPosDetails.column
              },
              end: {
                offset: endPos,
                line: endPosDetails.line,
                column: endPosDetails.column
              }
            };
            return res;
          }
          function peg$fail(expected2) {
            if (peg$currPos < peg$maxFailPos) {
              return;
            }
            if (peg$currPos > peg$maxFailPos) {
              peg$maxFailPos = peg$currPos;
              peg$maxFailExpected = [];
            }
            peg$maxFailExpected.push(expected2);
          }
          function peg$buildStructuredError(expected2, found, location2) {
            return new peg$SyntaxError(
              peg$SyntaxError.buildMessage(expected2, found),
              expected2,
              found,
              location2
            );
          }
          function peg$parseargs_spec_list() {
            var s0, s1, s2, s4;
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$currPos;
            peg$parsewhitespace();
            s4 = peg$parsearg_spec();
            if (s4 !== peg$FAILED) {
              s2 = peg$f0(s4);
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$currPos;
              peg$parsewhitespace();
              s4 = peg$parsearg_spec();
              if (s4 !== peg$FAILED) {
                s2 = peg$f0(s4);
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            }
            s2 = peg$parsewhitespace();
            s0 = peg$f1(s1);
            return s0;
          }
          function peg$parsearg_spec() {
            var s0, s2;
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 43) {
              peg$currPos++;
            } else {
              if (peg$silentFails === 0) {
                peg$fail(peg$e0);
              }
            }
            s2 = peg$parseoptional();
            if (s2 === peg$FAILED) {
              s2 = peg$parsemandatory();
              if (s2 === peg$FAILED) {
                s2 = peg$parseverbatim();
                if (s2 === peg$FAILED) {
                  s2 = peg$parserequired();
                  if (s2 === peg$FAILED) {
                    s2 = peg$parsebody();
                    if (s2 === peg$FAILED) {
                      s2 = peg$parseuntil();
                    }
                  }
                }
              }
            }
            if (s2 !== peg$FAILED) {
              s0 = peg$f2(s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parseverbatim() {
            var s0, s1, s2;
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 118) {
              s1 = peg$c1;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e1);
              }
            }
            if (s1 !== peg$FAILED) {
              if (input.length > peg$currPos) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e2);
                }
              }
              if (s2 !== peg$FAILED) {
                s0 = peg$f3(s2);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parsebody() {
            var s0, s1;
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 98) {
              s1 = peg$c2;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e3);
              }
            }
            if (s1 !== peg$FAILED) {
              s1 = peg$f4();
            }
            s0 = s1;
            return s0;
          }
          function peg$parseoptional() {
            var s0, s1, s2;
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 33) {
              s1 = peg$c3;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e4);
              }
            }
            if (s1 === peg$FAILED) {
              s1 = null;
            }
            s2 = peg$parseoptional_star();
            if (s2 === peg$FAILED) {
              s2 = peg$parseoptional_standard();
              if (s2 === peg$FAILED) {
                s2 = peg$parseoptional_delimited();
                if (s2 === peg$FAILED) {
                  s2 = peg$parseoptional_embellishment();
                  if (s2 === peg$FAILED) {
                    s2 = peg$parseoptional_token();
                  }
                }
              }
            }
            if (s2 !== peg$FAILED) {
              s0 = peg$f5(s1, s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parseoptional_delimited() {
            var s0, s1, s2, s3;
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 68) {
              s1 = peg$c4;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e5);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parsebrace_spec();
              s3 = peg$parsearg();
              if (s3 !== peg$FAILED) {
                s0 = peg$f6(s2, s3);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 100) {
                s1 = peg$c5;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e6);
                }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parsebrace_spec();
                s0 = peg$f7(s2);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
            return s0;
          }
          function peg$parseoptional_star() {
            var s0, s1;
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 115) {
              s1 = peg$c6;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e7);
              }
            }
            if (s1 !== peg$FAILED) {
              s1 = peg$f8();
            }
            s0 = s1;
            return s0;
          }
          function peg$parseoptional_standard() {
            var s0, s1, s3;
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 79) {
              s1 = peg$c7;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e8);
              }
            }
            if (s1 !== peg$FAILED) {
              peg$parsewhitespace();
              s3 = peg$parsearg();
              if (s3 !== peg$FAILED) {
                s0 = peg$f9(s3);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 111) {
                s1 = peg$c8;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e9);
                }
              }
              if (s1 !== peg$FAILED) {
                s1 = peg$f10();
              }
              s0 = s1;
            }
            return s0;
          }
          function peg$parseoptional_embellishment() {
            var s0, s1, s3, s5;
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 101) {
              s1 = peg$c9;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e10);
              }
            }
            if (s1 !== peg$FAILED) {
              peg$parsewhitespace();
              s3 = peg$parseargs();
              if (s3 !== peg$FAILED) {
                s0 = peg$f11(s3);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 69) {
                s1 = peg$c10;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e11);
                }
              }
              if (s1 !== peg$FAILED) {
                peg$parsewhitespace();
                s3 = peg$parseargs();
                if (s3 !== peg$FAILED) {
                  peg$parsewhitespace();
                  s5 = peg$parseargs();
                  if (s5 !== peg$FAILED) {
                    s0 = peg$f12(s3, s5);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
            return s0;
          }
          function peg$parseoptional_token() {
            var s0, s1, s2;
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 116) {
              s1 = peg$c11;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e12);
              }
            }
            if (s1 !== peg$FAILED) {
              if (input.length > peg$currPos) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e2);
                }
              }
              if (s2 !== peg$FAILED) {
                s0 = peg$f13(s2);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parserequired() {
            var s0, s1, s2, s3;
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 82) {
              s1 = peg$c12;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e13);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parsebrace_spec();
              s3 = peg$parsearg();
              if (s3 !== peg$FAILED) {
                s0 = peg$f14(s2, s3);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 114) {
                s1 = peg$c13;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e14);
                }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parsebrace_spec();
                s0 = peg$f15(s2);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
            return s0;
          }
          function peg$parseuntil() {
            var s0, s1, s2;
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 117) {
              s1 = peg$c14;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e15);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseuntil_stop_token();
              if (s2 !== peg$FAILED) {
                s0 = peg$f16(s2);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parseuntil_stop_token() {
            var s0, s1, s2;
            s0 = peg$currPos;
            s1 = peg$currPos;
            peg$silentFails++;
            if (peg$r0.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e16);
              }
            }
            peg$silentFails--;
            if (s2 === peg$FAILED) {
              s1 = void 0;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
              if (input.length > peg$currPos) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e2);
                }
              }
              if (s2 !== peg$FAILED) {
                s0 = peg$f17(s2);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parsebraced_group();
              if (s1 !== peg$FAILED) {
                s1 = peg$f18(s1);
              }
              s0 = s1;
            }
            return s0;
          }
          function peg$parsemandatory() {
            var s0, s1;
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 109) {
              s1 = peg$c15;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e17);
              }
            }
            if (s1 !== peg$FAILED) {
              s1 = peg$f19();
            }
            s0 = s1;
            return s0;
          }
          function peg$parsebrace_spec() {
            var s0, s1, s2, s3, s4, s5;
            s0 = peg$currPos;
            s1 = peg$currPos;
            s2 = peg$currPos;
            s3 = peg$currPos;
            peg$silentFails++;
            s4 = peg$parsewhitespace_token();
            peg$silentFails--;
            if (s4 === peg$FAILED) {
              s3 = void 0;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parsemacro();
              if (s4 === peg$FAILED) {
                if (input.length > peg$currPos) {
                  s4 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e2);
                  }
                }
              }
              if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
            if (s2 === peg$FAILED) {
              s2 = null;
            }
            s1 = input.substring(s1, peg$currPos);
            s2 = peg$currPos;
            s3 = peg$currPos;
            s4 = peg$currPos;
            peg$silentFails++;
            s5 = peg$parsewhitespace_token();
            peg$silentFails--;
            if (s5 === peg$FAILED) {
              s4 = void 0;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsemacro();
              if (s5 === peg$FAILED) {
                if (input.length > peg$currPos) {
                  s5 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e2);
                  }
                }
              }
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 === peg$FAILED) {
              s3 = null;
            }
            s2 = input.substring(s2, peg$currPos);
            s0 = peg$f20(s1, s2);
            return s0;
          }
          function peg$parsearg() {
            var s0, s1;
            s0 = peg$parsetoken();
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parsebraced_group();
              if (s1 !== peg$FAILED) {
                s1 = peg$f21(s1);
              }
              s0 = s1;
            }
            return s0;
          }
          function peg$parseargs() {
            var s0, s1, s2, s3;
            s0 = peg$currPos;
            s1 = peg$parsetoken();
            if (s1 !== peg$FAILED) {
              s1 = peg$f22(s1);
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 123) {
                s1 = peg$c16;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e18);
                }
              }
              if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parsearg();
                if (s3 === peg$FAILED) {
                  s3 = peg$parsewhitespace_token();
                }
                while (s3 !== peg$FAILED) {
                  s2.push(s3);
                  s3 = peg$parsearg();
                  if (s3 === peg$FAILED) {
                    s3 = peg$parsewhitespace_token();
                  }
                }
                if (input.charCodeAt(peg$currPos) === 125) {
                  s3 = peg$c17;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e19);
                  }
                }
                if (s3 !== peg$FAILED) {
                  s0 = peg$f23(s2);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
            return s0;
          }
          function peg$parsebraced_group() {
            var s0, s1, s2, s3, s4, s5, s6, s7;
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 123) {
              s1 = peg$c16;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e18);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$currPos;
              s4 = peg$currPos;
              s5 = peg$currPos;
              peg$silentFails++;
              if (input.charCodeAt(peg$currPos) === 125) {
                s6 = peg$c17;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e19);
                }
              }
              peg$silentFails--;
              if (s6 === peg$FAILED) {
                s5 = void 0;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$currPos;
                peg$silentFails++;
                s7 = peg$parsebraced_group();
                peg$silentFails--;
                if (s7 === peg$FAILED) {
                  s6 = void 0;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsetoken();
                  if (s7 === peg$FAILED) {
                    s7 = peg$parsewhitespace_token();
                  }
                  if (s7 !== peg$FAILED) {
                    s5 = [s5, s6, s7];
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
              if (s4 !== peg$FAILED) {
                s3 = input.substring(s3, peg$currPos);
              } else {
                s3 = s4;
              }
              if (s3 === peg$FAILED) {
                s3 = peg$parsebraced_group();
              }
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$currPos;
                s4 = peg$currPos;
                s5 = peg$currPos;
                peg$silentFails++;
                if (input.charCodeAt(peg$currPos) === 125) {
                  s6 = peg$c17;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e19);
                  }
                }
                peg$silentFails--;
                if (s6 === peg$FAILED) {
                  s5 = void 0;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$currPos;
                  peg$silentFails++;
                  s7 = peg$parsebraced_group();
                  peg$silentFails--;
                  if (s7 === peg$FAILED) {
                    s6 = void 0;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parsetoken();
                    if (s7 === peg$FAILED) {
                      s7 = peg$parsewhitespace_token();
                    }
                    if (s7 !== peg$FAILED) {
                      s5 = [s5, s6, s7];
                      s4 = s5;
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
                if (s4 !== peg$FAILED) {
                  s3 = input.substring(s3, peg$currPos);
                } else {
                  s3 = s4;
                }
                if (s3 === peg$FAILED) {
                  s3 = peg$parsebraced_group();
                }
              }
              if (input.charCodeAt(peg$currPos) === 125) {
                s3 = peg$c17;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e19);
                }
              }
              if (s3 !== peg$FAILED) {
                s0 = peg$f24(s2);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parsewhitespace() {
            var s0, s1, s2;
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parsewhitespace_token();
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$parsewhitespace_token();
            }
            s1 = peg$f25();
            s0 = s1;
            return s0;
          }
          function peg$parsewhitespace_token() {
            var s0;
            if (input.charCodeAt(peg$currPos) === 32) {
              s0 = peg$c18;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e20);
              }
            }
            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 10) {
                s0 = peg$c19;
                peg$currPos++;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e21);
                }
              }
              if (s0 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 13) {
                  s0 = peg$c20;
                  peg$currPos++;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e22);
                  }
                }
              }
            }
            return s0;
          }
          function peg$parsemacro() {
            var s0, s1, s2, s3, s4;
            s0 = peg$currPos;
            s1 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 92) {
              s2 = peg$c21;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e23);
              }
            }
            if (s2 !== peg$FAILED) {
              s3 = [];
              if (peg$r1.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e24);
                }
              }
              if (s4 !== peg$FAILED) {
                while (s4 !== peg$FAILED) {
                  s3.push(s4);
                  if (peg$r1.test(input.charAt(peg$currPos))) {
                    s4 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$e24);
                    }
                  }
                }
              } else {
                s3 = peg$FAILED;
              }
              if (s3 !== peg$FAILED) {
                s2 = [s2, s3];
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
              s0 = input.substring(s0, peg$currPos);
            } else {
              s0 = s1;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 92) {
                s2 = peg$c21;
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e23);
                }
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$currPos;
                peg$silentFails++;
                if (peg$r1.test(input.charAt(peg$currPos))) {
                  s4 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e24);
                  }
                }
                peg$silentFails--;
                if (s4 === peg$FAILED) {
                  s3 = void 0;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
                if (s3 !== peg$FAILED) {
                  if (input.length > peg$currPos) {
                    s4 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$e2);
                    }
                  }
                  if (s4 !== peg$FAILED) {
                    s2 = [s2, s3, s4];
                    s1 = s2;
                  } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
              if (s1 !== peg$FAILED) {
                s0 = input.substring(s0, peg$currPos);
              } else {
                s0 = s1;
              }
            }
            return s0;
          }
          function peg$parsetoken() {
            var s0, s1, s2, s3;
            s0 = peg$parsemacro();
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$currPos;
              peg$silentFails++;
              if (peg$r2.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e25);
                }
              }
              peg$silentFails--;
              if (s2 === peg$FAILED) {
                s1 = void 0;
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$currPos;
                peg$silentFails++;
                s3 = peg$parsewhitespace_token();
                peg$silentFails--;
                if (s3 === peg$FAILED) {
                  s2 = void 0;
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
                if (s2 !== peg$FAILED) {
                  if (input.length > peg$currPos) {
                    s3 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$e2);
                    }
                  }
                  if (s3 !== peg$FAILED) {
                    s0 = s3;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
            return s0;
          }
          const DEFAULT_OPTIONS = {
            optional: { openBrace: "[", closeBrace: "]" },
            mandatory: { openBrace: "{", closeBrace: "}" }
          };
          function createNode(type, options2) {
            const computedOptions = DEFAULT_OPTIONS[type] || {};
            return { type, ...computedOptions, ...options2 };
          }
          function groupToStr(node) {
            if (typeof node !== "object" || !node) {
              return node;
            }
            if (node.type === "group") {
              return `{${node.content.map(groupToStr).join("")}}`;
            }
            return node;
          }
          peg$result = peg$startRuleFunction();
          if (peg$result !== peg$FAILED && peg$currPos === input.length) {
            return peg$result;
          } else {
            if (peg$result !== peg$FAILED && peg$currPos < input.length) {
              peg$fail(peg$endExpectation());
            }
            throw peg$buildStructuredError(
              peg$maxFailExpected,
              peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
              peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
            );
          }
        }
        return {
          SyntaxError: peg$SyntaxError,
          parse: peg$parse
        };
      }()
    );
    var _PgfkeysPegParser = (
      // Generated by Peggy 3.0.2.
      //
      // https://peggyjs.org/
      function() {
        function peg$subclass(child, parent) {
          function C() {
            this.constructor = child;
          }
          C.prototype = parent.prototype;
          child.prototype = new C();
        }
        function peg$SyntaxError(message, expected, found, location) {
          var self2 = Error.call(this, message);
          if (Object.setPrototypeOf) {
            Object.setPrototypeOf(self2, peg$SyntaxError.prototype);
          }
          self2.expected = expected;
          self2.found = found;
          self2.location = location;
          self2.name = "SyntaxError";
          return self2;
        }
        peg$subclass(peg$SyntaxError, Error);
        function peg$padEnd(str, targetLength, padString) {
          padString = padString || " ";
          if (str.length > targetLength) {
            return str;
          }
          targetLength -= str.length;
          padString += padString.repeat(targetLength);
          return str + padString.slice(0, targetLength);
        }
        peg$SyntaxError.prototype.format = function(sources) {
          var str = "Error: " + this.message;
          if (this.location) {
            var src = null;
            var k;
            for (k = 0; k < sources.length; k++) {
              if (sources[k].source === this.location.source) {
                src = sources[k].text.split(/\r\n|\n|\r/g);
                break;
              }
            }
            var s = this.location.start;
            var offset_s = this.location.source && typeof this.location.source.offset === "function" ? this.location.source.offset(s) : s;
            var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
            if (src) {
              var e = this.location.end;
              var filler = peg$padEnd("", offset_s.line.toString().length, " ");
              var line = src[s.line - 1];
              var last = s.line === e.line ? e.column : line.length + 1;
              var hatLen = last - s.column || 1;
              str += "\n --> " + loc + "\n" + filler + " |\n" + offset_s.line + " | " + line + "\n" + filler + " | " + peg$padEnd("", s.column - 1, " ") + peg$padEnd("", hatLen, "^");
            } else {
              str += "\n at " + loc;
            }
          }
          return str;
        };
        peg$SyntaxError.buildMessage = function(expected, found) {
          var DESCRIBE_EXPECTATION_FNS = {
            literal: function(expectation) {
              return '"' + literalEscape(expectation.text) + '"';
            },
            class: function(expectation) {
              var escapedParts = expectation.parts.map(function(part) {
                return Array.isArray(part) ? classEscape(part[0]) + "-" + classEscape(part[1]) : classEscape(part);
              });
              return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
            },
            any: function() {
              return "any character";
            },
            end: function() {
              return "end of input";
            },
            other: function(expectation) {
              return expectation.description;
            }
          };
          function hex(ch) {
            return ch.charCodeAt(0).toString(16).toUpperCase();
          }
          function literalEscape(s) {
            return s.replace(/\\/g, "\\\\").replace(/"/g, '\\"').replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(ch) {
              return "\\x0" + hex(ch);
            }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
              return "\\x" + hex(ch);
            });
          }
          function classEscape(s) {
            return s.replace(/\\/g, "\\\\").replace(/\]/g, "\\]").replace(/\^/g, "\\^").replace(/-/g, "\\-").replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(ch) {
              return "\\x0" + hex(ch);
            }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
              return "\\x" + hex(ch);
            });
          }
          function describeExpectation(expectation) {
            return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
          }
          function describeExpected(expected2) {
            var descriptions = expected2.map(describeExpectation);
            var i, j;
            descriptions.sort();
            if (descriptions.length > 0) {
              for (i = 1, j = 1; i < descriptions.length; i++) {
                if (descriptions[i - 1] !== descriptions[i]) {
                  descriptions[j] = descriptions[i];
                  j++;
                }
              }
              descriptions.length = j;
            }
            switch (descriptions.length) {
              case 1:
                return descriptions[0];
              case 2:
                return descriptions[0] + " or " + descriptions[1];
              default:
                return descriptions.slice(0, -1).join(", ") + ", or " + descriptions[descriptions.length - 1];
            }
          }
          function describeFound(found2) {
            return found2 ? '"' + literalEscape(found2) + '"' : "end of input";
          }
          return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
        };
        function peg$parse(input, options) {
          options = options !== void 0 ? options : {};
          var peg$FAILED = {};
          var peg$source = options.grammarSource;
          var peg$startRuleFunctions = { body: peg$parsebody };
          var peg$startRuleFunction = peg$parsebody;
          var peg$e0 = peg$anyExpectation();
          var peg$f0 = function() {
            return [];
          };
          var peg$f1 = function(rowItems, trailingComment) {
            return {
              itemParts: [],
              ...rowItems,
              trailingComment,
              trailingComma: true
            };
          };
          var peg$f2 = function(rowItems, trailingComment) {
            return { ...rowItems, trailingComment };
          };
          var peg$f3 = function(a, b) {
            return processItem(a, b);
          };
          var peg$f4 = function(b) {
            return processItem(null, b);
          };
          var peg$f5 = function(cell) {
            return { cell };
          };
          var peg$f6 = function() {
            return {};
          };
          var peg$f7 = function(part) {
            return part;
          };
          var peg$f8 = function(x) {
            return x;
          };
          var peg$f9 = function(space, x) {
            return {
              trailingComment: x,
              leadingParbreak: space.parbreak > 0
            };
          };
          var peg$f10 = function(list) {
            return {
              whitespace: list.filter((x) => options.isWhitespace(x)).length,
              parbreak: list.filter((x) => options.isParbreak(x)).length
            };
          };
          var peg$f11 = function() {
            return !options.allowParenGroups;
          };
          var peg$f12 = function(tok) {
            return options.isSameLineComment(tok);
          };
          var peg$f13 = function(tok) {
            return tok;
          };
          var peg$f14 = function(tok) {
            return options.isOwnLineComment(tok);
          };
          var peg$f15 = function(tok) {
            return tok;
          };
          var peg$f16 = function(tok) {
            return options.isWhitespace(tok);
          };
          var peg$f17 = function(tok) {
            return tok;
          };
          var peg$f18 = function(tok) {
            return options.isParbreak(tok);
          };
          var peg$f19 = function(tok) {
            return tok;
          };
          var peg$f20 = function(tok) {
            return options.isComma(tok);
          };
          var peg$f21 = function(tok) {
            return tok;
          };
          var peg$f22 = function(tok) {
            return options.isEquals(tok);
          };
          var peg$f23 = function(tok) {
            return tok;
          };
          var peg$f24 = function(tok) {
            return options.isChar(tok, "(");
          };
          var peg$f25 = function(tok) {
            return tok;
          };
          var peg$f26 = function(tok) {
            return options.isChar(tok, ")");
          };
          var peg$f27 = function(tok) {
            return tok;
          };
          var peg$currPos = 0;
          var peg$posDetailsCache = [{ line: 1, column: 1 }];
          var peg$maxFailPos = 0;
          var peg$maxFailExpected = [];
          var peg$silentFails = 0;
          var peg$result;
          if ("startRule" in options) {
            if (!(options.startRule in peg$startRuleFunctions)) {
              throw new Error(`Can't start parsing from rule "` + options.startRule + '".');
            }
            peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
          }
          function peg$anyExpectation() {
            return { type: "any" };
          }
          function peg$endExpectation() {
            return { type: "end" };
          }
          function peg$computePosDetails(pos) {
            var details = peg$posDetailsCache[pos];
            var p;
            if (details) {
              return details;
            } else {
              p = pos - 1;
              while (!peg$posDetailsCache[p]) {
                p--;
              }
              details = peg$posDetailsCache[p];
              details = {
                line: details.line,
                column: details.column
              };
              while (p < pos) {
                if (input.charCodeAt(p) === 10) {
                  details.line++;
                  details.column = 1;
                } else {
                  details.column++;
                }
                p++;
              }
              peg$posDetailsCache[pos] = details;
              return details;
            }
          }
          function peg$computeLocation(startPos, endPos, offset2) {
            var startPosDetails = peg$computePosDetails(startPos);
            var endPosDetails = peg$computePosDetails(endPos);
            var res = {
              source: peg$source,
              start: {
                offset: startPos,
                line: startPosDetails.line,
                column: startPosDetails.column
              },
              end: {
                offset: endPos,
                line: endPosDetails.line,
                column: endPosDetails.column
              }
            };
            return res;
          }
          function peg$fail(expected2) {
            if (peg$currPos < peg$maxFailPos) {
              return;
            }
            if (peg$currPos > peg$maxFailPos) {
              peg$maxFailPos = peg$currPos;
              peg$maxFailExpected = [];
            }
            peg$maxFailExpected.push(expected2);
          }
          function peg$buildStructuredError(expected2, found, location2) {
            return new peg$SyntaxError(
              peg$SyntaxError.buildMessage(expected2, found),
              expected2,
              found,
              location2
            );
          }
          function peg$parsebody() {
            var s0, s1, s2;
            s0 = [];
            s1 = peg$parsecomment_only_line();
            if (s1 === peg$FAILED) {
              s1 = peg$parseitem_with_end();
              if (s1 === peg$FAILED) {
                s1 = peg$parseitem_without_end();
              }
            }
            if (s1 !== peg$FAILED) {
              while (s1 !== peg$FAILED) {
                s0.push(s1);
                s1 = peg$parsecomment_only_line();
                if (s1 === peg$FAILED) {
                  s1 = peg$parseitem_with_end();
                  if (s1 === peg$FAILED) {
                    s1 = peg$parseitem_without_end();
                  }
                }
              }
            } else {
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = [];
              s2 = peg$parsewhitespace();
              while (s2 !== peg$FAILED) {
                s1.push(s2);
                s2 = peg$parsewhitespace();
              }
              s2 = peg$parseEOL();
              if (s2 !== peg$FAILED) {
                s0 = peg$f0();
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
            return s0;
          }
          function peg$parseitem_with_end() {
            var s0, s2, s4, s5, s6, s7, s8;
            s0 = peg$currPos;
            peg$parsewhitespace_or_parbreaks();
            s2 = peg$parserow_items();
            if (s2 === peg$FAILED) {
              s2 = null;
            }
            peg$parsewhitespace_or_parbreaks();
            s4 = peg$parseitem_sep();
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$parsewhitespace();
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parsewhitespace();
              }
              s6 = peg$parsetrailing_comment();
              if (s6 === peg$FAILED) {
                s6 = null;
              }
              s7 = [];
              s8 = peg$parsewhitespace();
              while (s8 !== peg$FAILED) {
                s7.push(s8);
                s8 = peg$parsewhitespace();
              }
              s0 = peg$f1(s2, s6);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parseitem_without_end() {
            var s0, s2, s3;
            s0 = peg$currPos;
            peg$parsewhitespace_or_parbreaks();
            s2 = peg$parserow_items();
            if (s2 !== peg$FAILED) {
              s3 = peg$parsetrailing_comment();
              if (s3 === peg$FAILED) {
                s3 = null;
              }
              s0 = peg$f2(s2, s3);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parserow_items() {
            var s0, s1, s2, s3;
            s0 = peg$currPos;
            s1 = peg$parseitem_part();
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$parseseparated_part();
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parseseparated_part();
              }
              s0 = peg$f3(s1, s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = [];
              s2 = peg$parseseparated_part();
              if (s2 !== peg$FAILED) {
                while (s2 !== peg$FAILED) {
                  s1.push(s2);
                  s2 = peg$parseseparated_part();
                }
              } else {
                s1 = peg$FAILED;
              }
              if (s1 !== peg$FAILED) {
                s1 = peg$f4(s1);
              }
              s0 = s1;
            }
            return s0;
          }
          function peg$parseseparated_part() {
            var s0, s1, s2, s3, s4;
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parseparbreak();
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$parseparbreak();
            }
            s2 = peg$parseequals();
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$parseparbreak();
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parseparbreak();
              }
              s4 = peg$parseitem_part();
              if (s4 !== peg$FAILED) {
                s0 = peg$f5(s4);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = [];
              s2 = peg$parseparbreak();
              while (s2 !== peg$FAILED) {
                s1.push(s2);
                s2 = peg$parseparbreak();
              }
              s2 = peg$parseequals();
              if (s2 !== peg$FAILED) {
                s0 = peg$f6();
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
            return s0;
          }
          function peg$parseitem_part() {
            var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parsewhitespace();
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$parsewhitespace();
            }
            s2 = peg$currPos;
            s3 = [];
            s4 = peg$parsenon_whitespace_non_parbreak_token();
            if (s4 === peg$FAILED) {
              s4 = peg$currPos;
              s5 = peg$parsewhitespace();
              if (s5 === peg$FAILED) {
                s5 = peg$parseparbreak();
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$currPos;
                peg$silentFails++;
                s7 = peg$currPos;
                s8 = [];
                s9 = peg$parsewhitespace();
                if (s9 === peg$FAILED) {
                  s9 = peg$parseparbreak();
                }
                while (s9 !== peg$FAILED) {
                  s8.push(s9);
                  s9 = peg$parsewhitespace();
                  if (s9 === peg$FAILED) {
                    s9 = peg$parseparbreak();
                  }
                }
                s9 = peg$parsenon_whitespace_non_parbreak_token();
                if (s9 !== peg$FAILED) {
                  s8 = [s8, s9];
                  s7 = s8;
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
                peg$silentFails--;
                if (s7 !== peg$FAILED) {
                  peg$currPos = s6;
                  s6 = void 0;
                } else {
                  s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                  s5 = [s5, s6];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            }
            if (s4 !== peg$FAILED) {
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parsenon_whitespace_non_parbreak_token();
                if (s4 === peg$FAILED) {
                  s4 = peg$currPos;
                  s5 = peg$parsewhitespace();
                  if (s5 === peg$FAILED) {
                    s5 = peg$parseparbreak();
                  }
                  if (s5 !== peg$FAILED) {
                    s6 = peg$currPos;
                    peg$silentFails++;
                    s7 = peg$currPos;
                    s8 = [];
                    s9 = peg$parsewhitespace();
                    if (s9 === peg$FAILED) {
                      s9 = peg$parseparbreak();
                    }
                    while (s9 !== peg$FAILED) {
                      s8.push(s9);
                      s9 = peg$parsewhitespace();
                      if (s9 === peg$FAILED) {
                        s9 = peg$parseparbreak();
                      }
                    }
                    s9 = peg$parsenon_whitespace_non_parbreak_token();
                    if (s9 !== peg$FAILED) {
                      s8 = [s8, s9];
                      s7 = s8;
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                    peg$silentFails--;
                    if (s7 !== peg$FAILED) {
                      peg$currPos = s6;
                      s6 = void 0;
                    } else {
                      s6 = peg$FAILED;
                    }
                    if (s6 !== peg$FAILED) {
                      s5 = [s5, s6];
                      s4 = s5;
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                }
              }
            } else {
              s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
              s2 = input.substring(s2, peg$currPos);
            } else {
              s2 = s3;
            }
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$parsewhitespace();
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parsewhitespace();
              }
              s0 = peg$f7(s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parsetrailing_comment() {
            var s0, s1, s2;
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parsewhitespace();
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$parsewhitespace();
            }
            s2 = peg$parsesame_line_comment();
            if (s2 !== peg$FAILED) {
              s0 = peg$f8(s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parsecomment_only_line() {
            var s0, s1, s2;
            s0 = peg$currPos;
            s1 = peg$parsewhitespace_or_parbreaks();
            s2 = peg$parseown_line_comment();
            if (s2 !== peg$FAILED) {
              s0 = peg$f9(s1, s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parsetoken() {
            var s0, s1, s2, s3;
            s0 = peg$currPos;
            s1 = peg$currPos;
            s2 = peg$currPos;
            peg$silentFails++;
            s3 = peg$parsenon_token();
            peg$silentFails--;
            if (s3 === peg$FAILED) {
              s2 = void 0;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
              if (input.length > peg$currPos) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e0);
                }
              }
              if (s3 !== peg$FAILED) {
                s2 = [s2, s3];
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
              s0 = input.substring(s0, peg$currPos);
            } else {
              s0 = s1;
            }
            return s0;
          }
          function peg$parsenon_whitespace_non_parbreak_token() {
            var s0, s1, s2, s3;
            s0 = peg$currPos;
            s1 = peg$currPos;
            s2 = peg$currPos;
            peg$silentFails++;
            s3 = peg$parsewhitespace();
            if (s3 === peg$FAILED) {
              s3 = peg$parseparbreak();
            }
            peg$silentFails--;
            if (s3 === peg$FAILED) {
              s2 = void 0;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parseparen_block();
              if (s3 === peg$FAILED) {
                s3 = peg$parsetoken();
              }
              if (s3 !== peg$FAILED) {
                s2 = [s2, s3];
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
              s0 = input.substring(s0, peg$currPos);
            } else {
              s0 = s1;
            }
            return s0;
          }
          function peg$parsenon_token() {
            var s0;
            s0 = peg$parseitem_sep();
            if (s0 === peg$FAILED) {
              s0 = peg$parseequals();
              if (s0 === peg$FAILED) {
                s0 = peg$parsetrailing_comment();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseown_line_comment();
                }
              }
            }
            return s0;
          }
          function peg$parsewhitespace_or_parbreaks() {
            var s0, s1, s2;
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parsewhitespace();
            if (s2 === peg$FAILED) {
              s2 = peg$parseparbreak();
            }
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$parsewhitespace();
              if (s2 === peg$FAILED) {
                s2 = peg$parseparbreak();
              }
            }
            s1 = peg$f10(s1);
            s0 = s1;
            return s0;
          }
          function peg$parseparen_block() {
            var s0, s1, s2, s3, s4, s5, s6, s7, s8;
            s0 = peg$currPos;
            s1 = peg$f11();
            if (s1) {
              s1 = peg$FAILED;
            } else {
              s1 = void 0;
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$currPos;
              s3 = peg$currPos;
              s4 = peg$parseopen_paren();
              if (s4 !== peg$FAILED) {
                s5 = [];
                s6 = peg$currPos;
                s7 = peg$currPos;
                peg$silentFails++;
                s8 = peg$parseclose_paren();
                peg$silentFails--;
                if (s8 === peg$FAILED) {
                  s7 = void 0;
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
                if (s7 !== peg$FAILED) {
                  if (input.length > peg$currPos) {
                    s8 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$e0);
                    }
                  }
                  if (s8 !== peg$FAILED) {
                    s7 = [s7, s8];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  s6 = peg$currPos;
                  s7 = peg$currPos;
                  peg$silentFails++;
                  s8 = peg$parseclose_paren();
                  peg$silentFails--;
                  if (s8 === peg$FAILED) {
                    s7 = void 0;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                  if (s7 !== peg$FAILED) {
                    if (input.length > peg$currPos) {
                      s8 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$e0);
                      }
                    }
                    if (s8 !== peg$FAILED) {
                      s7 = [s7, s8];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                }
                s6 = peg$parseclose_paren();
                if (s6 !== peg$FAILED) {
                  s4 = [s4, s5, s6];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
              if (s3 !== peg$FAILED) {
                s2 = input.substring(s2, peg$currPos);
              } else {
                s2 = s3;
              }
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parsesame_line_comment() {
            var s0, s1, s2;
            s0 = peg$currPos;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e0);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$f12(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s0 = peg$f13(s1);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parseown_line_comment() {
            var s0, s1, s2;
            s0 = peg$currPos;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e0);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$f14(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s0 = peg$f15(s1);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parsewhitespace() {
            var s0, s1, s2;
            s0 = peg$currPos;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e0);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$f16(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s0 = peg$f17(s1);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parseparbreak() {
            var s0, s1, s2;
            s0 = peg$currPos;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e0);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$f18(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s0 = peg$f19(s1);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parseitem_sep() {
            var s0, s1, s2;
            s0 = peg$currPos;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e0);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$f20(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s0 = peg$f21(s1);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parseequals() {
            var s0, s1, s2;
            s0 = peg$currPos;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e0);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$f22(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s0 = peg$f23(s1);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parseopen_paren() {
            var s0, s1, s2;
            s0 = peg$currPos;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e0);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$f24(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s0 = peg$f25(s1);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parseclose_paren() {
            var s0, s1, s2;
            s0 = peg$currPos;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e0);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$f26(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s0 = peg$f27(s1);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parseEOL() {
            var s0, s1;
            s0 = peg$currPos;
            peg$silentFails++;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e0);
              }
            }
            peg$silentFails--;
            if (s1 === peg$FAILED) {
              s0 = void 0;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function processItem(leadCell, otherCells) {
            const cells = [leadCell || []];
            for (const x of otherCells) {
              cells.push(x.cell || []);
            }
            return { itemParts: cells };
          }
          if (!options.isWhitespace) {
            try {
              Object.assign(options, {
                isChar: (node, char) => node.type === "string" && node.content === char,
                isComma(node) {
                  return node.type === "string" && node.content === ",";
                },
                isEquals(node) {
                  return node.type === "string" && node.content === "=";
                },
                isParbreak(node) {
                  return node.type === "parbreak";
                },
                isWhitespace(node) {
                  return node.type === "whitespace";
                },
                isSameLineComment: (node) => node.type === "comment" && node.sameline,
                isOwnLineComment: (node) => node.type === "comment" && !node.sameline,
                isComment: (node) => node.type === "comment",
                allowParenGroups: true
              });
            } catch (e) {
              console.warn("Error when initializing parser", e);
            }
          }
          peg$result = peg$startRuleFunction();
          if (peg$result !== peg$FAILED && peg$currPos === input.length) {
            return peg$result;
          } else {
            if (peg$result !== peg$FAILED && peg$currPos < input.length) {
              peg$fail(peg$endExpectation());
            }
            throw peg$buildStructuredError(
              peg$maxFailExpected,
              peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
              peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
            );
          }
        }
        return {
          SyntaxError: peg$SyntaxError,
          parse: peg$parse
        };
      }()
    );
    var _MacroSubstitutionPegParser = (
      // Generated by Peggy 3.0.2.
      //
      // https://peggyjs.org/
      function() {
        function peg$subclass(child, parent) {
          function C() {
            this.constructor = child;
          }
          C.prototype = parent.prototype;
          child.prototype = new C();
        }
        function peg$SyntaxError(message, expected, found, location) {
          var self2 = Error.call(this, message);
          if (Object.setPrototypeOf) {
            Object.setPrototypeOf(self2, peg$SyntaxError.prototype);
          }
          self2.expected = expected;
          self2.found = found;
          self2.location = location;
          self2.name = "SyntaxError";
          return self2;
        }
        peg$subclass(peg$SyntaxError, Error);
        function peg$padEnd(str, targetLength, padString) {
          padString = padString || " ";
          if (str.length > targetLength) {
            return str;
          }
          targetLength -= str.length;
          padString += padString.repeat(targetLength);
          return str + padString.slice(0, targetLength);
        }
        peg$SyntaxError.prototype.format = function(sources) {
          var str = "Error: " + this.message;
          if (this.location) {
            var src = null;
            var k;
            for (k = 0; k < sources.length; k++) {
              if (sources[k].source === this.location.source) {
                src = sources[k].text.split(/\r\n|\n|\r/g);
                break;
              }
            }
            var s = this.location.start;
            var offset_s = this.location.source && typeof this.location.source.offset === "function" ? this.location.source.offset(s) : s;
            var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
            if (src) {
              var e = this.location.end;
              var filler = peg$padEnd("", offset_s.line.toString().length, " ");
              var line = src[s.line - 1];
              var last = s.line === e.line ? e.column : line.length + 1;
              var hatLen = last - s.column || 1;
              str += "\n --> " + loc + "\n" + filler + " |\n" + offset_s.line + " | " + line + "\n" + filler + " | " + peg$padEnd("", s.column - 1, " ") + peg$padEnd("", hatLen, "^");
            } else {
              str += "\n at " + loc;
            }
          }
          return str;
        };
        peg$SyntaxError.buildMessage = function(expected, found) {
          var DESCRIBE_EXPECTATION_FNS = {
            literal: function(expectation) {
              return '"' + literalEscape(expectation.text) + '"';
            },
            class: function(expectation) {
              var escapedParts = expectation.parts.map(function(part) {
                return Array.isArray(part) ? classEscape(part[0]) + "-" + classEscape(part[1]) : classEscape(part);
              });
              return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
            },
            any: function() {
              return "any character";
            },
            end: function() {
              return "end of input";
            },
            other: function(expectation) {
              return expectation.description;
            }
          };
          function hex(ch) {
            return ch.charCodeAt(0).toString(16).toUpperCase();
          }
          function literalEscape(s) {
            return s.replace(/\\/g, "\\\\").replace(/"/g, '\\"').replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(ch) {
              return "\\x0" + hex(ch);
            }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
              return "\\x" + hex(ch);
            });
          }
          function classEscape(s) {
            return s.replace(/\\/g, "\\\\").replace(/\]/g, "\\]").replace(/\^/g, "\\^").replace(/-/g, "\\-").replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(ch) {
              return "\\x0" + hex(ch);
            }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
              return "\\x" + hex(ch);
            });
          }
          function describeExpectation(expectation) {
            return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
          }
          function describeExpected(expected2) {
            var descriptions = expected2.map(describeExpectation);
            var i, j;
            descriptions.sort();
            if (descriptions.length > 0) {
              for (i = 1, j = 1; i < descriptions.length; i++) {
                if (descriptions[i - 1] !== descriptions[i]) {
                  descriptions[j] = descriptions[i];
                  j++;
                }
              }
              descriptions.length = j;
            }
            switch (descriptions.length) {
              case 1:
                return descriptions[0];
              case 2:
                return descriptions[0] + " or " + descriptions[1];
              default:
                return descriptions.slice(0, -1).join(", ") + ", or " + descriptions[descriptions.length - 1];
            }
          }
          function describeFound(found2) {
            return found2 ? '"' + literalEscape(found2) + '"' : "end of input";
          }
          return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
        };
        function peg$parse(input, options) {
          options = options !== void 0 ? options : {};
          var peg$FAILED = {};
          var peg$source = options.grammarSource;
          var peg$startRuleFunctions = { body: peg$parsebody };
          var peg$startRuleFunction = peg$parsebody;
          var peg$e0 = peg$anyExpectation();
          var peg$f0 = function(e) {
            return [].concat(...e).filter((n) => !!n);
          };
          var peg$f1 = function() {
            return [];
          };
          var peg$f2 = function(tok) {
            return options.isHash(tok);
          };
          var peg$f3 = function(tok) {
            return tok;
          };
          var peg$f4 = function(tok) {
            return options.isNumber(tok);
          };
          var peg$f5 = function(tok) {
            return tok;
          };
          var peg$f6 = function() {
            return { type: "string", content: "#" };
          };
          var peg$f7 = function(num) {
            const split = options.splitNumber(num);
            return [{ type: "hash_number", number: split.number }, split.rest];
          };
          var peg$currPos = 0;
          var peg$posDetailsCache = [{ line: 1, column: 1 }];
          var peg$maxFailPos = 0;
          var peg$maxFailExpected = [];
          var peg$silentFails = 0;
          var peg$result;
          if ("startRule" in options) {
            if (!(options.startRule in peg$startRuleFunctions)) {
              throw new Error(`Can't start parsing from rule "` + options.startRule + '".');
            }
            peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
          }
          function peg$anyExpectation() {
            return { type: "any" };
          }
          function peg$endExpectation() {
            return { type: "end" };
          }
          function peg$computePosDetails(pos) {
            var details = peg$posDetailsCache[pos];
            var p;
            if (details) {
              return details;
            } else {
              p = pos - 1;
              while (!peg$posDetailsCache[p]) {
                p--;
              }
              details = peg$posDetailsCache[p];
              details = {
                line: details.line,
                column: details.column
              };
              while (p < pos) {
                if (input.charCodeAt(p) === 10) {
                  details.line++;
                  details.column = 1;
                } else {
                  details.column++;
                }
                p++;
              }
              peg$posDetailsCache[pos] = details;
              return details;
            }
          }
          function peg$computeLocation(startPos, endPos, offset2) {
            var startPosDetails = peg$computePosDetails(startPos);
            var endPosDetails = peg$computePosDetails(endPos);
            var res = {
              source: peg$source,
              start: {
                offset: startPos,
                line: startPosDetails.line,
                column: startPosDetails.column
              },
              end: {
                offset: endPos,
                line: endPosDetails.line,
                column: endPosDetails.column
              }
            };
            return res;
          }
          function peg$fail(expected2) {
            if (peg$currPos < peg$maxFailPos) {
              return;
            }
            if (peg$currPos > peg$maxFailPos) {
              peg$maxFailPos = peg$currPos;
              peg$maxFailExpected = [];
            }
            peg$maxFailExpected.push(expected2);
          }
          function peg$buildStructuredError(expected2, found, location2) {
            return new peg$SyntaxError(
              peg$SyntaxError.buildMessage(expected2, found),
              expected2,
              found,
              location2
            );
          }
          function peg$parsebody() {
            var s0, s1, s2;
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parsedouble_hash();
            if (s2 === peg$FAILED) {
              s2 = peg$parsehash_number();
              if (s2 === peg$FAILED) {
                if (input.length > peg$currPos) {
                  s2 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e0);
                  }
                }
              }
            }
            if (s2 !== peg$FAILED) {
              while (s2 !== peg$FAILED) {
                s1.push(s2);
                s2 = peg$parsedouble_hash();
                if (s2 === peg$FAILED) {
                  s2 = peg$parsehash_number();
                  if (s2 === peg$FAILED) {
                    if (input.length > peg$currPos) {
                      s2 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s2 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$e0);
                      }
                    }
                  }
                }
              }
            } else {
              s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
              s1 = peg$f0(s1);
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseEOL();
              if (s1 !== peg$FAILED) {
                s1 = peg$f1();
              }
              s0 = s1;
            }
            return s0;
          }
          function peg$parsehash() {
            var s0, s1, s2;
            s0 = peg$currPos;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e0);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$f2(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s0 = peg$f3(s1);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parsenumber() {
            var s0, s1, s2;
            s0 = peg$currPos;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e0);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$f4(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s0 = peg$f5(s1);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parsedouble_hash() {
            var s0, s1, s2;
            s0 = peg$currPos;
            s1 = peg$parsehash();
            if (s1 !== peg$FAILED) {
              s2 = peg$parsehash();
              if (s2 !== peg$FAILED) {
                s0 = peg$f6();
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parsehash_number() {
            var s0, s1, s2;
            s0 = peg$currPos;
            s1 = peg$parsehash();
            if (s1 !== peg$FAILED) {
              s2 = peg$parsenumber();
              if (s2 !== peg$FAILED) {
                s0 = peg$f7(s2);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parseEOL() {
            var s0, s1;
            s0 = peg$currPos;
            peg$silentFails++;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e0);
              }
            }
            peg$silentFails--;
            if (s1 === peg$FAILED) {
              s0 = void 0;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          if (!options.isHash) {
            try {
              Object.assign(options, {
                isHash: (node) => node.type === "string" && node.content === "#",
                isNumber: (node) => node.type === "string" && 0 < +node.content.charAt(0),
                splitNumber: (node) => {
                  const number = +node.content.charAt(0);
                  if (node.content.length > 1) {
                    return {
                      number,
                      rest: {
                        type: "string",
                        content: node.content.slice(1)
                      }
                    };
                  }
                  return { number };
                }
              });
            } catch (e) {
              console.warn("Error when initializing parser", e);
            }
          }
          peg$result = peg$startRuleFunction();
          if (peg$result !== peg$FAILED && peg$currPos === input.length) {
            return peg$result;
          } else {
            if (peg$result !== peg$FAILED && peg$currPos < input.length) {
              peg$fail(peg$endExpectation());
            }
            throw peg$buildStructuredError(
              peg$maxFailExpected,
              peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
              peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
            );
          }
        }
        return {
          SyntaxError: peg$SyntaxError,
          parse: peg$parse
        };
      }()
    );
    var _LigaturesPegParser = (
      // Generated by Peggy 3.0.2.
      //
      // https://peggyjs.org/
      function() {
        function peg$subclass(child, parent) {
          function C() {
            this.constructor = child;
          }
          C.prototype = parent.prototype;
          child.prototype = new C();
        }
        function peg$SyntaxError(message, expected, found, location) {
          var self2 = Error.call(this, message);
          if (Object.setPrototypeOf) {
            Object.setPrototypeOf(self2, peg$SyntaxError.prototype);
          }
          self2.expected = expected;
          self2.found = found;
          self2.location = location;
          self2.name = "SyntaxError";
          return self2;
        }
        peg$subclass(peg$SyntaxError, Error);
        function peg$padEnd(str, targetLength, padString) {
          padString = padString || " ";
          if (str.length > targetLength) {
            return str;
          }
          targetLength -= str.length;
          padString += padString.repeat(targetLength);
          return str + padString.slice(0, targetLength);
        }
        peg$SyntaxError.prototype.format = function(sources) {
          var str = "Error: " + this.message;
          if (this.location) {
            var src = null;
            var k;
            for (k = 0; k < sources.length; k++) {
              if (sources[k].source === this.location.source) {
                src = sources[k].text.split(/\r\n|\n|\r/g);
                break;
              }
            }
            var s = this.location.start;
            var offset_s = this.location.source && typeof this.location.source.offset === "function" ? this.location.source.offset(s) : s;
            var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
            if (src) {
              var e = this.location.end;
              var filler = peg$padEnd("", offset_s.line.toString().length, " ");
              var line = src[s.line - 1];
              var last = s.line === e.line ? e.column : line.length + 1;
              var hatLen = last - s.column || 1;
              str += "\n --> " + loc + "\n" + filler + " |\n" + offset_s.line + " | " + line + "\n" + filler + " | " + peg$padEnd("", s.column - 1, " ") + peg$padEnd("", hatLen, "^");
            } else {
              str += "\n at " + loc;
            }
          }
          return str;
        };
        peg$SyntaxError.buildMessage = function(expected, found) {
          var DESCRIBE_EXPECTATION_FNS = {
            literal: function(expectation) {
              return '"' + literalEscape(expectation.text) + '"';
            },
            class: function(expectation) {
              var escapedParts = expectation.parts.map(function(part) {
                return Array.isArray(part) ? classEscape(part[0]) + "-" + classEscape(part[1]) : classEscape(part);
              });
              return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
            },
            any: function() {
              return "any character";
            },
            end: function() {
              return "end of input";
            },
            other: function(expectation) {
              return expectation.description;
            }
          };
          function hex(ch) {
            return ch.charCodeAt(0).toString(16).toUpperCase();
          }
          function literalEscape(s) {
            return s.replace(/\\/g, "\\\\").replace(/"/g, '\\"').replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(ch) {
              return "\\x0" + hex(ch);
            }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
              return "\\x" + hex(ch);
            });
          }
          function classEscape(s) {
            return s.replace(/\\/g, "\\\\").replace(/\]/g, "\\]").replace(/\^/g, "\\^").replace(/-/g, "\\-").replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(ch) {
              return "\\x0" + hex(ch);
            }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
              return "\\x" + hex(ch);
            });
          }
          function describeExpectation(expectation) {
            return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
          }
          function describeExpected(expected2) {
            var descriptions = expected2.map(describeExpectation);
            var i, j;
            descriptions.sort();
            if (descriptions.length > 0) {
              for (i = 1, j = 1; i < descriptions.length; i++) {
                if (descriptions[i - 1] !== descriptions[i]) {
                  descriptions[j] = descriptions[i];
                  j++;
                }
              }
              descriptions.length = j;
            }
            switch (descriptions.length) {
              case 1:
                return descriptions[0];
              case 2:
                return descriptions[0] + " or " + descriptions[1];
              default:
                return descriptions.slice(0, -1).join(", ") + ", or " + descriptions[descriptions.length - 1];
            }
          }
          function describeFound(found2) {
            return found2 ? '"' + literalEscape(found2) + '"' : "end of input";
          }
          return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
        };
        function peg$parse(input, options) {
          options = options !== void 0 ? options : {};
          var peg$FAILED = {};
          var peg$source = options.grammarSource;
          var peg$startRuleFunctions = { body: peg$parsebody };
          var peg$startRuleFunction = peg$parsebody;
          var peg$e0 = peg$anyExpectation();
          var peg$f0 = function(e) {
            return [].concat(...e).filter((n) => !!n);
          };
          var peg$f1 = function() {
            return [];
          };
          var peg$f2 = function(toks) {
            return options.isRecognized(toks);
          };
          var peg$f3 = function(toks) {
            return options.isRecognized(toks);
          };
          var peg$f4 = function(tok1, tok2) {
            const split = options.split(tok2);
            return options.isRecognized([tok1, split[0]]);
          };
          var peg$f5 = function(tok1, tok2) {
            const split = options.split(tok2);
            return [options.isRecognized([tok1, split[0]]), split[1]];
          };
          var peg$f6 = function(tok1, tok2) {
            return options.isRecognized([tok1, tok2]);
          };
          var peg$f7 = function(tok1, tok2) {
            return options.isRecognized([tok1, tok2]);
          };
          var peg$f8 = function(toks) {
            return options.isRecognized(toks);
          };
          var peg$f9 = function(toks) {
            return options.isRecognized(toks);
          };
          var peg$f10 = function(tok) {
            return options.isRecognized([tok]);
          };
          var peg$f11 = function(tok) {
            return options.isRecognized([tok]);
          };
          var peg$f12 = function(tok) {
            return options.isMacro(tok);
          };
          var peg$f13 = function(tok) {
            return tok;
          };
          var peg$f14 = function(tok) {
            return options.isWhitespace(tok);
          };
          var peg$f15 = function(tok) {
            return tok;
          };
          var peg$f16 = function(tok) {
            return options.isSplitable(tok);
          };
          var peg$f17 = function(tok) {
            return tok;
          };
          var peg$currPos = 0;
          var peg$posDetailsCache = [{ line: 1, column: 1 }];
          var peg$maxFailPos = 0;
          var peg$maxFailExpected = [];
          var peg$silentFails = 0;
          var peg$result;
          if ("startRule" in options) {
            if (!(options.startRule in peg$startRuleFunctions)) {
              throw new Error(`Can't start parsing from rule "` + options.startRule + '".');
            }
            peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
          }
          function peg$anyExpectation() {
            return { type: "any" };
          }
          function peg$endExpectation() {
            return { type: "end" };
          }
          function peg$computePosDetails(pos) {
            var details = peg$posDetailsCache[pos];
            var p;
            if (details) {
              return details;
            } else {
              p = pos - 1;
              while (!peg$posDetailsCache[p]) {
                p--;
              }
              details = peg$posDetailsCache[p];
              details = {
                line: details.line,
                column: details.column
              };
              while (p < pos) {
                if (input.charCodeAt(p) === 10) {
                  details.line++;
                  details.column = 1;
                } else {
                  details.column++;
                }
                p++;
              }
              peg$posDetailsCache[pos] = details;
              return details;
            }
          }
          function peg$computeLocation(startPos, endPos, offset2) {
            var startPosDetails = peg$computePosDetails(startPos);
            var endPosDetails = peg$computePosDetails(endPos);
            var res = {
              source: peg$source,
              start: {
                offset: startPos,
                line: startPosDetails.line,
                column: startPosDetails.column
              },
              end: {
                offset: endPos,
                line: endPosDetails.line,
                column: endPosDetails.column
              }
            };
            return res;
          }
          function peg$fail(expected2) {
            if (peg$currPos < peg$maxFailPos) {
              return;
            }
            if (peg$currPos > peg$maxFailPos) {
              peg$maxFailPos = peg$currPos;
              peg$maxFailExpected = [];
            }
            peg$maxFailExpected.push(expected2);
          }
          function peg$buildStructuredError(expected2, found, location2) {
            return new peg$SyntaxError(
              peg$SyntaxError.buildMessage(expected2, found),
              expected2,
              found,
              location2
            );
          }
          function peg$parsebody() {
            var s0, s1, s2;
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parsetriple_ligature();
            if (s2 === peg$FAILED) {
              s2 = peg$parsedouble_ligature();
              if (s2 === peg$FAILED) {
                s2 = peg$parsemono_ligature();
                if (s2 === peg$FAILED) {
                  if (input.length > peg$currPos) {
                    s2 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$e0);
                    }
                  }
                }
              }
            }
            if (s2 !== peg$FAILED) {
              while (s2 !== peg$FAILED) {
                s1.push(s2);
                s2 = peg$parsetriple_ligature();
                if (s2 === peg$FAILED) {
                  s2 = peg$parsedouble_ligature();
                  if (s2 === peg$FAILED) {
                    s2 = peg$parsemono_ligature();
                    if (s2 === peg$FAILED) {
                      if (input.length > peg$currPos) {
                        s2 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$e0);
                        }
                      }
                    }
                  }
                }
              }
            } else {
              s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
              s1 = peg$f0(s1);
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseEOL();
              if (s1 !== peg$FAILED) {
                s1 = peg$f1();
              }
              s0 = s1;
            }
            return s0;
          }
          function peg$parsetriple_ligature() {
            var s0, s1, s2, s3, s4;
            s0 = peg$currPos;
            s1 = peg$currPos;
            if (input.length > peg$currPos) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e0);
              }
            }
            if (s2 !== peg$FAILED) {
              if (input.length > peg$currPos) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e0);
                }
              }
              if (s3 !== peg$FAILED) {
                if (input.length > peg$currPos) {
                  s4 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e0);
                  }
                }
                if (s4 !== peg$FAILED) {
                  s2 = [s2, s3, s4];
                  s1 = s2;
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$f2(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s0 = peg$f3(s1);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parsedouble_ligature() {
            var s0;
            s0 = peg$parsedouble_macro_ligature();
            if (s0 === peg$FAILED) {
              s0 = peg$parsedouble_macro_ligature_extracted();
              if (s0 === peg$FAILED) {
                s0 = peg$parsedouble_char_ligature();
              }
            }
            return s0;
          }
          function peg$parsedouble_macro_ligature_extracted() {
            var s0, s1, s2, s3, s4;
            s0 = peg$currPos;
            s1 = peg$parsemacro();
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$parsewhitespace();
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parsewhitespace();
              }
              s3 = peg$parsesplitable();
              if (s3 !== peg$FAILED) {
                s4 = peg$f4(s1, s3);
                if (s4) {
                  s4 = void 0;
                } else {
                  s4 = peg$FAILED;
                }
                if (s4 !== peg$FAILED) {
                  s0 = peg$f5(s1, s3);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parsedouble_macro_ligature() {
            var s0, s1, s2, s3, s4;
            s0 = peg$currPos;
            s1 = peg$parsemacro();
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$parsewhitespace();
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parsewhitespace();
              }
              if (input.length > peg$currPos) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e0);
                }
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$f6(s1, s3);
                if (s4) {
                  s4 = void 0;
                } else {
                  s4 = peg$FAILED;
                }
                if (s4 !== peg$FAILED) {
                  s0 = peg$f7(s1, s3);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parsedouble_char_ligature() {
            var s0, s1, s2, s3;
            s0 = peg$currPos;
            s1 = peg$currPos;
            if (input.length > peg$currPos) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e0);
              }
            }
            if (s2 !== peg$FAILED) {
              if (input.length > peg$currPos) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e0);
                }
              }
              if (s3 !== peg$FAILED) {
                s2 = [s2, s3];
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$f8(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s0 = peg$f9(s1);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parsemono_ligature() {
            var s0, s1, s2;
            s0 = peg$currPos;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e0);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$f10(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s0 = peg$f11(s1);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parsemacro() {
            var s0, s1, s2;
            s0 = peg$currPos;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e0);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$f12(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s0 = peg$f13(s1);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parsewhitespace() {
            var s0, s1, s2;
            s0 = peg$currPos;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e0);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$f14(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s0 = peg$f15(s1);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parsesplitable() {
            var s0, s1, s2;
            s0 = peg$currPos;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e0);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$f16(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s0 = peg$f17(s1);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parseEOL() {
            var s0, s1;
            s0 = peg$currPos;
            peg$silentFails++;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e0);
              }
            }
            peg$silentFails--;
            if (s1 === peg$FAILED) {
              s0 = void 0;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          if (!options.isWhitespace) {
            try {
              Object.assign(options, {
                isMacro: (node) => node.type === "macro",
                isWhitespace: (node) => node.type === "whitespace",
                isRecognized: (nodes) => {
                  if (nodes.length == 2 && nodes[0].content === "^" && nodes[1].content === "o") {
                    return { type: "string", content: "\xF4" };
                  }
                  return null;
                },
                isSplitable: (node) => node.type === "string" && node.content.length > 1,
                split: (node) => [
                  { type: "string", content: node.content.charAt(0) },
                  { type: "string", content: node.content.slice(1) }
                ]
              });
            } catch (e) {
              console.warn("Error when initializing parser", e);
            }
          }
          peg$result = peg$startRuleFunction();
          if (peg$result !== peg$FAILED && peg$currPos === input.length) {
            return peg$result;
          } else {
            if (peg$result !== peg$FAILED && peg$currPos < input.length) {
              peg$fail(peg$endExpectation());
            }
            throw peg$buildStructuredError(
              peg$maxFailExpected,
              peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
              peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
            );
          }
        }
        return {
          SyntaxError: peg$SyntaxError,
          parse: peg$parse
        };
      }()
    );
    var _XColorPegParser = (
      // Generated by Peggy 3.0.2.
      //
      // https://peggyjs.org/
      function() {
        function peg$subclass(child, parent) {
          function C() {
            this.constructor = child;
          }
          C.prototype = parent.prototype;
          child.prototype = new C();
        }
        function peg$SyntaxError(message, expected, found, location) {
          var self2 = Error.call(this, message);
          if (Object.setPrototypeOf) {
            Object.setPrototypeOf(self2, peg$SyntaxError.prototype);
          }
          self2.expected = expected;
          self2.found = found;
          self2.location = location;
          self2.name = "SyntaxError";
          return self2;
        }
        peg$subclass(peg$SyntaxError, Error);
        function peg$padEnd(str, targetLength, padString) {
          padString = padString || " ";
          if (str.length > targetLength) {
            return str;
          }
          targetLength -= str.length;
          padString += padString.repeat(targetLength);
          return str + padString.slice(0, targetLength);
        }
        peg$SyntaxError.prototype.format = function(sources) {
          var str = "Error: " + this.message;
          if (this.location) {
            var src = null;
            var k;
            for (k = 0; k < sources.length; k++) {
              if (sources[k].source === this.location.source) {
                src = sources[k].text.split(/\r\n|\n|\r/g);
                break;
              }
            }
            var s = this.location.start;
            var offset_s = this.location.source && typeof this.location.source.offset === "function" ? this.location.source.offset(s) : s;
            var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
            if (src) {
              var e = this.location.end;
              var filler = peg$padEnd("", offset_s.line.toString().length, " ");
              var line = src[s.line - 1];
              var last = s.line === e.line ? e.column : line.length + 1;
              var hatLen = last - s.column || 1;
              str += "\n --> " + loc + "\n" + filler + " |\n" + offset_s.line + " | " + line + "\n" + filler + " | " + peg$padEnd("", s.column - 1, " ") + peg$padEnd("", hatLen, "^");
            } else {
              str += "\n at " + loc;
            }
          }
          return str;
        };
        peg$SyntaxError.buildMessage = function(expected, found) {
          var DESCRIBE_EXPECTATION_FNS = {
            literal: function(expectation) {
              return '"' + literalEscape(expectation.text) + '"';
            },
            class: function(expectation) {
              var escapedParts = expectation.parts.map(function(part) {
                return Array.isArray(part) ? classEscape(part[0]) + "-" + classEscape(part[1]) : classEscape(part);
              });
              return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
            },
            any: function() {
              return "any character";
            },
            end: function() {
              return "end of input";
            },
            other: function(expectation) {
              return expectation.description;
            }
          };
          function hex(ch) {
            return ch.charCodeAt(0).toString(16).toUpperCase();
          }
          function literalEscape(s) {
            return s.replace(/\\/g, "\\\\").replace(/"/g, '\\"').replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(ch) {
              return "\\x0" + hex(ch);
            }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
              return "\\x" + hex(ch);
            });
          }
          function classEscape(s) {
            return s.replace(/\\/g, "\\\\").replace(/\]/g, "\\]").replace(/\^/g, "\\^").replace(/-/g, "\\-").replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(ch) {
              return "\\x0" + hex(ch);
            }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
              return "\\x" + hex(ch);
            });
          }
          function describeExpectation(expectation) {
            return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
          }
          function describeExpected(expected2) {
            var descriptions = expected2.map(describeExpectation);
            var i, j;
            descriptions.sort();
            if (descriptions.length > 0) {
              for (i = 1, j = 1; i < descriptions.length; i++) {
                if (descriptions[i - 1] !== descriptions[i]) {
                  descriptions[j] = descriptions[i];
                  j++;
                }
              }
              descriptions.length = j;
            }
            switch (descriptions.length) {
              case 1:
                return descriptions[0];
              case 2:
                return descriptions[0] + " or " + descriptions[1];
              default:
                return descriptions.slice(0, -1).join(", ") + ", or " + descriptions[descriptions.length - 1];
            }
          }
          function describeFound(found2) {
            return found2 ? '"' + literalEscape(found2) + '"' : "end of input";
          }
          return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
        };
        function peg$parse(input, options) {
          options = options !== void 0 ? options : {};
          var peg$FAILED = {};
          var peg$source = options.grammarSource;
          var peg$startRuleFunctions = { start: peg$parsestart };
          var peg$startRuleFunction = peg$parsestart;
          var peg$c0 = ";";
          var peg$c1 = ",";
          var peg$c2 = ":";
          var peg$c3 = "/";
          var peg$c4 = ">";
          var peg$c5 = "!";
          var peg$c6 = ".";
          var peg$c7 = "!![";
          var peg$c8 = "]";
          var peg$c9 = "!!";
          var peg$c10 = "+";
          var peg$c11 = "-";
          var peg$r0 = /^[a-zA-Z0-9]/;
          var peg$r1 = /^[0-9]/;
          var peg$r2 = /^[ \t\n\r]/;
          var peg$r3 = /^[0-9a-fA-F]/;
          var peg$e0 = peg$anyExpectation();
          var peg$e1 = peg$literalExpectation(";", false);
          var peg$e2 = peg$literalExpectation(",", false);
          var peg$e3 = peg$otherExpectation("model list");
          var peg$e4 = peg$literalExpectation(":", false);
          var peg$e5 = peg$literalExpectation("/", false);
          var peg$e6 = peg$otherExpectation("model");
          var peg$e7 = peg$otherExpectation("color spec list");
          var peg$e8 = peg$otherExpectation("color spec");
          var peg$e9 = peg$otherExpectation("color");
          var peg$e10 = peg$otherExpectation("function expression");
          var peg$e11 = peg$literalExpectation(">", false);
          var peg$e12 = peg$otherExpectation("function");
          var peg$e13 = peg$otherExpectation("extended expression");
          var peg$e14 = peg$otherExpectation("core model");
          var peg$e15 = peg$otherExpectation("expr");
          var peg$e16 = peg$literalExpectation("!", false);
          var peg$e17 = peg$otherExpectation("mix expr");
          var peg$e18 = peg$otherExpectation("name");
          var peg$e19 = peg$literalExpectation(".", false);
          var peg$e20 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"]], false, false);
          var peg$e21 = peg$otherExpectation("postfix");
          var peg$e22 = peg$literalExpectation("!![", false);
          var peg$e23 = peg$literalExpectation("]", false);
          var peg$e24 = peg$literalExpectation("!!", false);
          var peg$e25 = peg$otherExpectation("prefix");
          var peg$e26 = peg$otherExpectation("plus");
          var peg$e27 = peg$literalExpectation("+", false);
          var peg$e28 = peg$otherExpectation("minus");
          var peg$e29 = peg$literalExpectation("-", false);
          var peg$e30 = peg$otherExpectation("num");
          var peg$e31 = peg$classExpectation([["0", "9"]], false, false);
          var peg$e32 = peg$otherExpectation("positive float");
          var peg$e33 = peg$otherExpectation("divisor");
          var peg$e34 = peg$otherExpectation("int");
          var peg$e36 = peg$classExpectation([" ", "	", "\n", "\r"], false, false);
          var peg$e37 = peg$classExpectation([["0", "9"], ["a", "f"], ["A", "F"]], false, false);
          var peg$f0 = function(m) {
            return m;
          };
          var peg$f1 = function(m) {
            return m;
          };
          var peg$f2 = function(m) {
            return m;
          };
          var peg$f3 = function(m) {
            return m;
          };
          var peg$f4 = function(m) {
            return m;
          };
          var peg$f5 = function(a) {
            return { type: "invalid_spec", content: a };
          };
          var peg$f6 = function(f, c) {
            return c;
          };
          var peg$f7 = function(f, r) {
            return { type: "color_set", content: [f].concat(r) };
          };
          var peg$f8 = function(n, s) {
            return { type: "color_set_item", name: n, spec_list: s };
          };
          var peg$f9 = function(c, m) {
            return { type: "model_list", contents: m, core_model: c };
          };
          var peg$f10 = function(m) {
            return { type: "model_list", contents: m, core_model: null };
          };
          var peg$f11 = function(m, a) {
            return a;
          };
          var peg$f12 = function(m, r) {
            return [m].concat(r);
          };
          var peg$f13 = function(s, a) {
            return a;
          };
          var peg$f14 = function(s, r) {
            return { type: "spec_list", content: [s].concat(r) };
          };
          var peg$f15 = function(c) {
            return { type: "hex_spec", content: [c] };
          };
          var peg$f16 = function(c, d) {
            return d;
          };
          var peg$f17 = function(c, d) {
            return d;
          };
          var peg$f18 = function(c, r) {
            return { type: "num_spec", content: r ? [c].concat(r) : [c] };
          };
          var peg$f19 = function(c, fs) {
            return { type: "color", color: c, functions: fs };
          };
          var peg$f20 = function(f, n) {
            return n;
          };
          var peg$f21 = function(f, args) {
            return { type: "function", name: f, args };
          };
          var peg$f22 = function(core, d, e, es) {
            return {
              type: "extended_expr",
              core_model: core,
              div: d,
              expressions: [e].concat(es)
            };
          };
          var peg$f23 = function(core, e, es) {
            return {
              type: "extended_expr",
              core_model: core,
              div: null,
              expressions: [e].concat(es)
            };
          };
          var peg$f24 = function(e, d) {
            return { type: "weighted_expr", color: e, weight: d };
          };
          var peg$f25 = function(e) {
            return e;
          };
          var peg$f26 = function(p, n, e, po) {
            return {
              type: "expr",
              prefix: p,
              name: n,
              mix_expr: e,
              postfix: po
            };
          };
          var peg$f27 = function(p, n) {
            return { type: "complete_mix", mix_percent: p, name: n };
          };
          var peg$f28 = function(p) {
            return { type: "partial_mix", mix_percent: p };
          };
          var peg$f29 = function(c, p) {
            return c.concat(p || []);
          };
          var peg$f30 = function(n) {
            return { type: "postfix", num: n };
          };
          var peg$f31 = function(p) {
            return { type: "postfix", plusses: p };
          };
          var peg$f32 = function(n) {
            return parseInt(n, 10);
          };
          var peg$f33 = function(n) {
            return parseFloat(n);
          };
          var peg$f34 = function(n) {
            return n;
          };
          var peg$f35 = function(n) {
            return -n;
          };
          var peg$f36 = function(m, n) {
            return m ? -n : n;
          };
          var peg$f37 = function(h) {
            return h.toUpperCase();
          };
          var peg$currPos = 0;
          var peg$posDetailsCache = [{ line: 1, column: 1 }];
          var peg$maxFailPos = 0;
          var peg$maxFailExpected = [];
          var peg$silentFails = 0;
          var peg$result;
          if ("startRule" in options) {
            if (!(options.startRule in peg$startRuleFunctions)) {
              throw new Error(`Can't start parsing from rule "` + options.startRule + '".');
            }
            peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
          }
          function peg$literalExpectation(text2, ignoreCase) {
            return { type: "literal", text: text2, ignoreCase };
          }
          function peg$classExpectation(parts, inverted, ignoreCase) {
            return { type: "class", parts, inverted, ignoreCase };
          }
          function peg$anyExpectation() {
            return { type: "any" };
          }
          function peg$endExpectation() {
            return { type: "end" };
          }
          function peg$otherExpectation(description) {
            return { type: "other", description };
          }
          function peg$computePosDetails(pos) {
            var details = peg$posDetailsCache[pos];
            var p;
            if (details) {
              return details;
            } else {
              p = pos - 1;
              while (!peg$posDetailsCache[p]) {
                p--;
              }
              details = peg$posDetailsCache[p];
              details = {
                line: details.line,
                column: details.column
              };
              while (p < pos) {
                if (input.charCodeAt(p) === 10) {
                  details.line++;
                  details.column = 1;
                } else {
                  details.column++;
                }
                p++;
              }
              peg$posDetailsCache[pos] = details;
              return details;
            }
          }
          function peg$computeLocation(startPos, endPos, offset2) {
            var startPosDetails = peg$computePosDetails(startPos);
            var endPosDetails = peg$computePosDetails(endPos);
            var res = {
              source: peg$source,
              start: {
                offset: startPos,
                line: startPosDetails.line,
                column: startPosDetails.column
              },
              end: {
                offset: endPos,
                line: endPosDetails.line,
                column: endPosDetails.column
              }
            };
            return res;
          }
          function peg$fail(expected2) {
            if (peg$currPos < peg$maxFailPos) {
              return;
            }
            if (peg$currPos > peg$maxFailPos) {
              peg$maxFailPos = peg$currPos;
              peg$maxFailExpected = [];
            }
            peg$maxFailExpected.push(expected2);
          }
          function peg$buildStructuredError(expected2, found, location2) {
            return new peg$SyntaxError(
              peg$SyntaxError.buildMessage(expected2, found),
              expected2,
              found,
              location2
            );
          }
          function peg$parsestart() {
            var s0, s1, s2, s3;
            s0 = peg$currPos;
            s1 = peg$parsespec();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseEOL();
              if (s2 !== peg$FAILED) {
                s0 = peg$f0(s1);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parsespec_list();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseEOL();
                if (s2 !== peg$FAILED) {
                  s0 = peg$f1(s1);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parsecolor();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseEOL();
                  if (s2 !== peg$FAILED) {
                    s0 = peg$f2(s1);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parsemodel_list();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parseEOL();
                    if (s2 !== peg$FAILED) {
                      s0 = peg$f3(s1);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parsecolor_set_spec();
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parseEOL();
                      if (s2 !== peg$FAILED) {
                        s0 = peg$f4(s1);
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = peg$currPos;
                      s2 = [];
                      if (input.length > peg$currPos) {
                        s3 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$e0);
                        }
                      }
                      while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        if (input.length > peg$currPos) {
                          s3 = input.charAt(peg$currPos);
                          peg$currPos++;
                        } else {
                          s3 = peg$FAILED;
                          if (peg$silentFails === 0) {
                            peg$fail(peg$e0);
                          }
                        }
                      }
                      s1 = input.substring(s1, peg$currPos);
                      s1 = peg$f5(s1);
                      s0 = s1;
                    }
                  }
                }
              }
            }
            return s0;
          }
          function peg$parsecolor_set_spec() {
            var s0, s1, s2, s3, s4, s5;
            s0 = peg$currPos;
            s1 = peg$parsecolor_set_item();
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 59) {
                s4 = peg$c0;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e1);
                }
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parsecolor_set_item();
                if (s5 !== peg$FAILED) {
                  s3 = peg$f6(s1, s5);
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 59) {
                  s4 = peg$c0;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e1);
                  }
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parsecolor_set_item();
                  if (s5 !== peg$FAILED) {
                    s3 = peg$f6(s1, s5);
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              }
              s0 = peg$f7(s1, s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parsecolor_set_item() {
            var s0, s1, s2, s3;
            s0 = peg$currPos;
            s1 = peg$parsename();
            if (s1 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 44) {
                s2 = peg$c1;
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e2);
                }
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parsespec_list();
                if (s3 !== peg$FAILED) {
                  s0 = peg$f8(s1, s3);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parsemodel_list() {
            var s0, s1, s2, s3;
            peg$silentFails++;
            s0 = peg$currPos;
            s1 = peg$parsecore_model();
            if (s1 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 58) {
                s2 = peg$c2;
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e4);
                }
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parsemodel_list_tail();
                if (s3 !== peg$FAILED) {
                  s0 = peg$f9(s1, s3);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parsemodel_list_tail();
              if (s1 !== peg$FAILED) {
                s1 = peg$f10(s1);
              }
              s0 = s1;
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e3);
              }
            }
            return s0;
          }
          function peg$parsemodel_list_tail() {
            var s0, s1, s2, s3, s4, s5;
            s0 = peg$currPos;
            s1 = peg$parsemodel();
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 47) {
                s4 = peg$c3;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e5);
                }
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parsemodel();
                if (s5 !== peg$FAILED) {
                  s3 = peg$f11(s1, s5);
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 47) {
                  s4 = peg$c3;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e5);
                  }
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parsemodel();
                  if (s5 !== peg$FAILED) {
                    s3 = peg$f11(s1, s5);
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              }
              s0 = peg$f12(s1, s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parsemodel() {
            var s0;
            peg$silentFails++;
            s0 = peg$parsecore_model();
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              if (peg$silentFails === 0) {
                peg$fail(peg$e6);
              }
            }
            return s0;
          }
          function peg$parsespec_list() {
            var s0, s1, s2, s3, s4, s5;
            peg$silentFails++;
            s0 = peg$currPos;
            s1 = peg$parsespec();
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 47) {
                s4 = peg$c3;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e5);
                }
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parsespec();
                if (s5 !== peg$FAILED) {
                  s3 = peg$f13(s1, s5);
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 47) {
                  s4 = peg$c3;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e5);
                  }
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parsespec();
                  if (s5 !== peg$FAILED) {
                    s3 = peg$f13(s1, s5);
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              }
              s0 = peg$f14(s1, s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e7);
              }
            }
            return s0;
          }
          function peg$parsespec() {
            var s0, s1, s2, s3, s4, s5, s6, s7, s8;
            peg$silentFails++;
            s0 = peg$currPos;
            s1 = peg$currPos;
            s2 = peg$currPos;
            s3 = peg$parsehex();
            if (s3 !== peg$FAILED) {
              s4 = peg$parsehex();
              if (s4 !== peg$FAILED) {
                s5 = peg$parsehex();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parsehex();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parsehex();
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parsehex();
                      if (s8 !== peg$FAILED) {
                        s3 = [s3, s4, s5, s6, s7, s8];
                        s2 = s3;
                      } else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s2;
                      s2 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
              s1 = input.substring(s1, peg$currPos);
            } else {
              s1 = s2;
            }
            if (s1 !== peg$FAILED) {
              s1 = peg$f15(s1);
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parsedec();
              if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 44) {
                  s4 = peg$c1;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e2);
                  }
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parsedec();
                  if (s5 !== peg$FAILED) {
                    s3 = peg$f16(s1, s5);
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
                if (s3 !== peg$FAILED) {
                  while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 44) {
                      s4 = peg$c1;
                      peg$currPos++;
                    } else {
                      s4 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$e2);
                      }
                    }
                    if (s4 !== peg$FAILED) {
                      s5 = peg$parsedec();
                      if (s5 !== peg$FAILED) {
                        s3 = peg$f16(s1, s5);
                      } else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s3;
                      s3 = peg$FAILED;
                    }
                  }
                } else {
                  s2 = peg$FAILED;
                }
                if (s2 === peg$FAILED) {
                  s2 = [];
                  s3 = peg$currPos;
                  s4 = peg$parsesp();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parsedec();
                    if (s5 !== peg$FAILED) {
                      s3 = peg$f17(s1, s5);
                    } else {
                      peg$currPos = s3;
                      s3 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                  if (s3 !== peg$FAILED) {
                    while (s3 !== peg$FAILED) {
                      s2.push(s3);
                      s3 = peg$currPos;
                      s4 = peg$parsesp();
                      if (s4 !== peg$FAILED) {
                        s5 = peg$parsedec();
                        if (s5 !== peg$FAILED) {
                          s3 = peg$f17(s1, s5);
                        } else {
                          peg$currPos = s3;
                          s3 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                      }
                    }
                  } else {
                    s2 = peg$FAILED;
                  }
                }
                if (s2 === peg$FAILED) {
                  s2 = null;
                }
                s0 = peg$f18(s1, s2);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e8);
              }
            }
            return s0;
          }
          function peg$parsecolor() {
            var s0, s1, s2, s3;
            peg$silentFails++;
            s0 = peg$currPos;
            s1 = peg$parsecolor_expr();
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$parsefunc_expr();
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parsefunc_expr();
              }
              s0 = peg$f19(s1, s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e9);
              }
            }
            return s0;
          }
          function peg$parsecolor_expr() {
            var s0;
            s0 = peg$parseext_expr();
            if (s0 === peg$FAILED) {
              s0 = peg$parseexpr();
              if (s0 === peg$FAILED) {
                s0 = peg$parsename();
              }
            }
            return s0;
          }
          function peg$parsefunc_expr() {
            var s0, s1, s2, s3, s4, s5, s6;
            peg$silentFails++;
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 62) {
              s1 = peg$c4;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e11);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parsefunction();
              if (s2 !== peg$FAILED) {
                s3 = [];
                s4 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 44) {
                  s5 = peg$c1;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e2);
                  }
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseint();
                  if (s6 !== peg$FAILED) {
                    s4 = peg$f20(s2, s6);
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
                while (s4 !== peg$FAILED) {
                  s3.push(s4);
                  s4 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 44) {
                    s5 = peg$c1;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$e2);
                    }
                  }
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parseint();
                    if (s6 !== peg$FAILED) {
                      s4 = peg$f20(s2, s6);
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                }
                s0 = peg$f21(s2, s3);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e10);
              }
            }
            return s0;
          }
          function peg$parsefunction() {
            var s0;
            peg$silentFails++;
            s0 = peg$parsename();
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              if (peg$silentFails === 0) {
                peg$fail(peg$e12);
              }
            }
            return s0;
          }
          function peg$parseext_expr() {
            var s0, s1, s2, s3, s4, s5, s6, s7;
            peg$silentFails++;
            s0 = peg$currPos;
            s1 = peg$parsecore_model();
            if (s1 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 44) {
                s2 = peg$c1;
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e2);
                }
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parsediv();
                if (s3 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 58) {
                    s4 = peg$c2;
                    peg$currPos++;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$e4);
                    }
                  }
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parseweighted_expr();
                    if (s5 !== peg$FAILED) {
                      s6 = [];
                      s7 = peg$parseadditional_weighted_expr();
                      while (s7 !== peg$FAILED) {
                        s6.push(s7);
                        s7 = peg$parseadditional_weighted_expr();
                      }
                      s0 = peg$f22(s1, s3, s5, s6);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parsecore_model();
              if (s1 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 58) {
                  s2 = peg$c2;
                  peg$currPos++;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e4);
                  }
                }
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseweighted_expr();
                  if (s3 !== peg$FAILED) {
                    s4 = [];
                    s5 = peg$parseadditional_weighted_expr();
                    while (s5 !== peg$FAILED) {
                      s4.push(s5);
                      s5 = peg$parseadditional_weighted_expr();
                    }
                    s0 = peg$f23(s1, s3, s4);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e13);
              }
            }
            return s0;
          }
          function peg$parseweighted_expr() {
            var s0, s1, s2, s3;
            s0 = peg$currPos;
            s1 = peg$parseexpr();
            if (s1 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 44) {
                s2 = peg$c1;
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e2);
                }
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parsedec();
                if (s3 !== peg$FAILED) {
                  s0 = peg$f24(s1, s3);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parseadditional_weighted_expr() {
            var s0, s1, s2;
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 59) {
              s1 = peg$c0;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e1);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseweighted_expr();
              if (s2 !== peg$FAILED) {
                s0 = peg$f25(s2);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parsecore_model() {
            var s0;
            peg$silentFails++;
            s0 = peg$parsename();
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              if (peg$silentFails === 0) {
                peg$fail(peg$e14);
              }
            }
            return s0;
          }
          function peg$parseexpr() {
            var s0, s1, s2, s3, s4;
            peg$silentFails++;
            s0 = peg$currPos;
            s1 = peg$parseprefix();
            s2 = peg$parsename();
            if (s2 !== peg$FAILED) {
              s3 = peg$parsemix_expr();
              s4 = peg$parsepostfix();
              if (s4 === peg$FAILED) {
                s4 = null;
              }
              s0 = peg$f26(s1, s2, s3, s4);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e15);
              }
            }
            return s0;
          }
          function peg$parsecomplete_mix() {
            var s0, s1, s2, s3, s4;
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 33) {
              s1 = peg$c5;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e16);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parsepct();
              if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 33) {
                  s3 = peg$c5;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e16);
                  }
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parsename();
                  if (s4 !== peg$FAILED) {
                    s0 = peg$f27(s2, s4);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parsepartial_mix() {
            var s0, s1, s2;
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 33) {
              s1 = peg$c5;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e16);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parsepct();
              if (s2 !== peg$FAILED) {
                s0 = peg$f28(s2);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parsemix_expr() {
            var s0, s1, s2;
            peg$silentFails++;
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parsecomplete_mix();
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$parsecomplete_mix();
            }
            s2 = peg$parsepartial_mix();
            if (s2 === peg$FAILED) {
              s2 = null;
            }
            s0 = peg$f29(s1, s2);
            peg$silentFails--;
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e17);
            }
            return s0;
          }
          function peg$parsename() {
            var s0, s1, s2;
            peg$silentFails++;
            if (input.charCodeAt(peg$currPos) === 46) {
              s0 = peg$c6;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e19);
              }
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = [];
              if (peg$r0.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e20);
                }
              }
              if (s2 !== peg$FAILED) {
                while (s2 !== peg$FAILED) {
                  s1.push(s2);
                  if (peg$r0.test(input.charAt(peg$currPos))) {
                    s2 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$e20);
                    }
                  }
                }
              } else {
                s1 = peg$FAILED;
              }
              if (s1 !== peg$FAILED) {
                s0 = input.substring(s0, peg$currPos);
              } else {
                s0 = s1;
              }
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e18);
              }
            }
            return s0;
          }
          function peg$parsepostfix() {
            var s0, s1, s2, s3, s4;
            peg$silentFails++;
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 3) === peg$c7) {
              s1 = peg$c7;
              peg$currPos += 3;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e22);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parsenum();
              if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 93) {
                  s3 = peg$c8;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e23);
                  }
                }
                if (s3 !== peg$FAILED) {
                  s0 = peg$f30(s2);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 2) === peg$c9) {
                s1 = peg$c9;
                peg$currPos += 2;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e24);
                }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$currPos;
                s3 = [];
                s4 = peg$parseplus();
                if (s4 !== peg$FAILED) {
                  while (s4 !== peg$FAILED) {
                    s3.push(s4);
                    s4 = peg$parseplus();
                  }
                } else {
                  s3 = peg$FAILED;
                }
                if (s3 !== peg$FAILED) {
                  s2 = input.substring(s2, peg$currPos);
                } else {
                  s2 = s3;
                }
                if (s2 !== peg$FAILED) {
                  s0 = peg$f31(s2);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e21);
              }
            }
            return s0;
          }
          function peg$parseprefix() {
            var s0;
            peg$silentFails++;
            s0 = peg$parseminus();
            if (s0 === peg$FAILED) {
              s0 = null;
            }
            peg$silentFails--;
            if (peg$silentFails === 0) {
              peg$fail(peg$e25);
            }
            return s0;
          }
          function peg$parseplus() {
            var s0, s1, s2;
            peg$silentFails++;
            s0 = peg$currPos;
            s1 = [];
            if (input.charCodeAt(peg$currPos) === 43) {
              s2 = peg$c10;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e27);
              }
            }
            if (s2 !== peg$FAILED) {
              while (s2 !== peg$FAILED) {
                s1.push(s2);
                if (input.charCodeAt(peg$currPos) === 43) {
                  s2 = peg$c10;
                  peg$currPos++;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e27);
                  }
                }
              }
            } else {
              s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
              s0 = input.substring(s0, peg$currPos);
            } else {
              s0 = s1;
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e26);
              }
            }
            return s0;
          }
          function peg$parseminus() {
            var s0, s1, s2;
            peg$silentFails++;
            s0 = peg$currPos;
            s1 = [];
            if (input.charCodeAt(peg$currPos) === 45) {
              s2 = peg$c11;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e29);
              }
            }
            if (s2 !== peg$FAILED) {
              while (s2 !== peg$FAILED) {
                s1.push(s2);
                if (input.charCodeAt(peg$currPos) === 45) {
                  s2 = peg$c11;
                  peg$currPos++;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e29);
                  }
                }
              }
            } else {
              s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
              s0 = input.substring(s0, peg$currPos);
            } else {
              s0 = s1;
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e28);
              }
            }
            return s0;
          }
          function peg$parsenum() {
            var s0, s1, s2, s3;
            peg$silentFails++;
            s0 = peg$currPos;
            s1 = peg$currPos;
            s2 = [];
            if (peg$r1.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e31);
              }
            }
            if (s3 !== peg$FAILED) {
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                if (peg$r1.test(input.charAt(peg$currPos))) {
                  s3 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e31);
                  }
                }
              }
            } else {
              s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
              s1 = input.substring(s1, peg$currPos);
            } else {
              s1 = s2;
            }
            if (s1 !== peg$FAILED) {
              s1 = peg$f32(s1);
            }
            s0 = s1;
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e30);
              }
            }
            return s0;
          }
          function peg$parsepct() {
            var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;
            peg$silentFails++;
            s0 = peg$currPos;
            s1 = peg$currPos;
            s2 = peg$currPos;
            s3 = peg$currPos;
            s4 = [];
            if (peg$r1.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e31);
              }
            }
            if (s5 !== peg$FAILED) {
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                if (peg$r1.test(input.charAt(peg$currPos))) {
                  s5 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e31);
                  }
                }
              }
            } else {
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              s3 = input.substring(s3, peg$currPos);
            } else {
              s3 = s4;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$currPos;
              s5 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 46) {
                s6 = peg$c6;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e19);
                }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$currPos;
                s8 = [];
                if (peg$r1.test(input.charAt(peg$currPos))) {
                  s9 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s9 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e31);
                  }
                }
                while (s9 !== peg$FAILED) {
                  s8.push(s9);
                  if (peg$r1.test(input.charAt(peg$currPos))) {
                    s9 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s9 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$e31);
                    }
                  }
                }
                s7 = input.substring(s7, peg$currPos);
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              s4 = input.substring(s4, peg$currPos);
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
              s1 = input.substring(s1, peg$currPos);
            } else {
              s1 = s2;
            }
            if (s1 === peg$FAILED) {
              s1 = peg$currPos;
              s2 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 46) {
                s3 = peg$c6;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e19);
                }
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$currPos;
                s5 = [];
                if (peg$r1.test(input.charAt(peg$currPos))) {
                  s6 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e31);
                  }
                }
                if (s6 !== peg$FAILED) {
                  while (s6 !== peg$FAILED) {
                    s5.push(s6);
                    if (peg$r1.test(input.charAt(peg$currPos))) {
                      s6 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$e31);
                      }
                    }
                  }
                } else {
                  s5 = peg$FAILED;
                }
                if (s5 !== peg$FAILED) {
                  s4 = input.substring(s4, peg$currPos);
                } else {
                  s4 = s5;
                }
                if (s4 !== peg$FAILED) {
                  s3 = [s3, s4];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s1 = input.substring(s1, peg$currPos);
              } else {
                s1 = s2;
              }
            }
            if (s1 !== peg$FAILED) {
              s1 = peg$f33(s1);
            }
            s0 = s1;
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e32);
              }
            }
            return s0;
          }
          function peg$parsediv() {
            var s0;
            peg$silentFails++;
            s0 = peg$parsepct();
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              if (peg$silentFails === 0) {
                peg$fail(peg$e33);
              }
            }
            return s0;
          }
          function peg$parsedec() {
            var s0, s1, s2;
            s0 = peg$parsepct();
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 43) {
                s1 = peg$c10;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e27);
                }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parsepct();
                if (s2 !== peg$FAILED) {
                  s0 = peg$f34(s2);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 45) {
                  s1 = peg$c11;
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e29);
                  }
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$parsepct();
                  if (s2 !== peg$FAILED) {
                    s0 = peg$f35(s2);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              }
            }
            return s0;
          }
          function peg$parseint() {
            var s0, s1, s2;
            peg$silentFails++;
            s0 = peg$currPos;
            s1 = peg$parseminus();
            if (s1 === peg$FAILED) {
              s1 = null;
            }
            s2 = peg$parsenum();
            if (s2 !== peg$FAILED) {
              s0 = peg$f36(s1, s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e34);
              }
            }
            return s0;
          }
          function peg$parsesp() {
            var s0, s1;
            s0 = [];
            if (peg$r2.test(input.charAt(peg$currPos))) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e36);
              }
            }
            if (s1 !== peg$FAILED) {
              while (s1 !== peg$FAILED) {
                s0.push(s1);
                if (peg$r2.test(input.charAt(peg$currPos))) {
                  s1 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e36);
                  }
                }
              }
            } else {
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parsehex() {
            var s0, s1;
            s0 = peg$currPos;
            if (peg$r3.test(input.charAt(peg$currPos))) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e37);
              }
            }
            if (s1 !== peg$FAILED) {
              s1 = peg$f37(s1);
            }
            s0 = s1;
            return s0;
          }
          function peg$parseEOL() {
            var s0, s1;
            s0 = peg$currPos;
            peg$silentFails++;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e0);
              }
            }
            peg$silentFails--;
            if (s1 === peg$FAILED) {
              s0 = void 0;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          peg$result = peg$startRuleFunction();
          if (peg$result !== peg$FAILED && peg$currPos === input.length) {
            return peg$result;
          } else {
            if (peg$result !== peg$FAILED && peg$currPos < input.length) {
              peg$fail(peg$endExpectation());
            }
            throw peg$buildStructuredError(
              peg$maxFailExpected,
              peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
              peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
            );
          }
        }
        return {
          SyntaxError: peg$SyntaxError,
          parse: peg$parse
        };
      }()
    );
    var _TabularPegParser = (
      // Generated by Peggy 3.0.2.
      //
      // https://peggyjs.org/
      function() {
        function peg$subclass(child, parent) {
          function C() {
            this.constructor = child;
          }
          C.prototype = parent.prototype;
          child.prototype = new C();
        }
        function peg$SyntaxError(message, expected, found, location) {
          var self2 = Error.call(this, message);
          if (Object.setPrototypeOf) {
            Object.setPrototypeOf(self2, peg$SyntaxError.prototype);
          }
          self2.expected = expected;
          self2.found = found;
          self2.location = location;
          self2.name = "SyntaxError";
          return self2;
        }
        peg$subclass(peg$SyntaxError, Error);
        function peg$padEnd(str, targetLength, padString) {
          padString = padString || " ";
          if (str.length > targetLength) {
            return str;
          }
          targetLength -= str.length;
          padString += padString.repeat(targetLength);
          return str + padString.slice(0, targetLength);
        }
        peg$SyntaxError.prototype.format = function(sources) {
          var str = "Error: " + this.message;
          if (this.location) {
            var src = null;
            var k;
            for (k = 0; k < sources.length; k++) {
              if (sources[k].source === this.location.source) {
                src = sources[k].text.split(/\r\n|\n|\r/g);
                break;
              }
            }
            var s = this.location.start;
            var offset_s = this.location.source && typeof this.location.source.offset === "function" ? this.location.source.offset(s) : s;
            var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
            if (src) {
              var e = this.location.end;
              var filler = peg$padEnd("", offset_s.line.toString().length, " ");
              var line = src[s.line - 1];
              var last = s.line === e.line ? e.column : line.length + 1;
              var hatLen = last - s.column || 1;
              str += "\n --> " + loc + "\n" + filler + " |\n" + offset_s.line + " | " + line + "\n" + filler + " | " + peg$padEnd("", s.column - 1, " ") + peg$padEnd("", hatLen, "^");
            } else {
              str += "\n at " + loc;
            }
          }
          return str;
        };
        peg$SyntaxError.buildMessage = function(expected, found) {
          var DESCRIBE_EXPECTATION_FNS = {
            literal: function(expectation) {
              return '"' + literalEscape(expectation.text) + '"';
            },
            class: function(expectation) {
              var escapedParts = expectation.parts.map(function(part) {
                return Array.isArray(part) ? classEscape(part[0]) + "-" + classEscape(part[1]) : classEscape(part);
              });
              return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
            },
            any: function() {
              return "any character";
            },
            end: function() {
              return "end of input";
            },
            other: function(expectation) {
              return expectation.description;
            }
          };
          function hex(ch) {
            return ch.charCodeAt(0).toString(16).toUpperCase();
          }
          function literalEscape(s) {
            return s.replace(/\\/g, "\\\\").replace(/"/g, '\\"').replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(ch) {
              return "\\x0" + hex(ch);
            }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
              return "\\x" + hex(ch);
            });
          }
          function classEscape(s) {
            return s.replace(/\\/g, "\\\\").replace(/\]/g, "\\]").replace(/\^/g, "\\^").replace(/-/g, "\\-").replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(ch) {
              return "\\x0" + hex(ch);
            }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
              return "\\x" + hex(ch);
            });
          }
          function describeExpectation(expectation) {
            return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
          }
          function describeExpected(expected2) {
            var descriptions = expected2.map(describeExpectation);
            var i, j;
            descriptions.sort();
            if (descriptions.length > 0) {
              for (i = 1, j = 1; i < descriptions.length; i++) {
                if (descriptions[i - 1] !== descriptions[i]) {
                  descriptions[j] = descriptions[i];
                  j++;
                }
              }
              descriptions.length = j;
            }
            switch (descriptions.length) {
              case 1:
                return descriptions[0];
              case 2:
                return descriptions[0] + " or " + descriptions[1];
              default:
                return descriptions.slice(0, -1).join(", ") + ", or " + descriptions[descriptions.length - 1];
            }
          }
          function describeFound(found2) {
            return found2 ? '"' + literalEscape(found2) + '"' : "end of input";
          }
          return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
        };
        function peg$parse(input, options) {
          options = options !== void 0 ? options : {};
          var peg$FAILED = {};
          var peg$source = options.grammarSource;
          var peg$startRuleFunctions = { body: peg$parsebody };
          var peg$startRuleFunction = peg$parsebody;
          var peg$e0 = peg$otherExpectation("decl_start");
          var peg$e1 = peg$otherExpectation("decl_end");
          var peg$e2 = peg$otherExpectation("vert");
          var peg$e3 = peg$anyExpectation();
          var peg$e4 = peg$otherExpectation("l");
          var peg$e5 = peg$otherExpectation("r");
          var peg$e6 = peg$otherExpectation("c");
          var peg$e7 = peg$otherExpectation("p");
          var peg$e8 = peg$otherExpectation("m");
          var peg$e9 = peg$otherExpectation("b");
          var peg$e10 = peg$otherExpectation("w");
          var peg$e11 = peg$otherExpectation("W");
          var peg$e12 = peg$otherExpectation("X");
          var peg$e13 = peg$otherExpectation("!");
          var peg$e14 = peg$otherExpectation("@");
          var peg$e15 = peg$otherExpectation("<");
          var peg$e16 = peg$otherExpectation(">");
          var peg$e17 = peg$otherExpectation("group");
          var peg$e18 = peg$otherExpectation("whitespace");
          var peg$f0 = function(c) {
            return c;
          };
          var peg$f1 = function(cols) {
            return cols;
          };
          var peg$f2 = function() {
            return [];
          };
          var peg$f3 = function(divs1, start, a, end, divs2) {
            return {
              type: "column",
              pre_dividers: divs1,
              post_dividers: divs2,
              before_start_code: start,
              before_end_code: end,
              alignment: a
            };
          };
          var peg$f4 = function() {
            return {
              type: "vert_divider"
            };
          };
          var peg$f5 = function(b, g) {
            return {
              type: "bang_divider",
              content: g[0].content
            };
          };
          var peg$f6 = function(g) {
            return {
              type: "at_divider",
              content: g[0].content
            };
          };
          var peg$f7 = function(div) {
            return div;
          };
          var peg$f8 = function(g) {
            return { type: "decl_code", code: g[0].content };
          };
          var peg$f9 = function(g) {
            return { type: "decl_code", code: g[0].content };
          };
          var peg$f10 = function() {
            return { type: "alignment", alignment: "left" };
          };
          var peg$f11 = function() {
            return { type: "alignment", alignment: "center" };
          };
          var peg$f12 = function() {
            return { type: "alignment", alignment: "right" };
          };
          var peg$f13 = function() {
            return { type: "alignment", alignment: "X" };
          };
          var peg$f14 = function() {
            return "top";
          };
          var peg$f15 = function() {
            return "default";
          };
          var peg$f16 = function() {
            return "bottom";
          };
          var peg$f17 = function(a, g) {
            return {
              type: "alignment",
              alignment: "parbox",
              baseline: a,
              size: g[0].content
            };
          };
          var peg$f18 = function(g1, g2) {
            return {
              type: "alignment",
              alignment: "parbox",
              baseline: g1[0].content,
              size: g2[0].content
            };
          };
          var peg$f19 = function(tok) {
            return options.matchChar(tok, "|");
          };
          var peg$f20 = function(tok) {
            return options.matchChar(tok, "l");
          };
          var peg$f21 = function(tok) {
            return options.matchChar(tok, "r");
          };
          var peg$f22 = function(tok) {
            return options.matchChar(tok, "c");
          };
          var peg$f23 = function(tok) {
            return options.matchChar(tok, "p");
          };
          var peg$f24 = function(tok) {
            return options.matchChar(tok, "m");
          };
          var peg$f25 = function(tok) {
            return options.matchChar(tok, "b");
          };
          var peg$f26 = function(tok) {
            return options.matchChar(tok, "w");
          };
          var peg$f27 = function(tok) {
            return options.matchChar(tok, "W");
          };
          var peg$f28 = function(tok) {
            return options.matchChar(tok, "X");
          };
          var peg$f29 = function(tok) {
            return options.matchChar(tok, "!");
          };
          var peg$f30 = function(tok) {
            return options.matchChar(tok, "@");
          };
          var peg$f31 = function(tok) {
            return options.matchChar(tok, "<");
          };
          var peg$f32 = function(tok) {
            return options.matchChar(tok, ">");
          };
          var peg$f33 = function(tok) {
            return options.isGroup(tok);
          };
          var peg$f34 = function(tok) {
            return options.isWhitespace(tok);
          };
          var peg$currPos = 0;
          var peg$posDetailsCache = [{ line: 1, column: 1 }];
          var peg$maxFailPos = 0;
          var peg$maxFailExpected = [];
          var peg$silentFails = 0;
          var peg$result;
          if ("startRule" in options) {
            if (!(options.startRule in peg$startRuleFunctions)) {
              throw new Error(`Can't start parsing from rule "` + options.startRule + '".');
            }
            peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
          }
          function peg$anyExpectation() {
            return { type: "any" };
          }
          function peg$endExpectation() {
            return { type: "end" };
          }
          function peg$otherExpectation(description) {
            return { type: "other", description };
          }
          function peg$computePosDetails(pos) {
            var details = peg$posDetailsCache[pos];
            var p;
            if (details) {
              return details;
            } else {
              p = pos - 1;
              while (!peg$posDetailsCache[p]) {
                p--;
              }
              details = peg$posDetailsCache[p];
              details = {
                line: details.line,
                column: details.column
              };
              while (p < pos) {
                if (input.charCodeAt(p) === 10) {
                  details.line++;
                  details.column = 1;
                } else {
                  details.column++;
                }
                p++;
              }
              peg$posDetailsCache[pos] = details;
              return details;
            }
          }
          function peg$computeLocation(startPos, endPos, offset2) {
            var startPosDetails = peg$computePosDetails(startPos);
            var endPosDetails = peg$computePosDetails(endPos);
            var res = {
              source: peg$source,
              start: {
                offset: startPos,
                line: startPosDetails.line,
                column: startPosDetails.column
              },
              end: {
                offset: endPos,
                line: endPosDetails.line,
                column: endPosDetails.column
              }
            };
            return res;
          }
          function peg$fail(expected2) {
            if (peg$currPos < peg$maxFailPos) {
              return;
            }
            if (peg$currPos > peg$maxFailPos) {
              peg$maxFailPos = peg$currPos;
              peg$maxFailExpected = [];
            }
            peg$maxFailExpected.push(expected2);
          }
          function peg$buildStructuredError(expected2, found, location2) {
            return new peg$SyntaxError(
              peg$SyntaxError.buildMessage(expected2, found),
              expected2,
              found,
              location2
            );
          }
          function peg$parsebody() {
            var s0, s1, s2, s3, s4, s5;
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$currPos;
            s3 = peg$parsecolumn();
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$parse_();
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parse_();
              }
              s2 = peg$f0(s3);
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
              while (s2 !== peg$FAILED) {
                s1.push(s2);
                s2 = peg$currPos;
                s3 = peg$parsecolumn();
                if (s3 !== peg$FAILED) {
                  s4 = [];
                  s5 = peg$parse_();
                  while (s5 !== peg$FAILED) {
                    s4.push(s5);
                    s5 = peg$parse_();
                  }
                  s2 = peg$f0(s3);
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              }
            } else {
              s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
              s1 = peg$f1(s1);
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseEOL();
              if (s1 !== peg$FAILED) {
                s1 = peg$f2();
              }
              s0 = s1;
            }
            return s0;
          }
          function peg$parsecolumn() {
            var s0, s1, s2, s3, s4, s5, s6;
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parsecolumn_divider();
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$parsecolumn_divider();
            }
            s2 = peg$parsedecl_start();
            if (s2 === peg$FAILED) {
              s2 = null;
            }
            s3 = peg$parsealignment();
            if (s3 !== peg$FAILED) {
              s4 = peg$parsedecl_end();
              if (s4 === peg$FAILED) {
                s4 = null;
              }
              s5 = [];
              s6 = peg$parsecolumn_divider();
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parsecolumn_divider();
              }
              s0 = peg$f3(s1, s2, s3, s4, s5);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parsecolumn_divider() {
            var s0, s1, s2, s3, s4;
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parse_();
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$parse_();
            }
            s2 = peg$currPos;
            s3 = peg$parsevert();
            if (s3 !== peg$FAILED) {
              s3 = peg$f4();
            }
            s2 = s3;
            if (s2 === peg$FAILED) {
              s2 = peg$currPos;
              s3 = peg$parsebang();
              if (s3 !== peg$FAILED) {
                s4 = peg$parsegroup();
                if (s4 !== peg$FAILED) {
                  s2 = peg$f5(s3, s4);
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
              if (s2 === peg$FAILED) {
                s2 = peg$currPos;
                s3 = peg$parseat();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parsegroup();
                  if (s4 !== peg$FAILED) {
                    s2 = peg$f6(s4);
                  } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              }
            }
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$parse_();
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parse_();
              }
              s0 = peg$f7(s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parsedecl_start() {
            var s0, s1, s2;
            peg$silentFails++;
            s0 = peg$currPos;
            s1 = peg$parsegreater();
            if (s1 !== peg$FAILED) {
              s2 = peg$parsegroup();
              if (s2 !== peg$FAILED) {
                s0 = peg$f8(s2);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e0);
              }
            }
            return s0;
          }
          function peg$parsedecl_end() {
            var s0, s1, s2;
            peg$silentFails++;
            s0 = peg$currPos;
            s1 = peg$parseless();
            if (s1 !== peg$FAILED) {
              s2 = peg$parsegroup();
              if (s2 !== peg$FAILED) {
                s0 = peg$f9(s2);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e1);
              }
            }
            return s0;
          }
          function peg$parsealignment() {
            var s0, s1, s2, s3, s4, s5;
            s0 = peg$currPos;
            s1 = peg$parsel();
            if (s1 !== peg$FAILED) {
              s1 = peg$f10();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parsec();
              if (s1 !== peg$FAILED) {
                s1 = peg$f11();
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parser();
                if (s1 !== peg$FAILED) {
                  s1 = peg$f12();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseX();
                  if (s1 !== peg$FAILED) {
                    s1 = peg$f13();
                  }
                  s0 = s1;
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$currPos;
                    s2 = peg$parsep();
                    if (s2 !== peg$FAILED) {
                      s2 = peg$f14();
                    }
                    s1 = s2;
                    if (s1 === peg$FAILED) {
                      s1 = peg$currPos;
                      s2 = peg$parsem();
                      if (s2 !== peg$FAILED) {
                        s2 = peg$f15();
                      }
                      s1 = s2;
                      if (s1 === peg$FAILED) {
                        s1 = peg$currPos;
                        s2 = peg$parseb();
                        if (s2 !== peg$FAILED) {
                          s2 = peg$f16();
                        }
                        s1 = s2;
                      }
                    }
                    if (s1 !== peg$FAILED) {
                      s2 = [];
                      s3 = peg$parse_();
                      while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        s3 = peg$parse_();
                      }
                      s3 = peg$parsegroup();
                      if (s3 !== peg$FAILED) {
                        s0 = peg$f17(s1, s3);
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = peg$parsew();
                      if (s1 === peg$FAILED) {
                        s1 = peg$parseW();
                      }
                      if (s1 !== peg$FAILED) {
                        s2 = [];
                        s3 = peg$parse_();
                        while (s3 !== peg$FAILED) {
                          s2.push(s3);
                          s3 = peg$parse_();
                        }
                        s3 = peg$parsegroup();
                        if (s3 !== peg$FAILED) {
                          s4 = [];
                          s5 = peg$parse_();
                          while (s5 !== peg$FAILED) {
                            s4.push(s5);
                            s5 = peg$parse_();
                          }
                          s5 = peg$parsegroup();
                          if (s5 !== peg$FAILED) {
                            s0 = peg$f18(s3, s5);
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    }
                  }
                }
              }
            }
            return s0;
          }
          function peg$parsevert() {
            var s0, s1, s2;
            peg$silentFails++;
            s0 = peg$currPos;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e3);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$f19(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e2);
              }
            }
            return s0;
          }
          function peg$parsel() {
            var s0, s1, s2;
            peg$silentFails++;
            s0 = peg$currPos;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e3);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$f20(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e4);
              }
            }
            return s0;
          }
          function peg$parser() {
            var s0, s1, s2;
            peg$silentFails++;
            s0 = peg$currPos;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e3);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$f21(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e5);
              }
            }
            return s0;
          }
          function peg$parsec() {
            var s0, s1, s2;
            peg$silentFails++;
            s0 = peg$currPos;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e3);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$f22(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e6);
              }
            }
            return s0;
          }
          function peg$parsep() {
            var s0, s1, s2;
            peg$silentFails++;
            s0 = peg$currPos;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e3);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$f23(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e7);
              }
            }
            return s0;
          }
          function peg$parsem() {
            var s0, s1, s2;
            peg$silentFails++;
            s0 = peg$currPos;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e3);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$f24(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e8);
              }
            }
            return s0;
          }
          function peg$parseb() {
            var s0, s1, s2;
            peg$silentFails++;
            s0 = peg$currPos;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e3);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$f25(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e9);
              }
            }
            return s0;
          }
          function peg$parsew() {
            var s0, s1, s2;
            peg$silentFails++;
            s0 = peg$currPos;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e3);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$f26(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e10);
              }
            }
            return s0;
          }
          function peg$parseW() {
            var s0, s1, s2;
            peg$silentFails++;
            s0 = peg$currPos;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e3);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$f27(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e11);
              }
            }
            return s0;
          }
          function peg$parseX() {
            var s0, s1, s2;
            peg$silentFails++;
            s0 = peg$currPos;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e3);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$f28(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e12);
              }
            }
            return s0;
          }
          function peg$parsebang() {
            var s0, s1, s2;
            peg$silentFails++;
            s0 = peg$currPos;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e3);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$f29(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e13);
              }
            }
            return s0;
          }
          function peg$parseat() {
            var s0, s1, s2;
            peg$silentFails++;
            s0 = peg$currPos;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e3);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$f30(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e14);
              }
            }
            return s0;
          }
          function peg$parseless() {
            var s0, s1, s2;
            peg$silentFails++;
            s0 = peg$currPos;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e3);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$f31(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e15);
              }
            }
            return s0;
          }
          function peg$parsegreater() {
            var s0, s1, s2;
            peg$silentFails++;
            s0 = peg$currPos;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e3);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$f32(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e16);
              }
            }
            return s0;
          }
          function peg$parsegroup() {
            var s0, s1, s2;
            peg$silentFails++;
            s0 = peg$currPos;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e3);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$f33(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e17);
              }
            }
            return s0;
          }
          function peg$parse_() {
            var s0, s1, s2;
            peg$silentFails++;
            s0 = peg$currPos;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e3);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$f34(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e18);
              }
            }
            return s0;
          }
          function peg$parseEOL() {
            var s0, s1;
            s0 = peg$currPos;
            peg$silentFails++;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e3);
              }
            }
            peg$silentFails--;
            if (s1 === peg$FAILED) {
              s0 = void 0;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          if (!options.isHash) {
            try {
              Object.assign(options, {
                matchChar: (node, char) => node.type === "string" && node.content === char,
                isGroup: (node) => node.type === "group",
                isWhitespace: (node) => node.type === "whitespace"
              });
            } catch (e) {
              console.warn("Error when initializing parser", e);
            }
          }
          peg$result = peg$startRuleFunction();
          if (peg$result !== peg$FAILED && peg$currPos === input.length) {
            return peg$result;
          } else {
            if (peg$result !== peg$FAILED && peg$currPos < input.length) {
              peg$fail(peg$endExpectation());
            }
            throw peg$buildStructuredError(
              peg$maxFailExpected,
              peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
              peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
            );
          }
        }
        return {
          SyntaxError: peg$SyntaxError,
          parse: peg$parse
        };
      }()
    );
    var _SystemePegParser = (
      // Generated by Peggy 3.0.2.
      //
      // https://peggyjs.org/
      function() {
        function peg$subclass(child, parent) {
          function C() {
            this.constructor = child;
          }
          C.prototype = parent.prototype;
          child.prototype = new C();
        }
        function peg$SyntaxError(message, expected, found, location) {
          var self2 = Error.call(this, message);
          if (Object.setPrototypeOf) {
            Object.setPrototypeOf(self2, peg$SyntaxError.prototype);
          }
          self2.expected = expected;
          self2.found = found;
          self2.location = location;
          self2.name = "SyntaxError";
          return self2;
        }
        peg$subclass(peg$SyntaxError, Error);
        function peg$padEnd(str, targetLength, padString) {
          padString = padString || " ";
          if (str.length > targetLength) {
            return str;
          }
          targetLength -= str.length;
          padString += padString.repeat(targetLength);
          return str + padString.slice(0, targetLength);
        }
        peg$SyntaxError.prototype.format = function(sources) {
          var str = "Error: " + this.message;
          if (this.location) {
            var src = null;
            var k;
            for (k = 0; k < sources.length; k++) {
              if (sources[k].source === this.location.source) {
                src = sources[k].text.split(/\r\n|\n|\r/g);
                break;
              }
            }
            var s = this.location.start;
            var offset_s = this.location.source && typeof this.location.source.offset === "function" ? this.location.source.offset(s) : s;
            var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
            if (src) {
              var e = this.location.end;
              var filler = peg$padEnd("", offset_s.line.toString().length, " ");
              var line = src[s.line - 1];
              var last = s.line === e.line ? e.column : line.length + 1;
              var hatLen = last - s.column || 1;
              str += "\n --> " + loc + "\n" + filler + " |\n" + offset_s.line + " | " + line + "\n" + filler + " | " + peg$padEnd("", s.column - 1, " ") + peg$padEnd("", hatLen, "^");
            } else {
              str += "\n at " + loc;
            }
          }
          return str;
        };
        peg$SyntaxError.buildMessage = function(expected, found) {
          var DESCRIBE_EXPECTATION_FNS = {
            literal: function(expectation) {
              return '"' + literalEscape(expectation.text) + '"';
            },
            class: function(expectation) {
              var escapedParts = expectation.parts.map(function(part) {
                return Array.isArray(part) ? classEscape(part[0]) + "-" + classEscape(part[1]) : classEscape(part);
              });
              return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
            },
            any: function() {
              return "any character";
            },
            end: function() {
              return "end of input";
            },
            other: function(expectation) {
              return expectation.description;
            }
          };
          function hex(ch) {
            return ch.charCodeAt(0).toString(16).toUpperCase();
          }
          function literalEscape(s) {
            return s.replace(/\\/g, "\\\\").replace(/"/g, '\\"').replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(ch) {
              return "\\x0" + hex(ch);
            }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
              return "\\x" + hex(ch);
            });
          }
          function classEscape(s) {
            return s.replace(/\\/g, "\\\\").replace(/\]/g, "\\]").replace(/\^/g, "\\^").replace(/-/g, "\\-").replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(ch) {
              return "\\x0" + hex(ch);
            }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
              return "\\x" + hex(ch);
            });
          }
          function describeExpectation(expectation) {
            return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
          }
          function describeExpected(expected2) {
            var descriptions = expected2.map(describeExpectation);
            var i, j;
            descriptions.sort();
            if (descriptions.length > 0) {
              for (i = 1, j = 1; i < descriptions.length; i++) {
                if (descriptions[i - 1] !== descriptions[i]) {
                  descriptions[j] = descriptions[i];
                  j++;
                }
              }
              descriptions.length = j;
            }
            switch (descriptions.length) {
              case 1:
                return descriptions[0];
              case 2:
                return descriptions[0] + " or " + descriptions[1];
              default:
                return descriptions.slice(0, -1).join(", ") + ", or " + descriptions[descriptions.length - 1];
            }
          }
          function describeFound(found2) {
            return found2 ? '"' + literalEscape(found2) + '"' : "end of input";
          }
          return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
        };
        function peg$parse(input, options) {
          options = options !== void 0 ? options : {};
          var peg$FAILED = {};
          var peg$source = options.grammarSource;
          var peg$startRuleFunctions = { body: peg$parsebody };
          var peg$startRuleFunction = peg$parsebody;
          var peg$e1 = peg$otherExpectation("item");
          var peg$e2 = peg$anyExpectation();
          var peg$e3 = peg$otherExpectation("equation");
          var peg$e4 = peg$otherExpectation("trailing comment");
          var peg$e5 = peg$otherExpectation("comment only line");
          var peg$e6 = peg$otherExpectation("non-var token");
          var peg$e7 = peg$otherExpectation("token");
          var peg$e8 = peg$otherExpectation("same line comment");
          var peg$e9 = peg$otherExpectation("own line comment");
          var peg$e10 = peg$otherExpectation(",");
          var peg$e11 = peg$otherExpectation("@");
          var peg$e12 = peg$otherExpectation("variable token");
          var peg$e13 = peg$otherExpectation("+/-");
          var peg$e14 = peg$otherExpectation("=");
          var peg$f0 = function(a, b) {
            return a.concat(b ? b : []);
          };
          var peg$f1 = function() {
            return [];
          };
          var peg$f3 = function(op, a, b, c) {
            return { type: "item", op, variable: b, content: a.concat(b, c) };
          };
          var peg$f4 = function(op, a) {
            return { type: "item", op, variable: null, content: a };
          };
          var peg$f5 = function(line, sep, comment) {
            return { ...line, sep: [].concat(sep), trailingComment: comment };
          };
          var peg$f6 = function(line, comment) {
            return { ...line, trailingComment: comment };
          };
          var peg$f7 = function(eq, ann) {
            return {
              type: "line",
              equation: eq,
              annotation: ann,
              sep: null
            };
          };
          var peg$f8 = function(at, ann) {
            return at ? { type: "annotation", marker: at, content: ann } : null;
          };
          var peg$f9 = function(left, eq, right) {
            return { type: "equation", left, right, equals: eq };
          };
          var peg$f10 = function(x) {
            return x;
          };
          var peg$f11 = function(x) {
            return {
              type: "line",
              trailingComment: x
            };
          };
          var peg$f12 = function(v, s) {
            return [v].concat(s ? s : []);
          };
          var peg$f13 = function(t) {
            return t;
          };
          var peg$f14 = function(x) {
            return x;
          };
          var peg$f15 = function(x) {
            return x;
          };
          var peg$f16 = function(tok) {
            return options.isSameLineComment(tok);
          };
          var peg$f17 = function(tok) {
            return tok;
          };
          var peg$f18 = function(tok) {
            return options.isOwnLineComment(tok);
          };
          var peg$f19 = function(tok) {
            return tok;
          };
          var peg$f20 = function(tok) {
            return options.isWhitespace(tok);
          };
          var peg$f21 = function(tok) {
            return tok;
          };
          var peg$f22 = function(tok) {
            return options.isSep(tok);
          };
          var peg$f23 = function(tok) {
            return tok;
          };
          var peg$f24 = function(tok) {
            return options.isAt(tok);
          };
          var peg$f25 = function(tok) {
            return tok;
          };
          var peg$f26 = function(tok) {
            return options.isVar(tok);
          };
          var peg$f27 = function(tok) {
            return tok;
          };
          var peg$f28 = function(tok) {
            return options.isOperation(tok);
          };
          var peg$f29 = function(tok) {
            return tok;
          };
          var peg$f30 = function(tok) {
            return options.isEquals(tok);
          };
          var peg$f31 = function(tok) {
            return tok;
          };
          var peg$f32 = function(tok) {
            return options.isSubscript(tok);
          };
          var peg$f33 = function(tok) {
            return tok;
          };
          var peg$currPos = 0;
          var peg$posDetailsCache = [{ line: 1, column: 1 }];
          var peg$maxFailPos = 0;
          var peg$maxFailExpected = [];
          var peg$silentFails = 0;
          var peg$result;
          if ("startRule" in options) {
            if (!(options.startRule in peg$startRuleFunctions)) {
              throw new Error(`Can't start parsing from rule "` + options.startRule + '".');
            }
            peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
          }
          function peg$anyExpectation() {
            return { type: "any" };
          }
          function peg$endExpectation() {
            return { type: "end" };
          }
          function peg$otherExpectation(description) {
            return { type: "other", description };
          }
          function peg$computePosDetails(pos) {
            var details = peg$posDetailsCache[pos];
            var p;
            if (details) {
              return details;
            } else {
              p = pos - 1;
              while (!peg$posDetailsCache[p]) {
                p--;
              }
              details = peg$posDetailsCache[p];
              details = {
                line: details.line,
                column: details.column
              };
              while (p < pos) {
                if (input.charCodeAt(p) === 10) {
                  details.line++;
                  details.column = 1;
                } else {
                  details.column++;
                }
                p++;
              }
              peg$posDetailsCache[pos] = details;
              return details;
            }
          }
          function peg$computeLocation(startPos, endPos, offset2) {
            var startPosDetails = peg$computePosDetails(startPos);
            var endPosDetails = peg$computePosDetails(endPos);
            var res = {
              source: peg$source,
              start: {
                offset: startPos,
                line: startPosDetails.line,
                column: startPosDetails.column
              },
              end: {
                offset: endPos,
                line: endPosDetails.line,
                column: endPosDetails.column
              }
            };
            return res;
          }
          function peg$fail(expected2) {
            if (peg$currPos < peg$maxFailPos) {
              return;
            }
            if (peg$currPos > peg$maxFailPos) {
              peg$maxFailPos = peg$currPos;
              peg$maxFailExpected = [];
            }
            peg$maxFailExpected.push(expected2);
          }
          function peg$buildStructuredError(expected2, found, location2) {
            return new peg$SyntaxError(
              peg$SyntaxError.buildMessage(expected2, found),
              expected2,
              found,
              location2
            );
          }
          function peg$parsebody() {
            var s0, s1, s2;
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parsecomment_only_line();
            if (s2 === peg$FAILED) {
              s2 = peg$parseline_with_sep();
              if (s2 === peg$FAILED) {
                s2 = peg$parsepartial_line_with_comment();
              }
            }
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$parsecomment_only_line();
              if (s2 === peg$FAILED) {
                s2 = peg$parseline_with_sep();
                if (s2 === peg$FAILED) {
                  s2 = peg$parsepartial_line_with_comment();
                }
              }
            }
            s2 = peg$parseline_without_sep();
            if (s2 === peg$FAILED) {
              s2 = peg$parseEOL();
            }
            if (s2 !== peg$FAILED) {
              s0 = peg$f0(s1, s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseEOL();
              if (s1 !== peg$FAILED) {
                s1 = peg$f1();
              }
              s0 = s1;
            }
            return s0;
          }
          function peg$parseitem() {
            var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;
            peg$silentFails++;
            s0 = peg$currPos;
            s1 = peg$parseoperation();
            if (s1 === peg$FAILED) {
              s1 = null;
            }
            s2 = [];
            s3 = peg$parse_();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parse_();
            }
            s3 = [];
            s4 = peg$parsenon_var_token();
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parsenon_var_token();
            }
            s4 = [];
            s5 = peg$parse_();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parse_();
            }
            s5 = peg$parsevar();
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parse_();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parse_();
              }
              s7 = [];
              s8 = peg$parsetoken();
              while (s8 !== peg$FAILED) {
                s7.push(s8);
                s8 = peg$parsetoken();
              }
              s8 = [];
              s9 = peg$parse_();
              while (s9 !== peg$FAILED) {
                s8.push(s9);
                s9 = peg$parse_();
              }
              s0 = peg$f3(s1, s3, s5, s7);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseoperation();
              if (s1 === peg$FAILED) {
                s1 = null;
              }
              s2 = [];
              s3 = peg$parse_();
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parse_();
              }
              s3 = [];
              s4 = peg$parsenon_var_token();
              if (s4 !== peg$FAILED) {
                while (s4 !== peg$FAILED) {
                  s3.push(s4);
                  s4 = peg$parsenon_var_token();
                }
              } else {
                s3 = peg$FAILED;
              }
              if (s3 !== peg$FAILED) {
                s4 = [];
                s5 = peg$parse_();
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$parse_();
                }
                s0 = peg$f4(s1, s3);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e1);
              }
            }
            return s0;
          }
          function peg$parseline_with_sep() {
            var s0, s1, s2, s3;
            s0 = peg$currPos;
            s1 = peg$parseline_without_sep();
            if (s1 !== peg$FAILED) {
              s2 = peg$parsesep();
              if (s2 !== peg$FAILED) {
                s3 = peg$parsetrailing_comment();
                if (s3 === peg$FAILED) {
                  s3 = null;
                }
                s0 = peg$f5(s1, s2, s3);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parsepartial_line_with_comment() {
            var s0, s1, s2;
            s0 = peg$currPos;
            s1 = peg$parseline_without_sep();
            if (s1 !== peg$FAILED) {
              s2 = peg$parsetrailing_comment();
              if (s2 !== peg$FAILED) {
                s0 = peg$f6(s1, s2);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parseline_without_sep() {
            var s0, s1, s2, s3;
            s0 = peg$currPos;
            s1 = peg$currPos;
            peg$silentFails++;
            if (input.length > peg$currPos) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e2);
              }
            }
            peg$silentFails--;
            if (s2 !== peg$FAILED) {
              peg$currPos = s1;
              s1 = void 0;
            } else {
              s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseequation();
              s3 = peg$parseannotation();
              if (s3 === peg$FAILED) {
                s3 = null;
              }
              s0 = peg$f7(s2, s3);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parseannotation() {
            var s0, s1, s2, s3;
            s0 = peg$currPos;
            s1 = peg$parseat();
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$parsenon_sep_token();
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parsenon_sep_token();
              }
              s0 = peg$f8(s1, s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parseequation() {
            var s0, s1, s2, s3, s4;
            peg$silentFails++;
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parseitem();
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$parseitem();
            }
            s2 = peg$parseequals();
            if (s2 === peg$FAILED) {
              s2 = null;
            }
            s3 = [];
            s4 = peg$parsetoken();
            if (s4 === peg$FAILED) {
              s4 = peg$parseoperation();
            }
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parsetoken();
              if (s4 === peg$FAILED) {
                s4 = peg$parseoperation();
              }
            }
            s0 = peg$f9(s1, s2, s3);
            peg$silentFails--;
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e3);
            }
            return s0;
          }
          function peg$parsetrailing_comment() {
            var s0, s1, s2;
            peg$silentFails++;
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parse_();
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$parse_();
            }
            s2 = peg$parsesame_line_comment();
            if (s2 !== peg$FAILED) {
              s0 = peg$f10(s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e4);
              }
            }
            return s0;
          }
          function peg$parsecomment_only_line() {
            var s0, s1, s2;
            peg$silentFails++;
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parse_();
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$parse_();
            }
            s2 = peg$parseown_line_comment();
            if (s2 !== peg$FAILED) {
              s0 = peg$f11(s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e5);
              }
            }
            return s0;
          }
          function peg$parsevar() {
            var s0, s1, s2, s3;
            s0 = peg$currPos;
            s1 = peg$parsevar_token();
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$parse_();
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parse_();
              }
              s3 = peg$parsesubscript();
              if (s3 === peg$FAILED) {
                s3 = null;
              }
              s0 = peg$f12(s1, s3);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parsenon_var_token() {
            var s0, s1, s2;
            peg$silentFails++;
            s0 = peg$currPos;
            s1 = peg$currPos;
            peg$silentFails++;
            s2 = peg$parsevar();
            peg$silentFails--;
            if (s2 === peg$FAILED) {
              s1 = void 0;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parsetoken();
              if (s2 !== peg$FAILED) {
                s0 = peg$f13(s2);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e6);
              }
            }
            return s0;
          }
          function peg$parsenon_sep_token() {
            var s0, s1, s2;
            s0 = peg$currPos;
            s1 = peg$currPos;
            peg$silentFails++;
            s2 = peg$parsesep();
            if (s2 === peg$FAILED) {
              s2 = peg$parsetrailing_comment();
              if (s2 === peg$FAILED) {
                s2 = peg$parseown_line_comment();
              }
            }
            peg$silentFails--;
            if (s2 === peg$FAILED) {
              s1 = void 0;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
              if (input.length > peg$currPos) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e2);
                }
              }
              if (s2 !== peg$FAILED) {
                s0 = peg$f14(s2);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parsetoken() {
            var s0, s1, s2;
            peg$silentFails++;
            s0 = peg$currPos;
            s1 = peg$currPos;
            peg$silentFails++;
            s2 = peg$parsesep();
            if (s2 === peg$FAILED) {
              s2 = peg$parseat();
              if (s2 === peg$FAILED) {
                s2 = peg$parseoperation();
                if (s2 === peg$FAILED) {
                  s2 = peg$parseequals();
                  if (s2 === peg$FAILED) {
                    s2 = peg$parsetrailing_comment();
                    if (s2 === peg$FAILED) {
                      s2 = peg$parseown_line_comment();
                    }
                  }
                }
              }
            }
            peg$silentFails--;
            if (s2 === peg$FAILED) {
              s1 = void 0;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
              if (input.length > peg$currPos) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e2);
                }
              }
              if (s2 !== peg$FAILED) {
                s0 = peg$f15(s2);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e7);
              }
            }
            return s0;
          }
          function peg$parsesame_line_comment() {
            var s0, s1, s2;
            peg$silentFails++;
            s0 = peg$currPos;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e2);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$f16(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s0 = peg$f17(s1);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e8);
              }
            }
            return s0;
          }
          function peg$parseown_line_comment() {
            var s0, s1, s2;
            peg$silentFails++;
            s0 = peg$currPos;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e2);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$f18(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s0 = peg$f19(s1);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e9);
              }
            }
            return s0;
          }
          function peg$parse_() {
            var s0, s1, s2;
            s0 = peg$currPos;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e2);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$f20(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s0 = peg$f21(s1);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parsesep() {
            var s0, s1, s2;
            peg$silentFails++;
            s0 = peg$currPos;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e2);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$f22(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s0 = peg$f23(s1);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e10);
              }
            }
            return s0;
          }
          function peg$parseat() {
            var s0, s1, s2;
            peg$silentFails++;
            s0 = peg$currPos;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e2);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$f24(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s0 = peg$f25(s1);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e11);
              }
            }
            return s0;
          }
          function peg$parsevar_token() {
            var s0, s1, s2;
            peg$silentFails++;
            s0 = peg$currPos;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e2);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$f26(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s0 = peg$f27(s1);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e12);
              }
            }
            return s0;
          }
          function peg$parseoperation() {
            var s0, s1, s2, s3, s4;
            peg$silentFails++;
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parse_();
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$parse_();
            }
            if (input.length > peg$currPos) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e2);
              }
            }
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$parse_();
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parse_();
              }
              s4 = peg$f28(s2);
              if (s4) {
                s4 = void 0;
              } else {
                s4 = peg$FAILED;
              }
              if (s4 !== peg$FAILED) {
                s0 = peg$f29(s2);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e13);
              }
            }
            return s0;
          }
          function peg$parseequals() {
            var s0, s1, s2;
            peg$silentFails++;
            s0 = peg$currPos;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e2);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$f30(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s0 = peg$f31(s1);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e14);
              }
            }
            return s0;
          }
          function peg$parsesubscript() {
            var s0, s1, s2;
            s0 = peg$currPos;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e2);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$f32(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s0 = peg$f33(s1);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parseEOL() {
            var s0, s1;
            s0 = peg$currPos;
            peg$silentFails++;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e2);
              }
            }
            peg$silentFails--;
            if (s1 === peg$FAILED) {
              s0 = void 0;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          if (!options.isWhitespace) {
            try {
              Object.assign(options, {
                isSep: (node) => node.type === "string" && node.content === ",",
                isVar: (node) => node.type === "string" && node.content.match(/[a-zA-Z]/),
                isOperation: (node) => node.type === "string" && node.content.match(/[+-]/),
                isEquals: (node) => node.type === "string" && node.content === "=",
                isAt: (node) => node.type === "string" && node.content === "@",
                isSubscript: (node) => node.content === "_",
                isWhitespace: (node) => node.type === "whitespace",
                isSameLineComment: (node) => node.type === "comment" && node.sameline,
                isOwnLineComment: (node) => node.type === "comment" && !node.sameline
              });
            } catch (e) {
              console.warn("Error when initializing parser", e);
            }
          }
          peg$result = peg$startRuleFunction();
          if (peg$result !== peg$FAILED && peg$currPos === input.length) {
            return peg$result;
          } else {
            if (peg$result !== peg$FAILED && peg$currPos < input.length) {
              peg$fail(peg$endExpectation());
            }
            throw peg$buildStructuredError(
              peg$maxFailExpected,
              peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
              peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
            );
          }
        }
        return {
          SyntaxError: peg$SyntaxError,
          parse: peg$parse
        };
      }()
    );
    var _GluePegParser = (
      // Generated by Peggy 3.0.2.
      //
      // https://peggyjs.org/
      function() {
        function peg$subclass(child, parent) {
          function C() {
            this.constructor = child;
          }
          C.prototype = parent.prototype;
          child.prototype = new C();
        }
        function peg$SyntaxError(message, expected, found, location) {
          var self2 = Error.call(this, message);
          if (Object.setPrototypeOf) {
            Object.setPrototypeOf(self2, peg$SyntaxError.prototype);
          }
          self2.expected = expected;
          self2.found = found;
          self2.location = location;
          self2.name = "SyntaxError";
          return self2;
        }
        peg$subclass(peg$SyntaxError, Error);
        function peg$padEnd(str, targetLength, padString) {
          padString = padString || " ";
          if (str.length > targetLength) {
            return str;
          }
          targetLength -= str.length;
          padString += padString.repeat(targetLength);
          return str + padString.slice(0, targetLength);
        }
        peg$SyntaxError.prototype.format = function(sources) {
          var str = "Error: " + this.message;
          if (this.location) {
            var src = null;
            var k;
            for (k = 0; k < sources.length; k++) {
              if (sources[k].source === this.location.source) {
                src = sources[k].text.split(/\r\n|\n|\r/g);
                break;
              }
            }
            var s = this.location.start;
            var offset_s = this.location.source && typeof this.location.source.offset === "function" ? this.location.source.offset(s) : s;
            var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
            if (src) {
              var e = this.location.end;
              var filler = peg$padEnd("", offset_s.line.toString().length, " ");
              var line = src[s.line - 1];
              var last = s.line === e.line ? e.column : line.length + 1;
              var hatLen = last - s.column || 1;
              str += "\n --> " + loc + "\n" + filler + " |\n" + offset_s.line + " | " + line + "\n" + filler + " | " + peg$padEnd("", s.column - 1, " ") + peg$padEnd("", hatLen, "^");
            } else {
              str += "\n at " + loc;
            }
          }
          return str;
        };
        peg$SyntaxError.buildMessage = function(expected, found) {
          var DESCRIBE_EXPECTATION_FNS = {
            literal: function(expectation) {
              return '"' + literalEscape(expectation.text) + '"';
            },
            class: function(expectation) {
              var escapedParts = expectation.parts.map(function(part) {
                return Array.isArray(part) ? classEscape(part[0]) + "-" + classEscape(part[1]) : classEscape(part);
              });
              return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
            },
            any: function() {
              return "any character";
            },
            end: function() {
              return "end of input";
            },
            other: function(expectation) {
              return expectation.description;
            }
          };
          function hex(ch) {
            return ch.charCodeAt(0).toString(16).toUpperCase();
          }
          function literalEscape(s) {
            return s.replace(/\\/g, "\\\\").replace(/"/g, '\\"').replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(ch) {
              return "\\x0" + hex(ch);
            }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
              return "\\x" + hex(ch);
            });
          }
          function classEscape(s) {
            return s.replace(/\\/g, "\\\\").replace(/\]/g, "\\]").replace(/\^/g, "\\^").replace(/-/g, "\\-").replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(ch) {
              return "\\x0" + hex(ch);
            }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
              return "\\x" + hex(ch);
            });
          }
          function describeExpectation(expectation) {
            return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
          }
          function describeExpected(expected2) {
            var descriptions = expected2.map(describeExpectation);
            var i, j;
            descriptions.sort();
            if (descriptions.length > 0) {
              for (i = 1, j = 1; i < descriptions.length; i++) {
                if (descriptions[i - 1] !== descriptions[i]) {
                  descriptions[j] = descriptions[i];
                  j++;
                }
              }
              descriptions.length = j;
            }
            switch (descriptions.length) {
              case 1:
                return descriptions[0];
              case 2:
                return descriptions[0] + " or " + descriptions[1];
              default:
                return descriptions.slice(0, -1).join(", ") + ", or " + descriptions[descriptions.length - 1];
            }
          }
          function describeFound(found2) {
            return found2 ? '"' + literalEscape(found2) + '"' : "end of input";
          }
          return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
        };
        function peg$parse(input, options) {
          options = options !== void 0 ? options : {};
          var peg$FAILED = {};
          var peg$source = options.grammarSource;
          var peg$startRuleFunctions = { root: peg$parseroot };
          var peg$startRuleFunction = peg$parseroot;
          var peg$c0 = "plus";
          var peg$c1 = "minus";
          var peg$c2 = "pt";
          var peg$c3 = "mm";
          var peg$c4 = "cm";
          var peg$c5 = "in";
          var peg$c6 = "ex";
          var peg$c7 = "em";
          var peg$c8 = "bp";
          var peg$c9 = "pc";
          var peg$c10 = "dd";
          var peg$c11 = "cc";
          var peg$c12 = "nd";
          var peg$c13 = "nc";
          var peg$c14 = "sp";
          var peg$c15 = "filll";
          var peg$c16 = "fill";
          var peg$c17 = "fil";
          var peg$c18 = ".";
          var peg$c19 = "+";
          var peg$c20 = "-";
          var peg$r0 = /^[0-9]/;
          var peg$e0 = peg$anyExpectation();
          var peg$e1 = peg$literalExpectation("plus", false);
          var peg$e2 = peg$literalExpectation("minus", false);
          var peg$e3 = peg$literalExpectation("pt", false);
          var peg$e4 = peg$literalExpectation("mm", false);
          var peg$e5 = peg$literalExpectation("cm", false);
          var peg$e6 = peg$literalExpectation("in", false);
          var peg$e7 = peg$literalExpectation("ex", false);
          var peg$e8 = peg$literalExpectation("em", false);
          var peg$e9 = peg$literalExpectation("bp", false);
          var peg$e10 = peg$literalExpectation("pc", false);
          var peg$e11 = peg$literalExpectation("dd", false);
          var peg$e12 = peg$literalExpectation("cc", false);
          var peg$e13 = peg$literalExpectation("nd", false);
          var peg$e14 = peg$literalExpectation("nc", false);
          var peg$e15 = peg$literalExpectation("sp", false);
          var peg$e16 = peg$literalExpectation("filll", false);
          var peg$e17 = peg$literalExpectation("fill", false);
          var peg$e18 = peg$literalExpectation("fil", false);
          var peg$e19 = peg$otherExpectation("number");
          var peg$e20 = peg$classExpectation([["0", "9"]], false, false);
          var peg$e21 = peg$literalExpectation(".", false);
          var peg$e22 = peg$literalExpectation("+", false);
          var peg$e23 = peg$literalExpectation("-", false);
          var peg$f0 = function(b, st, sh) {
            return {
              type: "glue",
              fixed: b,
              stretchable: st,
              shrinkable: sh,
              position: location()
            };
          };
          var peg$f1 = function(glue) {
            return glue;
          };
          var peg$f2 = function(n, u) {
            return { type: "dim", value: n, unit: u };
          };
          var peg$f3 = function(n, u) {
            return { type: "dim", value: n, unit: u };
          };
          var peg$f4 = function(n, u) {
            return { type: "dim", value: n, unit: u };
          };
          var peg$f5 = function(n) {
            return parseFloat(n);
          };
          var peg$currPos = 0;
          var peg$savedPos = 0;
          var peg$posDetailsCache = [{ line: 1, column: 1 }];
          var peg$maxFailPos = 0;
          var peg$maxFailExpected = [];
          var peg$silentFails = 0;
          var peg$result;
          if ("startRule" in options) {
            if (!(options.startRule in peg$startRuleFunctions)) {
              throw new Error(`Can't start parsing from rule "` + options.startRule + '".');
            }
            peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
          }
          function location() {
            return peg$computeLocation(peg$savedPos, peg$currPos);
          }
          function peg$literalExpectation(text2, ignoreCase) {
            return { type: "literal", text: text2, ignoreCase };
          }
          function peg$classExpectation(parts, inverted, ignoreCase) {
            return { type: "class", parts, inverted, ignoreCase };
          }
          function peg$anyExpectation() {
            return { type: "any" };
          }
          function peg$endExpectation() {
            return { type: "end" };
          }
          function peg$otherExpectation(description) {
            return { type: "other", description };
          }
          function peg$computePosDetails(pos) {
            var details = peg$posDetailsCache[pos];
            var p;
            if (details) {
              return details;
            } else {
              p = pos - 1;
              while (!peg$posDetailsCache[p]) {
                p--;
              }
              details = peg$posDetailsCache[p];
              details = {
                line: details.line,
                column: details.column
              };
              while (p < pos) {
                if (input.charCodeAt(p) === 10) {
                  details.line++;
                  details.column = 1;
                } else {
                  details.column++;
                }
                p++;
              }
              peg$posDetailsCache[pos] = details;
              return details;
            }
          }
          function peg$computeLocation(startPos, endPos, offset2) {
            var startPosDetails = peg$computePosDetails(startPos);
            var endPosDetails = peg$computePosDetails(endPos);
            var res = {
              source: peg$source,
              start: {
                offset: startPos,
                line: startPosDetails.line,
                column: startPosDetails.column
              },
              end: {
                offset: endPos,
                line: endPosDetails.line,
                column: endPosDetails.column
              }
            };
            return res;
          }
          function peg$fail(expected2) {
            if (peg$currPos < peg$maxFailPos) {
              return;
            }
            if (peg$currPos > peg$maxFailPos) {
              peg$maxFailPos = peg$currPos;
              peg$maxFailExpected = [];
            }
            peg$maxFailExpected.push(expected2);
          }
          function peg$buildStructuredError(expected2, found, location2) {
            return new peg$SyntaxError(
              peg$SyntaxError.buildMessage(expected2, found),
              expected2,
              found,
              location2
            );
          }
          function peg$parseroot() {
            var s0, s1, s2, s3, s4;
            s0 = peg$currPos;
            s1 = peg$currPos;
            s2 = peg$parsebase();
            if (s2 !== peg$FAILED) {
              s3 = peg$parsestretchable();
              if (s3 === peg$FAILED) {
                s3 = null;
              }
              s4 = peg$parseshrinkable();
              if (s4 === peg$FAILED) {
                s4 = null;
              }
              peg$savedPos = s1;
              s1 = peg$f0(s2, s3, s4);
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
              s2 = [];
              if (input.length > peg$currPos) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e0);
                }
              }
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                if (input.length > peg$currPos) {
                  s3 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e0);
                  }
                }
              }
              peg$savedPos = s0;
              s0 = peg$f1(s1);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parsebase() {
            var s0, s1, s2;
            s0 = peg$currPos;
            s1 = peg$parsenumber();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseunit();
              if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f2(s1, s2);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parsestretchable() {
            var s0, s1, s2, s3;
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 4) === peg$c0) {
              s1 = peg$c0;
              peg$currPos += 4;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e1);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parsenumber();
              if (s2 !== peg$FAILED) {
                s3 = peg$parserubber_unit();
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f3(s2, s3);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parseshrinkable() {
            var s0, s1, s2, s3;
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 5) === peg$c1) {
              s1 = peg$c1;
              peg$currPos += 5;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e2);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parsenumber();
              if (s2 !== peg$FAILED) {
                s3 = peg$parserubber_unit();
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f4(s2, s3);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parseunit() {
            var s0;
            if (input.substr(peg$currPos, 2) === peg$c2) {
              s0 = peg$c2;
              peg$currPos += 2;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e3);
              }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c3) {
                s0 = peg$c3;
                peg$currPos += 2;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e4);
                }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c4) {
                  s0 = peg$c4;
                  peg$currPos += 2;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e5);
                  }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c5) {
                    s0 = peg$c5;
                    peg$currPos += 2;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$e6);
                    }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c6) {
                      s0 = peg$c6;
                      peg$currPos += 2;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$e7);
                      }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c7) {
                        s0 = peg$c7;
                        peg$currPos += 2;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$e8);
                        }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c8) {
                          s0 = peg$c8;
                          peg$currPos += 2;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) {
                            peg$fail(peg$e9);
                          }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.substr(peg$currPos, 2) === peg$c9) {
                            s0 = peg$c9;
                            peg$currPos += 2;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) {
                              peg$fail(peg$e10);
                            }
                          }
                          if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 2) === peg$c10) {
                              s0 = peg$c10;
                              peg$currPos += 2;
                            } else {
                              s0 = peg$FAILED;
                              if (peg$silentFails === 0) {
                                peg$fail(peg$e11);
                              }
                            }
                            if (s0 === peg$FAILED) {
                              if (input.substr(peg$currPos, 2) === peg$c11) {
                                s0 = peg$c11;
                                peg$currPos += 2;
                              } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                  peg$fail(peg$e12);
                                }
                              }
                              if (s0 === peg$FAILED) {
                                if (input.substr(peg$currPos, 2) === peg$c12) {
                                  s0 = peg$c12;
                                  peg$currPos += 2;
                                } else {
                                  s0 = peg$FAILED;
                                  if (peg$silentFails === 0) {
                                    peg$fail(peg$e13);
                                  }
                                }
                                if (s0 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 2) === peg$c13) {
                                    s0 = peg$c13;
                                    peg$currPos += 2;
                                  } else {
                                    s0 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                      peg$fail(peg$e14);
                                    }
                                  }
                                  if (s0 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 2) === peg$c14) {
                                      s0 = peg$c14;
                                      peg$currPos += 2;
                                    } else {
                                      s0 = peg$FAILED;
                                      if (peg$silentFails === 0) {
                                        peg$fail(peg$e15);
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            return s0;
          }
          function peg$parserubber_unit() {
            var s0;
            s0 = peg$parseunit();
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 5) === peg$c15) {
                s0 = peg$c15;
                peg$currPos += 5;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e16);
                }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 4) === peg$c16) {
                  s0 = peg$c16;
                  peg$currPos += 4;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e17);
                  }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 3) === peg$c17) {
                    s0 = peg$c17;
                    peg$currPos += 3;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$e18);
                    }
                  }
                }
              }
            }
            return s0;
          }
          function peg$parsenumber() {
            var s0, s1, s2, s3, s4, s5, s6, s7, s8;
            peg$silentFails++;
            s0 = peg$currPos;
            s1 = peg$currPos;
            s2 = peg$currPos;
            s3 = peg$parsesign();
            if (s3 === peg$FAILED) {
              s3 = null;
            }
            s4 = peg$currPos;
            s5 = [];
            if (peg$r0.test(input.charAt(peg$currPos))) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e20);
              }
            }
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              if (peg$r0.test(input.charAt(peg$currPos))) {
                s6 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e20);
                }
              }
            }
            if (input.charCodeAt(peg$currPos) === 46) {
              s6 = peg$c18;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e21);
              }
            }
            if (s6 !== peg$FAILED) {
              s7 = [];
              if (peg$r0.test(input.charAt(peg$currPos))) {
                s8 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e20);
                }
              }
              if (s8 !== peg$FAILED) {
                while (s8 !== peg$FAILED) {
                  s7.push(s8);
                  if (peg$r0.test(input.charAt(peg$currPos))) {
                    s8 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$e20);
                    }
                  }
                }
              } else {
                s7 = peg$FAILED;
              }
              if (s7 !== peg$FAILED) {
                s5 = [s5, s6, s7];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 === peg$FAILED) {
              s4 = [];
              if (peg$r0.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e20);
                }
              }
              if (s5 !== peg$FAILED) {
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  if (peg$r0.test(input.charAt(peg$currPos))) {
                    s5 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$e20);
                    }
                  }
                }
              } else {
                s4 = peg$FAILED;
              }
            }
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
              s1 = input.substring(s1, peg$currPos);
            } else {
              s1 = s2;
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f5(s1);
            }
            s0 = s1;
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e19);
              }
            }
            return s0;
          }
          function peg$parsesign() {
            var s0;
            if (input.charCodeAt(peg$currPos) === 43) {
              s0 = peg$c19;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e22);
              }
            }
            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 45) {
                s0 = peg$c20;
                peg$currPos++;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e23);
                }
              }
            }
            return s0;
          }
          peg$result = peg$startRuleFunction();
          if (peg$result !== peg$FAILED && peg$currPos === input.length) {
            return peg$result;
          } else {
            if (peg$result !== peg$FAILED && peg$currPos < input.length) {
              peg$fail(peg$endExpectation());
            }
            throw peg$buildStructuredError(
              peg$maxFailExpected,
              peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
              peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
            );
          }
        }
        return {
          SyntaxError: peg$SyntaxError,
          parse: peg$parse
        };
      }()
    );
    var _TikzPegParser = (
      // Generated by Peggy 3.0.2.
      //
      // https://peggyjs.org/
      function() {
        function peg$subclass(child, parent) {
          function C() {
            this.constructor = child;
          }
          C.prototype = parent.prototype;
          child.prototype = new C();
        }
        function peg$SyntaxError(message, expected, found, location) {
          var self2 = Error.call(this, message);
          if (Object.setPrototypeOf) {
            Object.setPrototypeOf(self2, peg$SyntaxError.prototype);
          }
          self2.expected = expected;
          self2.found = found;
          self2.location = location;
          self2.name = "SyntaxError";
          return self2;
        }
        peg$subclass(peg$SyntaxError, Error);
        function peg$padEnd(str, targetLength, padString) {
          padString = padString || " ";
          if (str.length > targetLength) {
            return str;
          }
          targetLength -= str.length;
          padString += padString.repeat(targetLength);
          return str + padString.slice(0, targetLength);
        }
        peg$SyntaxError.prototype.format = function(sources) {
          var str = "Error: " + this.message;
          if (this.location) {
            var src = null;
            var k;
            for (k = 0; k < sources.length; k++) {
              if (sources[k].source === this.location.source) {
                src = sources[k].text.split(/\r\n|\n|\r/g);
                break;
              }
            }
            var s = this.location.start;
            var offset_s = this.location.source && typeof this.location.source.offset === "function" ? this.location.source.offset(s) : s;
            var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
            if (src) {
              var e = this.location.end;
              var filler = peg$padEnd("", offset_s.line.toString().length, " ");
              var line = src[s.line - 1];
              var last = s.line === e.line ? e.column : line.length + 1;
              var hatLen = last - s.column || 1;
              str += "\n --> " + loc + "\n" + filler + " |\n" + offset_s.line + " | " + line + "\n" + filler + " | " + peg$padEnd("", s.column - 1, " ") + peg$padEnd("", hatLen, "^");
            } else {
              str += "\n at " + loc;
            }
          }
          return str;
        };
        peg$SyntaxError.buildMessage = function(expected, found) {
          var DESCRIBE_EXPECTATION_FNS = {
            literal: function(expectation) {
              return '"' + literalEscape(expectation.text) + '"';
            },
            class: function(expectation) {
              var escapedParts = expectation.parts.map(function(part) {
                return Array.isArray(part) ? classEscape(part[0]) + "-" + classEscape(part[1]) : classEscape(part);
              });
              return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
            },
            any: function() {
              return "any character";
            },
            end: function() {
              return "end of input";
            },
            other: function(expectation) {
              return expectation.description;
            }
          };
          function hex(ch) {
            return ch.charCodeAt(0).toString(16).toUpperCase();
          }
          function literalEscape(s) {
            return s.replace(/\\/g, "\\\\").replace(/"/g, '\\"').replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(ch) {
              return "\\x0" + hex(ch);
            }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
              return "\\x" + hex(ch);
            });
          }
          function classEscape(s) {
            return s.replace(/\\/g, "\\\\").replace(/\]/g, "\\]").replace(/\^/g, "\\^").replace(/-/g, "\\-").replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(ch) {
              return "\\x0" + hex(ch);
            }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
              return "\\x" + hex(ch);
            });
          }
          function describeExpectation(expectation) {
            return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
          }
          function describeExpected(expected2) {
            var descriptions = expected2.map(describeExpectation);
            var i, j;
            descriptions.sort();
            if (descriptions.length > 0) {
              for (i = 1, j = 1; i < descriptions.length; i++) {
                if (descriptions[i - 1] !== descriptions[i]) {
                  descriptions[j] = descriptions[i];
                  j++;
                }
              }
              descriptions.length = j;
            }
            switch (descriptions.length) {
              case 1:
                return descriptions[0];
              case 2:
                return descriptions[0] + " or " + descriptions[1];
              default:
                return descriptions.slice(0, -1).join(", ") + ", or " + descriptions[descriptions.length - 1];
            }
          }
          function describeFound(found2) {
            return found2 ? '"' + literalEscape(found2) + '"' : "end of input";
          }
          return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
        };
        function peg$parse(input, options) {
          options = options !== void 0 ? options : {};
          var peg$FAILED = {};
          var peg$source = options.grammarSource;
          var peg$startRuleFunctions = { path_spec: peg$parsepath_spec, foreach_body: peg$parseforeach_body };
          var peg$startRuleFunction = peg$parsepath_spec;
          var peg$e0 = peg$anyExpectation();
          var peg$e3 = peg$otherExpectation("comment");
          var peg$e4 = peg$otherExpectation("floating comment");
          var peg$e5 = peg$otherExpectation("operation");
          var peg$e6 = peg$otherExpectation("=");
          var peg$f0 = function(v) {
            return v;
          };
          var peg$f1 = function(ops) {
            return { type: "path_spec", content: ops };
          };
          var peg$f2 = function(c1, op, comment) {
            return { op, comment };
          };
          var peg$f3 = function(c1, ops, c2, body) {
            const comments = [c1, ...ops.map((x) => x.comment), c2].filter(
              (x) => x
            );
            const attribute = ops.map((x) => x.op.content.content).join(" ");
            return {
              type: "animation",
              comments,
              attribute,
              content: body.content
            };
          };
          var peg$f4 = function(start, b) {
            return { ...b, start, type: "foreach" };
          };
          var peg$f5 = function(c1, variables, options2, c2, c3, list, c4, command) {
            const comments = [c1, c2, c3, c4].filter((x) => x);
            return {
              type: "foreach_body",
              variables,
              options: options2 && options2.content,
              list,
              command,
              comments
            };
          };
          var peg$f6 = function(c1, options2, c2, body) {
            const comments = [c1, c2].filter((x) => x);
            return {
              type: "svg_operation",
              options: options2 && options2.content,
              content: body,
              comments
            };
          };
          var peg$f7 = function(c1, c2, coord, c3, c4, x) {
            return { coord: x, comment: c4 };
          };
          var peg$f8 = function(c1, c2, coord, c3, a, c5) {
            const comments = [c1, c2, c3, a && a.comment, c5].filter((x) => x);
            return {
              type: "curve_to",
              controls: a ? [coord, a.coord] : [coord],
              comments
            };
          };
          var peg$f9 = function() {
            return { type: "line_to", command: "|-" };
          };
          var peg$f10 = function() {
            return { type: "line_to", command: "-|" };
          };
          var peg$f11 = function() {
            return { type: "line_to", command: "--" };
          };
          var peg$f12 = function(prefix, content) {
            return { type: "coordinate", content, prefix };
          };
          var peg$f13 = function(content) {
            return { type: "square_brace_group", content };
          };
          var peg$f14 = function(v) {
            return { type: "unknown", content: v };
          };
          var peg$f19 = function(tok) {
            return options.isComment(tok);
          };
          var peg$f20 = function(tok) {
            return tok;
          };
          var peg$f21 = function(tok) {
            return options.isWhitespace(tok);
          };
          var peg$f22 = function(tok) {
            return tok;
          };
          var peg$f23 = function(c) {
            return c;
          };
          var peg$f24 = function(tok) {
            return options.isOperation(tok);
          };
          var peg$f25 = function(tok) {
            return { type: "operation", content: tok };
          };
          var peg$f26 = function(tok) {
            return options.isChar(tok, "=");
          };
          var peg$f27 = function(tok) {
            return tok;
          };
          var peg$f28 = function(tok) {
            return options.isChar(tok, "[");
          };
          var peg$f29 = function(tok) {
            return tok;
          };
          var peg$f30 = function(tok) {
            return options.isChar(tok, "]");
          };
          var peg$f31 = function(tok) {
            return tok;
          };
          var peg$f32 = function(tok) {
            return options.isChar(tok, "(");
          };
          var peg$f33 = function(tok) {
            return tok;
          };
          var peg$f34 = function(tok) {
            return options.isChar(tok, ")");
          };
          var peg$f35 = function(tok) {
            return tok;
          };
          var peg$f36 = function(tok) {
            return options.isChar(tok, "+");
          };
          var peg$f37 = function(tok) {
            return tok;
          };
          var peg$f38 = function(tok) {
            return options.isChar(tok, "-");
          };
          var peg$f39 = function(tok) {
            return tok;
          };
          var peg$f40 = function(tok) {
            return options.isChar(tok, "|");
          };
          var peg$f41 = function(tok) {
            return tok;
          };
          var peg$f42 = function(tok) {
            return options.isChar(tok, ".");
          };
          var peg$f43 = function(tok) {
            return tok;
          };
          var peg$f44 = function(tok) {
            return options.isChar(tok, "controls");
          };
          var peg$f45 = function(tok) {
            return tok;
          };
          var peg$f46 = function(tok) {
            return options.isChar(tok, "and");
          };
          var peg$f47 = function(tok) {
            return tok;
          };
          var peg$f48 = function(tok) {
            return options.isChar(tok, "svg");
          };
          var peg$f49 = function(tok) {
            return tok;
          };
          var peg$f50 = function(tok) {
            return options.isGroup(tok);
          };
          var peg$f51 = function(tok) {
            return tok;
          };
          var peg$f52 = function(tok) {
            return options.isAnyMacro(tok);
          };
          var peg$f53 = function(tok) {
            return tok;
          };
          var peg$f54 = function(tok) {
            return options.isChar(tok, "foreach");
          };
          var peg$f55 = function(tok) {
            return tok;
          };
          var peg$f56 = function(tok) {
            return options.isMacro(tok, "foreach");
          };
          var peg$f57 = function(tok) {
            return tok;
          };
          var peg$f58 = function(tok) {
            return options.isChar(tok, "in");
          };
          var peg$f59 = function(tok) {
            return tok;
          };
          var peg$f60 = function(tok) {
            return options.isChar(tok, ":");
          };
          var peg$f61 = function(tok) {
            return tok;
          };
          var peg$currPos = 0;
          var peg$posDetailsCache = [{ line: 1, column: 1 }];
          var peg$maxFailPos = 0;
          var peg$maxFailExpected = [];
          var peg$silentFails = 0;
          var peg$result;
          if ("startRule" in options) {
            if (!(options.startRule in peg$startRuleFunctions)) {
              throw new Error(`Can't start parsing from rule "` + options.startRule + '".');
            }
            peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
          }
          function peg$anyExpectation() {
            return { type: "any" };
          }
          function peg$endExpectation() {
            return { type: "end" };
          }
          function peg$otherExpectation(description) {
            return { type: "other", description };
          }
          function peg$computePosDetails(pos) {
            var details = peg$posDetailsCache[pos];
            var p;
            if (details) {
              return details;
            } else {
              p = pos - 1;
              while (!peg$posDetailsCache[p]) {
                p--;
              }
              details = peg$posDetailsCache[p];
              details = {
                line: details.line,
                column: details.column
              };
              while (p < pos) {
                if (input.charCodeAt(p) === 10) {
                  details.line++;
                  details.column = 1;
                } else {
                  details.column++;
                }
                p++;
              }
              peg$posDetailsCache[pos] = details;
              return details;
            }
          }
          function peg$computeLocation(startPos, endPos, offset2) {
            var startPosDetails = peg$computePosDetails(startPos);
            var endPosDetails = peg$computePosDetails(endPos);
            var res = {
              source: peg$source,
              start: {
                offset: startPos,
                line: startPosDetails.line,
                column: startPosDetails.column
              },
              end: {
                offset: endPos,
                line: endPosDetails.line,
                column: endPosDetails.column
              }
            };
            return res;
          }
          function peg$fail(expected2) {
            if (peg$currPos < peg$maxFailPos) {
              return;
            }
            if (peg$currPos > peg$maxFailPos) {
              peg$maxFailPos = peg$currPos;
              peg$maxFailExpected = [];
            }
            peg$maxFailExpected.push(expected2);
          }
          function peg$buildStructuredError(expected2, found, location2) {
            return new peg$SyntaxError(
              peg$SyntaxError.buildMessage(expected2, found),
              expected2,
              found,
              location2
            );
          }
          function peg$parsepath_spec() {
            var s0, s1, s2, s3, s4, s5;
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$currPos;
            s3 = peg$parsesquare_brace_group();
            if (s3 === peg$FAILED) {
              s3 = peg$parsecoordinate();
              if (s3 === peg$FAILED) {
                s3 = peg$parsecurve_to();
                if (s3 === peg$FAILED) {
                  s3 = peg$parseline_to();
                  if (s3 === peg$FAILED) {
                    s3 = peg$parsesvg();
                    if (s3 === peg$FAILED) {
                      s3 = peg$parseforeach();
                      if (s3 === peg$FAILED) {
                        s3 = peg$parseoperation();
                        if (s3 === peg$FAILED) {
                          s3 = peg$parsecomment();
                          if (s3 === peg$FAILED) {
                            s3 = peg$parseanimation();
                            if (s3 === peg$FAILED) {
                              s3 = peg$parseunknown();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$parse_();
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parse_();
              }
              s2 = peg$f0(s3);
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
              while (s2 !== peg$FAILED) {
                s1.push(s2);
                s2 = peg$currPos;
                s3 = peg$parsesquare_brace_group();
                if (s3 === peg$FAILED) {
                  s3 = peg$parsecoordinate();
                  if (s3 === peg$FAILED) {
                    s3 = peg$parsecurve_to();
                    if (s3 === peg$FAILED) {
                      s3 = peg$parseline_to();
                      if (s3 === peg$FAILED) {
                        s3 = peg$parsesvg();
                        if (s3 === peg$FAILED) {
                          s3 = peg$parseforeach();
                          if (s3 === peg$FAILED) {
                            s3 = peg$parseoperation();
                            if (s3 === peg$FAILED) {
                              s3 = peg$parsecomment();
                              if (s3 === peg$FAILED) {
                                s3 = peg$parseanimation();
                                if (s3 === peg$FAILED) {
                                  s3 = peg$parseunknown();
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                if (s3 !== peg$FAILED) {
                  s4 = [];
                  s5 = peg$parse_();
                  while (s5 !== peg$FAILED) {
                    s4.push(s5);
                    s5 = peg$parse_();
                  }
                  s2 = peg$f0(s3);
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              }
            } else {
              s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
              s1 = peg$f1(s1);
            }
            s0 = s1;
            return s0;
          }
          function peg$parseanimation() {
            var s0, s1, s2, s3, s4, s5, s6;
            s0 = peg$currPos;
            s1 = peg$parsecolon();
            if (s1 !== peg$FAILED) {
              s2 = peg$parse_comment_();
              s3 = [];
              s4 = peg$currPos;
              s5 = peg$parseoperation();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_comment_();
                s4 = peg$f2(s2, s5, s6);
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
              if (s4 !== peg$FAILED) {
                while (s4 !== peg$FAILED) {
                  s3.push(s4);
                  s4 = peg$currPos;
                  s5 = peg$parseoperation();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parse_comment_();
                    s4 = peg$f2(s2, s5, s6);
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                }
              } else {
                s3 = peg$FAILED;
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parseequals();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parse_comment_();
                  s6 = peg$parsegroup();
                  if (s6 !== peg$FAILED) {
                    s0 = peg$f3(s2, s3, s5, s6);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parseforeach() {
            var s0, s1, s2;
            s0 = peg$currPos;
            s1 = peg$parseforeach_keyword();
            if (s1 === peg$FAILED) {
              s1 = peg$parseforeach_macro();
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseforeach_body();
              if (s2 !== peg$FAILED) {
                s0 = peg$f4(s1, s2);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parseforeach_body() {
            var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;
            s0 = peg$currPos;
            s1 = peg$parse_comment_();
            s2 = peg$currPos;
            s3 = [];
            s4 = peg$currPos;
            s5 = peg$currPos;
            peg$silentFails++;
            s6 = peg$parsein_keyword();
            if (s6 === peg$FAILED) {
              s6 = peg$parsesquare_brace_group();
            }
            peg$silentFails--;
            if (s6 === peg$FAILED) {
              s5 = void 0;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              if (input.length > peg$currPos) {
                s6 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$e0);
                }
              }
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$currPos;
              s5 = peg$currPos;
              peg$silentFails++;
              s6 = peg$parsein_keyword();
              if (s6 === peg$FAILED) {
                s6 = peg$parsesquare_brace_group();
              }
              peg$silentFails--;
              if (s6 === peg$FAILED) {
                s5 = void 0;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
              if (s5 !== peg$FAILED) {
                if (input.length > peg$currPos) {
                  s6 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e0);
                  }
                }
                if (s6 !== peg$FAILED) {
                  s5 = [s5, s6];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            }
            s2 = input.substring(s2, peg$currPos);
            s3 = peg$parsesquare_brace_group();
            if (s3 === peg$FAILED) {
              s3 = null;
            }
            s4 = peg$parse_comment_();
            s5 = peg$parsein_keyword();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_comment_();
              s7 = peg$parsegroup();
              if (s7 === peg$FAILED) {
                s7 = peg$parsemacro();
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parse_comment_();
                s9 = peg$parseforeach();
                if (s9 === peg$FAILED) {
                  s9 = peg$parsegroup();
                  if (s9 === peg$FAILED) {
                    s9 = peg$parsemacro();
                  }
                }
                if (s9 !== peg$FAILED) {
                  s0 = peg$f5(s1, s2, s3, s4, s6, s7, s8, s9);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parsesvg() {
            var s0, s1, s2, s3, s4, s5;
            s0 = peg$currPos;
            s1 = peg$parsesvg_keyword();
            if (s1 !== peg$FAILED) {
              s2 = peg$parse_comment_();
              s3 = peg$parsesquare_brace_group();
              if (s3 === peg$FAILED) {
                s3 = null;
              }
              s4 = peg$parse_comment_();
              s5 = peg$parsegroup();
              if (s5 !== peg$FAILED) {
                s0 = peg$f6(s2, s3, s4, s5);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parsecurve_to() {
            var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;
            s0 = peg$currPos;
            s1 = peg$parsedotdot();
            if (s1 !== peg$FAILED) {
              s2 = peg$parse_comment_();
              s3 = peg$parsecontrols_keyword();
              if (s3 !== peg$FAILED) {
                s4 = peg$parse_comment_();
                s5 = peg$parsecoordinate();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parse_comment_();
                  s7 = peg$currPos;
                  s8 = peg$parseand_keyword();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parse_comment_();
                    s10 = peg$parsecoordinate();
                    if (s10 !== peg$FAILED) {
                      s7 = peg$f7(s2, s4, s5, s6, s9, s10);
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                  if (s7 === peg$FAILED) {
                    s7 = null;
                  }
                  s8 = peg$parse_comment_();
                  s9 = peg$parsedotdot();
                  if (s9 !== peg$FAILED) {
                    s0 = peg$f8(s2, s4, s5, s6, s7, s8);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parseline_to() {
            var s0, s1, s2;
            s0 = peg$currPos;
            s1 = peg$parsepipe();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseminus();
              if (s2 !== peg$FAILED) {
                s0 = peg$f9();
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseminus();
              if (s1 !== peg$FAILED) {
                s2 = peg$parsepipe();
                if (s2 !== peg$FAILED) {
                  s0 = peg$f10();
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseminus();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseminus();
                  if (s2 !== peg$FAILED) {
                    s0 = peg$f11();
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              }
            }
            return s0;
          }
          function peg$parsecoordinate() {
            var s0, s1, s2, s3, s4, s5, s6, s7;
            s0 = peg$currPos;
            s1 = peg$currPos;
            s2 = peg$currPos;
            s3 = peg$parseplus();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseplus();
              if (s4 === peg$FAILED) {
                s4 = null;
              }
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
            if (s2 === peg$FAILED) {
              s2 = null;
            }
            s1 = input.substring(s1, peg$currPos);
            s2 = peg$parseopen_paren();
            if (s2 !== peg$FAILED) {
              s3 = peg$currPos;
              s4 = [];
              s5 = peg$currPos;
              s6 = peg$currPos;
              peg$silentFails++;
              s7 = peg$parseclose_paren();
              peg$silentFails--;
              if (s7 === peg$FAILED) {
                s6 = void 0;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 !== peg$FAILED) {
                if (input.length > peg$currPos) {
                  s7 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e0);
                  }
                }
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$currPos;
                s6 = peg$currPos;
                peg$silentFails++;
                s7 = peg$parseclose_paren();
                peg$silentFails--;
                if (s7 === peg$FAILED) {
                  s6 = void 0;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                  if (input.length > peg$currPos) {
                    s7 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$e0);
                    }
                  }
                  if (s7 !== peg$FAILED) {
                    s6 = [s6, s7];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              }
              s3 = input.substring(s3, peg$currPos);
              s4 = peg$parseclose_paren();
              if (s4 !== peg$FAILED) {
                s0 = peg$f12(s1, s3);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parsesquare_brace_group() {
            var s0, s1, s2, s3, s4, s5, s6;
            s0 = peg$currPos;
            s1 = peg$parseopen_square_brace();
            if (s1 !== peg$FAILED) {
              s2 = peg$currPos;
              s3 = [];
              s4 = peg$currPos;
              s5 = peg$currPos;
              peg$silentFails++;
              s6 = peg$parseclose_square_brace();
              peg$silentFails--;
              if (s6 === peg$FAILED) {
                s5 = void 0;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
              if (s5 !== peg$FAILED) {
                if (input.length > peg$currPos) {
                  s6 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e0);
                  }
                }
                if (s6 !== peg$FAILED) {
                  s5 = [s5, s6];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$currPos;
                s5 = peg$currPos;
                peg$silentFails++;
                s6 = peg$parseclose_square_brace();
                peg$silentFails--;
                if (s6 === peg$FAILED) {
                  s5 = void 0;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
                if (s5 !== peg$FAILED) {
                  if (input.length > peg$currPos) {
                    s6 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$e0);
                    }
                  }
                  if (s6 !== peg$FAILED) {
                    s5 = [s5, s6];
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              }
              s2 = input.substring(s2, peg$currPos);
              s3 = peg$parseclose_square_brace();
              if (s3 !== peg$FAILED) {
                s0 = peg$f13(s2);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parsedotdot() {
            var s0, s1, s2;
            s0 = peg$currPos;
            s1 = peg$parsedot();
            if (s1 !== peg$FAILED) {
              s2 = peg$parsedot();
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parseunknown() {
            var s0, s1;
            s0 = peg$currPos;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e0);
              }
            }
            if (s1 !== peg$FAILED) {
              s1 = peg$f14(s1);
            }
            s0 = s1;
            return s0;
          }
          function peg$parsecomment() {
            var s0, s1, s2;
            peg$silentFails++;
            s0 = peg$currPos;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e0);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$f19(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s0 = peg$f20(s1);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e3);
              }
            }
            return s0;
          }
          function peg$parse_() {
            var s0, s1, s2;
            s0 = peg$currPos;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e0);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$f21(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s0 = peg$f22(s1);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parse_comment_() {
            var s0, s1, s2, s3, s4;
            peg$silentFails++;
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parse_();
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$parse_();
            }
            s2 = peg$parsecomment();
            if (s2 === peg$FAILED) {
              s2 = null;
            }
            s3 = [];
            s4 = peg$parse_();
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parse_();
            }
            s0 = peg$f23(s2);
            peg$silentFails--;
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e4);
            }
            return s0;
          }
          function peg$parseoperation() {
            var s0, s1, s2;
            peg$silentFails++;
            s0 = peg$currPos;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e0);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$f24(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s0 = peg$f25(s1);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e5);
              }
            }
            return s0;
          }
          function peg$parseequals() {
            var s0, s1, s2;
            peg$silentFails++;
            s0 = peg$currPos;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e0);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$f26(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s0 = peg$f27(s1);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e6);
              }
            }
            return s0;
          }
          function peg$parseopen_square_brace() {
            var s0, s1, s2;
            s0 = peg$currPos;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e0);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$f28(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s0 = peg$f29(s1);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parseclose_square_brace() {
            var s0, s1, s2;
            s0 = peg$currPos;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e0);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$f30(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s0 = peg$f31(s1);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parseopen_paren() {
            var s0, s1, s2;
            s0 = peg$currPos;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e0);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$f32(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s0 = peg$f33(s1);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parseclose_paren() {
            var s0, s1, s2;
            s0 = peg$currPos;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e0);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$f34(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s0 = peg$f35(s1);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parseplus() {
            var s0, s1, s2;
            s0 = peg$currPos;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e0);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$f36(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s0 = peg$f37(s1);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parseminus() {
            var s0, s1, s2;
            s0 = peg$currPos;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e0);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$f38(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s0 = peg$f39(s1);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parsepipe() {
            var s0, s1, s2;
            s0 = peg$currPos;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e0);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$f40(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s0 = peg$f41(s1);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parsedot() {
            var s0, s1, s2;
            s0 = peg$currPos;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e0);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$f42(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s0 = peg$f43(s1);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parsecontrols_keyword() {
            var s0, s1, s2;
            s0 = peg$currPos;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e0);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$f44(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s0 = peg$f45(s1);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parseand_keyword() {
            var s0, s1, s2;
            s0 = peg$currPos;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e0);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$f46(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s0 = peg$f47(s1);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parsesvg_keyword() {
            var s0, s1, s2;
            s0 = peg$currPos;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e0);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$f48(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s0 = peg$f49(s1);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parsegroup() {
            var s0, s1, s2;
            s0 = peg$currPos;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e0);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$f50(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s0 = peg$f51(s1);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parsemacro() {
            var s0, s1, s2;
            s0 = peg$currPos;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e0);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$f52(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s0 = peg$f53(s1);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parseforeach_keyword() {
            var s0, s1, s2;
            s0 = peg$currPos;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e0);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$f54(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s0 = peg$f55(s1);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parseforeach_macro() {
            var s0, s1, s2;
            s0 = peg$currPos;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e0);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$f56(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s0 = peg$f57(s1);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parsein_keyword() {
            var s0, s1, s2;
            s0 = peg$currPos;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e0);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$f58(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s0 = peg$f59(s1);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          function peg$parsecolon() {
            var s0, s1, s2;
            s0 = peg$currPos;
            if (input.length > peg$currPos) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$e0);
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$f60(s1);
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s0 = peg$f61(s1);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            return s0;
          }
          if (!options.isWhitespace) {
            try {
              Object.assign(options, {
                isChar: (node, char) => node.type === "string" && node.content === char,
                isOperation: (node) => node.type === "string" && node.content.match(/[a-zA-Z]/),
                isWhitespace: (node) => node.type === "whitespace" || node.type === "parbreak",
                isSameLineComment: (node) => node.type === "comment" && node.sameline,
                isOwnLineComment: (node) => node.type === "comment" && !node.sameline,
                isComment: (node) => node.type === "comment",
                isGroup: (node) => node.type === "group",
                isMacro: (node, name) => node.type === "macro" && node.content === name,
                isAnyMacro: (node) => node.type === "macro"
              });
            } catch (e) {
              console.warn("Error when initializing parser", e);
            }
          }
          peg$result = peg$startRuleFunction();
          if (peg$result !== peg$FAILED && peg$currPos === input.length) {
            return peg$result;
          } else {
            if (peg$result !== peg$FAILED && peg$currPos < input.length) {
              peg$fail(peg$endExpectation());
            }
            throw peg$buildStructuredError(
              peg$maxFailExpected,
              peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
              peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
            );
          }
        }
        return {
          SyntaxError: peg$SyntaxError,
          parse: peg$parse
        };
      }()
    );
    var LatexPegParser = _LatexPegParser;
    var AlignEnvironmentPegParser = _AlignEnvironmentPegParser;
    var ArgSpecPegParser = _ArgSpecPegParser;
    var PgfkeysPegParser = _PgfkeysPegParser;
    var MacroSubstitutionPegParser = _MacroSubstitutionPegParser;
    var LigaturesPegParser = _LigaturesPegParser;
    var XColorPegParser = _XColorPegParser;
    var TabularPegParser = _TabularPegParser;
    var SystemePegParser = _SystemePegParser;
    var GluePegParser = _GluePegParser;
    var TikzPegParser = _TikzPegParser;
    exports2.AlignEnvironmentPegParser = AlignEnvironmentPegParser;
    exports2.ArgSpecPegParser = ArgSpecPegParser;
    exports2.GluePegParser = GluePegParser;
    exports2.LatexPegParser = LatexPegParser;
    exports2.LigaturesPegParser = LigaturesPegParser;
    exports2.MacroSubstitutionPegParser = MacroSubstitutionPegParser;
    exports2.PgfkeysPegParser = PgfkeysPegParser;
    exports2.SystemePegParser = SystemePegParser;
    exports2.TabularPegParser = TabularPegParser;
    exports2.TikzPegParser = TikzPegParser;
    exports2.XColorPegParser = XColorPegParser;
    exports2.decorateArrayForPegjs = decorateArrayForPegjs;
    exports2.splitStringsIntoSingleChars = splitStringsIntoSingleChars;
  }
});

// node_modules/unicode2latex/tables/biblatex.json
var require_biblatex = __commonJS({
  "node_modules/unicode2latex/tables/biblatex.json"(exports2, module2) {
    module2.exports = { base: { "#": { text: "\\#", math: "\\#" }, $: { text: "\\$", math: "\\$" }, "%": { text: "\\%", math: "\\%" }, "&": { text: "\\&", math: "\\&" }, _: { text: "\\_", math: "\\_" }, "\xA0": { text: "~", math: "~" }, "\xA3": { text: "\\pounds", math: "\\pounds", macrospacer: true }, "\xA7": { text: "\\S", math: "\\S", macrospacer: true }, "\xA9": { text: "\\copyright", math: "\\copyright", macrospacer: true, alt: ["textcomp"] }, "\xAD": { text: "\\-", math: "\\-" }, "\xB6": { text: "\\P", math: "\\P", macrospacer: true, alt: ["textcomp"] }, "\u2020": { text: "\\dag", math: "\\dag", macrospacer: true }, "\u2021": { text: "\\ddag", math: "\\ddag", macrospacer: true }, "\u2026": { text: "\\dots", math: "\\dots", macrospacer: true }, "\u205F": { text: "\\:", math: "\\:" }, "\u2212": { text: "-", math: "-" }, "\u263F": { text: "\\mercury", math: "\\mercury", macrospacer: true }, "\u2643": { text: "\\jupiter", math: "\\jupiter", macrospacer: true }, "\u2644": { text: "\\saturn", math: "\\saturn", macrospacer: true }, "\u2645": { text: "\\uranus", math: "\\uranus", macrospacer: true }, "\u2646": { text: "\\neptune", math: "\\neptune", macrospacer: true }, "\u2647": { text: "\\pluto", math: "\\pluto", macrospacer: true }, "\u2648": { text: "\\aries", math: "\\aries", macrospacer: true }, "\u2649": { text: "\\taurus", math: "\\taurus", macrospacer: true }, "\u264A": { text: "\\gemini", math: "\\gemini", macrospacer: true }, "\u264B": { text: "\\cancer", math: "\\cancer", macrospacer: true }, "\u264C": { text: "\\leo", math: "\\leo", macrospacer: true }, "\u264D": { text: "\\virgo", math: "\\virgo", macrospacer: true }, "\u264E": { text: "\\libra", math: "\\libra", macrospacer: true }, "\u264F": { text: "\\scorpio", math: "\\scorpio", macrospacer: true }, "\u2650": { text: "\\sagittarius", math: "\\sagittarius", macrospacer: true }, "\u2651": { text: "\\capricornus", math: "\\capricornus", macrospacer: true }, "\u2652": { text: "\\aquarius", math: "\\aquarius", macrospacer: true }, "<": { math: "<" }, ">": { math: ">" }, "\\": { text: "\\textbackslash", math: "\\backslash", macrospacer: true }, "|": { text: "\\textbar", math: "\\vert", macrospacer: true }, "\xAC": { text: "\\textlnot", math: "\\lnot", macrospacer: true }, "\xB0": { math: "^\\circ", alt: ["textcomp"] }, "\xB1": { text: "\\textpm", math: "\\pm", macrospacer: true }, "\xB2": { math: "^{2}" }, "\xB3": { math: "^{3}" }, "\xB7": { math: "\\cdot" }, "\xB9": { math: "^{1}" }, "\xBC": { math: "\\frac{1}{4}" }, "\xBD": { math: "\\frac{1}{2}" }, "\xBE": { math: "\\frac{3}{4}" }, "\xD7": { text: "\\texttimes", math: "\\times", macrospacer: true }, "\xF7": { text: "\\textdiv", math: "\\div", macrospacer: true }, \u0127: { math: "\\hbar", alt: ["tipa"] }, \u0131: { text: "\\i", math: "\\imath", macrospacer: true }, \u0192: { text: "\\textflorin", math: "f", macrospacer: true }, "\u0237": { math: "\\jmath" }, \u025B: { math: "\\varepsilon" }, \u0263: { math: "\\gamma", alt: ["tipa"] }, \u02B0: { text: "\\textsuperscript{h}", math: "^{h}" }, \u02B2: { text: "\\textsuperscript{j}", math: "^{j}" }, \u02B3: { text: "\\textsuperscript{r}", math: "^{r}" }, \u02B7: { text: "\\textsuperscript{w}", math: "^{w}" }, \u02B8: { text: "\\textsuperscript{y}", math: "^{y}" }, \u02E1: { text: "\\textsuperscript{l}", math: "^{l}" }, \u02E2: { text: "\\textsuperscript{s}", math: "^{s}" }, \u02E3: { text: "\\textsuperscript{x}", math: "^{x}" }, "\u0305": { math: "\\overline" }, "\u030A": { text: "\\r", math: "\\mathring", macrospacer: true }, "\u0331": { math: "\\underbar", alt: ["tipa"] }, "\u0332": { math: "\\underline" }, "\u0338": { math: "\\not" }, \u03A5\u0301: { math: "\\mathrm{'Y}" }, \u03A9\u0301: { math: "\\mathrm{'\\Omega}" }, \u03B9\u0308\u0301: { math: "\\acute{\\ddot{\\iota}}" }, \u0393: { math: "\\Gamma", alt: ["unicode-math"] }, \u0394: { math: "\\Delta", alt: ["unicode-math"] }, \u0398: { math: "\\Theta", alt: ["unicode-math"] }, \u039B: { math: "\\Lambda", alt: ["unicode-math"] }, \u039E: { math: "\\Xi" }, \u03A0: { math: "\\Pi" }, \u03A3: { math: "\\Sigma" }, \u03A5: { math: "\\Upsilon" }, \u03A6: { math: "\\Phi" }, \u03A8: { math: "\\Psi" }, \u03A9: { text: "\\textohm", math: "\\Omega", macrospacer: true }, \u0399\u0308: { math: "\\mathrm{\\ddot{I}}" }, \u03A5\u0308: { math: "\\mathrm{\\ddot{Y}}" }, \u03B1\u0301: { math: "\\acute{\\alpha}" }, \u03B5\u0301: { math: "\\acute{\\epsilon}" }, \u03B7\u0301: { math: "\\acute{\\eta}" }, \u03B9\u0301: { math: "\\acute{\\iota}" }, \u03C5\u0308\u0301: { math: "\\acute{\\ddot{\\upsilon}}" }, \u03B1: { math: "\\alpha", alt: ["textalpha"] }, \u03B2: { math: "\\beta" }, \u03B3: { math: "\\gamma" }, \u03B4: { math: "\\delta" }, \u03B5: { math: "\\varepsilon" }, \u03B6: { math: "\\zeta" }, \u03B7: { math: "\\eta" }, \u03B8: { text: "\\texttheta", math: "\\theta", macrospacer: true }, \u03B9: { math: "\\iota" }, \u03BA: { math: "\\kappa" }, \u03BB: { math: "\\lambda" }, \u03BC: { math: "\\mu" }, \u03BD: { math: "\\nu" }, \u03BE: { math: "\\xi" }, \u03C0: { math: "\\pi" }, "\u{1D70C}": { math: "\\rho", alt: ["unicode-math"] }, \u03C1: { math: "\\rho" }, \u03C2: { math: "\\varsigma" }, \u03C3: { math: "\\sigma" }, \u03C4: { math: "\\tau" }, \u03C5: { math: "\\upsilon" }, \u03C6: { math: "\\varphi" }, \u03C7: { math: "\\chi" }, \u03C8: { math: "\\psi" }, \u03C9: { math: "\\omega" }, \u03B9\u0308: { math: "\\ddot{\\iota}" }, \u03C5\u0308: { math: "\\ddot{\\upsilon}" }, \u03C5\u0301: { math: "\\acute{\\upsilon}" }, \u03C9\u0301: { math: "\\acute{\\omega}" }, \u03D1: { text: "\\textvartheta", math: "\\vartheta", macrospacer: true }, \u03D2: { math: "\\Upsilon" }, \u03D5: { math: "\\phi" }, \u03D6: { math: "\\varpi" }, "\u03D8": { math: "\\Qoppa" }, "\u03D9": { math: "\\qoppa" }, \u03DA: { math: "\\Stigma" }, \u03DB: { math: "\\stigma" }, \u03DC: { math: "\\Digamma" }, \u03DD: { math: "\\digamma" }, \u03DE: { math: "\\Koppa" }, \u03DF: { math: "\\koppa" }, \u03E0: { math: "\\Sampi" }, \u03E1: { math: "\\sampi" }, \u03F1: { math: "\\varrho" }, "\u03F4": { text: "\\textTheta", math: "\\upvarTheta", macrospacer: true }, "\u03F5": { math: "\\epsilon" }, "\u03F6": { math: "\\backepsilon", alt: ["unicode-math"] }, "\u0871": { math: "\\\\backslash" }, "\u1D43": { text: "\\textsuperscript{a}", math: "^{a}" }, "\u1D2C": { text: "\\textsuperscript{A}", math: "^{A}" }, "\u1D47": { text: "\\textsuperscript{b}", math: "^{b}" }, "\u1D48": { text: "\\textsuperscript{d}", math: "^{d}" }, "\u1D49": { text: "\\textsuperscript{e}", math: "^{e}" }, "\u1D4D": { text: "\\textsuperscript{g}", math: "^{g}" }, "\u1D4F": { text: "\\textsuperscript{k}", math: "^{k}" }, "\u1D50": { text: "\\textsuperscript{m}", math: "^{m}" }, "\u1D52": { text: "\\textsuperscript{o}", math: "^{o}" }, "\u1D56": { text: "\\textsuperscript{p}", math: "^{p}" }, "\u1D57": { text: "\\textsuperscript{t}", math: "^{t}" }, "\u1D58": { text: "\\textsuperscript{u}", math: "^{u}" }, "\u1D5B": { text: "\\textsuperscript{v}", math: "^{v}" }, "\u1D9C": { text: "\\textsuperscript{c}", math: "^{c}" }, "\u1DA0": { text: "\\textsuperscript{f}", math: "^{f}" }, "\u1DBB": { text: "\\textsuperscript{z}", math: "^{z}" }, "\u2003": { math: "\\quad" }, "\u200A": { math: "\\mkern1mu" }, "\u2022": { math: "\\bullet", alt: ["textcomp"] }, "\u2032": { math: "\\prime" }, "\u2033": { math: "{''}", alt: ["unicode-math"] }, "\u2034": { math: "{'''}", alt: ["unicode-math"] }, "\u2057": { math: "''''", alt: ["unicode-math"] }, "\u2070": { math: "^{0}" }, "\u2071": { text: "\\textsuperscript{i}", math: "^{i}" }, "\u2074": { math: "^{4}" }, "\u2075": { math: "^{5}" }, "\u2076": { math: "^{6}" }, "\u2077": { math: "^{7}" }, "\u2078": { math: "^{8}" }, "\u2079": { math: "^{9}" }, "\u207A": { math: "^{+}" }, "\u207B": { math: "^{-}" }, "\u207C": { math: "^{=}" }, "\u207D": { math: "^{(}" }, "\u207E": { math: "^{)}" }, \u207F: { math: "^{n}" }, "\u2080": { math: "_{0}" }, "\u2081": { math: "_{1}" }, "\u2082": { math: "_{2}" }, "\u2083": { math: "_{3}" }, "\u2084": { math: "_{4}" }, "\u2085": { math: "_{5}" }, "\u2086": { math: "_{6}" }, "\u2087": { math: "_{7}" }, "\u2088": { math: "_{8}" }, "\u2089": { math: "_{9}" }, "\u208A": { math: "_{+}" }, "\u208B": { math: "_{-}" }, "\u208C": { math: "_{=}" }, "\u208D": { math: "_{(}" }, "\u208E": { math: "_{)}" }, "\u2090": { text: "\\textsubscript{a}", math: "_{a}" }, "\u2091": { text: "\\textsubscript{e}", math: "_{e}" }, "\u2092": { text: "\\textsubscript{o}", math: "_{o}" }, "\u2093": { text: "\\textsubscript{x}", math: "_{x}" }, "\u2095": { text: "\\textsubscript{h}", math: "_{h}" }, "\u2096": { text: "\\textsubscript{k}", math: "_{k}" }, "\u2097": { text: "\\textsubscript{l}", math: "_{l}" }, "\u2098": { text: "\\textsubscript{m}", math: "_{m}" }, "\u2099": { text: "\\textsubscript{n}", math: "_{n}" }, "\u209A": { text: "\\textsubscript{p}", math: "_{p}" }, "\u209B": { text: "\\textsubscript{s}", math: "_{s}" }, "\u209C": { text: "\\textsubscript{t}", math: "_{t}" }, "\u20D0": { math: "\\lvec" }, "\u20D6": { math: "\\LVec" }, \u2102: { math: "\\mathbb{C}" }, \u2107: { math: "\\Euler" }, \u210B: { math: "\\mathcal{H}", alt: ["mathrsfs"] }, \u210C: { math: "\\mathfrak{H}" }, \u210D: { math: "\\mathbb{H}" }, \u2111: { math: "\\mathfrak{I}" }, \u2113: { math: "\\ell" }, \u2115: { math: "\\mathbb{N}" }, "\u2118": { math: "\\wp" }, \u2119: { math: "\\mathbb{P}" }, \u211A: { math: "\\mathbb{Q}" }, \u211C: { math: "\\mathfrak{R}" }, \u211D: { math: "\\mathbb{R}" }, \u2124: { math: "\\mathbb{Z}" }, \u2128: { math: "\\mathfrak{Z}" }, A\u030A: { text: "\\AA", math: "\\Angstroem", macrospacer: true }, \u212D: { math: "\\mathfrak{C}" }, \u2135: { math: "\\aleph" }, "\u213C": { math: "\\mathbb{\\pi}" }, "\u213D": { math: "\\mathbb{\\gamma}" }, "\u213E": { math: "\\mathbb{\\Gamma}" }, "\u213F": { math: "\\mathbb{\\Pi}" }, "\u2140": { math: "\\mathbb{\\Sigma}" }, "\u2146": { math: "\\DifferentialD" }, "\u2147": { math: "\\ExponetialE" }, "\u2148": { math: "\\ComplexI" }, "\u2149": { math: "\\ComplexJ" }, "\u214B": { math: "\\invamp" }, "\u2150": { math: "\\frac{1}{7}" }, "\u2151": { math: "\\frac{1}{9}" }, "\u2152": { math: "\\frac{1}{10}" }, "\u2153": { math: "\\frac{1}{3}" }, "\u2154": { math: "\\frac{2}{3}" }, "\u2155": { math: "\\frac{1}{5}" }, "\u2156": { math: "\\frac{2}{5}" }, "\u2157": { math: "\\frac{3}{5}" }, "\u2158": { math: "\\frac{4}{5}" }, "\u2159": { math: "\\frac{1}{6}" }, "\u215A": { math: "\\frac{5}{6}" }, "\u215B": { math: "\\frac{1}{8}" }, "\u215C": { math: "\\frac{3}{8}" }, "\u215D": { math: "\\frac{5}{8}" }, "\u215E": { math: "\\frac{7}{8}" }, "\u215F": { math: "\\frac{1}" }, "\u2189": { math: "\\frac{0}{3}" }, "\u2190": { text: "\\textleftarrow", math: "\\leftarrow", macrospacer: true }, "\u2191": { math: "\\uparrow", alt: ["textcomp"] }, "\u2192": { math: "\\rightarrow", alt: ["textcomp"] }, "\u2193": { text: "\\textdownarrow", math: "\\downarrow", macrospacer: true }, "\u2194": { math: "\\leftrightarrow" }, "\u2195": { math: "\\updownarrow" }, "\u2196": { math: "\\nwarrow" }, "\u2197": { math: "\\nearrow" }, "\u2198": { math: "\\searrow" }, "\u2199": { math: "\\swarrow" }, "\u219C": { math: "\\arrowwaveleft" }, "\u219D": { math: "\\arrowwaveright" }, "\u21A6": { math: "\\mapsto" }, "\u21A9": { math: "\\hookleftarrow" }, "\u21AA": { math: "\\hookrightarrow" }, "\u21AF": { math: "\\lightning" }, "\u21B2": { math: "\\dlsh" }, "\u21BB": { math: "\\circlearrowright" }, "\u21BC": { math: "\\leftharpoonup" }, "\u21BD": { math: "\\leftharpoondown" }, "\u21C0": { math: "\\rightharpoonup" }, "\u21C5": { math: "\\dblarrowupdown" }, "\u21CC": { math: "\\rightleftharpoons" }, "\u21D0": { math: "\\Leftarrow" }, "\u21D1": { math: "\\Uparrow" }, "\u21D2": { math: "\\Rightarrow" }, "\u21D3": { math: "\\Downarrow" }, "\u21D4": { math: "\\Leftrightarrow" }, "\u21D5": { math: "\\Updownarrow" }, "\u21E0": { math: "\\dashleftarrow" }, "\u21E2": { math: "\\dashrightarrow" }, "\u21E4": { math: "\\LeftArrowBar" }, "\u21E5": { math: "\\RightArrowBar" }, "\u21F5": { math: "\\DownArrowUpArrow" }, "\u21F8": { math: "\\pfun" }, "\u21FB": { math: "\\ffun" }, "\u2200": { math: "\\forall" }, "\u2202": { math: "\\partial" }, "\u2203": { math: "\\exists" }, "\u2208": { math: "\\in" }, "\u2208\u0338": { math: "\\notin" }, "\u220B": { math: "\\ni" }, "\u220B\u0338": { math: "\\not\\ni" }, "\u220F": { math: "\\prod" }, "\u2210": { math: "\\coprod" }, "\u2211": { math: "\\sum" }, "\u2213": { math: "\\mp" }, "\u2217": { math: "\\ast" }, "\u2218": { math: "\\circ" }, "\u2219": { math: "\\bullet" }, "\u221B": { math: "\\sqrt[3]" }, "\u221C": { math: "\\sqrt[4]" }, "\u221D": { math: "\\propto" }, "\u221E": { math: "\\infty" }, "\u2220": { math: "\\angle" }, "\u2223": { math: "\\mid" }, "\u2225": { math: "\\parallel" }, "\u2227": { math: "\\wedge" }, "\u2228": { math: "\\vee" }, "\u2229": { math: "\\cap" }, "\u222A": { math: "\\cup" }, "\u222B": { math: "\\int" }, "\u222C": { math: "{\\int\\!\\int}" }, "\u222D": { math: "{\\int\\!\\int\\!\\int}" }, "\u222E": { math: "\\oint" }, "\u222F": { math: "\\surfintegral" }, "\u2230": { math: "\\volintegral" }, "\u2231": { math: "\\clwintegral" }, "\u2236": { math: ":" }, "\u223A": { math: "\\mathbin{{:}\\!\\!{-}\\!\\!{:}}" }, "\u223B": { math: "\\homothetic" }, "\u223C": { math: "\\sim" }, "\u223E": { math: "\\lazysinv" }, "\u223F": { math: "\\AC" }, "\u2240": { math: "\\wr" }, "\u223C\u0338": { math: "\\not\\sim" }, "\u2242\u0338": { math: "\\NotEqualTilde" }, "\u2243": { math: "\\simeq" }, "\u2243\u0338": { math: "\\not\\simeq" }, "\u2245": { math: "\\cong" }, "\u2246": { math: "\\approxnotequal" }, "\u2245\u0338": { math: "\\not\\cong" }, "\u2248": { math: "\\approx", alt: ["inputenx"] }, "\u2248\u0338": { math: "\\not\\approx" }, "\u224B": { math: "\\tildetrpl" }, "\u224B\u0338": { math: "\\not\\apid" }, "\u224C": { math: "\\allequal" }, "\u224D": { math: "\\asymp" }, "\u224E\u0338": { math: "\\NotHumpDownHump" }, "\u224F\u0338": { math: "\\NotHumpEqual" }, "\u2250": { math: "\\doteq" }, "\u2250\u0338": { math: "\\not\\doteq" }, "\u2251": { math: "\\doteqdot" }, "\u2254": { text: ":=", math: ":=", alt: ["unicode-math"] }, "\u2255": { math: "=:" }, "\u2259": { math: "\\estimates" }, "\u225B": { math: "\\starequal" }, "=\u0338": { math: "\\neq" }, "\u2261": { math: "\\equiv" }, "\u2261\u0338": { math: "\\not\\equiv" }, "\u2264": { math: "\\leq" }, "\u2265": { math: "\\geq" }, "\u2266": { math: "\\leqq" }, "\u2267": { math: "\\geqq" }, "\u2268\uFE00": { math: "\\lvertneqq" }, "\u2269\uFE00": { math: "\\gvertneqq" }, "\u226A": { math: "\\ll" }, "\u226A\u0338": { math: "\\NotLessLess" }, "\u226B": { math: "\\gg" }, "\u226B\u0338": { math: "\\NotGreaterGreater" }, "\u224D\u0338": { math: "{\\not\\kern-0.3em\\times}", alt: ["unicode-math"] }, "<\u0338": { math: "\\not<" }, ">\u0338": { math: "\\not>" }, "\u2264\u0338": { math: "\\not\\leq" }, "\u2265\u0338": { math: "\\not\\geq" }, "\u2272": { math: "\\lessequivlnt" }, "\u2273": { math: "\\greaterequivlnt" }, "\u2276\u0338": { math: "\\notlessgreater" }, "\u2277\u0338": { math: "\\notgreaterless" }, "\u227A": { math: "\\prec" }, "\u227B": { math: "\\succ" }, "\u227E": { math: "\\precapprox" }, "\u227E\u0338": { math: "\\NotPrecedesTilde" }, "\u227F": { math: "\\succapprox" }, "\u227F\u0338": { math: "\\NotSucceedsTilde" }, "\u227A\u0338": { math: "\\not\\prec" }, "\u227B\u0338": { math: "\\not\\succ" }, "\u2282": { math: "\\subset" }, "\u2283": { math: "\\supset" }, "\u2282\u0338": { math: "\\not\\subset" }, "\u2283\u0338": { math: "\\not\\supset" }, "\u2286": { math: "\\subseteq" }, "\u2287": { math: "\\supseteq" }, "\u2286\u0338": { math: "\\not\\subseteq" }, "\u2287\u0338": { math: "\\not\\supseteq" }, "\u228A\uFE00": { math: "\\varsubsetneqq" }, "\u228B\uFE00": { math: "\\varsupsetneq" }, "\u228E": { math: "\\uplus" }, "\u228F\u0338": { math: "\\NotSquareSubset" }, "\u2290\u0338": { math: "\\NotSquareSuperset" }, "\u2291": { math: "\\sqsubseteq" }, "\u2292": { math: "\\sqsupseteq" }, "\u2293": { math: "\\sqcap" }, "\u2294": { math: "\\sqcup" }, "\u2295": { math: "\\oplus" }, "\u2296": { math: "\\ominus" }, "\u2297": { math: "\\otimes" }, "\u2298": { math: "\\oslash" }, "\u2299": { math: "\\odot" }, "\u22A2": { math: "\\vdash" }, "\u22A3": { math: "\\dashv" }, "\u22A4": { math: "\\top" }, "\u22A5": { math: "\\perp" }, "\u22A7": { math: "\\truestate" }, "\u22A8": { math: "\\forcesextra" }, "\u22B6": { math: "\\original" }, "\u22B7": { math: "\\image" }, "\u22B9": { math: "\\hermitconjmatrix" }, "\u22BE": { math: "\\rightanglearc" }, "\u22C0": { math: "\\bigwedge" }, "\u22C1": { math: "\\bigvee" }, "\u22C2": { math: "\\bigcap" }, "\u22C3": { math: "\\bigcup" }, "\u22C4": { math: "\\diamond" }, "\u22C5": { math: "\\cdot" }, "\u22C6": { math: "\\star" }, "\u22C8": { math: "\\bowtie" }, "\u22D8": { math: "\\verymuchless" }, "\u22D9": { math: "\\verymuchgreater" }, "\u2291\u0338": { math: "\\not\\sqsubseteq" }, "\u2292\u0338": { math: "\\not\\sqsupseteq" }, "\u22B2\u0338": { math: "\\ntriangleleft" }, "\u22B3\u0338": { math: "\\ntriangleright" }, "\u22EE": { math: "\\vdots" }, "\u22EF": { math: "\\cdots" }, "\u22F0": { math: "\\upslopeellipsis" }, "\u22F1": { math: "\\ddots" }, "\u22F6": { math: "\\barin" }, "\u2306": { math: "\\perspcorrespond" }, "\u2308": { math: "\\lceil" }, "\u2309": { math: "\\rceil" }, "\u230A": { math: "\\lfloor" }, "\u230B": { math: "\\rfloor" }, "\u2311": { math: "\\wasylozenge" }, "\u2315": { math: "\\recorder" }, "\u2316": { math: '{\\mathchar"2208}' }, "\u2322": { math: "\\frown" }, "\u2323": { math: "\\smile" }, "\u3008": { text: "\\textlangle", math: "\\langle", macrospacer: true }, "\u3009": { text: "\\textrangle", math: "\\rangle", macrospacer: true }, "\u2339": { math: "\\APLinv" }, "\u233F": { math: "\\notslash" }, "\u2340": { math: "\\notbackslash" }, "\u2347": { math: "\\APLleftarrowbox" }, "\u2348": { math: "\\APLrightarrowbox" }, "\u2349": { math: "\\invdiameter" }, "\u2350": { math: "\\APLuparrowbox" }, "\u2357": { math: "\\APLdownarrowbox" }, "\u235D": { math: "\\APLcomment" }, "\u235E": { math: "\\APLinput" }, "\u235F": { math: "\\APLlog" }, "\u23B0": { math: "\\lmoustache" }, "\u23B1": { math: "\\rmoustache" }, "\u24C8": { math: "\\circledS" }, "\u2571": { math: "\\diagup" }, "\u25A1": { math: "\\square" }, "\u25B6": { math: "\\RHD" }, "\u25B7": { math: "\\rhd" }, "\u25BD": { math: "\\bigtriangledown" }, "\u25C0": { math: "\\LHD" }, "\u25C1": { math: "\\lhd" }, "\u25C6": { text: "\\ding{117}", math: "\\Diamondblack" }, "\u25C7": { math: "\\Diamond" }, "\u25CB": { math: "\\bigcirc" }, "\u25CF": { text: "\\ding{108}", math: "\\CIRCLE" }, "\u25EF": { text: "\\textbigcircle", math: "\\bigcirc", macrospacer: true }, "\u2609": { math: "\\Sun" }, "\u2610": { math: "\\Square" }, "\u2611": { math: "\\CheckedBox" }, "\u2612": { math: "\\XBox" }, "\u2615": { math: "\\steaming" }, "\u261E": { text: "\\ding{43}", math: "\\pointright" }, "\u2620": { math: "\\skull" }, "\u2622": { math: "\\radiation" }, "\u2623": { math: "\\biohazard" }, "\u262F": { math: "\\yinyang" }, "\u2639": { math: "\\frownie" }, "\u263A": { math: "\\smiley" }, "\u2641": { math: "\\earth" }, "\u2660": { text: "\\ding{171}", math: "\\spadesuit" }, "\u2661": { math: "\\heartsuit" }, "\u2662": { math: "\\diamondsuit" }, "\u2663": { math: "\\clubsuit" }, "\u266D": { math: "\\flat" }, "\u266E": { math: "\\natural" }, "\u266F": { math: "\\sharp" }, "\u267B": { math: "\\recycle" }, "\u2693": { math: "\\anchor" }, "\u2694": { math: "\\swords" }, "\u26A0": { math: "\\warning" }, "\u26AA": { math: "\\medcirc" }, "\u26AB": { math: "\\medbullet" }, "\u270E": { text: "\\ding{46}", math: "\\pencil" }, "\u2717": { text: "\\ding{55}", math: "\\ballotx" }, "\u27A2": { text: "\\ding{226}", math: "\\arrowbullet" }, "\u27C2": { math: "\\perp" }, "\u27C5": { math: "\\Lbag" }, "\u27C6": { math: "\\Rbag" }, "\u27D0": { math: "\\Diamonddot" }, "\u27E6": { math: "\\llbracket" }, "\u27E7": { math: "\\rrbracket" }, "\u27E8": { math: "\\langle" }, "\u27E9": { math: "\\rangle" }, "\u27EA": { math: "\\lang" }, "\u27EE": { math: "\\lgroup" }, "\u27EF": { math: "\\rgroup" }, "\u27F5": { math: "\\longleftarrow" }, "\u27F6": { math: "\\longrightarrow" }, "\u27F7": { math: "\\longleftrightarrow" }, "\u27F8": { math: "\\Longleftarrow" }, "\u27F9": { math: "\\Longrightarrow" }, "\u27FA": { math: "\\Longleftrightarrow" }, "\u27FC": { math: "\\longmapsto" }, "\u2900": { math: "\\psur" }, "\u2912": { math: "\\UpArrowBar" }, "\u2913": { math: "\\DownArrowBar" }, "\u2914": { math: "\\pinj" }, "\u2915": { math: "\\finj" }, "\u2916": { math: "\\bij" }, "\u2940": { math: "\\Elolarr" }, "\u2941": { math: "\\Elorarr" }, "\u294A": { math: "\\leftrightharpoon" }, "\u294B": { math: "\\rightleftharpoon" }, "\u294F": { math: "\\RightUpDownVector" }, "\u2951": { math: "\\LeftUpDownVector" }, "\u2952": { math: "\\LeftVectorBar" }, "\u2953": { math: "\\RightVectorBar" }, "\u2954": { math: "\\RightUpVectorBar" }, "\u2955": { math: "\\RightDownVectorBar" }, "\u2956": { math: "\\DownLeftVectorBar" }, "\u2957": { math: "\\DownRightVectorBar" }, "\u2958": { math: "\\LeftUpVectorBar" }, "\u2959": { math: "\\LeftDownVectorBar" }, "\u295A": { math: "\\LeftTeeVector" }, "\u295B": { math: "\\RightTeeVector" }, "\u295C": { math: "\\RightUpTeeVector" }, "\u295D": { math: "\\RightDownTeeVector" }, "\u295E": { math: "\\DownLeftTeeVector" }, "\u295F": { math: "\\DownRightTeeVector" }, "\u2960": { math: "\\LeftUpTeeVector" }, "\u2961": { math: "\\LeftDownTeeVector" }, "\u2962": { math: "\\leftleftharpoons" }, "\u2963": { math: "\\upupharpoons" }, "\u2964": { math: "\\rightrightharpoons" }, "\u2965": { math: "\\downdownharpoons" }, "\u296A": { math: "\\leftbarharpoon" }, "\u296B": { math: "\\barleftharpoon" }, "\u296C": { math: "\\rightbarharpoon" }, "\u296D": { math: "\\barrightharpoon" }, "\u296E": { math: "\\UpEquilibrium" }, "\u296F": { math: "\\ReverseUpEquilibrium" }, "\u2970": { math: "\\RoundImplies" }, "\u2988": { math: "\\rimg" }, "\u2989": { math: "\\lblot" }, "\u298A": { math: "\\rblot" }, "\u299C": { math: "\\Angle" }, "\u29C4": { math: "\\boxslash" }, "\u29CF": { math: "\\LeftTriangleBar" }, "\u29CF\u0338": { math: "\\NotLeftTriangleBar" }, "\u29D0": { math: "\\RightTriangleBar" }, "\u29D0\u0338": { math: "\\NotRightTriangleBar" }, "\u29DF": { math: "\\multimapboth" }, "\u29F5": { math: "\\setminus" }, "\u29F9": { math: "\\zhide" }, "\u2A00": { math: "\\bigodot" }, "\u2A01": { math: "\\bigoplus" }, "\u2A02": { math: "\\bigotimes" }, "\u2A06": { math: "\\Elxsqcup" }, "\u2A09": { math: "\\varprod" }, "\u2A0F": { math: "\\clockoint" }, "\u2A16": { math: "\\sqrint" }, "\u2A3F": { math: "\\amalg" }, "\u2A56": { math: "\\ElOr" }, "\u2A6E": { math: "\\stackrel{*}{=}" }, "\u2A75": { math: "\\Equal" }, "\u2A76": { math: "\\Same" }, "\u2A7D": { math: "\\leq", alt: ["amssymb", "unicode-math"] }, "\u2AA1": { math: "\\NestedLessLess" }, "\u2AA1\u0338": { math: "\\NotNestedLessLess" }, "\u2AA2": { math: "\\NestedGreaterGreater" }, "\u2AA2\u0338": { math: "\\NotNestedGreaterGreater" }, "\u2AA6": { math: "\\leftslice" }, "\u2AA7": { math: "\\rightslice" }, "\u2AAF": { math: "\\preceq" }, "\u2AAF\u0338": { math: "\\not\\preceq" }, "\u2AB0": { math: "\\succeq" }, "\u2AB0\u0338": { math: "\\not\\succeq" }, "\u2ABB": { math: "\\llcurly" }, "\u2ABC": { math: "\\ggcurly" }, "\u2AC5\u0338": { math: "\\nsubseteqq" }, "\u2AC6\u0338": { math: "\\nsupseteqq" }, "\u2ADD\u0338": { math: "\\forks", alt: ["unicode-math"] }, "\u2AEA": { math: "\\Top" }, "\u2AFD": { math: "{{/}\\!\\!{/}}" }, "\u2AFD\u20E5": { math: "{\\rlap{\\textbackslash}{{/}\\!\\!{/}}}" }, "\u3014": { math: "\\lbrbrak" }, "\u3015": { math: "\\rbrbrak" }, "\u301A": { math: "\\openbracketleft" }, "\u301B": { math: "\\openbracketright" }, "\u{1D400}": { math: "\\mathbf{A}", alt: ["unicode-math"] }, "\u{1D401}": { math: "\\mathbf{B}", alt: ["unicode-math"] }, "\u{1D402}": { math: "\\mathbf{C}", alt: ["unicode-math"] }, "\u{1D403}": { math: "\\mathbf{D}", alt: ["unicode-math"] }, "\u{1D404}": { math: "\\mathbf{E}", alt: ["unicode-math"] }, "\u{1D405}": { math: "\\mathbf{F}", alt: ["unicode-math"] }, "\u{1D406}": { math: "\\mathbf{G}", alt: ["unicode-math"] }, "\u{1D407}": { math: "\\mathbf{H}", alt: ["unicode-math"] }, "\u{1D408}": { math: "\\mathbf{I}", alt: ["unicode-math"] }, "\u{1D409}": { math: "\\mathbf{J}", alt: ["unicode-math"] }, "\u{1D40A}": { math: "\\mathbf{K}", alt: ["unicode-math"] }, "\u{1D40B}": { math: "\\mathbf{L}", alt: ["unicode-math"] }, "\u{1D40C}": { math: "\\mathbf{M}", alt: ["unicode-math"] }, "\u{1D40D}": { math: "\\mathbf{N}", alt: ["unicode-math"] }, "\u{1D40E}": { math: "\\mathbf{O}", alt: ["unicode-math"] }, "\u{1D40F}": { math: "\\mathbf{P}", alt: ["unicode-math"] }, "\u{1D410}": { math: "\\mathbf{Q}", alt: ["unicode-math"] }, "\u{1D411}": { math: "\\mathbf{R}", alt: ["unicode-math"] }, "\u{1D412}": { math: "\\mathbf{S}", alt: ["unicode-math"] }, "\u{1D413}": { math: "\\mathbf{T}", alt: ["unicode-math"] }, "\u{1D414}": { math: "\\mathbf{U}", alt: ["unicode-math"] }, "\u{1D415}": { math: "\\mathbf{V}", alt: ["unicode-math"] }, "\u{1D416}": { math: "\\mathbf{W}", alt: ["unicode-math"] }, "\u{1D417}": { math: "\\mathbf{X}", alt: ["unicode-math"] }, "\u{1D418}": { math: "\\mathbf{Y}", alt: ["unicode-math"] }, "\u{1D419}": { math: "\\mathbf{Z}", alt: ["unicode-math"] }, "\u{1D41A}": { math: "\\mathbf{a}", alt: ["unicode-math"] }, "\u{1D41B}": { math: "\\mathbf{b}", alt: ["unicode-math"] }, "\u{1D41C}": { math: "\\mathbf{c}", alt: ["unicode-math"] }, "\u{1D41D}": { math: "\\mathbf{d}", alt: ["unicode-math"] }, "\u{1D41E}": { math: "\\mathbf{e}", alt: ["unicode-math"] }, "\u{1D41F}": { math: "\\mathbf{f}", alt: ["unicode-math"] }, "\u{1D420}": { math: "\\mathbf{g}", alt: ["unicode-math"] }, "\u{1D421}": { math: "\\mathbf{h}", alt: ["unicode-math"] }, "\u{1D422}": { math: "\\mathbf{i}", alt: ["unicode-math"] }, "\u{1D423}": { math: "\\mathbf{j}", alt: ["unicode-math"] }, "\u{1D424}": { math: "\\mathbf{k}", alt: ["unicode-math"] }, "\u{1D425}": { math: "\\mathbf{l}", alt: ["unicode-math"] }, "\u{1D426}": { math: "\\mathbf{m}", alt: ["unicode-math"] }, "\u{1D427}": { math: "\\mathbf{n}", alt: ["unicode-math"] }, "\u{1D428}": { math: "\\mathbf{o}", alt: ["unicode-math"] }, "\u{1D429}": { math: "\\mathbf{p}", alt: ["unicode-math"] }, "\u{1D42A}": { math: "\\mathbf{q}", alt: ["unicode-math"] }, "\u{1D42B}": { math: "\\mathbf{r}", alt: ["unicode-math"] }, "\u{1D42C}": { math: "\\mathbf{s}", alt: ["unicode-math"] }, "\u{1D42D}": { math: "\\mathbf{t}", alt: ["unicode-math"] }, "\u{1D42E}": { math: "\\mathbf{u}", alt: ["unicode-math"] }, "\u{1D42F}": { math: "\\mathbf{v}", alt: ["unicode-math"] }, "\u{1D430}": { math: "\\mathbf{w}", alt: ["unicode-math"] }, "\u{1D431}": { math: "\\mathbf{x}", alt: ["unicode-math"] }, "\u{1D432}": { math: "\\mathbf{y}", alt: ["unicode-math"] }, "\u{1D433}": { math: "\\mathbf{z}", alt: ["unicode-math"] }, "\u{1D434}": { math: "A", alt: ["unicode-math"] }, "\u{1D435}": { math: "B", alt: ["unicode-math"] }, "\u{1D436}": { math: "C", alt: ["unicode-math"] }, "\u{1D437}": { math: "D", alt: ["unicode-math"] }, "\u{1D438}": { math: "E", alt: ["unicode-math"] }, "\u{1D439}": { math: "F", alt: ["unicode-math"] }, "\u{1D43A}": { math: "G", alt: ["unicode-math"] }, "\u{1D43B}": { math: "H", alt: ["unicode-math"] }, "\u{1D43C}": { math: "I", alt: ["unicode-math"] }, "\u{1D43D}": { math: "J", alt: ["unicode-math"] }, "\u{1D43E}": { math: "K", alt: ["unicode-math"] }, "\u{1D43F}": { math: "L", alt: ["unicode-math"] }, "\u{1D440}": { math: "M", alt: ["unicode-math"] }, "\u{1D441}": { math: "N", alt: ["unicode-math"] }, "\u{1D442}": { math: "O", alt: ["unicode-math"] }, "\u{1D443}": { math: "P", alt: ["unicode-math"] }, "\u{1D444}": { math: "Q", alt: ["unicode-math"] }, "\u{1D445}": { math: "R", alt: ["unicode-math"] }, "\u{1D446}": { math: "S", alt: ["unicode-math"] }, "\u{1D447}": { math: "T", alt: ["unicode-math"] }, "\u{1D448}": { math: "U", alt: ["unicode-math"] }, "\u{1D449}": { math: "V", alt: ["unicode-math"] }, "\u{1D44A}": { math: "W", alt: ["unicode-math"] }, "\u{1D44B}": { math: "X", alt: ["unicode-math"] }, "\u{1D44C}": { math: "Y", alt: ["unicode-math"] }, "\u{1D44D}": { math: "Z", alt: ["unicode-math"] }, "\u{1D44E}": { math: "a", alt: ["unicode-math"] }, "\u{1D44F}": { math: "b", alt: ["unicode-math"] }, "\u{1D450}": { math: "c", alt: ["unicode-math"] }, "\u{1D451}": { math: "d", alt: ["unicode-math"] }, "\u{1D452}": { math: "e", alt: ["unicode-math"] }, "\u{1D453}": { math: "f", alt: ["unicode-math"] }, "\u{1D454}": { math: "g", alt: ["unicode-math"] }, "\u{1D456}": { math: "i", alt: ["unicode-math"] }, "\u{1D457}": { math: "j", alt: ["unicode-math"] }, "\u{1D458}": { math: "k", alt: ["unicode-math"] }, "\u{1D459}": { math: "l", alt: ["unicode-math"] }, "\u{1D45A}": { math: "m", alt: ["unicode-math"] }, "\u{1D45B}": { math: "n", alt: ["unicode-math"] }, "\u{1D45C}": { math: "o", alt: ["unicode-math"] }, "\u{1D45D}": { math: "p", alt: ["unicode-math"] }, "\u{1D45E}": { math: "q", alt: ["unicode-math"] }, "\u{1D45F}": { math: "r", alt: ["unicode-math"] }, "\u{1D460}": { math: "s", alt: ["unicode-math"] }, "\u{1D461}": { math: "t", alt: ["unicode-math"] }, "\u{1D462}": { math: "u", alt: ["unicode-math"] }, "\u{1D463}": { math: "v", alt: ["unicode-math"] }, "\u{1D464}": { math: "w", alt: ["unicode-math"] }, "\u{1D465}": { math: "x", alt: ["unicode-math"] }, "\u{1D466}": { math: "y", alt: ["unicode-math"] }, "\u{1D467}": { math: "z", alt: ["unicode-math"] }, "\u{1D468}": { math: "\\mathbit{A}", alt: ["unicode-math"] }, "\u{1D469}": { math: "\\mathbit{B}", alt: ["unicode-math"] }, "\u{1D46A}": { math: "\\mathbit{C}", alt: ["unicode-math"] }, "\u{1D46B}": { math: "\\mathbit{D}", alt: ["unicode-math"] }, "\u{1D46C}": { math: "\\mathbit{E}", alt: ["unicode-math"] }, "\u{1D46D}": { math: "\\mathbit{F}", alt: ["unicode-math"] }, "\u{1D46E}": { math: "\\mathbit{G}", alt: ["unicode-math"] }, "\u{1D46F}": { math: "\\mathbit{H}", alt: ["unicode-math"] }, "\u{1D470}": { math: "\\mathbit{I}", alt: ["unicode-math"] }, "\u{1D471}": { math: "\\mathbit{J}", alt: ["unicode-math"] }, "\u{1D472}": { math: "\\mathbit{K}", alt: ["unicode-math"] }, "\u{1D473}": { math: "\\mathbit{L}", alt: ["unicode-math"] }, "\u{1D474}": { math: "\\mathbit{M}", alt: ["unicode-math"] }, "\u{1D475}": { math: "\\mathbit{N}", alt: ["unicode-math"] }, "\u{1D476}": { math: "\\mathbit{O}", alt: ["unicode-math"] }, "\u{1D477}": { math: "\\mathbit{P}", alt: ["unicode-math"] }, "\u{1D478}": { math: "\\mathbit{Q}", alt: ["unicode-math"] }, "\u{1D479}": { math: "\\mathbit{R}", alt: ["unicode-math"] }, "\u{1D47A}": { math: "\\mathbit{S}", alt: ["unicode-math"] }, "\u{1D47B}": { math: "\\mathbit{T}", alt: ["unicode-math"] }, "\u{1D47C}": { math: "\\mathbit{U}", alt: ["unicode-math"] }, "\u{1D47D}": { math: "\\mathbit{V}", alt: ["unicode-math"] }, "\u{1D47E}": { math: "\\mathbit{W}", alt: ["unicode-math"] }, "\u{1D47F}": { math: "\\mathbit{X}", alt: ["unicode-math"] }, "\u{1D480}": { math: "\\mathbit{Y}", alt: ["unicode-math"] }, "\u{1D481}": { math: "\\mathbit{Z}", alt: ["unicode-math"] }, "\u{1D482}": { math: "\\mathbit{a}", alt: ["unicode-math"] }, "\u{1D483}": { math: "\\mathbit{b}", alt: ["unicode-math"] }, "\u{1D484}": { math: "\\mathbit{c}", alt: ["unicode-math"] }, "\u{1D485}": { math: "\\mathbit{d}", alt: ["unicode-math"] }, "\u{1D486}": { math: "\\mathbit{e}", alt: ["unicode-math"] }, "\u{1D487}": { math: "\\mathbit{f}", alt: ["unicode-math"] }, "\u{1D488}": { math: "\\mathbit{g}", alt: ["unicode-math"] }, "\u{1D489}": { math: "\\mathbit{h}", alt: ["unicode-math"] }, "\u{1D48A}": { math: "\\mathbit{i}", alt: ["unicode-math"] }, "\u{1D48B}": { math: "\\mathbit{j}", alt: ["unicode-math"] }, "\u{1D48C}": { math: "\\mathbit{k}", alt: ["unicode-math"] }, "\u{1D48D}": { math: "\\mathbit{l}", alt: ["unicode-math"] }, "\u{1D48E}": { math: "\\mathbit{m}", alt: ["unicode-math"] }, "\u{1D48F}": { math: "\\mathbit{n}", alt: ["unicode-math"] }, "\u{1D490}": { math: "\\mathbit{o}", alt: ["unicode-math"] }, "\u{1D491}": { math: "\\mathbit{p}", alt: ["unicode-math"] }, "\u{1D492}": { math: "\\mathbit{q}", alt: ["unicode-math"] }, "\u{1D493}": { math: "\\mathbit{r}", alt: ["unicode-math"] }, "\u{1D494}": { math: "\\mathbit{s}", alt: ["unicode-math"] }, "\u{1D495}": { math: "\\mathbit{t}", alt: ["unicode-math"] }, "\u{1D496}": { math: "\\mathbit{u}", alt: ["unicode-math"] }, "\u{1D497}": { math: "\\mathbit{v}", alt: ["unicode-math"] }, "\u{1D498}": { math: "\\mathbit{w}", alt: ["unicode-math"] }, "\u{1D499}": { math: "\\mathbit{x}", alt: ["unicode-math"] }, "\u{1D49A}": { math: "\\mathbit{y}", alt: ["unicode-math"] }, "\u{1D49B}": { math: "\\mathbit{z}", alt: ["unicode-math"] }, "\u{1D4D0}": { math: "\\mathmit{A}", alt: ["unicode-math"] }, "\u{1D4D1}": { math: "\\mathmit{B}", alt: ["unicode-math"] }, "\u{1D4D2}": { math: "\\mathmit{C}", alt: ["unicode-math"] }, "\u{1D4D3}": { math: "\\mathmit{D}", alt: ["unicode-math"] }, "\u{1D4D4}": { math: "\\mathmit{E}", alt: ["unicode-math"] }, "\u{1D4D5}": { math: "\\mathmit{F}", alt: ["unicode-math"] }, "\u{1D4D6}": { math: "\\mathmit{G}", alt: ["unicode-math"] }, "\u{1D4D7}": { math: "\\mathmit{H}", alt: ["unicode-math"] }, "\u{1D4D8}": { math: "\\mathmit{I}", alt: ["unicode-math"] }, "\u{1D4D9}": { math: "\\mathmit{J}", alt: ["unicode-math"] }, "\u{1D4DA}": { math: "\\mathmit{K}", alt: ["unicode-math"] }, "\u{1D4DB}": { math: "\\mathmit{L}", alt: ["unicode-math"] }, "\u{1D4DC}": { math: "\\mathmit{M}", alt: ["unicode-math"] }, "\u{1D4DD}": { math: "\\mathmit{N}", alt: ["unicode-math"] }, "\u{1D4DE}": { math: "\\mathmit{O}", alt: ["unicode-math"] }, "\u{1D4DF}": { math: "\\mathmit{P}", alt: ["unicode-math"] }, "\u{1D4E0}": { math: "\\mathmit{Q}", alt: ["unicode-math"] }, "\u{1D4E1}": { math: "\\mathmit{R}", alt: ["unicode-math"] }, "\u{1D4E2}": { math: "\\mathmit{S}", alt: ["unicode-math"] }, "\u{1D4E3}": { math: "\\mathmit{T}", alt: ["unicode-math"] }, "\u{1D4E4}": { math: "\\mathmit{U}", alt: ["unicode-math"] }, "\u{1D4E5}": { math: "\\mathmit{V}", alt: ["unicode-math"] }, "\u{1D4E6}": { math: "\\mathmit{W}", alt: ["unicode-math"] }, "\u{1D4E7}": { math: "\\mathmit{X}", alt: ["unicode-math"] }, "\u{1D4E8}": { math: "\\mathmit{Y}", alt: ["unicode-math"] }, "\u{1D4E9}": { math: "\\mathmit{Z}", alt: ["unicode-math"] }, "\u{1D4EA}": { math: "\\mathmit{a}", alt: ["unicode-math"] }, "\u{1D4EB}": { math: "\\mathmit{b}", alt: ["unicode-math"] }, "\u{1D4EC}": { math: "\\mathmit{c}", alt: ["unicode-math"] }, "\u{1D4ED}": { math: "\\mathmit{d}", alt: ["unicode-math"] }, "\u{1D4EE}": { math: "\\mathmit{e}", alt: ["unicode-math"] }, "\u{1D4EF}": { math: "\\mathmit{f}", alt: ["unicode-math"] }, "\u{1D4F0}": { math: "\\mathmit{g}", alt: ["unicode-math"] }, "\u{1D4F1}": { math: "\\mathmit{h}", alt: ["unicode-math"] }, "\u{1D4F2}": { math: "\\mathmit{i}", alt: ["unicode-math"] }, "\u{1D4F3}": { math: "\\mathmit{j}", alt: ["unicode-math"] }, "\u{1D4F4}": { math: "\\mathmit{k}", alt: ["unicode-math"] }, "\u{1D4F5}": { math: "\\mathmit{l}", alt: ["unicode-math"] }, "\u{1D4F6}": { math: "\\mathmit{m}", alt: ["unicode-math"] }, "\u{1D4F7}": { math: "\\mathmit{n}", alt: ["unicode-math"] }, "\u{1D4F8}": { math: "\\mathmit{o}", alt: ["unicode-math"] }, "\u{1D4F9}": { math: "\\mathmit{p}", alt: ["unicode-math"] }, "\u{1D4FA}": { math: "\\mathmit{q}", alt: ["unicode-math"] }, "\u{1D4FB}": { math: "\\mathmit{r}", alt: ["unicode-math"] }, "\u{1D4FC}": { math: "\\mathmit{s}", alt: ["unicode-math"] }, "\u{1D4FD}": { math: "\\mathmit{t}", alt: ["unicode-math"] }, "\u{1D4FE}": { math: "\\mathmit{u}", alt: ["unicode-math"] }, "\u{1D4FF}": { math: "\\mathmit{v}", alt: ["unicode-math"] }, "\u{1D500}": { math: "\\mathmit{w}", alt: ["unicode-math"] }, "\u{1D501}": { math: "\\mathmit{x}", alt: ["unicode-math"] }, "\u{1D502}": { math: "\\mathmit{y}", alt: ["unicode-math"] }, "\u{1D503}": { math: "\\mathmit{z}", alt: ["unicode-math"] }, "\u{1D504}": { math: "\\mathfrak{A}", alt: ["unicode-math"] }, "\u{1D505}": { math: "\\mathfrak{B}", alt: ["unicode-math"] }, "\u{1D507}": { math: "\\mathfrak{D}", alt: ["unicode-math"] }, "\u{1D508}": { math: "\\mathfrak{E}", alt: ["unicode-math"] }, "\u{1D509}": { math: "\\mathfrak{F}", alt: ["unicode-math"] }, "\u{1D50A}": { math: "\\mathfrak{G}", alt: ["unicode-math"] }, "\u{1D50D}": { math: "\\mathfrak{J}", alt: ["unicode-math"] }, "\u{1D50E}": { math: "\\mathfrak{K}", alt: ["unicode-math"] }, "\u{1D50F}": { math: "\\mathfrak{L}", alt: ["unicode-math"] }, "\u{1D510}": { math: "\\mathfrak{M}", alt: ["unicode-math"] }, "\u{1D511}": { math: "\\mathfrak{N}", alt: ["unicode-math"] }, "\u{1D512}": { math: "\\mathfrak{O}", alt: ["unicode-math"] }, "\u{1D513}": { math: "\\mathfrak{P}", alt: ["unicode-math"] }, "\u{1D514}": { math: "\\mathfrak{Q}", alt: ["unicode-math"] }, "\u{1D516}": { math: "\\mathfrak{S}", alt: ["unicode-math"] }, "\u{1D517}": { math: "\\mathfrak{T}", alt: ["unicode-math"] }, "\u{1D518}": { math: "\\mathfrak{U}", alt: ["unicode-math"] }, "\u{1D519}": { math: "\\mathfrak{V}", alt: ["unicode-math"] }, "\u{1D51A}": { math: "\\mathfrak{W}", alt: ["unicode-math"] }, "\u{1D51B}": { math: "\\mathfrak{X}", alt: ["unicode-math"] }, "\u{1D51C}": { math: "\\mathfrak{Y}", alt: ["unicode-math"] }, "\u{1D51E}": { math: "\\mathfrak{a}", alt: ["unicode-math"] }, "\u{1D51F}": { math: "\\mathfrak{b}", alt: ["unicode-math"] }, "\u{1D520}": { math: "\\mathfrak{c}", alt: ["unicode-math"] }, "\u{1D521}": { math: "\\mathfrak{d}", alt: ["unicode-math"] }, "\u{1D522}": { math: "\\mathfrak{e}", alt: ["unicode-math"] }, "\u{1D523}": { math: "\\mathfrak{f}", alt: ["unicode-math"] }, "\u{1D524}": { math: "\\mathfrak{g}", alt: ["unicode-math"] }, "\u{1D525}": { math: "\\mathfrak{h}", alt: ["unicode-math"] }, "\u{1D526}": { math: "\\mathfrak{i}", alt: ["unicode-math"] }, "\u{1D527}": { math: "\\mathfrak{j}", alt: ["unicode-math"] }, "\u{1D528}": { math: "\\mathfrak{k}", alt: ["unicode-math"] }, "\u{1D529}": { math: "\\mathfrak{l}", alt: ["unicode-math"] }, "\u{1D52A}": { math: "\\mathfrak{m}", alt: ["unicode-math"] }, "\u{1D52B}": { math: "\\mathfrak{n}", alt: ["unicode-math"] }, "\u{1D52C}": { math: "\\mathfrak{o}", alt: ["unicode-math"] }, "\u{1D52D}": { math: "\\mathfrak{p}", alt: ["unicode-math"] }, "\u{1D52E}": { math: "\\mathfrak{q}", alt: ["unicode-math"] }, "\u{1D52F}": { math: "\\mathfrak{r}", alt: ["unicode-math"] }, "\u{1D530}": { math: "\\mathfrak{s}", alt: ["unicode-math"] }, "\u{1D531}": { math: "\\mathfrak{t}", alt: ["unicode-math"] }, "\u{1D532}": { math: "\\mathfrak{u}", alt: ["unicode-math"] }, "\u{1D533}": { math: "\\mathfrak{v}", alt: ["unicode-math"] }, "\u{1D534}": { math: "\\mathfrak{w}", alt: ["unicode-math"] }, "\u{1D535}": { math: "\\mathfrak{x}", alt: ["unicode-math"] }, "\u{1D536}": { math: "\\mathfrak{y}", alt: ["unicode-math"] }, "\u{1D537}": { math: "\\mathfrak{z}", alt: ["unicode-math"] }, "\u{1D538}": { math: "\\mathbb{A}", alt: ["unicode-math"] }, "\u{1D539}": { math: "\\mathbb{B}", alt: ["unicode-math"] }, "\u{1D53B}": { math: "\\mathbb{D}", alt: ["unicode-math"] }, "\u{1D53C}": { math: "\\mathbb{E}", alt: ["unicode-math"] }, "\u{1D53D}": { math: "\\mathbb{F}", alt: ["unicode-math"] }, "\u{1D53E}": { math: "\\mathbb{G}", alt: ["unicode-math"] }, "\u{1D540}": { math: "\\mathbb{I}", alt: ["unicode-math"] }, "\u{1D541}": { math: "\\mathbb{J}", alt: ["unicode-math"] }, "\u{1D542}": { math: "\\mathbb{K}", alt: ["unicode-math"] }, "\u{1D543}": { math: "\\mathbb{L}", alt: ["unicode-math"] }, "\u{1D544}": { math: "\\mathbb{M}", alt: ["unicode-math"] }, "\u{1D546}": { math: "\\mathbb{O}", alt: ["unicode-math"] }, "\u{1D54A}": { math: "\\mathbb{S}", alt: ["unicode-math"] }, "\u{1D54B}": { math: "\\mathbb{T}", alt: ["unicode-math"] }, "\u{1D54C}": { math: "\\mathbb{U}", alt: ["unicode-math"] }, "\u{1D54D}": { math: "\\mathbb{V}", alt: ["unicode-math"] }, "\u{1D54E}": { math: "\\mathbb{W}", alt: ["unicode-math"] }, "\u{1D54F}": { math: "\\mathbb{X}", alt: ["unicode-math"] }, "\u{1D550}": { math: "\\mathbb{Y}", alt: ["unicode-math"] }, "\u{1D552}": { math: "\\mathbb{a}", alt: ["unicode-math"] }, "\u{1D553}": { math: "\\mathbb{b}", alt: ["unicode-math"] }, "\u{1D554}": { math: "\\mathbb{c}", alt: ["unicode-math"] }, "\u{1D555}": { math: "\\mathbb{d}", alt: ["unicode-math"] }, "\u{1D556}": { math: "\\mathbb{e}", alt: ["unicode-math"] }, "\u{1D557}": { math: "\\mathbb{f}", alt: ["unicode-math"] }, "\u{1D558}": { math: "\\mathbb{g}", alt: ["unicode-math"] }, "\u{1D559}": { math: "\\mathbb{h}", alt: ["unicode-math"] }, "\u{1D55A}": { math: "\\mathbb{i}", alt: ["unicode-math"] }, "\u{1D55B}": { math: "\\mathbb{j}", alt: ["unicode-math"] }, "\u{1D55C}": { math: "\\mathbb{k}", alt: ["unicode-math"] }, "\u{1D55D}": { math: "\\mathbb{l}", alt: ["unicode-math"] }, "\u{1D55E}": { math: "\\mathbb{m}", alt: ["unicode-math"] }, "\u{1D55F}": { math: "\\mathbb{n}", alt: ["unicode-math"] }, "\u{1D560}": { math: "\\mathbb{o}", alt: ["unicode-math"] }, "\u{1D561}": { math: "\\mathbb{p}", alt: ["unicode-math"] }, "\u{1D562}": { math: "\\mathbb{q}", alt: ["unicode-math"] }, "\u{1D563}": { math: "\\mathbb{r}", alt: ["unicode-math"] }, "\u{1D564}": { math: "\\mathbb{s}", alt: ["unicode-math"] }, "\u{1D565}": { math: "\\mathbb{t}", alt: ["unicode-math"] }, "\u{1D566}": { math: "\\mathbb{u}", alt: ["unicode-math"] }, "\u{1D567}": { math: "\\mathbb{v}", alt: ["unicode-math"] }, "\u{1D568}": { math: "\\mathbb{w}", alt: ["unicode-math"] }, "\u{1D569}": { math: "\\mathbb{x}", alt: ["unicode-math"] }, "\u{1D56A}": { math: "\\mathbb{y}", alt: ["unicode-math"] }, "\u{1D56B}": { math: "\\mathbb{z}", alt: ["unicode-math"] }, "\u{1D56C}": { math: "A", alt: ["unicode-math"] }, "\u{1D56D}": { math: "B", alt: ["unicode-math"] }, "\u{1D56E}": { math: "C", alt: ["unicode-math"] }, "\u{1D56F}": { math: "D", alt: ["unicode-math"] }, "\u{1D570}": { math: "E", alt: ["unicode-math"] }, "\u{1D571}": { math: "F", alt: ["unicode-math"] }, "\u{1D572}": { math: "G", alt: ["unicode-math"] }, "\u{1D573}": { math: "H", alt: ["unicode-math"] }, "\u{1D574}": { math: "I", alt: ["unicode-math"] }, "\u{1D575}": { math: "J", alt: ["unicode-math"] }, "\u{1D576}": { math: "K", alt: ["unicode-math"] }, "\u{1D577}": { math: "L", alt: ["unicode-math"] }, "\u{1D578}": { math: "M", alt: ["unicode-math"] }, "\u{1D579}": { math: "N", alt: ["unicode-math"] }, "\u{1D57A}": { math: "O", alt: ["unicode-math"] }, "\u{1D57B}": { math: "P", alt: ["unicode-math"] }, "\u{1D57C}": { math: "Q", alt: ["unicode-math"] }, "\u{1D57D}": { math: "R", alt: ["unicode-math"] }, "\u{1D57E}": { math: "S", alt: ["unicode-math"] }, "\u{1D57F}": { math: "T", alt: ["unicode-math"] }, "\u{1D580}": { math: "U", alt: ["unicode-math"] }, "\u{1D581}": { math: "V", alt: ["unicode-math"] }, "\u{1D582}": { math: "W", alt: ["unicode-math"] }, "\u{1D583}": { math: "X", alt: ["unicode-math"] }, "\u{1D584}": { math: "Y", alt: ["unicode-math"] }, "\u{1D585}": { math: "Z", alt: ["unicode-math"] }, "\u{1D586}": { math: "a", alt: ["unicode-math"] }, "\u{1D587}": { math: "b", alt: ["unicode-math"] }, "\u{1D588}": { math: "c", alt: ["unicode-math"] }, "\u{1D589}": { math: "d", alt: ["unicode-math"] }, "\u{1D58A}": { math: "e", alt: ["unicode-math"] }, "\u{1D58B}": { math: "f", alt: ["unicode-math"] }, "\u{1D58C}": { math: "g", alt: ["unicode-math"] }, "\u{1D58D}": { math: "h", alt: ["unicode-math"] }, "\u{1D58E}": { math: "i", alt: ["unicode-math"] }, "\u{1D58F}": { math: "j", alt: ["unicode-math"] }, "\u{1D590}": { math: "k", alt: ["unicode-math"] }, "\u{1D591}": { math: "l", alt: ["unicode-math"] }, "\u{1D592}": { math: "m", alt: ["unicode-math"] }, "\u{1D593}": { math: "n", alt: ["unicode-math"] }, "\u{1D594}": { math: "o", alt: ["unicode-math"] }, "\u{1D595}": { math: "p", alt: ["unicode-math"] }, "\u{1D596}": { math: "q", alt: ["unicode-math"] }, "\u{1D597}": { math: "r", alt: ["unicode-math"] }, "\u{1D598}": { math: "s", alt: ["unicode-math"] }, "\u{1D599}": { math: "t", alt: ["unicode-math"] }, "\u{1D59A}": { math: "u", alt: ["unicode-math"] }, "\u{1D59B}": { math: "v", alt: ["unicode-math"] }, "\u{1D59C}": { math: "w", alt: ["unicode-math"] }, "\u{1D59D}": { math: "x", alt: ["unicode-math"] }, "\u{1D59E}": { math: "y", alt: ["unicode-math"] }, "\u{1D59F}": { math: "z", alt: ["unicode-math"] }, "\u{1D5A0}": { math: "\\mathsf{A}", alt: ["unicode-math"] }, "\u{1D5A1}": { math: "\\mathsf{B}", alt: ["unicode-math"] }, "\u{1D5A2}": { math: "\\mathsf{C}", alt: ["unicode-math"] }, "\u{1D5A3}": { math: "\\mathsf{D}", alt: ["unicode-math"] }, "\u{1D5A4}": { math: "\\mathsf{E}", alt: ["unicode-math"] }, "\u{1D5A5}": { math: "\\mathsf{F}", alt: ["unicode-math"] }, "\u{1D5A6}": { math: "\\mathsf{G}", alt: ["unicode-math"] }, "\u{1D5A7}": { math: "\\mathsf{H}", alt: ["unicode-math"] }, "\u{1D5A8}": { math: "\\mathsf{I}", alt: ["unicode-math"] }, "\u{1D5A9}": { math: "\\mathsf{J}", alt: ["unicode-math"] }, "\u{1D5AA}": { math: "\\mathsf{K}", alt: ["unicode-math"] }, "\u{1D5AB}": { math: "\\mathsf{L}", alt: ["unicode-math"] }, "\u{1D5AC}": { math: "\\mathsf{M}", alt: ["unicode-math"] }, "\u{1D5AD}": { math: "\\mathsf{N}", alt: ["unicode-math"] }, "\u{1D5AE}": { math: "\\mathsf{O}", alt: ["unicode-math"] }, "\u{1D5AF}": { math: "\\mathsf{P}", alt: ["unicode-math"] }, "\u{1D5B0}": { math: "\\mathsf{Q}", alt: ["unicode-math"] }, "\u{1D5B1}": { math: "\\mathsf{R}", alt: ["unicode-math"] }, "\u{1D5B2}": { math: "\\mathsf{S}", alt: ["unicode-math"] }, "\u{1D5B3}": { math: "\\mathsf{T}", alt: ["unicode-math"] }, "\u{1D5B4}": { math: "\\mathsf{U}", alt: ["unicode-math"] }, "\u{1D5B5}": { math: "\\mathsf{V}", alt: ["unicode-math"] }, "\u{1D5B6}": { math: "\\mathsf{W}", alt: ["unicode-math"] }, "\u{1D5B7}": { math: "\\mathsf{X}", alt: ["unicode-math"] }, "\u{1D5B8}": { math: "\\mathsf{Y}", alt: ["unicode-math"] }, "\u{1D5B9}": { math: "\\mathsf{Z}", alt: ["unicode-math"] }, "\u{1D5BA}": { math: "\\mathsf{a}", alt: ["unicode-math"] }, "\u{1D5BB}": { math: "\\mathsf{b}", alt: ["unicode-math"] }, "\u{1D5BC}": { math: "\\mathsf{c}", alt: ["unicode-math"] }, "\u{1D5BD}": { math: "\\mathsf{d}", alt: ["unicode-math"] }, "\u{1D5BE}": { math: "\\mathsf{e}", alt: ["unicode-math"] }, "\u{1D5BF}": { math: "\\mathsf{f}", alt: ["unicode-math"] }, "\u{1D5C0}": { math: "\\mathsf{g}", alt: ["unicode-math"] }, "\u{1D5C1}": { math: "\\mathsf{h}", alt: ["unicode-math"] }, "\u{1D5C2}": { math: "\\mathsf{i}", alt: ["unicode-math"] }, "\u{1D5C3}": { math: "\\mathsf{j}", alt: ["unicode-math"] }, "\u{1D5C4}": { math: "\\mathsf{k}", alt: ["unicode-math"] }, "\u{1D5C5}": { math: "\\mathsf{l}", alt: ["unicode-math"] }, "\u{1D5C6}": { math: "\\mathsf{m}", alt: ["unicode-math"] }, "\u{1D5C7}": { math: "\\mathsf{n}", alt: ["unicode-math"] }, "\u{1D5C8}": { math: "\\mathsf{o}", alt: ["unicode-math"] }, "\u{1D5C9}": { math: "\\mathsf{p}", alt: ["unicode-math"] }, "\u{1D5CA}": { math: "\\mathsf{q}", alt: ["unicode-math"] }, "\u{1D5CB}": { math: "\\mathsf{r}", alt: ["unicode-math"] }, "\u{1D5CC}": { math: "\\mathsf{s}", alt: ["unicode-math"] }, "\u{1D5CD}": { math: "\\mathsf{t}", alt: ["unicode-math"] }, "\u{1D5CE}": { math: "\\mathsf{u}", alt: ["unicode-math"] }, "\u{1D5CF}": { math: "\\mathsf{v}", alt: ["unicode-math"] }, "\u{1D5D0}": { math: "\\mathsf{w}", alt: ["unicode-math"] }, "\u{1D5D1}": { math: "\\mathsf{x}", alt: ["unicode-math"] }, "\u{1D5D2}": { math: "\\mathsf{y}", alt: ["unicode-math"] }, "\u{1D5D3}": { math: "\\mathsf{z}", alt: ["unicode-math"] }, "\u{1D5D4}": { math: "\\mathsfbf{A}", alt: ["unicode-math"] }, "\u{1D5D5}": { math: "\\mathsfbf{B}", alt: ["unicode-math"] }, "\u{1D5D6}": { math: "\\mathsfbf{C}", alt: ["unicode-math"] }, "\u{1D5D7}": { math: "\\mathsfbf{D}", alt: ["unicode-math"] }, "\u{1D5D8}": { math: "\\mathsfbf{E}", alt: ["unicode-math"] }, "\u{1D5D9}": { math: "\\mathsfbf{F}", alt: ["unicode-math"] }, "\u{1D5DA}": { math: "\\mathsfbf{G}", alt: ["unicode-math"] }, "\u{1D5DB}": { math: "\\mathsfbf{H}", alt: ["unicode-math"] }, "\u{1D5DC}": { math: "\\mathsfbf{I}", alt: ["unicode-math"] }, "\u{1D5DD}": { math: "\\mathsfbf{J}", alt: ["unicode-math"] }, "\u{1D5DE}": { math: "\\mathsfbf{K}", alt: ["unicode-math"] }, "\u{1D5DF}": { math: "\\mathsfbf{L}", alt: ["unicode-math"] }, "\u{1D5E0}": { math: "\\mathsfbf{M}", alt: ["unicode-math"] }, "\u{1D5E1}": { math: "\\mathsfbf{N}", alt: ["unicode-math"] }, "\u{1D5E2}": { math: "\\mathsfbf{O}", alt: ["unicode-math"] }, "\u{1D5E3}": { math: "\\mathsfbf{P}", alt: ["unicode-math"] }, "\u{1D5E4}": { math: "\\mathsfbf{Q}", alt: ["unicode-math"] }, "\u{1D5E5}": { math: "\\mathsfbf{R}", alt: ["unicode-math"] }, "\u{1D5E6}": { math: "\\mathsfbf{S}", alt: ["unicode-math"] }, "\u{1D5E7}": { math: "\\mathsfbf{T}", alt: ["unicode-math"] }, "\u{1D5E8}": { math: "\\mathsfbf{U}", alt: ["unicode-math"] }, "\u{1D5E9}": { math: "\\mathsfbf{V}", alt: ["unicode-math"] }, "\u{1D5EA}": { math: "\\mathsfbf{W}", alt: ["unicode-math"] }, "\u{1D5EB}": { math: "\\mathsfbf{X}", alt: ["unicode-math"] }, "\u{1D5EC}": { math: "\\mathsfbf{Y}", alt: ["unicode-math"] }, "\u{1D5ED}": { math: "\\mathsfbf{Z}", alt: ["unicode-math"] }, "\u{1D5EE}": { math: "\\mathsfbf{a}", alt: ["unicode-math"] }, "\u{1D5EF}": { math: "\\mathsfbf{b}", alt: ["unicode-math"] }, "\u{1D5F0}": { math: "\\mathsfbf{c}", alt: ["unicode-math"] }, "\u{1D5F1}": { math: "\\mathsfbf{d}", alt: ["unicode-math"] }, "\u{1D5F2}": { math: "\\mathsfbf{e}", alt: ["unicode-math"] }, "\u{1D5F3}": { math: "\\mathsfbf{f}", alt: ["unicode-math"] }, "\u{1D5F4}": { math: "\\mathsfbf{g}", alt: ["unicode-math"] }, "\u{1D5F5}": { math: "\\mathsfbf{h}", alt: ["unicode-math"] }, "\u{1D5F6}": { math: "\\mathsfbf{i}", alt: ["unicode-math"] }, "\u{1D5F7}": { math: "\\mathsfbf{j}", alt: ["unicode-math"] }, "\u{1D5F8}": { math: "\\mathsfbf{k}", alt: ["unicode-math"] }, "\u{1D5F9}": { math: "\\mathsfbf{l}", alt: ["unicode-math"] }, "\u{1D5FA}": { math: "\\mathsfbf{m}", alt: ["unicode-math"] }, "\u{1D5FB}": { math: "\\mathsfbf{n}", alt: ["unicode-math"] }, "\u{1D5FC}": { math: "\\mathsfbf{o}", alt: ["unicode-math"] }, "\u{1D5FD}": { math: "\\mathsfbf{p}", alt: ["unicode-math"] }, "\u{1D5FE}": { math: "\\mathsfbf{q}", alt: ["unicode-math"] }, "\u{1D5FF}": { math: "\\mathsfbf{r}", alt: ["unicode-math"] }, "\u{1D600}": { math: "\\mathsfbf{s}", alt: ["unicode-math"] }, "\u{1D601}": { math: "\\mathsfbf{t}", alt: ["unicode-math"] }, "\u{1D602}": { math: "\\mathsfbf{u}", alt: ["unicode-math"] }, "\u{1D603}": { math: "\\mathsfbf{v}", alt: ["unicode-math"] }, "\u{1D604}": { math: "\\mathsfbf{w}", alt: ["unicode-math"] }, "\u{1D605}": { math: "\\mathsfbf{x}", alt: ["unicode-math"] }, "\u{1D606}": { math: "\\mathsfbf{y}", alt: ["unicode-math"] }, "\u{1D607}": { math: "\\mathsfbf{z}", alt: ["unicode-math"] }, "\u{1D608}": { math: "\\mathsfsl{A}", alt: ["unicode-math"] }, "\u{1D609}": { math: "\\mathsfsl{B}", alt: ["unicode-math"] }, "\u{1D60A}": { math: "\\mathsfsl{C}", alt: ["unicode-math"] }, "\u{1D60B}": { math: "\\mathsfsl{D}", alt: ["unicode-math"] }, "\u{1D60C}": { math: "\\mathsfsl{E}", alt: ["unicode-math"] }, "\u{1D60D}": { math: "\\mathsfsl{F}", alt: ["unicode-math"] }, "\u{1D60E}": { math: "\\mathsfsl{G}", alt: ["unicode-math"] }, "\u{1D60F}": { math: "\\mathsfsl{H}", alt: ["unicode-math"] }, "\u{1D610}": { math: "\\mathsfsl{I}", alt: ["unicode-math"] }, "\u{1D611}": { math: "\\mathsfsl{J}", alt: ["unicode-math"] }, "\u{1D612}": { math: "\\mathsfsl{K}", alt: ["unicode-math"] }, "\u{1D613}": { math: "\\mathsfsl{L}", alt: ["unicode-math"] }, "\u{1D614}": { math: "\\mathsfsl{M}", alt: ["unicode-math"] }, "\u{1D615}": { math: "\\mathsfsl{N}", alt: ["unicode-math"] }, "\u{1D616}": { math: "\\mathsfsl{O}", alt: ["unicode-math"] }, "\u{1D617}": { math: "\\mathsfsl{P}", alt: ["unicode-math"] }, "\u{1D618}": { math: "\\mathsfsl{Q}", alt: ["unicode-math"] }, "\u{1D619}": { math: "\\mathsfsl{R}", alt: ["unicode-math"] }, "\u{1D61A}": { math: "\\mathsfsl{S}", alt: ["unicode-math"] }, "\u{1D61B}": { math: "\\mathsfsl{T}", alt: ["unicode-math"] }, "\u{1D61C}": { math: "\\mathsfsl{U}", alt: ["unicode-math"] }, "\u{1D61D}": { math: "\\mathsfsl{V}", alt: ["unicode-math"] }, "\u{1D61E}": { math: "\\mathsfsl{W}", alt: ["unicode-math"] }, "\u{1D61F}": { math: "\\mathsfsl{X}", alt: ["unicode-math"] }, "\u{1D620}": { math: "\\mathsfsl{Y}", alt: ["unicode-math"] }, "\u{1D621}": { math: "\\mathsfsl{Z}", alt: ["unicode-math"] }, "\u{1D622}": { math: "\\mathsfsl{a}", alt: ["unicode-math"] }, "\u{1D623}": { math: "\\mathsfsl{b}", alt: ["unicode-math"] }, "\u{1D624}": { math: "\\mathsfsl{c}", alt: ["unicode-math"] }, "\u{1D625}": { math: "\\mathsfsl{d}", alt: ["unicode-math"] }, "\u{1D626}": { math: "\\mathsfsl{e}", alt: ["unicode-math"] }, "\u{1D627}": { math: "\\mathsfsl{f}", alt: ["unicode-math"] }, "\u{1D628}": { math: "\\mathsfsl{g}", alt: ["unicode-math"] }, "\u{1D629}": { math: "\\mathsfsl{h}", alt: ["unicode-math"] }, "\u{1D62A}": { math: "\\mathsfsl{i}", alt: ["unicode-math"] }, "\u{1D62B}": { math: "\\mathsfsl{j}", alt: ["unicode-math"] }, "\u{1D62C}": { math: "\\mathsfsl{k}", alt: ["unicode-math"] }, "\u{1D62D}": { math: "\\mathsfsl{l}", alt: ["unicode-math"] }, "\u{1D62E}": { math: "\\mathsfsl{m}", alt: ["unicode-math"] }, "\u{1D62F}": { math: "\\mathsfsl{n}", alt: ["unicode-math"] }, "\u{1D630}": { math: "\\mathsfsl{o}", alt: ["unicode-math"] }, "\u{1D631}": { math: "\\mathsfsl{p}", alt: ["unicode-math"] }, "\u{1D632}": { math: "\\mathsfsl{q}", alt: ["unicode-math"] }, "\u{1D633}": { math: "\\mathsfsl{r}", alt: ["unicode-math"] }, "\u{1D634}": { math: "\\mathsfsl{s}", alt: ["unicode-math"] }, "\u{1D635}": { math: "\\mathsfsl{t}", alt: ["unicode-math"] }, "\u{1D636}": { math: "\\mathsfsl{u}", alt: ["unicode-math"] }, "\u{1D637}": { math: "\\mathsfsl{v}", alt: ["unicode-math"] }, "\u{1D638}": { math: "\\mathsfsl{w}", alt: ["unicode-math"] }, "\u{1D639}": { math: "\\mathsfsl{x}", alt: ["unicode-math"] }, "\u{1D63A}": { math: "\\mathsfsl{y}", alt: ["unicode-math"] }, "\u{1D63B}": { math: "\\mathsfsl{z}", alt: ["unicode-math"] }, "\u{1D63C}": { math: "\\mathsfbfsl{A}", alt: ["unicode-math"] }, "\u{1D63D}": { math: "\\mathsfbfsl{B}", alt: ["unicode-math"] }, "\u{1D63E}": { math: "\\mathsfbfsl{C}", alt: ["unicode-math"] }, "\u{1D63F}": { math: "\\mathsfbfsl{D}", alt: ["unicode-math"] }, "\u{1D640}": { math: "\\mathsfbfsl{E}", alt: ["unicode-math"] }, "\u{1D641}": { math: "\\mathsfbfsl{F}", alt: ["unicode-math"] }, "\u{1D642}": { math: "\\mathsfbfsl{G}", alt: ["unicode-math"] }, "\u{1D643}": { math: "\\mathsfbfsl{H}", alt: ["unicode-math"] }, "\u{1D644}": { math: "\\mathsfbfsl{I}", alt: ["unicode-math"] }, "\u{1D645}": { math: "\\mathsfbfsl{J}", alt: ["unicode-math"] }, "\u{1D646}": { math: "\\mathsfbfsl{K}", alt: ["unicode-math"] }, "\u{1D647}": { math: "\\mathsfbfsl{L}", alt: ["unicode-math"] }, "\u{1D648}": { math: "\\mathsfbfsl{M}", alt: ["unicode-math"] }, "\u{1D649}": { math: "\\mathsfbfsl{N}", alt: ["unicode-math"] }, "\u{1D64A}": { math: "\\mathsfbfsl{O}", alt: ["unicode-math"] }, "\u{1D64B}": { math: "\\mathsfbfsl{P}", alt: ["unicode-math"] }, "\u{1D64C}": { math: "\\mathsfbfsl{Q}", alt: ["unicode-math"] }, "\u{1D64D}": { math: "\\mathsfbfsl{R}", alt: ["unicode-math"] }, "\u{1D64E}": { math: "\\mathsfbfsl{S}", alt: ["unicode-math"] }, "\u{1D64F}": { math: "\\mathsfbfsl{T}", alt: ["unicode-math"] }, "\u{1D650}": { math: "\\mathsfbfsl{U}", alt: ["unicode-math"] }, "\u{1D651}": { math: "\\mathsfbfsl{V}", alt: ["unicode-math"] }, "\u{1D652}": { math: "\\mathsfbfsl{W}", alt: ["unicode-math"] }, "\u{1D653}": { math: "\\mathsfbfsl{X}", alt: ["unicode-math"] }, "\u{1D654}": { math: "\\mathsfbfsl{Y}", alt: ["unicode-math"] }, "\u{1D655}": { math: "\\mathsfbfsl{Z}", alt: ["unicode-math"] }, "\u{1D656}": { math: "\\mathsfbfsl{a}", alt: ["unicode-math"] }, "\u{1D657}": { math: "\\mathsfbfsl{b}", alt: ["unicode-math"] }, "\u{1D658}": { math: "\\mathsfbfsl{c}", alt: ["unicode-math"] }, "\u{1D659}": { math: "\\mathsfbfsl{d}", alt: ["unicode-math"] }, "\u{1D65A}": { math: "\\mathsfbfsl{e}", alt: ["unicode-math"] }, "\u{1D65B}": { math: "\\mathsfbfsl{f}", alt: ["unicode-math"] }, "\u{1D65C}": { math: "\\mathsfbfsl{g}", alt: ["unicode-math"] }, "\u{1D65D}": { math: "\\mathsfbfsl{h}", alt: ["unicode-math"] }, "\u{1D65E}": { math: "\\mathsfbfsl{i}", alt: ["unicode-math"] }, "\u{1D65F}": { math: "\\mathsfbfsl{j}", alt: ["unicode-math"] }, "\u{1D660}": { math: "\\mathsfbfsl{k}", alt: ["unicode-math"] }, "\u{1D661}": { math: "\\mathsfbfsl{l}", alt: ["unicode-math"] }, "\u{1D662}": { math: "\\mathsfbfsl{m}", alt: ["unicode-math"] }, "\u{1D663}": { math: "\\mathsfbfsl{n}", alt: ["unicode-math"] }, "\u{1D664}": { math: "\\mathsfbfsl{o}", alt: ["unicode-math"] }, "\u{1D665}": { math: "\\mathsfbfsl{p}", alt: ["unicode-math"] }, "\u{1D666}": { math: "\\mathsfbfsl{q}", alt: ["unicode-math"] }, "\u{1D667}": { math: "\\mathsfbfsl{r}", alt: ["unicode-math"] }, "\u{1D668}": { math: "\\mathsfbfsl{s}", alt: ["unicode-math"] }, "\u{1D669}": { math: "\\mathsfbfsl{t}", alt: ["unicode-math"] }, "\u{1D66A}": { math: "\\mathsfbfsl{u}", alt: ["unicode-math"] }, "\u{1D66B}": { math: "\\mathsfbfsl{v}", alt: ["unicode-math"] }, "\u{1D66C}": { math: "\\mathsfbfsl{w}", alt: ["unicode-math"] }, "\u{1D66D}": { math: "\\mathsfbfsl{x}", alt: ["unicode-math"] }, "\u{1D66E}": { math: "\\mathsfbfsl{y}", alt: ["unicode-math"] }, "\u{1D66F}": { math: "\\mathsfbfsl{z}", alt: ["unicode-math"] }, "\u{1D670}": { math: "\\mathtt{A}", alt: ["unicode-math"] }, "\u{1D671}": { math: "\\mathtt{B}", alt: ["unicode-math"] }, "\u{1D672}": { math: "\\mathtt{C}", alt: ["unicode-math"] }, "\u{1D673}": { math: "\\mathtt{D}", alt: ["unicode-math"] }, "\u{1D674}": { math: "\\mathtt{E}", alt: ["unicode-math"] }, "\u{1D675}": { math: "\\mathtt{F}", alt: ["unicode-math"] }, "\u{1D676}": { math: "\\mathtt{G}", alt: ["unicode-math"] }, "\u{1D677}": { math: "\\mathtt{H}", alt: ["unicode-math"] }, "\u{1D678}": { math: "\\mathtt{I}", alt: ["unicode-math"] }, "\u{1D679}": { math: "\\mathtt{J}", alt: ["unicode-math"] }, "\u{1D67A}": { math: "\\mathtt{K}", alt: ["unicode-math"] }, "\u{1D67B}": { math: "\\mathtt{L}", alt: ["unicode-math"] }, "\u{1D67C}": { math: "\\mathtt{M}", alt: ["unicode-math"] }, "\u{1D67D}": { math: "\\mathtt{N}", alt: ["unicode-math"] }, "\u{1D67E}": { math: "\\mathtt{O}", alt: ["unicode-math"] }, "\u{1D67F}": { math: "\\mathtt{P}", alt: ["unicode-math"] }, "\u{1D680}": { math: "\\mathtt{Q}", alt: ["unicode-math"] }, "\u{1D681}": { math: "\\mathtt{R}", alt: ["unicode-math"] }, "\u{1D682}": { math: "\\mathtt{S}", alt: ["unicode-math"] }, "\u{1D683}": { math: "\\mathtt{T}", alt: ["unicode-math"] }, "\u{1D684}": { math: "\\mathtt{U}", alt: ["unicode-math"] }, "\u{1D685}": { math: "\\mathtt{V}", alt: ["unicode-math"] }, "\u{1D686}": { math: "\\mathtt{W}", alt: ["unicode-math"] }, "\u{1D687}": { math: "\\mathtt{X}", alt: ["unicode-math"] }, "\u{1D688}": { math: "\\mathtt{Y}", alt: ["unicode-math"] }, "\u{1D689}": { math: "\\mathtt{Z}", alt: ["unicode-math"] }, "\u{1D68A}": { math: "\\mathtt{a}", alt: ["unicode-math"] }, "\u{1D68B}": { math: "\\mathtt{b}", alt: ["unicode-math"] }, "\u{1D68C}": { math: "\\mathtt{c}", alt: ["unicode-math"] }, "\u{1D68D}": { math: "\\mathtt{d}", alt: ["unicode-math"] }, "\u{1D68E}": { math: "\\mathtt{e}", alt: ["unicode-math"] }, "\u{1D68F}": { math: "\\mathtt{f}", alt: ["unicode-math"] }, "\u{1D690}": { math: "\\mathtt{g}", alt: ["unicode-math"] }, "\u{1D691}": { math: "\\mathtt{h}", alt: ["unicode-math"] }, "\u{1D692}": { math: "\\mathtt{i}", alt: ["unicode-math"] }, "\u{1D693}": { math: "\\mathtt{j}", alt: ["unicode-math"] }, "\u{1D694}": { math: "\\mathtt{k}", alt: ["unicode-math"] }, "\u{1D695}": { math: "\\mathtt{l}", alt: ["unicode-math"] }, "\u{1D696}": { math: "\\mathtt{m}", alt: ["unicode-math"] }, "\u{1D697}": { math: "\\mathtt{n}", alt: ["unicode-math"] }, "\u{1D698}": { math: "\\mathtt{o}", alt: ["unicode-math"] }, "\u{1D699}": { math: "\\mathtt{p}", alt: ["unicode-math"] }, "\u{1D69A}": { math: "\\mathtt{q}", alt: ["unicode-math"] }, "\u{1D69B}": { math: "\\mathtt{r}", alt: ["unicode-math"] }, "\u{1D69C}": { math: "\\mathtt{s}", alt: ["unicode-math"] }, "\u{1D69D}": { math: "\\mathtt{t}", alt: ["unicode-math"] }, "\u{1D69E}": { math: "\\mathtt{u}", alt: ["unicode-math"] }, "\u{1D69F}": { math: "\\mathtt{v}", alt: ["unicode-math"] }, "\u{1D6A0}": { math: "\\mathtt{w}", alt: ["unicode-math"] }, "\u{1D6A1}": { math: "\\mathtt{x}", alt: ["unicode-math"] }, "\u{1D6A2}": { math: "\\mathtt{y}", alt: ["unicode-math"] }, "\u{1D6A3}": { math: "\\mathtt{z}", alt: ["unicode-math"] }, "\u{1D6A4}": { math: "\\imath", alt: ["unicode-math"] }, "\u{1D6A5}": { math: "\\jmath", alt: ["unicode-math"] }, "\u{1D6A8}": { math: "\\mathbf{A}", alt: ["unicode-math"] }, "\u{1D6A9}": { math: "\\mathbf{B}", alt: ["unicode-math"] }, "\u{1D6AA}": { math: "\\mathbf{\\Gamma}", alt: ["unicode-math"] }, "\u{1D6AB}": { math: "\\mathbf{\\Delta}", alt: ["unicode-math"] }, "\u{1D6AC}": { math: "\\mathbf{E}", alt: ["unicode-math"] }, "\u{1D6AD}": { math: "\\mathbf{Z}", alt: ["unicode-math"] }, "\u{1D6AE}": { math: "\\mathbf{H}", alt: ["unicode-math"] }, "\u{1D6AF}": { math: "\\mathbf{\\Theta}", alt: ["unicode-math"] }, "\u{1D6B0}": { math: "\\mathbf{I}", alt: ["unicode-math"] }, "\u{1D6B1}": { math: "\\mathbf{K}", alt: ["unicode-math"] }, "\u{1D6B2}": { math: "\\mathbf{\\Lambda}", alt: ["unicode-math"] }, "\u{1D6B3}": { math: "M", alt: ["unicode-math"] }, "\u{1D6B4}": { math: "N", alt: ["unicode-math"] }, "\u{1D6B5}": { math: "\\mathbf{\\Xi}", alt: ["unicode-math"] }, "\u{1D6B6}": { math: "O", alt: ["unicode-math"] }, "\u{1D6B7}": { math: "\\mathbf{\\Pi}", alt: ["unicode-math"] }, "\u{1D6B8}": { math: "\\mathbf{P}", alt: ["unicode-math"] }, "\u{1D6B9}": { math: "\\mathbf{\\vartheta}", alt: ["unicode-math"] }, "\u{1D6BA}": { math: "\\mathbf{\\Sigma}", alt: ["unicode-math"] }, "\u{1D6BB}": { math: "\\mathbf{T}", alt: ["unicode-math"] }, "\u{1D6BC}": { math: "\\mathbf{\\Upsilon}", alt: ["unicode-math"] }, "\u{1D6BD}": { math: "\\mathbf{\\Phi}", alt: ["unicode-math"] }, "\u{1D6BE}": { math: "\\mathbf{X}", alt: ["unicode-math"] }, "\u{1D6BF}": { math: "\\mathbf{\\Psi}", alt: ["unicode-math"] }, "\u{1D6C0}": { math: "\\mathbf{\\Omega}", alt: ["unicode-math"] }, "\u{1D6C1}": { math: "\\mathbf{\\nabla}", alt: ["unicode-math"] }, "\u{1D6C2}": { math: "\\mathbf{\\alpha}", alt: ["unicode-math"] }, "\u{1D6C3}": { math: "\\mathbf{\\beta}", alt: ["unicode-math"] }, "\u{1D6C4}": { math: "\\mathbf{\\gamma}", alt: ["unicode-math"] }, "\u{1D6C5}": { math: "\\mathbf{\\delta}", alt: ["unicode-math"] }, "\u{1D6C6}": { math: "\\mathbf{\\epsilon}", alt: ["unicode-math"] }, "\u{1D6C7}": { math: "\\mathbf{\\zeta}", alt: ["unicode-math"] }, "\u{1D6C8}": { math: "\\mathbf{\\eta}", alt: ["unicode-math"] }, "\u{1D6C9}": { math: "\\mathbf{\\theta}", alt: ["unicode-math"] }, "\u{1D6CA}": { math: "\\mathbf{I}", alt: ["unicode-math"] }, "\u{1D6CB}": { math: "\\mathbf{K}", alt: ["unicode-math"] }, "\u{1D6CC}": { math: "\\mathbf{\\lambda}", alt: ["unicode-math"] }, "\u{1D6CD}": { math: "m", alt: ["unicode-math"] }, "\u{1D6CE}": { math: "v", alt: ["unicode-math"] }, "\u{1D6CF}": { math: "\\mathbf{\\xi}", alt: ["unicode-math"] }, "\u{1D6D0}": { math: "O", alt: ["unicode-math"] }, "\u{1D6D1}": { math: "\\mathbf{\\pi}", alt: ["unicode-math"] }, "\u{1D6D2}": { math: "\\mathbf{P}", alt: ["unicode-math"] }, "\u{1D6D3}": { math: "\\mathbf{\\varsigma}", alt: ["unicode-math"] }, "\u{1D6D4}": { math: "\\mathbf{\\sigma}", alt: ["unicode-math"] }, "\u{1D6D5}": { math: "\\mathbf{T}", alt: ["unicode-math"] }, "\u{1D6D6}": { math: "\\mathbf{\\upsilon}", alt: ["unicode-math"] }, "\u{1D6D7}": { math: "\\mathbf{\\phi}", alt: ["unicode-math"] }, "\u{1D6D8}": { math: "\\mathbf{X}", alt: ["unicode-math"] }, "\u{1D6D9}": { math: "\\mathbf{\\psi}", alt: ["unicode-math"] }, "\u{1D6DA}": { math: "\\mathbf{\\omega}", alt: ["unicode-math"] }, "\u{1D6DB}": { math: "\\partial", alt: ["unicode-math"] }, "\u{1D6DC}": { math: "\\in", alt: ["unicode-math"] }, "\u{1D6DD}": { math: "\\mathbf{\\vartheta}", alt: ["unicode-math"] }, "\u{1D6DE}": { math: "\\mathbf{\\varkappa}", alt: ["unicode-math"] }, "\u{1D6DF}": { math: "\\mathbf{\\phi}", alt: ["unicode-math"] }, "\u{1D6E0}": { math: "\\mathbf{\\varrho}", alt: ["unicode-math"] }, "\u{1D6E1}": { math: "\\mathbf{\\varpi}", alt: ["unicode-math"] }, "\u{1D6E2}": { math: "A", alt: ["unicode-math"] }, "\u{1D6E3}": { math: "B", alt: ["unicode-math"] }, "\u{1D6E4}": { math: "\\Gamma", alt: ["unicode-math"] }, "\u{1D6E5}": { math: "\\Delta", alt: ["unicode-math"] }, "\u{1D6E6}": { math: "E", alt: ["unicode-math"] }, "\u{1D6E7}": { math: "Z", alt: ["unicode-math"] }, "\u{1D6E8}": { math: "H", alt: ["unicode-math"] }, "\u{1D6E9}": { math: "\\Theta", alt: ["unicode-math"] }, "\u{1D6EA}": { math: "I", alt: ["unicode-math"] }, "\u{1D6EB}": { math: "K", alt: ["unicode-math"] }, "\u{1D6EC}": { math: "\\Lambda", alt: ["unicode-math"] }, "\u{1D6ED}": { math: "M", alt: ["unicode-math"] }, "\u{1D6EE}": { math: "N", alt: ["unicode-math"] }, "\u{1D6EF}": { math: "\\Xi", alt: ["unicode-math"] }, "\u{1D6F0}": { math: "O", alt: ["unicode-math"] }, "\u{1D6F1}": { math: "\\Pi", alt: ["unicode-math"] }, "\u{1D6F2}": { math: "P", alt: ["unicode-math"] }, "\u{1D6F3}": { math: "\\Theta", alt: ["unicode-math"] }, "\u{1D6F4}": { math: "\\Sigma", alt: ["unicode-math"] }, "\u{1D6F5}": { math: "T", alt: ["unicode-math"] }, "\u{1D6F6}": { math: "\\Upsilon", alt: ["unicode-math"] }, "\u{1D6F7}": { math: "\\Phi", alt: ["unicode-math"] }, "\u{1D6F8}": { math: "X", alt: ["unicode-math"] }, "\u{1D6F9}": { math: "\\Psi", alt: ["unicode-math"] }, "\u{1D6FA}": { math: "\\Omega", alt: ["unicode-math"] }, "\u{1D6FB}": { math: "\\nabla", alt: ["unicode-math"] }, "\u{1D6FC}": { math: "A", alt: ["unicode-math"] }, "\u{1D6FD}": { math: "B", alt: ["unicode-math"] }, "\u{1D6FE}": { math: "\\gamma", alt: ["unicode-math"] }, "\u{1D6FF}": { math: "\\delta", alt: ["unicode-math"] }, "\u{1D700}": { math: "E", alt: ["unicode-math"] }, "\u{1D701}": { math: "Z", alt: ["unicode-math"] }, "\u{1D702}": { math: "H", alt: ["unicode-math"] }, "\u{1D703}": { math: "\\theta", alt: ["unicode-math"] }, "\u{1D704}": { math: "I", alt: ["unicode-math"] }, "\u{1D705}": { math: "K", alt: ["unicode-math"] }, "\u{1D706}": { math: "\\lambda", alt: ["unicode-math"] }, "\u{1D707}": { math: "\\mu", alt: ["unicode-math"] }, "\u{1D708}": { math: "\\nu", alt: ["unicode-math"] }, "\u{1D709}": { math: "\\xi", alt: ["unicode-math"] }, "\u{1D70A}": { math: "o", alt: ["unicode-math"] }, "\u{1D70B}": { math: "\\pi", alt: ["unicode-math"] }, "\u{1D70D}": { math: "\\varsigma", alt: ["unicode-math"] }, "\u{1D70E}": { math: "\\sigma", alt: ["unicode-math"] }, "\u{1D70F}": { math: "T", alt: ["unicode-math"] }, "\u{1D710}": { math: "\\upsilon", alt: ["unicode-math"] }, "\u{1D711}": { math: "\\varphi", alt: ["unicode-math"] }, "\u{1D712}": { math: "X", alt: ["unicode-math"] }, "\u{1D713}": { math: "\\psi", alt: ["unicode-math"] }, "\u{1D714}": { math: "\\omega", alt: ["unicode-math"] }, "\u{1D715}": { math: "\\partial", alt: ["unicode-math"] }, "\u{1D716}": { math: "\\in", alt: ["unicode-math"] }, "\u{1D717}": { math: "\\vartheta", alt: ["unicode-math"] }, "\u{1D718}": { math: "\\varkappa", alt: ["unicode-math"] }, "\u{1D719}": { math: "\\phi", alt: ["unicode-math"] }, "\u{1D71A}": { math: "\\varrho", alt: ["unicode-math"] }, "\u{1D71B}": { math: "\\varpi", alt: ["unicode-math"] }, "\u{1D71C}": { math: "\\mathbit{A}", alt: ["unicode-math"] }, "\u{1D71D}": { math: "\\mathbit{B}", alt: ["unicode-math"] }, "\u{1D71E}": { math: "\\mathbit{\\Gamma}", alt: ["unicode-math"] }, "\u{1D71F}": { math: "\\mathbit{\\Delta}", alt: ["unicode-math"] }, "\u{1D720}": { math: "\\mathbit{E}", alt: ["unicode-math"] }, "\u{1D721}": { math: "\\mathbit{Z}", alt: ["unicode-math"] }, "\u{1D722}": { math: "\\mathbit{H}", alt: ["unicode-math"] }, "\u{1D723}": { math: "\\mathbit{\\Theta}", alt: ["unicode-math"] }, "\u{1D724}": { math: "\\mathbit{I}", alt: ["unicode-math"] }, "\u{1D725}": { math: "\\mathbit{K}", alt: ["unicode-math"] }, "\u{1D726}": { math: "\\mathbit{\\Lambda}", alt: ["unicode-math"] }, "\u{1D727}": { math: "M", alt: ["unicode-math"] }, "\u{1D728}": { math: "N", alt: ["unicode-math"] }, "\u{1D729}": { math: "\\mathbit{\\Xi}", alt: ["unicode-math"] }, "\u{1D72A}": { math: "O", alt: ["unicode-math"] }, "\u{1D72B}": { math: "\\mathbit{\\Pi}", alt: ["unicode-math"] }, "\u{1D72C}": { math: "\\mathbit{P}", alt: ["unicode-math"] }, "\u{1D72D}": { math: "\\mathbit{O}", alt: ["unicode-math"] }, "\u{1D72E}": { math: "\\mathbit{\\Sigma}", alt: ["unicode-math"] }, "\u{1D72F}": { math: "\\mathbit{T}", alt: ["unicode-math"] }, "\u{1D730}": { math: "\\mathbit{\\Upsilon}", alt: ["unicode-math"] }, "\u{1D731}": { math: "\\mathbit{\\Phi}", alt: ["unicode-math"] }, "\u{1D732}": { math: "\\mathbit{X}", alt: ["unicode-math"] }, "\u{1D733}": { math: "\\mathbit{\\Psi}", alt: ["unicode-math"] }, "\u{1D734}": { math: "\\mathbit{\\Omega}", alt: ["unicode-math"] }, "\u{1D735}": { math: "\\mathbit{\\nabla}", alt: ["unicode-math"] }, "\u{1D736}": { math: "\\mathbit{\\alpha}", alt: ["unicode-math"] }, "\u{1D737}": { math: "\\mathbit{\\beta}", alt: ["unicode-math"] }, "\u{1D738}": { math: "\\mathbit{\\gamma}", alt: ["unicode-math"] }, "\u{1D739}": { math: "\\mathbit{\\delta}", alt: ["unicode-math"] }, "\u{1D73A}": { math: "\\mathbit{\\epsilon}", alt: ["unicode-math"] }, "\u{1D73B}": { math: "\\mathbit{\\zeta}", alt: ["unicode-math"] }, "\u{1D73C}": { math: "\\mathbit{\\eta}", alt: ["unicode-math"] }, "\u{1D73D}": { math: "\\mathbit{\\theta}", alt: ["unicode-math"] }, "\u{1D73E}": { math: "\\mathbit{\\imath}", alt: ["unicode-math"] }, "\u{1D73F}": { math: "\\mathbit{\\kappa}", alt: ["unicode-math"] }, "\u{1D740}": { math: "\\mathbit{\\lambda}", alt: ["unicode-math"] }, "\u{1D741}": { math: "\\mu", alt: ["unicode-math"] }, "\u{1D742}": { math: "v", alt: ["unicode-math"] }, "\u{1D743}": { math: "\\mathbit{\\xi}", alt: ["unicode-math"] }, "\u{1D744}": { math: "O", alt: ["unicode-math"] }, "\u{1D745}": { math: "\\mathbit{\\pi}", alt: ["unicode-math"] }, "\u{1D746}": { math: "\\mathbit{\\rho}", alt: ["unicode-math"] }, "\u{1D747}": { math: "\\mathbit{\\varsigma}", alt: ["unicode-math"] }, "\u{1D748}": { math: "\\mathbit{\\sigma}", alt: ["unicode-math"] }, "\u{1D749}": { math: "\\mathbit{\\tau}", alt: ["unicode-math"] }, "\u{1D74A}": { math: "\\mathbit{\\upsilon}", alt: ["unicode-math"] }, "\u{1D74B}": { math: "\\mathbit{\\varphi}", alt: ["unicode-math"] }, "\u{1D74C}": { math: "\\mathbit{\\chi}", alt: ["unicode-math"] }, "\u{1D74D}": { math: "\\mathbit{\\psi}", alt: ["unicode-math"] }, "\u{1D74E}": { math: "\\mathbit{\\omega}", alt: ["unicode-math"] }, "\u{1D74F}": { math: "\\partial", alt: ["unicode-math"] }, "\u{1D750}": { math: "\\in", alt: ["unicode-math"] }, "\u{1D751}": { math: "\\mathbit{\\vartheta}", alt: ["unicode-math"] }, "\u{1D752}": { math: "\\mathbit{\\varkappa}", alt: ["unicode-math"] }, "\u{1D753}": { math: "\\mathbit{\\phi}", alt: ["unicode-math"] }, "\u{1D754}": { math: "\\mathbit{\\varrho}", alt: ["unicode-math"] }, "\u{1D755}": { math: "\\mathbit{\\varpi}", alt: ["unicode-math"] }, "\u{1D756}": { math: "\\mathsfbf{A}", alt: ["unicode-math"] }, "\u{1D757}": { math: "\\mathsfbf{B}", alt: ["unicode-math"] }, "\u{1D758}": { math: "\\mathsfbf{\\Gamma}", alt: ["unicode-math"] }, "\u{1D759}": { math: "\\mathsfbf{\\Delta}", alt: ["unicode-math"] }, "\u{1D75A}": { math: "\\mathsfbf{E}", alt: ["unicode-math"] }, "\u{1D75B}": { math: "\\mathsfbf{Z}", alt: ["unicode-math"] }, "\u{1D75C}": { math: "\\mathsfbf{H}", alt: ["unicode-math"] }, "\u{1D75D}": { math: "\\mathsfbf{\\Theta}", alt: ["unicode-math"] }, "\u{1D75E}": { math: "\\mathsfbf{I}", alt: ["unicode-math"] }, "\u{1D75F}": { math: "\\mathsfbf{K}", alt: ["unicode-math"] }, "\u{1D760}": { math: "\\mathsfbf{\\Lambda}", alt: ["unicode-math"] }, "\u{1D761}": { math: "M", alt: ["unicode-math"] }, "\u{1D762}": { math: "N", alt: ["unicode-math"] }, "\u{1D763}": { math: "\\mathsfbf{\\Xi}", alt: ["unicode-math"] }, "\u{1D764}": { math: "O", alt: ["unicode-math"] }, "\u{1D765}": { math: "\\mathsfbf{\\Pi}", alt: ["unicode-math"] }, "\u{1D766}": { math: "\\mathsfbf{P}", alt: ["unicode-math"] }, "\u{1D767}": { math: "\\mathsfbf{\\Theta}", alt: ["unicode-math"] }, "\u{1D768}": { math: "\\mathsfbf{\\Sigma}", alt: ["unicode-math"] }, "\u{1D769}": { math: "\\mathsfbf{T}", alt: ["unicode-math"] }, "\u{1D76A}": { math: "\\mathsfbf{\\Upsilon}", alt: ["unicode-math"] }, "\u{1D76B}": { math: "\\mathsfbf{\\Phi}", alt: ["unicode-math"] }, "\u{1D76C}": { math: "\\mathsfbf{X}", alt: ["unicode-math"] }, "\u{1D76D}": { math: "\\mathsfbf{\\Psi}", alt: ["unicode-math"] }, "\u{1D76E}": { math: "\\mathsfbf{\\Omega}", alt: ["unicode-math"] }, "\u{1D76F}": { math: "\\mathsfbf{\\nabla}", alt: ["unicode-math"] }, "\u{1D770}": { math: "\\mathsfbf{\\alpha}", alt: ["unicode-math"] }, "\u{1D771}": { math: "\\mathsfbf{\\beta}", alt: ["unicode-math"] }, "\u{1D772}": { math: "\\mathsfbf{\\gamma}", alt: ["unicode-math"] }, "\u{1D773}": { math: "\\mathsfbf{\\delta}", alt: ["unicode-math"] }, "\u{1D774}": { math: "\\mathsfbf{\\varepsilon}", alt: ["unicode-math"] }, "\u{1D775}": { math: "\\mathsfbf{\\zeta}", alt: ["unicode-math"] }, "\u{1D776}": { math: "\\mathsfbf{\\eta}", alt: ["unicode-math"] }, "\u{1D777}": { math: "\\mathsfbf{\\theta}", alt: ["unicode-math"] }, "\u{1D778}": { math: "\\mathsfbf{\\imath}", alt: ["unicode-math"] }, "\u{1D779}": { math: "\\mathsfbf{\\kappa}", alt: ["unicode-math"] }, "\u{1D77A}": { math: "\\mathsfbf{\\lambda}", alt: ["unicode-math"] }, "\u{1D77B}": { math: "\\mu", alt: ["unicode-math"] }, "\u{1D77C}": { math: "\\nu", alt: ["unicode-math"] }, "\u{1D77D}": { math: "\\mathsfbf{\\xi}", alt: ["unicode-math"] }, "\u{1D77E}": { math: "o", alt: ["unicode-math"] }, "\u{1D77F}": { math: "\\mathsfbf{\\pi}", alt: ["unicode-math"] }, "\u{1D780}": { math: "\\mathsfbf{\\rho}", alt: ["unicode-math"] }, "\u{1D781}": { math: "\\mathsfbf{\\varsigma}", alt: ["unicode-math"] }, "\u{1D782}": { math: "\\mathsfbf{\\sigma}", alt: ["unicode-math"] }, "\u{1D783}": { math: "\\mathsfbf{\\tau}", alt: ["unicode-math"] }, "\u{1D784}": { math: "\\mathsfbf{\\upsilon}", alt: ["unicode-math"] }, "\u{1D785}": { math: "\\mathsfbf{\\varphi}", alt: ["unicode-math"] }, "\u{1D786}": { math: "\\mathsfbf{\\chi}", alt: ["unicode-math"] }, "\u{1D787}": { math: "\\mathsfbf{\\psi}", alt: ["unicode-math"] }, "\u{1D788}": { math: "\\mathsfbf{\\omega}", alt: ["unicode-math"] }, "\u{1D789}": { math: "\\partial", alt: ["unicode-math"] }, "\u{1D78A}": { math: "\\in", alt: ["unicode-math"] }, "\u{1D78B}": { math: "\\mathsfbf{\\vartheta}", alt: ["unicode-math"] }, "\u{1D78C}": { math: "\\mathsfbf{\\varkappa}", alt: ["unicode-math"] }, "\u{1D78D}": { math: "\\mathsfbf{\\phi}", alt: ["unicode-math"] }, "\u{1D78E}": { math: "\\mathsfbf{\\varrho}", alt: ["unicode-math"] }, "\u{1D78F}": { math: "\\mathsfbf{\\varpi}", alt: ["unicode-math"] }, "\u{1D790}": { math: "\\mathsfbfsl{A}", alt: ["unicode-math"] }, "\u{1D791}": { math: "\\mathsfbfsl{B}", alt: ["unicode-math"] }, "\u{1D792}": { math: "\\mathsfbfsl{\\Gamma}", alt: ["unicode-math"] }, "\u{1D793}": { math: "\\mathsfbfsl{\\Delta}", alt: ["unicode-math"] }, "\u{1D794}": { math: "\\mathsfbfsl{E}", alt: ["unicode-math"] }, "\u{1D795}": { math: "\\mathsfbfsl{Z}", alt: ["unicode-math"] }, "\u{1D796}": { math: "\\mathsfbfsl{H}", alt: ["unicode-math"] }, "\u{1D797}": { math: "\\mathsfbfsl{\\Theta}", alt: ["unicode-math"] }, "\u{1D798}": { math: "\\mathsfbfsl{I}", alt: ["unicode-math"] }, "\u{1D799}": { math: "\\mathsfbfsl{K}", alt: ["unicode-math"] }, "\u{1D79A}": { math: "\\mathsfbfsl{\\Lambda}", alt: ["unicode-math"] }, "\u{1D79B}": { math: "\\mathsfbfsl{M}", alt: ["unicode-math"] }, "\u{1D79C}": { math: "\\mathsfbfsl{N}", alt: ["unicode-math"] }, "\u{1D79D}": { math: "\\mathsfbfsl{\\Xi}", alt: ["unicode-math"] }, "\u{1D79E}": { math: "\\mathsfbfsl{O}", alt: ["unicode-math"] }, "\u{1D79F}": { math: "\\mathsfbfsl{\\Pi}", alt: ["unicode-math"] }, "\u{1D7A0}": { math: "\\mathsfbfsl{P}", alt: ["unicode-math"] }, "\u{1D7A1}": { math: "\\mathsfbfsl{\\Theta}", alt: ["unicode-math"] }, "\u{1D7A2}": { math: "\\mathsfbfsl{\\Sigma}", alt: ["unicode-math"] }, "\u{1D7A3}": { math: "\\mathsfbfsl{T}", alt: ["unicode-math"] }, "\u{1D7A4}": { math: "\\mathsfbfsl{\\Upsilon}", alt: ["unicode-math"] }, "\u{1D7A5}": { math: "\\mathsfbfsl{\\Phi}", alt: ["unicode-math"] }, "\u{1D7A6}": { math: "\\mathsfbfsl{X}", alt: ["unicode-math"] }, "\u{1D7A7}": { math: "\\mathsfbfsl{\\Psi}", alt: ["unicode-math"] }, "\u{1D7A8}": { math: "\\mathsfbfsl{\\Omega}", alt: ["unicode-math"] }, "\u{1D7A9}": { math: "\\mathsfbfsl{\\nabla}", alt: ["unicode-math"] }, "\u{1D7AA}": { math: "\\mathsfbfsl{\\alpha}", alt: ["unicode-math"] }, "\u{1D7AB}": { math: "\\mathsfbfsl{\\beta}", alt: ["unicode-math"] }, "\u{1D7AC}": { math: "\\mathsfbfsl{\\gamma}", alt: ["unicode-math"] }, "\u{1D7AD}": { math: "\\mathsfbfsl{\\delta}", alt: ["unicode-math"] }, "\u{1D7AE}": { math: "\\mathsfbfsl{\\varepsilon}", alt: ["unicode-math"] }, "\u{1D7AF}": { math: "\\mathsfbfsl{\\zeta}", alt: ["unicode-math"] }, "\u{1D7B0}": { math: "\\mathsfbfsl{\\eta}", alt: ["unicode-math"] }, "\u{1D7B1}": { math: "\\mathsfbfsl{\\theta}", alt: ["unicode-math"] }, "\u{1D7B2}": { math: "\\mathsfbfsl{\\imath}", alt: ["unicode-math"] }, "\u{1D7B3}": { math: "\\mathsfbfsl{\\kappa}", alt: ["unicode-math"] }, "\u{1D7B4}": { math: "\\mathsfbfsl{\\lambda}", alt: ["unicode-math"] }, "\u{1D7B5}": { math: "\\mu", alt: ["unicode-math"] }, "\u{1D7B6}": { math: "\\nu", alt: ["unicode-math"] }, "\u{1D7B7}": { math: "\\mathsfbfsl{\\xi}", alt: ["unicode-math"] }, "\u{1D7B8}": { math: "o", alt: ["unicode-math"] }, "\u{1D7B9}": { math: "\\mathsfbfsl{\\pi}", alt: ["unicode-math"] }, "\u{1D7BA}": { math: "\\mathsfbfsl{\\rho}", alt: ["unicode-math"] }, "\u{1D7BB}": { math: "\\mathsfbfsl{\\varsigma}", alt: ["unicode-math"] }, "\u{1D7BC}": { math: "\\mathsfbfsl{\\sigma}", alt: ["unicode-math"] }, "\u{1D7BD}": { math: "\\mathsfbfsl{\\tau}", alt: ["unicode-math"] }, "\u{1D7BE}": { math: "\\mathsfbfsl{\\upsilon}", alt: ["unicode-math"] }, "\u{1D7BF}": { math: "\\mathsfbfsl{\\varphi}", alt: ["unicode-math"] }, "\u{1D7C0}": { math: "\\mathsfbfsl{\\chi}", alt: ["unicode-math"] }, "\u{1D7C1}": { math: "\\mathsfbfsl{\\psi}", alt: ["unicode-math"] }, "\u{1D7C2}": { math: "\\mathsfbfsl{\\omega}", alt: ["unicode-math"] }, "\u{1D7C3}": { math: "\\partial", alt: ["unicode-math"] }, "\u{1D7C4}": { math: "\\in", alt: ["unicode-math"] }, "\u{1D7C5}": { math: "\\mathsfbfsl{\\vartheta}", alt: ["unicode-math"] }, "\u{1D7C6}": { math: "\\mathsfbfsl{\\varkappa}", alt: ["unicode-math"] }, "\u{1D7C7}": { math: "\\mathsfbfsl{\\phi}", alt: ["unicode-math"] }, "\u{1D7C8}": { math: "\\mathsfbfsl{\\varrho}", alt: ["unicode-math"] }, "\u{1D7C9}": { math: "\\mathsfbfsl{\\varpi}", alt: ["unicode-math"] }, "\u{1D7CA}": { math: "\\mbfDigamma", alt: ["unicode-math"] }, "\u{1D7CB}": { math: "\\mbfdigamma", alt: ["unicode-math"] }, "\u{1D7CE}": { math: "\\mathbf{0}", alt: ["unicode-math"] }, "\u{1D7CF}": { math: "\\mathbf{1}", alt: ["unicode-math"] }, "\u{1D7D0}": { math: "\\mathbf{2}", alt: ["unicode-math"] }, "\u{1D7D1}": { math: "\\mathbf{3}", alt: ["unicode-math"] }, "\u{1D7D2}": { math: "\\mathbf{4}", alt: ["unicode-math"] }, "\u{1D7D3}": { math: "\\mathbf{5}", alt: ["unicode-math"] }, "\u{1D7D4}": { math: "\\mathbf{6}", alt: ["unicode-math"] }, "\u{1D7D5}": { math: "\\mathbf{7}", alt: ["unicode-math"] }, "\u{1D7D6}": { math: "\\mathbf{8}", alt: ["unicode-math"] }, "\u{1D7D7}": { math: "\\mathbf{9}", alt: ["unicode-math"] }, "\u{1D7D8}": { math: "\\mathbb{0}", alt: ["unicode-math"] }, "\u{1D7D9}": { math: "\\mathbb{1}", alt: ["unicode-math"] }, "\u{1D7DA}": { math: "\\mathbb{2}", alt: ["unicode-math"] }, "\u{1D7DB}": { math: "\\mathbb{3}", alt: ["unicode-math"] }, "\u{1D7DC}": { math: "\\mathbb{4}", alt: ["unicode-math"] }, "\u{1D7DD}": { math: "\\mathbb{5}", alt: ["unicode-math"] }, "\u{1D7DE}": { math: "\\mathbb{6}", alt: ["unicode-math"] }, "\u{1D7DF}": { math: "\\mathbb{7}", alt: ["unicode-math"] }, "\u{1D7E0}": { math: "\\mathbb{8}", alt: ["unicode-math"] }, "\u{1D7E1}": { math: "\\mathbb{9}", alt: ["unicode-math"] }, "\u{1D7E2}": { math: "\\mathsf{0}", alt: ["unicode-math"] }, "\u{1D7E3}": { math: "\\mathsf{1}", alt: ["unicode-math"] }, "\u{1D7E4}": { math: "\\mathsf{2}", alt: ["unicode-math"] }, "\u{1D7E5}": { math: "\\mathsf{3}", alt: ["unicode-math"] }, "\u{1D7E6}": { math: "\\mathsf{4}", alt: ["unicode-math"] }, "\u{1D7E7}": { math: "\\mathsf{5}", alt: ["unicode-math"] }, "\u{1D7E8}": { math: "\\mathsf{6}", alt: ["unicode-math"] }, "\u{1D7E9}": { math: "\\mathsf{7}", alt: ["unicode-math"] }, "\u{1D7EA}": { math: "\\mathsf{8}", alt: ["unicode-math"] }, "\u{1D7EB}": { math: "\\mathsf{9}", alt: ["unicode-math"] }, "\u{1D7EC}": { math: "\\mathsfbf{0}", alt: ["unicode-math"] }, "\u{1D7ED}": { math: "\\mathsfbf{1}", alt: ["unicode-math"] }, "\u{1D7EE}": { math: "\\mathsfbf{2}", alt: ["unicode-math"] }, "\u{1D7EF}": { math: "\\mathsfbf{3}", alt: ["unicode-math"] }, "\u{1D7F0}": { math: "\\mathsfbf{4}", alt: ["unicode-math"] }, "\u{1D7F1}": { math: "\\mathsfbf{5}", alt: ["unicode-math"] }, "\u{1D7F2}": { math: "\\mathsfbf{6}", alt: ["unicode-math"] }, "\u{1D7F3}": { math: "\\mathsfbf{7}", alt: ["unicode-math"] }, "\u{1D7F4}": { math: "\\mathsfbf{8}", alt: ["unicode-math"] }, "\u{1D7F5}": { math: "\\mathsfbf{9}", alt: ["unicode-math"] }, "\u{1D7F6}": { math: "\\mathtt{0}", alt: ["unicode-math"] }, "\u{1D7F7}": { math: "\\mathtt{1}", alt: ["unicode-math"] }, "\u{1D7F8}": { math: "\\mathtt{2}", alt: ["unicode-math"] }, "\u{1D7F9}": { math: "\\mathtt{3}", alt: ["unicode-math"] }, "\u{1D7FA}": { math: "\\mathtt{4}", alt: ["unicode-math"] }, "\u{1D7FB}": { math: "\\mathtt{5}", alt: ["unicode-math"] }, "\u{1D7FC}": { math: "\\mathtt{6}", alt: ["unicode-math"] }, "\u{1D7FD}": { math: "\\mathtt{7}", alt: ["unicode-math"] }, "\u{1D7FE}": { math: "\\mathtt{8}", alt: ["unicode-math"] }, "\u{1D7FF}": { math: "\\mathtt{9}", alt: ["unicode-math"] }, " \u035A": { math: "_\\infty" }, "\u2029": { text: "\\par", macrospacer: true }, "/\u200B": { text: "\\slash", macrospacer: true }, "^": { text: "\\textasciicircum", macrospacer: true }, i\uFE20a\uFE21: { text: "\\t{ia}" }, "{": { text: "\\{" }, "}": { text: "\\}" }, "~": { text: "\\textasciitilde", macrospacer: true }, "\xA1": { text: "\\textexclamdown", macrospacer: true }, "\u20AC": { text: "\\texteuro", macrospacer: true, alt: ["unicode-math"] }, "\xA8": { text: "\\textasciidieresis", macrospacer: true }, "\xAB": { text: "<<" }, "\xAE": { text: "\\textregistered", macrospacer: true }, "\xAF": { text: "\\textasciimacron", macrospacer: true }, "\xB4": { text: "\\textasciiacute", macrospacer: true }, \u00B5: { text: "\\textmu", macrospacer: true }, "\xB8": { text: "\\c", macrospacer: true }, "\xBB": { text: ">>" }, "\xBF": { text: "\\textquestiondown", macrospacer: true }, \u00C6: { text: "\\AE", macrospacer: true }, \u00D0: { text: "\\DH", macrospacer: true }, \u00D8: { text: "\\O", macrospacer: true }, \u00DE: { text: "\\TH", macrospacer: true }, \u00DF: { text: "\\ss", macrospacer: true }, a\u030A: { text: "\\aa", macrospacer: true }, \u00E6: { text: "\\ae", macrospacer: true }, \u00F0: { text: "\\dh", macrospacer: true, alt: ["amssymb", "arevmath", "textcomp"] }, \u00F8: { text: "\\o", macrospacer: true }, \u00FE: { text: "\\th", macrospacer: true }, \u0110: { text: "\\DJ", macrospacer: true }, \u0111: { text: "\\dj", macrospacer: true }, i\u0306: { text: "{\\u \\i}" }, \u0132: { text: "\\IJ", macrospacer: true }, \u0133: { text: "\\ij", macrospacer: true }, j\u0302: { text: "\\^\\j", macrospacer: true }, \u0138: { text: "K", alt: ["xecjk"] }, \u0141: { text: "\\L", macrospacer: true }, \u0142: { text: "\\l", macrospacer: true }, \u0149: { text: "'n" }, \u014A: { text: "\\NG", macrospacer: true }, \u014B: { text: "\\ng", macrospacer: true }, \u0152: { text: "\\OE", macrospacer: true }, \u0153: { text: "\\oe", macrospacer: true }, \u017F: { text: "s" }, \u01AA: { text: "\\textesh", macrospacer: true }, \u01C2: { text: "\\textdoublepipe", macrospacer: true, alt: ["tipa"] }, \u0261: { text: "g" }, "\u02B9": { text: "'" }, \u02BB: { text: "'" }, \u02BC: { text: "'" }, \u02BD: { text: "'" }, "\u02C6": { text: "\\textasciicircum", macrospacer: true }, "\u02C7": { text: "\\textasciicaron", macrospacer: true }, "\u02C9": { text: "-" }, "\u02D8": { text: "\\textasciibreve", macrospacer: true }, "\u02DA": { text: "\\r{}" }, "\u02DB": { text: "\\k{}" }, "\u02DC": { text: "\\texttildelow", macrospacer: true }, "\u02DD": { text: "\\textacutedbl", macrospacer: true }, "\u0300": { text: "\\`", macrospacer: true, alt: ["unicode-math"] }, "\u0301": { text: "\\'", macrospacer: true, alt: ["unicode-math"] }, "\u0302": { text: "\\^", macrospacer: true }, "\u0303": { text: "\\~", macrospacer: true, alt: ["unicode-math"] }, "\u0304": { text: "\\=", macrospacer: true }, "\u0306": { text: "\\u", macrospacer: true, alt: ["unicode-math"] }, "\u0307": { text: "\\.", macrospacer: true, alt: ["unicode-math"] }, "\u0308": { text: '\\"', macrospacer: true, alt: ["unicode-math"] }, "\u030B": { text: "\\H", macrospacer: true }, "\u030C": { text: "\\v", macrospacer: true, alt: ["unicode-math"] }, "\u030F": { text: "\\textdoublegrave", macrospacer: true }, "\u0316": { text: "\\textsubgrave", macrospacer: true }, "\u0323": { text: "\\d", macrospacer: true }, "\u0326": { text: "\\textcommabelow", macrospacer: true }, "\u0327": { text: "\\c", macrospacer: true }, "\u0328": { text: "\\k", macrospacer: true }, "\u0375": { text: "," }, ";": { text: ";" }, \u0399\u0301: { text: "{\\'{}I}" }, \u039F\u0301: { text: "{\\'{}O}" }, \u03D0: { text: "\\Pisymbol{ppi022}{87}", alt: ["MinionPro", "unicode-math"] }, \u046B: { text: "\\cyrchar\\cyrbyus", macrospacer: true }, \u0473: { text: "\\cyrchar\\cyrfita", macrospacer: true }, \u0475: { text: "\\cyrchar\\cyrizh", macrospacer: true }, "\u04C5": { text: "\\cyrchar\\CYRLDSC", macrospacer: true }, "\u04C6": { text: "\\cyrchar\\cyrldsc", macrospacer: true }, "\u04CD": { text: "\\cyrchar\\CYRMDSC", macrospacer: true }, "\u04CE": { text: "\\cyrchar\\cyrmdsc", macrospacer: true }, \u0463: { text: "\\cyrchar\\cyryat", macrospacer: true }, \u0415\u0308: { text: "\\cyrchar\\CYRYO", macrospacer: true }, \u0402: { text: "\\cyrchar\\CYRDJE", macrospacer: true }, \u0413\u0301: { text: "\\cyrchar{\\'\\CYRG}" }, \u0404: { text: "\\cyrchar\\CYRIE", macrospacer: true }, \u0405: { text: "\\cyrchar\\CYRDZE", macrospacer: true }, \u0406: { text: "\\cyrchar\\CYRII", macrospacer: true }, \u0406\u0308: { text: "\\cyrchar\\CYRYI", macrospacer: true }, \u0408: { text: "\\cyrchar\\CYRJE", macrospacer: true }, \u0409: { text: "\\cyrchar\\CYRLJE", macrospacer: true }, \u040A: { text: "\\cyrchar\\CYRNJE", macrospacer: true }, \u040B: { text: "\\cyrchar\\CYRTSHE", macrospacer: true }, \u041A\u0301: { text: "\\cyrchar{\\'\\CYRK}" }, \u0423\u0306: { text: "\\cyrchar\\CYRUSHRT", macrospacer: true }, \u040F: { text: "\\cyrchar\\CYRDZHE", macrospacer: true }, \u0410: { text: "\\cyrchar\\CYRA", macrospacer: true }, \u0411: { text: "\\cyrchar\\CYRB", macrospacer: true }, \u0412: { text: "\\cyrchar\\CYRV", macrospacer: true }, \u0413: { text: "\\cyrchar\\CYRG", macrospacer: true }, \u0414: { text: "\\cyrchar\\CYRD", macrospacer: true }, \u0415: { text: "\\cyrchar\\CYRE", macrospacer: true }, \u0416: { text: "\\cyrchar\\CYRZH", macrospacer: true }, \u0417: { text: "\\cyrchar\\CYRZ", macrospacer: true }, \u0418: { text: "\\cyrchar\\CYRI", macrospacer: true }, \u0418\u0306: { text: "\\cyrchar\\CYRISHRT", macrospacer: true }, \u041A: { text: "\\cyrchar\\CYRK", macrospacer: true }, \u041B: { text: "\\cyrchar\\CYRL", macrospacer: true }, \u041C: { text: "\\cyrchar\\CYRM", macrospacer: true }, \u041D: { text: "\\cyrchar\\CYRN", macrospacer: true }, \u041E: { text: "\\cyrchar\\CYRO", macrospacer: true }, \u041F: { text: "\\cyrchar\\CYRP", macrospacer: true }, \u0420: { text: "\\cyrchar\\CYRR", macrospacer: true }, \u0421: { text: "\\cyrchar\\CYRS", macrospacer: true }, \u0422: { text: "\\cyrchar\\CYRT", macrospacer: true }, \u0423: { text: "\\cyrchar\\CYRU", macrospacer: true }, \u0424: { text: "\\cyrchar\\CYRF", macrospacer: true }, \u0425: { text: "\\cyrchar\\CYRH", macrospacer: true }, \u0426: { text: "\\cyrchar\\CYRC", macrospacer: true }, \u0427: { text: "\\cyrchar\\CYRCH", macrospacer: true }, \u0428: { text: "\\cyrchar\\CYRSH", macrospacer: true }, \u0429: { text: "\\cyrchar\\CYRSHCH", macrospacer: true }, \u042A: { text: "\\cyrchar\\CYRHRDSN", macrospacer: true }, \u042B: { text: "\\cyrchar\\CYRERY", macrospacer: true }, \u042C: { text: "\\cyrchar\\CYRSFTSN", macrospacer: true }, \u042D: { text: "\\cyrchar\\CYREREV", macrospacer: true }, \u042E: { text: "\\cyrchar\\CYRYU", macrospacer: true }, \u042F: { text: "\\cyrchar\\CYRYA", macrospacer: true }, \u0430: { text: "\\cyrchar\\cyra", macrospacer: true }, \u0431: { text: "\\cyrchar\\cyrb", macrospacer: true }, \u0432: { text: "\\cyrchar\\cyrv", macrospacer: true }, \u0433: { text: "\\cyrchar\\cyrg", macrospacer: true }, \u0434: { text: "\\cyrchar\\cyrd", macrospacer: true }, \u0435: { text: "\\cyrchar\\cyre", macrospacer: true }, \u0436: { text: "\\cyrchar\\cyrzh", macrospacer: true }, \u0437: { text: "\\cyrchar\\cyrz", macrospacer: true }, \u0438: { text: "\\cyrchar\\cyri", macrospacer: true }, \u0438\u0306: { text: "\\cyrchar\\cyrishrt", macrospacer: true }, \u043A: { text: "\\cyrchar\\cyrk", macrospacer: true }, \u043B: { text: "\\cyrchar\\cyrl", macrospacer: true }, \u043C: { text: "\\cyrchar\\cyrm", macrospacer: true }, \u043D: { text: "\\cyrchar\\cyrn", macrospacer: true }, \u043E: { text: "\\cyrchar\\cyro", macrospacer: true }, \u043F: { text: "\\cyrchar\\cyrp", macrospacer: true }, \u0440: { text: "\\cyrchar\\cyrr", macrospacer: true }, \u0441: { text: "\\cyrchar\\cyrs", macrospacer: true }, \u0442: { text: "\\cyrchar\\cyrt", macrospacer: true }, \u0443: { text: "\\cyrchar\\cyru", macrospacer: true }, \u0444: { text: "\\cyrchar\\cyrf", macrospacer: true }, \u0445: { text: "\\cyrchar\\cyrh", macrospacer: true }, \u0446: { text: "\\cyrchar\\cyrc", macrospacer: true }, \u0447: { text: "\\cyrchar\\cyrch", macrospacer: true }, \u0448: { text: "\\cyrchar\\cyrsh", macrospacer: true }, \u0449: { text: "\\cyrchar\\cyrshch", macrospacer: true }, \u044A: { text: "\\cyrchar\\cyrhrdsn", macrospacer: true }, \u044B: { text: "\\cyrchar\\cyrery", macrospacer: true }, \u044C: { text: "\\cyrchar\\cyrsftsn", macrospacer: true }, \u044D: { text: "\\cyrchar\\cyrerev", macrospacer: true }, \u044E: { text: "\\cyrchar\\cyryu", macrospacer: true }, \u044F: { text: "\\cyrchar\\cyrya", macrospacer: true }, \u0435\u0308: { text: "\\cyrchar\\cyryo", macrospacer: true }, \u0452: { text: "\\cyrchar\\cyrdje", macrospacer: true }, \u0433\u0301: { text: "\\cyrchar{\\'\\cyrg}" }, \u0454: { text: "\\cyrchar\\cyrie", macrospacer: true }, \u0455: { text: "\\cyrchar\\cyrdze", macrospacer: true }, \u0456: { text: "\\cyrchar\\cyrii", macrospacer: true }, \u0456\u0308: { text: "\\cyrchar\\cyryi", macrospacer: true }, \u0458: { text: "\\cyrchar\\cyrje", macrospacer: true }, \u0459: { text: "\\cyrchar\\cyrlje", macrospacer: true }, \u045A: { text: "\\cyrchar\\cyrnje", macrospacer: true }, \u045B: { text: "\\cyrchar\\cyrtshe", macrospacer: true }, \u043A\u0301: { text: "\\cyrchar{\\'\\cyrk}" }, \u0443\u0306: { text: "\\cyrchar\\cyrushrt", macrospacer: true }, \u045F: { text: "\\cyrchar\\cyrdzhe", macrospacer: true }, \u0460: { text: "\\cyrchar\\CYROMEGA", macrospacer: true }, \u0461: { text: "\\cyrchar\\cyromega", macrospacer: true }, \u0462: { text: "\\cyrchar\\CYRYAT", macrospacer: true }, \u0464: { text: "\\cyrchar\\CYRIOTE", macrospacer: true }, \u0465: { text: "\\cyrchar\\cyriote", macrospacer: true }, \u0466: { text: "\\cyrchar\\CYRLYUS", macrospacer: true }, \u0467: { text: "\\cyrchar\\cyrlyus", macrospacer: true }, \u0468: { text: "\\cyrchar\\CYRIOTLYUS", macrospacer: true }, \u0469: { text: "\\cyrchar\\cyriotlyus", macrospacer: true }, \u046A: { text: "\\cyrchar\\CYRBYUS", macrospacer: true }, \u046C: { text: "\\cyrchar\\CYRIOTBYUS", macrospacer: true }, \u046D: { text: "\\cyrchar\\cyriotbyus", macrospacer: true }, \u046E: { text: "\\cyrchar\\CYRKSI", macrospacer: true }, \u046F: { text: "\\cyrchar\\cyrksi", macrospacer: true }, \u0470: { text: "\\cyrchar\\CYRPSI", macrospacer: true }, \u0471: { text: "\\cyrchar\\cyrpsi", macrospacer: true }, \u0472: { text: "\\cyrchar\\CYRFITA", macrospacer: true }, \u0474: { text: "\\cyrchar\\CYRIZH", macrospacer: true }, \u0478: { text: "\\cyrchar\\CYRUK", macrospacer: true }, \u0479: { text: "\\cyrchar\\cyruk", macrospacer: true }, \u047A: { text: "\\cyrchar\\CYROMEGARND", macrospacer: true }, \u047B: { text: "\\cyrchar\\cyromegarnd", macrospacer: true }, \u047C: { text: "\\cyrchar\\CYROMEGATITLO", macrospacer: true }, \u047D: { text: "\\cyrchar\\cyromegatitlo", macrospacer: true }, \u047E: { text: "\\cyrchar\\CYROT", macrospacer: true }, \u047F: { text: "\\cyrchar\\cyrot", macrospacer: true }, \u0480: { text: "\\cyrchar\\CYRKOPPA", macrospacer: true }, \u0481: { text: "\\cyrchar\\cyrkoppa", macrospacer: true }, "\u0482": { text: "\\cyrchar\\cyrthousands", macrospacer: true }, "\u0488": { text: "\\cyrchar\\cyrhundredthousands", macrospacer: true }, "\u0489": { text: "\\cyrchar\\cyrmillions", macrospacer: true }, \u048C: { text: "\\cyrchar\\CYRSEMISFTSN", macrospacer: true }, \u048D: { text: "\\cyrchar\\cyrsemisftsn", macrospacer: true }, \u048E: { text: "\\cyrchar\\CYRRTICK", macrospacer: true }, \u048F: { text: "\\cyrchar\\cyrrtick", macrospacer: true }, \u0490: { text: "\\cyrchar\\CYRGUP", macrospacer: true }, \u0491: { text: "\\cyrchar\\cyrgup", macrospacer: true }, \u0492: { text: "\\cyrchar\\CYRGHCRS", macrospacer: true }, \u0493: { text: "\\cyrchar\\cyrghcrs", macrospacer: true }, \u0494: { text: "\\cyrchar\\CYRGHK", macrospacer: true }, \u0495: { text: "\\cyrchar\\cyrghk", macrospacer: true }, \u0496: { text: "\\cyrchar\\CYRZHDSC", macrospacer: true }, \u0497: { text: "\\cyrchar\\cyrzhdsc", macrospacer: true }, \u0498: { text: "\\cyrchar\\CYRZDSC", macrospacer: true }, \u0499: { text: "\\cyrchar\\cyrzdsc", macrospacer: true }, \u049A: { text: "\\cyrchar\\CYRKDSC", macrospacer: true }, \u049B: { text: "\\cyrchar\\cyrkdsc", macrospacer: true }, \u049C: { text: "\\cyrchar\\CYRKVCRS", macrospacer: true }, \u049D: { text: "\\cyrchar\\cyrkvcrs", macrospacer: true }, \u049E: { text: "\\cyrchar\\CYRKHCRS", macrospacer: true }, \u049F: { text: "\\cyrchar\\cyrkhcrs", macrospacer: true }, \u04A0: { text: "\\cyrchar\\CYRKBEAK", macrospacer: true }, \u04A1: { text: "\\cyrchar\\cyrkbeak", macrospacer: true }, \u04A2: { text: "\\cyrchar\\CYRNDSC", macrospacer: true }, \u04A3: { text: "\\cyrchar\\cyrndsc", macrospacer: true }, \u04A4: { text: "\\cyrchar\\CYRNG", macrospacer: true }, \u04A5: { text: "\\cyrchar\\cyrng", macrospacer: true }, \u04A6: { text: "\\cyrchar\\CYRPHK", macrospacer: true }, \u04A7: { text: "\\cyrchar\\cyrphk", macrospacer: true }, \u04A8: { text: "\\cyrchar\\CYRABHHA", macrospacer: true }, \u04A9: { text: "\\cyrchar\\cyrabhha", macrospacer: true }, \u04AA: { text: "\\cyrchar\\CYRSDSC", macrospacer: true }, \u04AB: { text: "\\cyrchar\\cyrsdsc", macrospacer: true }, \u04AC: { text: "\\cyrchar\\CYRTDSC", macrospacer: true }, \u04AD: { text: "\\cyrchar\\cyrtdsc", macrospacer: true }, \u04AE: { text: "\\cyrchar\\CYRY", macrospacer: true }, \u04AF: { text: "\\cyrchar\\cyry", macrospacer: true }, \u04B0: { text: "\\cyrchar\\CYRYHCRS", macrospacer: true }, \u04B1: { text: "\\cyrchar\\cyryhcrs", macrospacer: true }, \u04B2: { text: "\\cyrchar\\CYRHDSC", macrospacer: true }, \u04B3: { text: "\\cyrchar\\cyrhdsc", macrospacer: true }, \u04B4: { text: "\\cyrchar\\CYRTETSE", macrospacer: true }, \u04B5: { text: "\\cyrchar\\cyrtetse", macrospacer: true }, \u04B6: { text: "\\cyrchar\\CYRCHRDSC", macrospacer: true }, \u04B7: { text: "\\cyrchar\\cyrchrdsc", macrospacer: true }, \u04B8: { text: "\\cyrchar\\CYRCHVCRS", macrospacer: true }, \u04B9: { text: "\\cyrchar\\cyrchvcrs", macrospacer: true }, \u04BA: { text: "\\cyrchar\\CYRSHHA", macrospacer: true }, \u04BB: { text: "\\cyrchar\\cyrshha", macrospacer: true }, \u04BC: { text: "\\cyrchar\\CYRABHCH", macrospacer: true }, \u04BD: { text: "\\cyrchar\\cyrabhch", macrospacer: true }, \u04BE: { text: "\\cyrchar\\CYRABHCHDSC", macrospacer: true }, \u04BF: { text: "\\cyrchar\\cyrabhchdsc", macrospacer: true }, \u04C0: { text: "\\cyrchar\\CYRpalochka", macrospacer: true }, \u04C3: { text: "\\cyrchar\\CYRKHK", macrospacer: true }, \u04C4: { text: "\\cyrchar\\cyrkhk", macrospacer: true }, \u04C7: { text: "\\cyrchar\\CYRNHK", macrospacer: true }, \u04C8: { text: "\\cyrchar\\cyrnhk", macrospacer: true }, \u04CB: { text: "\\cyrchar\\CYRCHLDSC", macrospacer: true }, \u04CC: { text: "\\cyrchar\\cyrchldsc", macrospacer: true }, \u04D4: { text: "\\cyrchar\\CYRAE", macrospacer: true }, \u04D5: { text: "\\cyrchar\\cyrae", macrospacer: true }, \u04D8: { text: "\\cyrchar\\CYRSCHWA", macrospacer: true }, \u04D9: { text: "\\cyrchar\\cyrschwa", macrospacer: true }, \u04E0: { text: "\\cyrchar\\CYRABHDZE", macrospacer: true }, \u04E1: { text: "\\cyrchar\\cyrabhdze", macrospacer: true }, \u04E8: { text: "\\cyrchar\\CYROTLD", macrospacer: true }, \u04E9: { text: "\\cyrchar\\cyrotld", macrospacer: true }, E\u0327\u0306: { text: "\\c{\\u{E}}" }, e\u0327\u0306: { text: "\\c{\\u{e}}" }, "\u2002": { text: "\\enspace", macrospacer: true }, "\u2003\u2003": { text: "\\qquad", macrospacer: true }, "\u2004": { text: "\\;" }, "\u2005": { text: "\\>" }, "\u2006": { text: "\\hspace{0.166em}" }, "\u2007": { text: "\\hphantom{0}" }, "\u2008": { text: "\\hphantom{,}" }, "\u2009": { text: "\\," }, "\u200B": { text: "\\hspace{0pt}" }, "\u200C": { text: "\\null", macrospacer: true }, "\u2010": { text: "-", alt: ["unicode-math"] }, "\u2011": { text: "-" }, "\u2012": { text: "-" }, "\u2013": { text: "--" }, "\u2014": { text: "---" }, "\u2015": { text: "\\texthorizontalbar", macrospacer: true, alt: ["unicode-math"] }, "\u2016": { text: "\\textbardbl", macrospacer: true }, "\u2018": { text: "`" }, "\u2019": { text: "'" }, "\u201A": { text: "\\quotesinglbase", macrospacer: true }, "\u201C": { text: "``" }, "\u201D": { text: "''" }, "\u201E": { text: ",," }, "\u201F": { text: "\\quotedblbase", macrospacer: true }, "\u2023": { text: ">" }, "\u2024": { text: "." }, "\u2025": { text: "..", alt: ["unicode-math"] }, "\u2027": { text: "-" }, "\u202F": { text: "\\," }, "\u2039": { text: "\\guilsinglleft", macrospacer: true }, "\u203A": { text: "\\guilsinglright", macrospacer: true }, "\u203E": { text: "-" }, "\u2044": { text: "\\textfractionsolidus", macrospacer: true, alt: ["unicode-math"] }, "\u2048": { text: "?!" }, "\u2049": { text: "!?" }, "\u204A": { text: "7" }, "\u2060": { text: "\\nolinebreak", macrospacer: true }, "\u2100": { text: "a/c" }, "\u2101": { text: "a/s" }, "\u2103": { text: "\\textcelsius", macrospacer: true }, "\u2105": { text: "c/o" }, "\u2106": { text: "c/u" }, "\u2109": { text: "F" }, "\u2116": { text: "\\textnumero", macrospacer: true }, "\u2117": { text: "\\textcircledP", macrospacer: true }, "\u2120": { text: "\\textservicemark", macrospacer: true }, "\u2121": { text: "TEL" }, "\u2127": { text: "\\textmho", macrospacer: true, alt: ["unicode-math"] }, "\u2129": { text: "\\textriota", macrospacer: true, alt: ["unicode-math"] }, "\u212E": { text: "\\textestimated", macrospacer: true }, "\u2160": { text: "I" }, "\u2161": { text: "II" }, "\u2162": { text: "III" }, "\u2163": { text: "IV" }, "\u2164": { text: "V" }, "\u2165": { text: "VI" }, "\u2166": { text: "VII" }, "\u2167": { text: "VIII" }, "\u2168": { text: "IX" }, "\u2169": { text: "X" }, "\u216A": { text: "XI" }, "\u216B": { text: "XII" }, "\u216C": { text: "L" }, "\u216D": { text: "C" }, "\u216E": { text: "D" }, "\u216F": { text: "M" }, "\u2170": { text: "i" }, "\u2171": { text: "ii" }, "\u2172": { text: "iii" }, "\u2173": { text: "iv" }, "\u2174": { text: "v" }, "\u2175": { text: "vi" }, "\u2176": { text: "vii" }, "\u2177": { text: "viii" }, "\u2178": { text: "ix" }, "\u2179": { text: "x" }, "\u217A": { text: "xi" }, "\u217B": { text: "xii" }, "\u217C": { text: "l" }, "\u217D": { text: "c" }, "\u217E": { text: "d" }, "\u217F": { text: "m" }, "\u2215": { text: "/", alt: ["unicode-math"] }, "\u221A": { text: "\\textsurd", macrospacer: true, alt: ["unicode-math"] }, "\u2422": { text: "\\textblank", macrospacer: true, alt: ["unicode-math"] }, "\u2460": { text: "\\ding{172}" }, "\u2461": { text: "\\ding{173}" }, "\u2462": { text: "\\ding{174}" }, "\u2463": { text: "\\ding{175}" }, "\u2464": { text: "\\ding{176}" }, "\u2465": { text: "\\ding{177}" }, "\u2466": { text: "\\ding{178}" }, "\u2467": { text: "\\ding{179}" }, "\u2468": { text: "\\ding{180}" }, "\u2469": { text: "\\ding{181}" }, "\u246A": { text: "(11)" }, "\u246B": { text: "(12)" }, "\u246C": { text: "(13)" }, "\u246D": { text: "(14)" }, "\u246E": { text: "(15)" }, "\u246F": { text: "(16)" }, "\u2470": { text: "(17)" }, "\u2471": { text: "(18)" }, "\u2472": { text: "(19)" }, "\u2473": { text: "(20)" }, "\u2474": { text: "(1)" }, "\u2475": { text: "(2)" }, "\u2476": { text: "(3)" }, "\u2477": { text: "(4)" }, "\u2478": { text: "(5)" }, "\u2479": { text: "(6)" }, "\u247A": { text: "(7)" }, "\u247B": { text: "(8)" }, "\u247C": { text: "(9)" }, "\u247D": { text: "(10)" }, "\u247E": { text: "(11)" }, "\u247F": { text: "(12)" }, "\u2480": { text: "(13)" }, "\u2481": { text: "(14)" }, "\u2482": { text: "(15)" }, "\u2483": { text: "(16)" }, "\u2484": { text: "(17)" }, "\u2485": { text: "(18)" }, "\u2486": { text: "(19)" }, "\u2487": { text: "(20)" }, "\u2488": { text: "1." }, "\u2489": { text: "2." }, "\u248A": { text: "3." }, "\u248B": { text: "4." }, "\u248C": { text: "5." }, "\u248D": { text: "6." }, "\u248E": { text: "7." }, "\u248F": { text: "8." }, "\u2490": { text: "9." }, "\u2491": { text: "10." }, "\u2492": { text: "11." }, "\u2493": { text: "12." }, "\u2494": { text: "13." }, "\u2495": { text: "14." }, "\u2496": { text: "15." }, "\u2497": { text: "16." }, "\u2498": { text: "17." }, "\u2499": { text: "18." }, "\u249A": { text: "19." }, "\u249B": { text: "20." }, "\u249C": { text: "(a)" }, "\u249D": { text: "(b)" }, "\u249E": { text: "(c)" }, "\u249F": { text: "(d)" }, "\u24A0": { text: "(e)" }, "\u24A1": { text: "(f)" }, "\u24A2": { text: "(g)" }, "\u24A3": { text: "(h)" }, "\u24A4": { text: "(i)" }, "\u24A5": { text: "(j)" }, "\u24A6": { text: "(k)" }, "\u24A7": { text: "(l)" }, "\u24A8": { text: "(m)" }, "\u24A9": { text: "(n)" }, "\u24AA": { text: "(o)" }, "\u24AB": { text: "(p)" }, "\u24AC": { text: "(q)" }, "\u24AD": { text: "(r)" }, "\u24AE": { text: "(s)" }, "\u24AF": { text: "(t)" }, "\u24B0": { text: "(u)" }, "\u24B1": { text: "(v)" }, "\u24B2": { text: "(w)" }, "\u24B3": { text: "(x)" }, "\u24B4": { text: "(y)" }, "\u24B5": { text: "(z)" }, "\u2500": { text: "-", alt: ["pmboxdraw"] }, "\u2504": { text: "-" }, "\u2508": { text: "-" }, "\u254C": { text: "-" }, "\u2572": { text: "\\" }, "\u2573": { text: "X" }, "\u257C": { text: "-", alt: ["pmboxdraw"] }, "\u257E": { text: "-", alt: ["pmboxdraw"] }, "\u25A0": { text: "\\ding{110}", alt: ["unicode-math"] }, "\u25B2": { text: "\\ding{115}", alt: ["unicode-math"] }, "\u25BC": { text: "\\ding{116}", alt: ["unicode-math"] }, "\u25D7": { text: "\\ding{119}", alt: ["unicode-math"] }, "\u25E6": { text: "\\textopenbullet", macrospacer: true, alt: ["unicode-math"] }, "\u2605": { text: "\\ding{72}", alt: ["unicode-math"] }, "\u2606": { text: "\\ding{73}", alt: ["unicode-math"] }, "\u260E": { text: "\\ding{37}" }, "\u2613": { text: "X" }, "\u261B": { text: "\\ding{42}" }, "\u2640": { text: "\\venus", macrospacer: true, alt: ["unicode-math"] }, "\u2665": { text: "\\ding{170}", alt: ["unicode-math"] }, "\u2666": { text: "\\ding{169}", alt: ["unicode-math"] }, "\u266A": { text: "\\textmusicalnote", macrospacer: true, alt: ["unicode-math"] }, "\u2701": { text: "\\ding{33}" }, "\u2702": { text: "\\ding{34}" }, "\u2703": { text: "\\ding{35}" }, "\u2704": { text: "\\ding{36}" }, "\u2706": { text: "\\ding{38}" }, "\u2707": { text: "\\ding{39}" }, "\u2708": { text: "\\ding{40}" }, "\u2709": { text: "\\ding{41}" }, "\u270C": { text: "\\ding{44}" }, "\u270D": { text: "\\ding{45}" }, "\u270F": { text: "\\ding{47}" }, "\u2710": { text: "\\ding{48}" }, "\u2711": { text: "\\ding{49}" }, "\u2712": { text: "\\ding{50}" }, "\u2713": { text: "\\ding{51}", alt: ["unicode-math"] }, "\u2714": { text: "\\ding{52}" }, "\u2715": { text: "\\ding{53}" }, "\u2716": { text: "\\ding{54}" }, "\u2718": { text: "\\ding{56}" }, "\u2719": { text: "\\ding{57}" }, "\u271A": { text: "\\ding{58}" }, "\u271B": { text: "\\ding{59}" }, "\u271C": { text: "\\ding{60}" }, "\u271D": { text: "\\ding{61}" }, "\u271E": { text: "\\ding{62}" }, "\u271F": { text: "\\ding{63}" }, "\u2720": { text: "\\ding{64}", alt: ["unicode-math"] }, "\u2721": { text: "\\ding{65}" }, "\u2722": { text: "\\ding{66}" }, "\u2723": { text: "\\ding{67}" }, "\u2724": { text: "\\ding{68}" }, "\u2725": { text: "\\ding{69}" }, "\u2726": { text: "\\ding{70}" }, "\u2727": { text: "\\ding{71}" }, "\u2729": { text: "\\ding{73}" }, "\u272A": { text: "\\ding{74}", alt: ["unicode-math"] }, "\u272B": { text: "\\ding{75}" }, "\u272C": { text: "\\ding{76}" }, "\u272D": { text: "\\ding{77}" }, "\u272E": { text: "\\ding{78}" }, "\u272F": { text: "\\ding{79}" }, "\u2730": { text: "\\ding{80}" }, "\u2731": { text: "\\ding{81}" }, "\u2732": { text: "\\ding{82}" }, "\u2733": { text: "\\ding{83}" }, "\u2734": { text: "\\ding{84}" }, "\u2735": { text: "\\ding{85}" }, "\u2736": { text: "\\ding{86}", alt: ["unicode-math"] }, "\u2737": { text: "\\ding{87}" }, "\u2738": { text: "\\ding{88}" }, "\u2739": { text: "\\ding{89}" }, "\u273A": { text: "\\ding{90}" }, "\u273B": { text: "\\ding{91}" }, "\u273C": { text: "\\ding{92}" }, "\u273D": { text: "\\ding{93}", alt: ["unicode-math"] }, "\u273E": { text: "\\ding{94}" }, "\u273F": { text: "\\ding{95}" }, "\u2740": { text: "\\ding{96}" }, "\u2741": { text: "\\ding{97}" }, "\u2742": { text: "\\ding{98}" }, "\u2743": { text: "\\ding{99}" }, "\u2744": { text: "\\ding{100}" }, "\u2745": { text: "\\ding{101}" }, "\u2746": { text: "\\ding{102}" }, "\u2747": { text: "\\ding{103}" }, "\u2748": { text: "\\ding{104}" }, "\u2749": { text: "\\ding{105}" }, "\u274A": { text: "\\ding{106}" }, "\u274B": { text: "\\ding{107}" }, "\u274D": { text: "\\ding{109}" }, "\u274F": { text: "\\ding{111}" }, "\u2750": { text: "\\ding{112}" }, "\u2751": { text: "\\ding{113}" }, "\u2752": { text: "\\ding{114}" }, "\u2756": { text: "\\ding{118}" }, "\u2758": { text: "\\ding{120}" }, "\u2759": { text: "\\ding{121}" }, "\u275A": { text: "\\ding{122}" }, "\u275B": { text: "\\ding{123}" }, "\u275C": { text: "\\ding{124}" }, "\u275D": { text: "\\ding{125}" }, "\u275E": { text: "\\ding{126}" }, "\u2761": { text: "\\ding{161}" }, "\u2762": { text: "\\ding{162}" }, "\u2763": { text: "\\ding{163}" }, "\u2764": { text: "\\ding{164}" }, "\u2765": { text: "\\ding{165}" }, "\u2766": { text: "\\ding{166}" }, "\u2767": { text: "\\ding{167}" }, "\u2776": { text: "\\ding{182}" }, "\u2777": { text: "\\ding{183}" }, "\u2778": { text: "\\ding{184}" }, "\u2779": { text: "\\ding{185}" }, "\u277A": { text: "\\ding{186}" }, "\u277B": { text: "\\ding{187}" }, "\u277C": { text: "\\ding{188}" }, "\u277D": { text: "\\ding{189}" }, "\u277E": { text: "\\ding{190}" }, "\u277F": { text: "\\ding{191}" }, "\u2780": { text: "\\ding{192}" }, "\u2781": { text: "\\ding{193}" }, "\u2782": { text: "\\ding{194}" }, "\u2783": { text: "\\ding{195}" }, "\u2784": { text: "\\ding{196}" }, "\u2785": { text: "\\ding{197}" }, "\u2786": { text: "\\ding{198}" }, "\u2787": { text: "\\ding{199}" }, "\u2788": { text: "\\ding{200}" }, "\u2789": { text: "\\ding{201}" }, "\u278A": { text: "\\ding{202}" }, "\u278B": { text: "\\ding{203}" }, "\u278C": { text: "\\ding{204}" }, "\u278D": { text: "\\ding{205}" }, "\u278E": { text: "\\ding{206}" }, "\u278F": { text: "\\ding{207}" }, "\u2790": { text: "\\ding{208}" }, "\u2791": { text: "\\ding{209}" }, "\u2792": { text: "\\ding{210}" }, "\u2793": { text: "\\ding{211}" }, "\u2794": { text: "\\ding{212}" }, "\u2798": { text: "\\ding{216}" }, "\u2799": { text: "\\ding{217}" }, "\u279A": { text: "\\ding{218}" }, "\u279B": { text: "\\ding{219}", alt: ["unicode-math"] }, "\u279C": { text: "\\ding{220}" }, "\u279D": { text: "\\ding{221}" }, "\u279E": { text: "\\ding{222}" }, "\u279F": { text: "\\ding{223}" }, "\u27A0": { text: "\\ding{224}" }, "\u27A1": { text: "\\ding{225}" }, "\u27A3": { text: "\\ding{227}" }, "\u27A4": { text: "\\ding{228}" }, "\u27A5": { text: "\\ding{229}" }, "\u27A6": { text: "\\ding{230}" }, "\u27A7": { text: "\\ding{231}" }, "\u27A8": { text: "\\ding{232}" }, "\u27A9": { text: "\\ding{233}" }, "\u27AA": { text: "\\ding{234}" }, "\u27AB": { text: "\\ding{235}" }, "\u27AC": { text: "\\ding{236}" }, "\u27AD": { text: "\\ding{237}" }, "\u27AE": { text: "\\ding{238}" }, "\u27AF": { text: "\\ding{239}" }, "\u27B1": { text: "\\ding{241}" }, "\u27B2": { text: "\\ding{242}" }, "\u27B3": { text: "\\ding{243}" }, "\u27B4": { text: "\\ding{244}" }, "\u27B5": { text: "\\ding{245}" }, "\u27B6": { text: "\\ding{246}" }, "\u27B7": { text: "\\ding{247}" }, "\u27B8": { text: "\\ding{248}" }, "\u27B9": { text: "\\ding{249}" }, "\u27BA": { text: "\\ding{250}" }, "\u27BB": { text: "\\ding{251}" }, "\u27BC": { text: "\\ding{252}" }, "\u27BD": { text: "\\ding{253}" }, "\u27BE": { text: "\\ding{254}" }, \uFB00: { text: "ff" }, \uFB01: { text: "fi" }, \uFB02: { text: "fl" }, \uFB03: { text: "ffi" }, \uFB04: { text: "ffl" }, \uFB05: { text: "st" }, \uFB06: { text: "st" }, "\uFFFD": { text: "\\dbend", macrospacer: true }, "\u2052": { text: "\\textdiscount", macrospacer: true }, "\u203D": { text: "\\textinterrobang", macrospacer: true }, "\u203B": { text: "\\textreferencemark", macrospacer: true }, \u0166: { text: "\\textTstroke", macrospacer: true }, \u0167: { text: "\\texttstroke", macrospacer: true }, "\u02CB": { text: "\\textasciigrave", macrospacer: true }, \u0391: { math: "A", alt: ["unicode-math"] }, \u0392: { math: "B", alt: ["unicode-math"] }, \u0395: { math: "E", alt: ["unicode-math"] }, \u0396: { math: "Z", alt: ["unicode-math"] }, \u0397: { math: "H", alt: ["unicode-math"] }, \u0399: { math: "I", alt: ["unicode-math"] }, \u039A: { math: "K", alt: ["unicode-math"] }, \u039C: { math: "M", alt: ["unicode-math"] }, \u039D: { math: "N", alt: ["unicode-math"] }, \u039F: { math: "O", alt: ["unicode-math"] }, \u03A1: { math: "P", alt: ["unicode-math"] }, \u03A4: { math: "T", alt: ["unicode-math"] }, \u03A7: { math: "X", alt: ["unicode-math"] }, \u03BF: { math: "o", alt: ["unicode-math"] }, \u210A: { math: "g", alt: ["mathrsfs"] }, \u2110: { math: "I", alt: ["mathrsfs"] }, \u2112: { math: "L", alt: ["mathrsfs", "unicode-math"] }, \u211B: { math: "R", alt: ["mathrsfs", "unicode-math"] }, \u212C: { math: "B", alt: ["mathrsfs"] }, \u212F: { math: "e", alt: ["mathrsfs"] }, \u2130: { math: "E", alt: ["mathrsfs"] }, \u2131: { math: "F", alt: ["mathrsfs"] }, \u2133: { math: "M", alt: ["mathrsfs"] }, \u2134: { math: "o", alt: ["mathrsfs"] }, "\u{1D49C}": { math: "A", alt: ["mathrsfs", "unicode-math"] }, "\u{1D49E}": { math: "C", alt: ["mathrsfs", "unicode-math"] }, "\u{1D49F}": { math: "D", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4A2}": { math: "G", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4A5}": { math: "J", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4A6}": { math: "K", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4A9}": { math: "N", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4AA}": { math: "O", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4AB}": { math: "P", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4AC}": { math: "Q", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4AE}": { math: "S", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4AF}": { math: "T", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4B0}": { math: "U", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4B1}": { math: "V", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4B2}": { math: "W", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4B3}": { math: "X", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4B4}": { math: "Y", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4B5}": { math: "Z", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4B6}": { math: "a", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4B7}": { math: "b", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4B8}": { math: "c", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4B9}": { math: "d", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4BB}": { math: "f", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4BD}": { math: "h", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4BE}": { math: "i", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4BF}": { math: "j", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4C0}": { math: "k", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4C1}": { math: "l", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4C2}": { math: "m", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4C3}": { math: "n", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4C5}": { math: "p", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4C6}": { math: "q", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4C7}": { math: "r", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4C8}": { math: "s", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4C9}": { math: "t", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4CA}": { math: "u", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4CB}": { math: "v", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4CC}": { math: "w", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4CD}": { math: "x", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4CE}": { math: "y", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4CF}": { math: "z", alt: ["mathrsfs", "unicode-math"] }, "\u24B6": { text: "(A)" }, "\u24B7": { text: "(B)" }, "\u24B8": { text: "(C)" }, "\u24B9": { text: "(D)" }, "\u24BA": { text: "(E)" }, "\u24BB": { text: "(F)" }, "\u24BC": { text: "(G)" }, "\u24BD": { text: "(H)" }, "\u24BE": { text: "(I)" }, "\u24BF": { text: "(J)" }, "\u24C0": { text: "(K)" }, "\u24C1": { text: "(L)" }, "\u24C2": { text: "(M)" }, "\u24C3": { text: "(N)" }, "\u24C4": { text: "(O)" }, "\u24C5": { text: "(P)" }, "\u24C6": { text: "(Q)" }, "\u24C7": { text: "(R)" }, "\u24C9": { text: "(T)" }, "\u24CA": { text: "(U)" }, "\u24CB": { text: "(V)" }, "\u24CC": { text: "(W)" }, "\u24CD": { text: "(X)" }, "\u24CE": { text: "(Y)" }, "\u24CF": { text: "(Z)" }, "\u24D0": { text: "(a)" }, "\u24D1": { text: "(b)" }, "\u24D2": { text: "(c)" }, "\u24D3": { text: "(d)" }, "\u24D4": { text: "(e)" }, "\u24D5": { text: "(f)" }, "\u24D6": { text: "(g)" }, "\u24D7": { text: "(h)" }, "\u24D8": { text: "(i)" }, "\u24D9": { text: "(j)" }, "\u24DA": { text: "(k)" }, "\u24DB": { text: "(l)" }, "\u24DC": { text: "(m)" }, "\u24DD": { text: "(n)" }, "\u24DE": { text: "(o)" }, "\u24DF": { text: "(p)" }, "\u24E0": { text: "(q)" }, "\u24E1": { text: "(r)" }, "\u24E2": { text: "(s)" }, "\u24E3": { text: "(t)" }, "\u24E4": { text: "(u)" }, "\u24E5": { text: "(v)" }, "\u24E6": { text: "(w)" }, "\u24E7": { text: "(x)" }, "\u24E8": { text: "(y)" }, "\u24E9": { text: "(z)" }, "\u24EA": { text: "(0)" }, "\u2501": { text: "=", alt: ["pmboxdraw"] }, "\u2502": { text: "|", alt: ["pmboxdraw"] }, "\u2503": { text: "|", alt: ["pmboxdraw"] }, "\u2505": { text: "=" }, "\u2507": { text: "|" }, "\u2509": { text: "=" }, "\u250A": { text: "|" }, "\u250B": { text: "|" }, "\u254D": { text: "=" }, "\u254E": { text: "|" }, "\u254F": { text: "|" }, "\u2550": { text: "=", alt: ["pmboxdraw"] }, "\u2551": { text: "|", alt: ["pmboxdraw"] }, "\u257D": { text: "|", alt: ["pmboxdraw"] }, "\u257F": { text: "|", alt: ["pmboxdraw"] } }, package: { wasysym: { "\u2653": { text: "\\pisces", math: "\\pisces", macrospacer: true }, "\u263D": { text: "\\rightmoon", macrospacer: true }, "\u263E": { text: "\\leftmoon", macrospacer: true } }, "unicode-math": { "\u20AC": { math: "\\euro" }, "\u0300": { math: "\\grave" }, "\u0301": { math: "\\acute" }, "\u0303": { math: "\\tilde" }, "\u0306": { math: "\\breve" }, "\u0307": { math: "\\dot" }, "\u0308": { math: "\\ddot" }, "\u0309": { math: "\\ovhook" }, "\u030C": { math: "\\check" }, "\u0310": { math: "\\candra" }, "\u0312": { math: "\\oturnedcomma" }, "\u0315": { math: "\\ocommatopright" }, "\u031A": { math: "\\droang" }, "\u034D": { math: "\\underleftrightarrow" }, \u0391: { math: "\\mupAlpha" }, \u0392: { math: "\\mupBeta" }, \u0393: { math: "\\mupGamma" }, \u0394: { math: "\\mupDelta" }, \u0395: { math: "\\mupEpsilon" }, \u0396: { math: "\\mupZeta" }, \u0397: { math: "\\mupEta" }, \u0398: { math: "\\mupTheta" }, \u0399: { math: "\\mupIota" }, \u039A: { math: "\\mupKappa" }, \u039B: { math: "\\mupLambda" }, \u039C: { math: "\\mupMu" }, \u039D: { math: "\\mupNu" }, \u039F: { math: "\\mupOmicron" }, \u03A1: { math: "\\mupRho" }, \u03A4: { math: "\\mupTau" }, \u03A7: { math: "\\mupChi" }, \u03BF: { math: "\\mupomicron" }, \u03D0: { math: "\\varbeta" }, \u03F0: { math: "\\varkappa" }, "\u03F6": { math: "\\upbackepsilon" }, "\u{1D400}": { math: "\\mbfA" }, "\u{1D401}": { math: "\\mbfB" }, "\u{1D402}": { math: "\\mbfC" }, "\u{1D403}": { math: "\\mbfD" }, "\u{1D404}": { math: "\\mbfE" }, "\u{1D405}": { math: "\\mbfF" }, "\u{1D406}": { math: "\\mbfG" }, "\u{1D407}": { math: "\\mbfH" }, "\u{1D408}": { math: "\\mbfI" }, "\u{1D409}": { math: "\\mbfJ" }, "\u{1D40A}": { math: "\\mbfK" }, "\u{1D40B}": { math: "\\mbfL" }, "\u{1D40C}": { math: "\\mbfM" }, "\u{1D40D}": { math: "\\mbfN" }, "\u{1D40E}": { math: "\\mbfO" }, "\u{1D40F}": { math: "\\mbfP" }, "\u{1D410}": { math: "\\mbfQ" }, "\u{1D411}": { math: "\\mbfR" }, "\u{1D412}": { math: "\\mbfS" }, "\u{1D413}": { math: "\\mbfT" }, "\u{1D414}": { math: "\\mbfU" }, "\u{1D415}": { math: "\\mbfV" }, "\u{1D416}": { math: "\\mbfW" }, "\u{1D417}": { math: "\\mbfX" }, "\u{1D418}": { math: "\\mbfY" }, "\u{1D419}": { math: "\\mbfZ" }, "\u{1D41A}": { math: "\\mbfa" }, "\u{1D41B}": { math: "\\mbfb" }, "\u{1D41C}": { math: "\\mbfc" }, "\u{1D41D}": { math: "\\mbfd" }, "\u{1D41E}": { math: "\\mbfe" }, "\u{1D41F}": { math: "\\mbff" }, "\u{1D420}": { math: "\\mbfg" }, "\u{1D421}": { math: "\\mbfh" }, "\u{1D422}": { math: "\\mbfi" }, "\u{1D423}": { math: "\\mbfj" }, "\u{1D424}": { math: "\\mbfk" }, "\u{1D425}": { math: "\\mbfl" }, "\u{1D426}": { math: "\\mbfm" }, "\u{1D427}": { math: "\\mbfn" }, "\u{1D428}": { math: "\\mbfo" }, "\u{1D429}": { math: "\\mbfp" }, "\u{1D42A}": { math: "\\mbfq" }, "\u{1D42B}": { math: "\\mbfr" }, "\u{1D42C}": { math: "\\mbfs" }, "\u{1D42D}": { math: "\\mbft" }, "\u{1D42E}": { math: "\\mbfu" }, "\u{1D42F}": { math: "\\mbfv" }, "\u{1D430}": { math: "\\mbfw" }, "\u{1D431}": { math: "\\mbfx" }, "\u{1D432}": { math: "\\mbfy" }, "\u{1D433}": { math: "\\mbfz" }, "\u{1D434}": { math: "\\mitA" }, "\u{1D435}": { math: "\\mitB" }, "\u{1D436}": { math: "\\mitC" }, "\u{1D437}": { math: "\\mitD" }, "\u{1D438}": { math: "\\mitE" }, "\u{1D439}": { math: "\\mitF" }, "\u{1D43A}": { math: "\\mitG" }, "\u{1D43B}": { math: "\\mitH" }, "\u{1D43C}": { math: "\\mitI" }, "\u{1D43D}": { math: "\\mitJ" }, "\u{1D43E}": { math: "\\mitK" }, "\u{1D43F}": { math: "\\mitL" }, "\u{1D440}": { math: "\\mitM" }, "\u{1D441}": { math: "\\mitN" }, "\u{1D442}": { math: "\\mitO" }, "\u{1D443}": { math: "\\mitP" }, "\u{1D444}": { math: "\\mitQ" }, "\u{1D445}": { math: "\\mitR" }, "\u{1D446}": { math: "\\mitS" }, "\u{1D447}": { math: "\\mitT" }, "\u{1D448}": { math: "\\mitU" }, "\u{1D449}": { math: "\\mitV" }, "\u{1D44A}": { math: "\\mitW" }, "\u{1D44B}": { math: "\\mitX" }, "\u{1D44C}": { math: "\\mitY" }, "\u{1D44D}": { math: "\\mitZ" }, "\u{1D44E}": { math: "\\mita" }, "\u{1D44F}": { math: "\\mitb" }, "\u{1D450}": { math: "\\mitc" }, "\u{1D451}": { math: "\\mitd" }, "\u{1D452}": { math: "\\mite" }, "\u{1D453}": { math: "\\mitf" }, "\u{1D454}": { math: "\\mitg" }, "\u{1D456}": { math: "\\miti" }, "\u{1D457}": { math: "\\mitj" }, "\u{1D458}": { math: "\\mitk" }, "\u{1D459}": { math: "\\mitl" }, "\u{1D45A}": { math: "\\mitm" }, "\u{1D45B}": { math: "\\mitn" }, "\u{1D45C}": { math: "\\mito" }, "\u{1D45D}": { math: "\\mitp" }, "\u{1D45E}": { math: "\\mitq" }, "\u{1D45F}": { math: "\\mitr" }, "\u{1D460}": { math: "\\mits" }, "\u{1D461}": { math: "\\mitt" }, "\u{1D462}": { math: "\\mitu" }, "\u{1D463}": { math: "\\mitv" }, "\u{1D464}": { math: "\\mitw" }, "\u{1D465}": { math: "\\mitx" }, "\u{1D466}": { math: "\\mity" }, "\u{1D467}": { math: "\\mitz" }, "\u{1D468}": { math: "\\mbfitA" }, "\u{1D469}": { math: "\\mbfitB" }, "\u{1D46A}": { math: "\\mbfitC" }, "\u{1D46B}": { math: "\\mbfitD" }, "\u{1D46C}": { math: "\\mbfitE" }, "\u{1D46D}": { math: "\\mbfitF" }, "\u{1D46E}": { math: "\\mbfitG" }, "\u{1D46F}": { math: "\\mbfitH" }, "\u{1D470}": { math: "\\mbfitI" }, "\u{1D471}": { math: "\\mbfitJ" }, "\u{1D472}": { math: "\\mbfitK" }, "\u{1D473}": { math: "\\mbfitL" }, "\u{1D474}": { math: "\\mbfitM" }, "\u{1D475}": { math: "\\mbfitN" }, "\u{1D476}": { math: "\\mbfitO" }, "\u{1D477}": { math: "\\mbfitP" }, "\u{1D478}": { math: "\\mbfitQ" }, "\u{1D479}": { math: "\\mbfitR" }, "\u{1D47A}": { math: "\\mbfitS" }, "\u{1D47B}": { math: "\\mbfitT" }, "\u{1D47C}": { math: "\\mbfitU" }, "\u{1D47D}": { math: "\\mbfitV" }, "\u{1D47E}": { math: "\\mbfitW" }, "\u{1D47F}": { math: "\\mbfitX" }, "\u{1D480}": { math: "\\mbfitY" }, "\u{1D481}": { math: "\\mbfitZ" }, "\u{1D482}": { math: "\\mbfita" }, "\u{1D483}": { math: "\\mbfitb" }, "\u{1D484}": { math: "\\mbfitc" }, "\u{1D485}": { math: "\\mbfitd" }, "\u{1D486}": { math: "\\mbfite" }, "\u{1D487}": { math: "\\mbfitf" }, "\u{1D488}": { math: "\\mbfitg" }, "\u{1D489}": { math: "\\mbfith" }, "\u{1D48A}": { math: "\\mbfiti" }, "\u{1D48B}": { math: "\\mbfitj" }, "\u{1D48C}": { math: "\\mbfitk" }, "\u{1D48D}": { math: "\\mbfitl" }, "\u{1D48E}": { math: "\\mbfitm" }, "\u{1D48F}": { math: "\\mbfitn" }, "\u{1D490}": { math: "\\mbfito" }, "\u{1D491}": { math: "\\mbfitp" }, "\u{1D492}": { math: "\\mbfitq" }, "\u{1D493}": { math: "\\mbfitr" }, "\u{1D494}": { math: "\\mbfits" }, "\u{1D495}": { math: "\\mbfitt" }, "\u{1D496}": { math: "\\mbfitu" }, "\u{1D497}": { math: "\\mbfitv" }, "\u{1D498}": { math: "\\mbfitw" }, "\u{1D499}": { math: "\\mbfitx" }, "\u{1D49A}": { math: "\\mbfity" }, "\u{1D49B}": { math: "\\mbfitz" }, "\u{1D49C}": { math: "\\mscrA" }, "\u{1D49E}": { math: "\\mscrC" }, "\u{1D49F}": { math: "\\mscrD" }, "\u{1D4A2}": { math: "\\mscrG" }, "\u{1D4A5}": { math: "\\mscrJ" }, "\u{1D4A6}": { math: "\\mscrK" }, "\u{1D4A9}": { math: "\\mscrN" }, "\u{1D4AA}": { math: "\\mscrO" }, "\u{1D4AB}": { math: "\\mscrP" }, "\u{1D4AC}": { math: "\\mscrQ" }, "\u{1D4AE}": { math: "\\mscrS" }, "\u{1D4AF}": { math: "\\mscrT" }, "\u{1D4B0}": { math: "\\mscrU" }, "\u{1D4B1}": { math: "\\mscrV" }, "\u{1D4B2}": { math: "\\mscrW" }, "\u{1D4B3}": { math: "\\mscrX" }, "\u{1D4B4}": { math: "\\mscrY" }, "\u{1D4B5}": { math: "\\mscrZ" }, "\u{1D4B6}": { math: "\\mscra" }, "\u{1D4B7}": { math: "\\mscrb" }, "\u{1D4B8}": { math: "\\mscrc" }, "\u{1D4B9}": { math: "\\mscrd" }, "\u{1D4BB}": { math: "\\mscrf" }, "\u{1D4BD}": { math: "\\mscrh" }, "\u{1D4BE}": { math: "\\mscri" }, "\u{1D4BF}": { math: "\\mscrj" }, "\u{1D4C0}": { math: "\\mscrk" }, "\u{1D4C1}": { math: "\\mscrl" }, "\u{1D4C2}": { math: "\\mscrm" }, "\u{1D4C3}": { math: "\\mscrn" }, "\u{1D4C5}": { math: "\\mscrp" }, "\u{1D4C6}": { math: "\\mscrq" }, "\u{1D4C7}": { math: "\\mscrr" }, "\u{1D4C8}": { math: "\\mscrs" }, "\u{1D4C9}": { math: "\\mscrt" }, "\u{1D4CA}": { math: "\\mscru" }, "\u{1D4CB}": { math: "\\mscrv" }, "\u{1D4CC}": { math: "\\mscrw" }, "\u{1D4CD}": { math: "\\mscrx" }, "\u{1D4CE}": { math: "\\mscry" }, "\u{1D4CF}": { math: "\\mscrz" }, "\u{1D4D0}": { math: "\\mbfscrA" }, "\u{1D4D1}": { math: "\\mbfscrB" }, "\u{1D4D2}": { math: "\\mbfscrC" }, "\u{1D4D3}": { math: "\\mbfscrD" }, "\u{1D4D4}": { math: "\\mbfscrE" }, "\u{1D4D5}": { math: "\\mbfscrF" }, "\u{1D4D6}": { math: "\\mbfscrG" }, "\u{1D4D7}": { math: "\\mbfscrH" }, "\u{1D4D8}": { math: "\\mbfscrI" }, "\u{1D4D9}": { math: "\\mbfscrJ" }, "\u{1D4DA}": { math: "\\mbfscrK" }, "\u{1D4DB}": { math: "\\mbfscrL" }, "\u{1D4DC}": { math: "\\mbfscrM" }, "\u{1D4DD}": { math: "\\mbfscrN" }, "\u{1D4DE}": { math: "\\mbfscrO" }, "\u{1D4DF}": { math: "\\mbfscrP" }, "\u{1D4E0}": { math: "\\mbfscrQ" }, "\u{1D4E1}": { math: "\\mbfscrR" }, "\u{1D4E2}": { math: "\\mbfscrS" }, "\u{1D4E3}": { math: "\\mbfscrT" }, "\u{1D4E4}": { math: "\\mbfscrU" }, "\u{1D4E5}": { math: "\\mbfscrV" }, "\u{1D4E6}": { math: "\\mbfscrW" }, "\u{1D4E7}": { math: "\\mbfscrX" }, "\u{1D4E8}": { math: "\\mbfscrY" }, "\u{1D4E9}": { math: "\\mbfscrZ" }, "\u{1D4EA}": { math: "\\mbfscra" }, "\u{1D4EB}": { math: "\\mbfscrb" }, "\u{1D4EC}": { math: "\\mbfscrc" }, "\u{1D4ED}": { math: "\\mbfscrd" }, "\u{1D4EE}": { math: "\\mbfscre" }, "\u{1D4EF}": { math: "\\mbfscrf" }, "\u{1D4F0}": { math: "\\mbfscrg" }, "\u{1D4F1}": { math: "\\mbfscrh" }, "\u{1D4F2}": { math: "\\mbfscri" }, "\u{1D4F3}": { math: "\\mbfscrj" }, "\u{1D4F4}": { math: "\\mbfscrk" }, "\u{1D4F5}": { math: "\\mbfscrl" }, "\u{1D4F6}": { math: "\\mbfscrm" }, "\u{1D4F7}": { math: "\\mbfscrn" }, "\u{1D4F8}": { math: "\\mbfscro" }, "\u{1D4F9}": { math: "\\mbfscrp" }, "\u{1D4FA}": { math: "\\mbfscrq" }, "\u{1D4FB}": { math: "\\mbfscrr" }, "\u{1D4FC}": { math: "\\mbfscrs" }, "\u{1D4FD}": { math: "\\mbfscrt" }, "\u{1D4FE}": { math: "\\mbfscru" }, "\u{1D4FF}": { math: "\\mbfscrv" }, "\u{1D500}": { math: "\\mbfscrw" }, "\u{1D501}": { math: "\\mbfscrx" }, "\u{1D502}": { math: "\\mbfscry" }, "\u{1D503}": { math: "\\mbfscrz" }, "\u{1D504}": { math: "\\mfrakA" }, "\u{1D505}": { math: "\\mfrakB" }, "\u{1D507}": { math: "\\mfrakD" }, "\u{1D508}": { math: "\\mfrakE" }, "\u{1D509}": { math: "\\mfrakF" }, "\u{1D50A}": { math: "\\mfrakG" }, "\u{1D50D}": { math: "\\mfrakJ" }, "\u{1D50E}": { math: "\\mfrakK" }, "\u{1D50F}": { math: "\\mfrakL" }, "\u{1D510}": { math: "\\mfrakM" }, "\u{1D511}": { math: "\\mfrakN" }, "\u{1D512}": { math: "\\mfrakO" }, "\u{1D513}": { math: "\\mfrakP" }, "\u{1D514}": { math: "\\mfrakQ" }, "\u{1D516}": { math: "\\mfrakS" }, "\u{1D517}": { math: "\\mfrakT" }, "\u{1D518}": { math: "\\mfrakU" }, "\u{1D519}": { math: "\\mfrakV" }, "\u{1D51A}": { math: "\\mfrakW" }, "\u{1D51B}": { math: "\\mfrakX" }, "\u{1D51C}": { math: "\\mfrakY" }, "\u{1D51E}": { math: "\\mfraka" }, "\u{1D51F}": { math: "\\mfrakb" }, "\u{1D520}": { math: "\\mfrakc" }, "\u{1D521}": { math: "\\mfrakd" }, "\u{1D522}": { math: "\\mfrake" }, "\u{1D523}": { math: "\\mfrakf" }, "\u{1D524}": { math: "\\mfrakg" }, "\u{1D525}": { math: "\\mfrakh" }, "\u{1D526}": { math: "\\mfraki" }, "\u{1D527}": { math: "\\mfrakj" }, "\u{1D528}": { math: "\\mfrakk" }, "\u{1D529}": { math: "\\mfrakl" }, "\u{1D52A}": { math: "\\mfrakm" }, "\u{1D52B}": { math: "\\mfrakn" }, "\u{1D52C}": { math: "\\mfrako" }, "\u{1D52D}": { math: "\\mfrakp" }, "\u{1D52E}": { math: "\\mfrakq" }, "\u{1D52F}": { math: "\\mfrakr" }, "\u{1D530}": { math: "\\mfraks" }, "\u{1D531}": { math: "\\mfrakt" }, "\u{1D532}": { math: "\\mfraku" }, "\u{1D533}": { math: "\\mfrakv" }, "\u{1D534}": { math: "\\mfrakw" }, "\u{1D535}": { math: "\\mfrakx" }, "\u{1D536}": { math: "\\mfraky" }, "\u{1D537}": { math: "\\mfrakz" }, "\u{1D538}": { math: "\\BbbA" }, "\u{1D539}": { math: "\\BbbB" }, "\u{1D53B}": { math: "\\BbbD" }, "\u{1D53C}": { math: "\\BbbE" }, "\u{1D53D}": { math: "\\BbbF" }, "\u{1D53E}": { math: "\\BbbG" }, "\u{1D540}": { math: "\\BbbI" }, "\u{1D541}": { math: "\\BbbJ" }, "\u{1D542}": { math: "\\BbbK" }, "\u{1D543}": { math: "\\BbbL" }, "\u{1D544}": { math: "\\BbbM" }, "\u{1D546}": { math: "\\BbbO" }, "\u{1D54A}": { math: "\\BbbS" }, "\u{1D54B}": { math: "\\BbbT" }, "\u{1D54C}": { math: "\\BbbU" }, "\u{1D54D}": { math: "\\BbbV" }, "\u{1D54E}": { math: "\\BbbW" }, "\u{1D54F}": { math: "\\BbbX" }, "\u{1D550}": { math: "\\BbbY" }, "\u{1D552}": { math: "\\Bbba" }, "\u{1D553}": { math: "\\Bbbb" }, "\u{1D554}": { math: "\\Bbbc" }, "\u{1D555}": { math: "\\Bbbd" }, "\u{1D556}": { math: "\\Bbbe" }, "\u{1D557}": { math: "\\Bbbf" }, "\u{1D558}": { math: "\\Bbbg" }, "\u{1D559}": { math: "\\Bbbh" }, "\u{1D55A}": { math: "\\Bbbi" }, "\u{1D55B}": { math: "\\Bbbj" }, "\u{1D55C}": { math: "\\Bbbk" }, "\u{1D55D}": { math: "\\Bbbl" }, "\u{1D55E}": { math: "\\Bbbm" }, "\u{1D55F}": { math: "\\Bbbn" }, "\u{1D560}": { math: "\\Bbbo" }, "\u{1D561}": { math: "\\Bbbp" }, "\u{1D562}": { math: "\\Bbbq" }, "\u{1D563}": { math: "\\Bbbr" }, "\u{1D564}": { math: "\\Bbbs" }, "\u{1D565}": { math: "\\Bbbt" }, "\u{1D566}": { math: "\\Bbbu" }, "\u{1D567}": { math: "\\Bbbv" }, "\u{1D568}": { math: "\\Bbbw" }, "\u{1D569}": { math: "\\Bbbx" }, "\u{1D56A}": { math: "\\Bbby" }, "\u{1D56B}": { math: "\\Bbbz" }, "\u{1D56C}": { math: "\\mbffrakA" }, "\u{1D56D}": { math: "\\mbffrakB" }, "\u{1D56E}": { math: "\\mbffrakC" }, "\u{1D56F}": { math: "\\mbffrakD" }, "\u{1D570}": { math: "\\mbffrakE" }, "\u{1D571}": { math: "\\mbffrakF" }, "\u{1D572}": { math: "\\mbffrakG" }, "\u{1D573}": { math: "\\mbffrakH" }, "\u{1D574}": { math: "\\mbffrakI" }, "\u{1D575}": { math: "\\mbffrakJ" }, "\u{1D576}": { math: "\\mbffrakK" }, "\u{1D577}": { math: "\\mbffrakL" }, "\u{1D578}": { math: "\\mbffrakM" }, "\u{1D579}": { math: "\\mbffrakN" }, "\u{1D57A}": { math: "\\mbffrakO" }, "\u{1D57B}": { math: "\\mbffrakP" }, "\u{1D57C}": { math: "\\mbffrakQ" }, "\u{1D57D}": { math: "\\mbffrakR" }, "\u{1D57E}": { math: "\\mbffrakS" }, "\u{1D57F}": { math: "\\mbffrakT" }, "\u{1D580}": { math: "\\mbffrakU" }, "\u{1D581}": { math: "\\mbffrakV" }, "\u{1D582}": { math: "\\mbffrakW" }, "\u{1D583}": { math: "\\mbffrakX" }, "\u{1D584}": { math: "\\mbffrakY" }, "\u{1D585}": { math: "\\mbffrakZ" }, "\u{1D586}": { math: "\\mbffraka" }, "\u{1D587}": { math: "\\mbffrakb" }, "\u{1D588}": { math: "\\mbffrakc" }, "\u{1D589}": { math: "\\mbffrakd" }, "\u{1D58A}": { math: "\\mbffrake" }, "\u{1D58B}": { math: "\\mbffrakf" }, "\u{1D58C}": { math: "\\mbffrakg" }, "\u{1D58D}": { math: "\\mbffrakh" }, "\u{1D58E}": { math: "\\mbffraki" }, "\u{1D58F}": { math: "\\mbffrakj" }, "\u{1D590}": { math: "\\mbffrakk" }, "\u{1D591}": { math: "\\mbffrakl" }, "\u{1D592}": { math: "\\mbffrakm" }, "\u{1D593}": { math: "\\mbffrakn" }, "\u{1D594}": { math: "\\mbffrako" }, "\u{1D595}": { math: "\\mbffrakp" }, "\u{1D596}": { math: "\\mbffrakq" }, "\u{1D597}": { math: "\\mbffrakr" }, "\u{1D598}": { math: "\\mbffraks" }, "\u{1D599}": { math: "\\mbffrakt" }, "\u{1D59A}": { math: "\\mbffraku" }, "\u{1D59B}": { math: "\\mbffrakv" }, "\u{1D59C}": { math: "\\mbffrakw" }, "\u{1D59D}": { math: "\\mbffrakx" }, "\u{1D59E}": { math: "\\mbffraky" }, "\u{1D59F}": { math: "\\mbffrakz" }, "\u{1D5A0}": { math: "\\msansA" }, "\u{1D5A1}": { math: "\\msansB" }, "\u{1D5A2}": { math: "\\msansC" }, "\u{1D5A3}": { math: "\\msansD" }, "\u{1D5A4}": { math: "\\msansE" }, "\u{1D5A5}": { math: "\\msansF" }, "\u{1D5A6}": { math: "\\msansG" }, "\u{1D5A7}": { math: "\\msansH" }, "\u{1D5A8}": { math: "\\msansI" }, "\u{1D5A9}": { math: "\\msansJ" }, "\u{1D5AA}": { math: "\\msansK" }, "\u{1D5AB}": { math: "\\msansL" }, "\u{1D5AC}": { math: "\\msansM" }, "\u{1D5AD}": { math: "\\msansN" }, "\u{1D5AE}": { math: "\\msansO" }, "\u{1D5AF}": { math: "\\msansP" }, "\u{1D5B0}": { math: "\\msansQ" }, "\u{1D5B1}": { math: "\\msansR" }, "\u{1D5B2}": { math: "\\msansS" }, "\u{1D5B3}": { math: "\\msansT" }, "\u{1D5B4}": { math: "\\msansU" }, "\u{1D5B5}": { math: "\\msansV" }, "\u{1D5B6}": { math: "\\msansW" }, "\u{1D5B7}": { math: "\\msansX" }, "\u{1D5B8}": { math: "\\msansY" }, "\u{1D5B9}": { math: "\\msansZ" }, "\u{1D5BA}": { math: "\\msansa" }, "\u{1D5BB}": { math: "\\msansb" }, "\u{1D5BC}": { math: "\\msansc" }, "\u{1D5BD}": { math: "\\msansd" }, "\u{1D5BE}": { math: "\\msanse" }, "\u{1D5BF}": { math: "\\msansf" }, "\u{1D5C0}": { math: "\\msansg" }, "\u{1D5C1}": { math: "\\msansh" }, "\u{1D5C2}": { math: "\\msansi" }, "\u{1D5C3}": { math: "\\msansj" }, "\u{1D5C4}": { math: "\\msansk" }, "\u{1D5C5}": { math: "\\msansl" }, "\u{1D5C6}": { math: "\\msansm" }, "\u{1D5C7}": { math: "\\msansn" }, "\u{1D5C8}": { math: "\\msanso" }, "\u{1D5C9}": { math: "\\msansp" }, "\u{1D5CA}": { math: "\\msansq" }, "\u{1D5CB}": { math: "\\msansr" }, "\u{1D5CC}": { math: "\\msanss" }, "\u{1D5CD}": { math: "\\msanst" }, "\u{1D5CE}": { math: "\\msansu" }, "\u{1D5CF}": { math: "\\msansv" }, "\u{1D5D0}": { math: "\\msansw" }, "\u{1D5D1}": { math: "\\msansx" }, "\u{1D5D2}": { math: "\\msansy" }, "\u{1D5D3}": { math: "\\msansz" }, "\u{1D5D4}": { math: "\\mbfsansA" }, "\u{1D5D5}": { math: "\\mbfsansB" }, "\u{1D5D6}": { math: "\\mbfsansC" }, "\u{1D5D7}": { math: "\\mbfsansD" }, "\u{1D5D8}": { math: "\\mbfsansE" }, "\u{1D5D9}": { math: "\\mbfsansF" }, "\u{1D5DA}": { math: "\\mbfsansG" }, "\u{1D5DB}": { math: "\\mbfsansH" }, "\u{1D5DC}": { math: "\\mbfsansI" }, "\u{1D5DD}": { math: "\\mbfsansJ" }, "\u{1D5DE}": { math: "\\mbfsansK" }, "\u{1D5DF}": { math: "\\mbfsansL" }, "\u{1D5E0}": { math: "\\mbfsansM" }, "\u{1D5E1}": { math: "\\mbfsansN" }, "\u{1D5E2}": { math: "\\mbfsansO" }, "\u{1D5E3}": { math: "\\mbfsansP" }, "\u{1D5E4}": { math: "\\mbfsansQ" }, "\u{1D5E5}": { math: "\\mbfsansR" }, "\u{1D5E6}": { math: "\\mbfsansS" }, "\u{1D5E7}": { math: "\\mbfsansT" }, "\u{1D5E8}": { math: "\\mbfsansU" }, "\u{1D5E9}": { math: "\\mbfsansV" }, "\u{1D5EA}": { math: "\\mbfsansW" }, "\u{1D5EB}": { math: "\\mbfsansX" }, "\u{1D5EC}": { math: "\\mbfsansY" }, "\u{1D5ED}": { math: "\\mbfsansZ" }, "\u{1D5EE}": { math: "\\mbfsansa" }, "\u{1D5EF}": { math: "\\mbfsansb" }, "\u{1D5F0}": { math: "\\mbfsansc" }, "\u{1D5F1}": { math: "\\mbfsansd" }, "\u{1D5F2}": { math: "\\mbfsanse" }, "\u{1D5F3}": { math: "\\mbfsansf" }, "\u{1D5F4}": { math: "\\mbfsansg" }, "\u{1D5F5}": { math: "\\mbfsansh" }, "\u{1D5F6}": { math: "\\mbfsansi" }, "\u{1D5F7}": { math: "\\mbfsansj" }, "\u{1D5F8}": { math: "\\mbfsansk" }, "\u{1D5F9}": { math: "\\mbfsansl" }, "\u{1D5FA}": { math: "\\mbfsansm" }, "\u{1D5FB}": { math: "\\mbfsansn" }, "\u{1D5FC}": { math: "\\mbfsanso" }, "\u{1D5FD}": { math: "\\mbfsansp" }, "\u{1D5FE}": { math: "\\mbfsansq" }, "\u{1D5FF}": { math: "\\mbfsansr" }, "\u{1D600}": { math: "\\mbfsanss" }, "\u{1D601}": { math: "\\mbfsanst" }, "\u{1D602}": { math: "\\mbfsansu" }, "\u{1D603}": { math: "\\mbfsansv" }, "\u{1D604}": { math: "\\mbfsansw" }, "\u{1D605}": { math: "\\mbfsansx" }, "\u{1D606}": { math: "\\mbfsansy" }, "\u{1D607}": { math: "\\mbfsansz" }, "\u{1D608}": { math: "\\mitsansA" }, "\u{1D609}": { math: "\\mitsansB" }, "\u{1D60A}": { math: "\\mitsansC" }, "\u{1D60B}": { math: "\\mitsansD" }, "\u{1D60C}": { math: "\\mitsansE" }, "\u{1D60D}": { math: "\\mitsansF" }, "\u{1D60E}": { math: "\\mitsansG" }, "\u{1D60F}": { math: "\\mitsansH" }, "\u{1D610}": { math: "\\mitsansI" }, "\u{1D611}": { math: "\\mitsansJ" }, "\u{1D612}": { math: "\\mitsansK" }, "\u{1D613}": { math: "\\mitsansL" }, "\u{1D614}": { math: "\\mitsansM" }, "\u{1D615}": { math: "\\mitsansN" }, "\u{1D616}": { math: "\\mitsansO" }, "\u{1D617}": { math: "\\mitsansP" }, "\u{1D618}": { math: "\\mitsansQ" }, "\u{1D619}": { math: "\\mitsansR" }, "\u{1D61A}": { math: "\\mitsansS" }, "\u{1D61B}": { math: "\\mitsansT" }, "\u{1D61C}": { math: "\\mitsansU" }, "\u{1D61D}": { math: "\\mitsansV" }, "\u{1D61E}": { math: "\\mitsansW" }, "\u{1D61F}": { math: "\\mitsansX" }, "\u{1D620}": { math: "\\mitsansY" }, "\u{1D621}": { math: "\\mitsansZ" }, "\u{1D622}": { math: "\\mitsansa" }, "\u{1D623}": { math: "\\mitsansb" }, "\u{1D624}": { math: "\\mitsansc" }, "\u{1D625}": { math: "\\mitsansd" }, "\u{1D626}": { math: "\\mitsanse" }, "\u{1D627}": { math: "\\mitsansf" }, "\u{1D628}": { math: "\\mitsansg" }, "\u{1D629}": { math: "\\mitsansh" }, "\u{1D62A}": { math: "\\mitsansi" }, "\u{1D62B}": { math: "\\mitsansj" }, "\u{1D62C}": { math: "\\mitsansk" }, "\u{1D62D}": { math: "\\mitsansl" }, "\u{1D62E}": { math: "\\mitsansm" }, "\u{1D62F}": { math: "\\mitsansn" }, "\u{1D630}": { math: "\\mitsanso" }, "\u{1D631}": { math: "\\mitsansp" }, "\u{1D632}": { math: "\\mitsansq" }, "\u{1D633}": { math: "\\mitsansr" }, "\u{1D634}": { math: "\\mitsanss" }, "\u{1D635}": { math: "\\mitsanst" }, "\u{1D636}": { math: "\\mitsansu" }, "\u{1D637}": { math: "\\mitsansv" }, "\u{1D638}": { math: "\\mitsansw" }, "\u{1D639}": { math: "\\mitsansx" }, "\u{1D63A}": { math: "\\mitsansy" }, "\u{1D63B}": { math: "\\mitsansz" }, "\u{1D63C}": { math: "\\mbfitsansA" }, "\u{1D63D}": { math: "\\mbfitsansB" }, "\u{1D63E}": { math: "\\mbfitsansC" }, "\u{1D63F}": { math: "\\mbfitsansD" }, "\u{1D640}": { math: "\\mbfitsansE" }, "\u{1D641}": { math: "\\mbfitsansF" }, "\u{1D642}": { math: "\\mbfitsansG" }, "\u{1D643}": { math: "\\mbfitsansH" }, "\u{1D644}": { math: "\\mbfitsansI" }, "\u{1D645}": { math: "\\mbfitsansJ" }, "\u{1D646}": { math: "\\mbfitsansK" }, "\u{1D647}": { math: "\\mbfitsansL" }, "\u{1D648}": { math: "\\mbfitsansM" }, "\u{1D649}": { math: "\\mbfitsansN" }, "\u{1D64A}": { math: "\\mbfitsansO" }, "\u{1D64B}": { math: "\\mbfitsansP" }, "\u{1D64C}": { math: "\\mbfitsansQ" }, "\u{1D64D}": { math: "\\mbfitsansR" }, "\u{1D64E}": { math: "\\mbfitsansS" }, "\u{1D64F}": { math: "\\mbfitsansT" }, "\u{1D650}": { math: "\\mbfitsansU" }, "\u{1D651}": { math: "\\mbfitsansV" }, "\u{1D652}": { math: "\\mbfitsansW" }, "\u{1D653}": { math: "\\mbfitsansX" }, "\u{1D654}": { math: "\\mbfitsansY" }, "\u{1D655}": { math: "\\mbfitsansZ" }, "\u{1D656}": { math: "\\mbfitsansa" }, "\u{1D657}": { math: "\\mbfitsansb" }, "\u{1D658}": { math: "\\mbfitsansc" }, "\u{1D659}": { math: "\\mbfitsansd" }, "\u{1D65A}": { math: "\\mbfitsanse" }, "\u{1D65B}": { math: "\\mbfitsansf" }, "\u{1D65C}": { math: "\\mbfitsansg" }, "\u{1D65D}": { math: "\\mbfitsansh" }, "\u{1D65E}": { math: "\\mbfitsansi" }, "\u{1D65F}": { math: "\\mbfitsansj" }, "\u{1D660}": { math: "\\mbfitsansk" }, "\u{1D661}": { math: "\\mbfitsansl" }, "\u{1D662}": { math: "\\mbfitsansm" }, "\u{1D663}": { math: "\\mbfitsansn" }, "\u{1D664}": { math: "\\mbfitsanso" }, "\u{1D665}": { math: "\\mbfitsansp" }, "\u{1D666}": { math: "\\mbfitsansq" }, "\u{1D667}": { math: "\\mbfitsansr" }, "\u{1D668}": { math: "\\mbfitsanss" }, "\u{1D669}": { math: "\\mbfitsanst" }, "\u{1D66A}": { math: "\\mbfitsansu" }, "\u{1D66B}": { math: "\\mbfitsansv" }, "\u{1D66C}": { math: "\\mbfitsansw" }, "\u{1D66D}": { math: "\\mbfitsansx" }, "\u{1D66E}": { math: "\\mbfitsansy" }, "\u{1D66F}": { math: "\\mbfitsansz" }, "\u{1D670}": { math: "\\mttA" }, "\u{1D671}": { math: "\\mttB" }, "\u{1D672}": { math: "\\mttC" }, "\u{1D673}": { math: "\\mttD" }, "\u{1D674}": { math: "\\mttE" }, "\u{1D675}": { math: "\\mttF" }, "\u{1D676}": { math: "\\mttG" }, "\u{1D677}": { math: "\\mttH" }, "\u{1D678}": { math: "\\mttI" }, "\u{1D679}": { math: "\\mttJ" }, "\u{1D67A}": { math: "\\mttK" }, "\u{1D67B}": { math: "\\mttL" }, "\u{1D67C}": { math: "\\mttM" }, "\u{1D67D}": { math: "\\mttN" }, "\u{1D67E}": { math: "\\mttO" }, "\u{1D67F}": { math: "\\mttP" }, "\u{1D680}": { math: "\\mttQ" }, "\u{1D681}": { math: "\\mttR" }, "\u{1D682}": { math: "\\mttS" }, "\u{1D683}": { math: "\\mttT" }, "\u{1D684}": { math: "\\mttU" }, "\u{1D685}": { math: "\\mttV" }, "\u{1D686}": { math: "\\mttW" }, "\u{1D687}": { math: "\\mttX" }, "\u{1D688}": { math: "\\mttY" }, "\u{1D689}": { math: "\\mttZ" }, "\u{1D68A}": { math: "\\mtta" }, "\u{1D68B}": { math: "\\mttb" }, "\u{1D68C}": { math: "\\mttc" }, "\u{1D68D}": { math: "\\mttd" }, "\u{1D68E}": { math: "\\mtte" }, "\u{1D68F}": { math: "\\mttf" }, "\u{1D690}": { math: "\\mttg" }, "\u{1D691}": { math: "\\mtth" }, "\u{1D692}": { math: "\\mtti" }, "\u{1D693}": { math: "\\mttj" }, "\u{1D694}": { math: "\\mttk" }, "\u{1D695}": { math: "\\mttl" }, "\u{1D696}": { math: "\\mttm" }, "\u{1D697}": { math: "\\mttn" }, "\u{1D698}": { math: "\\mtto" }, "\u{1D699}": { math: "\\mttp" }, "\u{1D69A}": { math: "\\mttq" }, "\u{1D69B}": { math: "\\mttr" }, "\u{1D69C}": { math: "\\mtts" }, "\u{1D69D}": { math: "\\mttt" }, "\u{1D69E}": { math: "\\mttu" }, "\u{1D69F}": { math: "\\mttv" }, "\u{1D6A0}": { math: "\\mttw" }, "\u{1D6A1}": { math: "\\mttx" }, "\u{1D6A2}": { math: "\\mtty" }, "\u{1D6A3}": { math: "\\mttz" }, "\u{1D6A4}": { math: "\\imath" }, "\u{1D6A5}": { math: "\\jmath" }, "\u{1D6A8}": { math: "\\mbfAlpha" }, "\u{1D6A9}": { math: "\\mbfBeta" }, "\u{1D6AA}": { math: "\\mbfGamma" }, "\u{1D6AB}": { math: "\\mbfDelta" }, "\u{1D6AC}": { math: "\\mbfEpsilon" }, "\u{1D6AD}": { math: "\\mbfZeta" }, "\u{1D6AE}": { math: "\\mbfEta" }, "\u{1D6AF}": { math: "\\mbfTheta" }, "\u{1D6B0}": { math: "\\mbfIota" }, "\u{1D6B1}": { math: "\\mbfKappa" }, "\u{1D6B2}": { math: "\\mbfLambda" }, "\u{1D6B3}": { math: "\\mbfMu" }, "\u{1D6B4}": { math: "\\mbfNu" }, "\u{1D6B5}": { math: "\\mbfXi" }, "\u{1D6B6}": { math: "\\mbfOmicron" }, "\u{1D6B7}": { math: "\\mbfPi" }, "\u{1D6B8}": { math: "\\mbfRho" }, "\u{1D6B9}": { math: "\\mbfvarTheta" }, "\u{1D6BA}": { math: "\\mbfSigma" }, "\u{1D6BB}": { math: "\\mbfTau" }, "\u{1D6BC}": { math: "\\mbfUpsilon" }, "\u{1D6BD}": { math: "\\mbfPhi" }, "\u{1D6BE}": { math: "\\mbfChi" }, "\u{1D6BF}": { math: "\\mbfPsi" }, "\u{1D6C0}": { math: "\\mbfOmega" }, "\u{1D6C1}": { math: "\\mbfnabla" }, "\u{1D6C2}": { math: "\\mbfalpha" }, "\u{1D6C3}": { math: "\\mbfbeta" }, "\u{1D6C4}": { math: "\\mbfgamma" }, "\u{1D6C5}": { math: "\\mbfdelta" }, "\u{1D6C6}": { math: "\\mbfvarepsilon" }, "\u{1D6C7}": { math: "\\mbfzeta" }, "\u{1D6C8}": { math: "\\mbfeta" }, "\u{1D6C9}": { math: "\\mbftheta" }, "\u{1D6CA}": { math: "\\mbfiota" }, "\u{1D6CB}": { math: "\\mbfkappa" }, "\u{1D6CC}": { math: "\\mbflambda" }, "\u{1D6CD}": { math: "\\mbfmu" }, "\u{1D6CE}": { math: "\\mbfnu" }, "\u{1D6CF}": { math: "\\mbfxi" }, "\u{1D6D0}": { math: "\\mbfomicron" }, "\u{1D6D1}": { math: "\\mbfpi" }, "\u{1D6D2}": { math: "\\mbfrho" }, "\u{1D6D3}": { math: "\\mbfvarsigma" }, "\u{1D6D4}": { math: "\\mbfsigma" }, "\u{1D6D5}": { math: "\\mbftau" }, "\u{1D6D6}": { math: "\\mbfupsilon" }, "\u{1D6D7}": { math: "\\mbfvarphi" }, "\u{1D6D8}": { math: "\\mbfchi" }, "\u{1D6D9}": { math: "\\mbfpsi" }, "\u{1D6DA}": { math: "\\mbfomega" }, "\u{1D6DB}": { math: "\\mbfpartial" }, "\u{1D6DC}": { math: "\\mbfepsilon" }, "\u{1D6DD}": { math: "\\mbfvartheta" }, "\u{1D6DE}": { math: "\\mbfvarkappa" }, "\u{1D6DF}": { math: "\\mbfphi" }, "\u{1D6E0}": { math: "\\mbfvarrho" }, "\u{1D6E1}": { math: "\\mbfvarpi" }, "\u{1D6E2}": { math: "\\mitAlpha" }, "\u{1D6E3}": { math: "\\mitBeta" }, "\u{1D6E4}": { math: "\\mitGamma" }, "\u{1D6E5}": { math: "\\mitDelta" }, "\u{1D6E6}": { math: "\\mitEpsilon" }, "\u{1D6E7}": { math: "\\mitZeta" }, "\u{1D6E8}": { math: "\\mitEta" }, "\u{1D6E9}": { math: "\\mitTheta" }, "\u{1D6EA}": { math: "\\mitIota" }, "\u{1D6EB}": { math: "\\mitKappa" }, "\u{1D6EC}": { math: "\\mitLambda" }, "\u{1D6ED}": { math: "\\mitMu" }, "\u{1D6EE}": { math: "\\mitNu" }, "\u{1D6EF}": { math: "\\mitXi" }, "\u{1D6F0}": { math: "\\mitOmicron" }, "\u{1D6F1}": { math: "\\mitPi" }, "\u{1D6F2}": { math: "\\mitRho" }, "\u{1D6F3}": { math: "\\mitvarTheta" }, "\u{1D6F4}": { math: "\\mitSigma" }, "\u{1D6F5}": { math: "\\mitTau" }, "\u{1D6F6}": { math: "\\mitUpsilon" }, "\u{1D6F7}": { math: "\\mitPhi" }, "\u{1D6F8}": { math: "\\mitChi" }, "\u{1D6F9}": { math: "\\mitPsi" }, "\u{1D6FA}": { math: "\\mitOmega" }, "\u{1D6FB}": { math: "\\mitnabla" }, "\u{1D6FC}": { math: "\\mitalpha" }, "\u{1D6FD}": { math: "\\mitbeta" }, "\u{1D6FE}": { math: "\\mitgamma" }, "\u{1D6FF}": { math: "\\mitdelta" }, "\u{1D700}": { math: "\\mitvarepsilon" }, "\u{1D701}": { math: "\\mitzeta" }, "\u{1D702}": { math: "\\miteta" }, "\u{1D703}": { math: "\\mittheta" }, "\u{1D704}": { math: "\\mitiota" }, "\u{1D705}": { math: "\\mitkappa" }, "\u{1D706}": { math: "\\mitlambda" }, "\u{1D707}": { math: "\\mitmu" }, "\u{1D708}": { math: "\\mitnu" }, "\u{1D709}": { math: "\\mitxi" }, "\u{1D70A}": { math: "\\mitomicron" }, "\u{1D70B}": { math: "\\mitpi" }, "\u{1D70C}": { math: "\\mitrho" }, "\u{1D70D}": { math: "\\mitvarsigma" }, "\u{1D70E}": { math: "\\mitsigma" }, "\u{1D70F}": { math: "\\mittau" }, "\u{1D710}": { math: "\\mitupsilon" }, "\u{1D711}": { math: "\\mitvarphi" }, "\u{1D712}": { math: "\\mitchi" }, "\u{1D713}": { math: "\\mitpsi" }, "\u{1D714}": { math: "\\mitomega" }, "\u{1D715}": { math: "\\mitpartial" }, "\u{1D716}": { math: "\\mitepsilon" }, "\u{1D717}": { math: "\\mitvartheta" }, "\u{1D718}": { math: "\\mitvarkappa" }, "\u{1D719}": { math: "\\mitphi" }, "\u{1D71A}": { math: "\\mitvarrho" }, "\u{1D71B}": { math: "\\mitvarpi" }, "\u{1D71C}": { math: "\\mbfitAlpha" }, "\u{1D71D}": { math: "\\mbfitBeta" }, "\u{1D71E}": { math: "\\mbfitGamma" }, "\u{1D71F}": { math: "\\mbfitDelta" }, "\u{1D720}": { math: "\\mbfitEpsilon" }, "\u{1D721}": { math: "\\mbfitZeta" }, "\u{1D722}": { math: "\\mbfitEta" }, "\u{1D723}": { math: "\\mbfitTheta" }, "\u{1D724}": { math: "\\mbfitIota" }, "\u{1D725}": { math: "\\mbfitKappa" }, "\u{1D726}": { math: "\\mbfitLambda" }, "\u{1D727}": { math: "\\mbfitMu" }, "\u{1D728}": { math: "\\mbfitNu" }, "\u{1D729}": { math: "\\mbfitXi" }, "\u{1D72A}": { math: "\\mbfitOmicron" }, "\u{1D72B}": { math: "\\mbfitPi" }, "\u{1D72C}": { math: "\\mbfitRho" }, "\u{1D72D}": { math: "\\mbfitvarTheta" }, "\u{1D72E}": { math: "\\mbfitSigma" }, "\u{1D72F}": { math: "\\mbfitTau" }, "\u{1D730}": { math: "\\mbfitUpsilon" }, "\u{1D731}": { math: "\\mbfitPhi" }, "\u{1D732}": { math: "\\mbfitChi" }, "\u{1D733}": { math: "\\mbfitPsi" }, "\u{1D734}": { math: "\\mbfitOmega" }, "\u{1D735}": { math: "\\mbfitnabla" }, "\u{1D736}": { math: "\\mbfitalpha" }, "\u{1D737}": { math: "\\mbfitbeta" }, "\u{1D738}": { math: "\\mbfitgamma" }, "\u{1D739}": { math: "\\mbfitdelta" }, "\u{1D73A}": { math: "\\mbfitvarepsilon" }, "\u{1D73B}": { math: "\\mbfitzeta" }, "\u{1D73C}": { math: "\\mbfiteta" }, "\u{1D73D}": { math: "\\mbfittheta" }, "\u{1D73E}": { math: "\\mbfitiota" }, "\u{1D73F}": { math: "\\mbfitkappa" }, "\u{1D740}": { math: "\\mbfitlambda" }, "\u{1D741}": { math: "\\mbfitmu" }, "\u{1D742}": { math: "\\mbfitnu" }, "\u{1D743}": { math: "\\mbfitxi" }, "\u{1D744}": { math: "\\mbfitomicron" }, "\u{1D745}": { math: "\\mbfitpi" }, "\u{1D746}": { math: "\\mbfitrho" }, "\u{1D747}": { math: "\\mbfitvarsigma" }, "\u{1D748}": { math: "\\mbfitsigma" }, "\u{1D749}": { math: "\\mbfittau" }, "\u{1D74A}": { math: "\\mbfitupsilon" }, "\u{1D74B}": { math: "\\mbfitvarphi" }, "\u{1D74C}": { math: "\\mbfitchi" }, "\u{1D74D}": { math: "\\mbfitpsi" }, "\u{1D74E}": { math: "\\mbfitomega" }, "\u{1D74F}": { math: "\\mbfitpartial" }, "\u{1D750}": { math: "\\mbfitepsilon" }, "\u{1D751}": { math: "\\mbfitvartheta" }, "\u{1D752}": { math: "\\mbfitvarkappa" }, "\u{1D753}": { math: "\\mbfitphi" }, "\u{1D754}": { math: "\\mbfitvarrho" }, "\u{1D755}": { math: "\\mbfitvarpi" }, "\u{1D756}": { math: "\\mbfsansAlpha" }, "\u{1D757}": { math: "\\mbfsansBeta" }, "\u{1D758}": { math: "\\mbfsansGamma" }, "\u{1D759}": { math: "\\mbfsansDelta" }, "\u{1D75A}": { math: "\\mbfsansEpsilon" }, "\u{1D75B}": { math: "\\mbfsansZeta" }, "\u{1D75C}": { math: "\\mbfsansEta" }, "\u{1D75D}": { math: "\\mbfsansTheta" }, "\u{1D75E}": { math: "\\mbfsansIota" }, "\u{1D75F}": { math: "\\mbfsansKappa" }, "\u{1D760}": { math: "\\mbfsansLambda" }, "\u{1D761}": { math: "\\mbfsansMu" }, "\u{1D762}": { math: "\\mbfsansNu" }, "\u{1D763}": { math: "\\mbfsansXi" }, "\u{1D764}": { math: "\\mbfsansOmicron" }, "\u{1D765}": { math: "\\mbfsansPi" }, "\u{1D766}": { math: "\\mbfsansRho" }, "\u{1D767}": { math: "\\mbfsansvarTheta" }, "\u{1D768}": { math: "\\mbfsansSigma" }, "\u{1D769}": { math: "\\mbfsansTau" }, "\u{1D76A}": { math: "\\mbfsansUpsilon" }, "\u{1D76B}": { math: "\\mbfsansPhi" }, "\u{1D76C}": { math: "\\mbfsansChi" }, "\u{1D76D}": { math: "\\mbfsansPsi" }, "\u{1D76E}": { math: "\\mbfsansOmega" }, "\u{1D76F}": { math: "\\mbfsansnabla" }, "\u{1D770}": { math: "\\mbfsansalpha" }, "\u{1D771}": { math: "\\mbfsansbeta" }, "\u{1D772}": { math: "\\mbfsansgamma" }, "\u{1D773}": { math: "\\mbfsansdelta" }, "\u{1D774}": { math: "\\mbfsansvarepsilon" }, "\u{1D775}": { math: "\\mbfsanszeta" }, "\u{1D776}": { math: "\\mbfsanseta" }, "\u{1D777}": { math: "\\mbfsanstheta" }, "\u{1D778}": { math: "\\mbfsansiota" }, "\u{1D779}": { math: "\\mbfsanskappa" }, "\u{1D77A}": { math: "\\mbfsanslambda" }, "\u{1D77B}": { math: "\\mbfsansmu" }, "\u{1D77C}": { math: "\\mbfsansnu" }, "\u{1D77D}": { math: "\\mbfsansxi" }, "\u{1D77E}": { math: "\\mbfsansomicron" }, "\u{1D77F}": { math: "\\mbfsanspi" }, "\u{1D780}": { math: "\\mbfsansrho" }, "\u{1D781}": { math: "\\mbfsansvarsigma" }, "\u{1D782}": { math: "\\mbfsanssigma" }, "\u{1D783}": { math: "\\mbfsanstau" }, "\u{1D784}": { math: "\\mbfsansupsilon" }, "\u{1D785}": { math: "\\mbfsansvarphi" }, "\u{1D786}": { math: "\\mbfsanschi" }, "\u{1D787}": { math: "\\mbfsanspsi" }, "\u{1D788}": { math: "\\mbfsansomega" }, "\u{1D789}": { math: "\\mbfsanspartial" }, "\u{1D78A}": { math: "\\mbfsansepsilon" }, "\u{1D78B}": { math: "\\mbfsansvartheta" }, "\u{1D78C}": { math: "\\mbfsansvarkappa" }, "\u{1D78D}": { math: "\\mbfsansphi" }, "\u{1D78E}": { math: "\\mbfsansvarrho" }, "\u{1D78F}": { math: "\\mbfsansvarpi" }, "\u{1D790}": { math: "\\mbfitsansAlpha" }, "\u{1D791}": { math: "\\mbfitsansBeta" }, "\u{1D792}": { math: "\\mbfitsansGamma" }, "\u{1D793}": { math: "\\mbfitsansDelta" }, "\u{1D794}": { math: "\\mbfitsansEpsilon" }, "\u{1D795}": { math: "\\mbfitsansZeta" }, "\u{1D796}": { math: "\\mbfitsansEta" }, "\u{1D797}": { math: "\\mbfitsansTheta" }, "\u{1D798}": { math: "\\mbfitsansIota" }, "\u{1D799}": { math: "\\mbfitsansKappa" }, "\u{1D79A}": { math: "\\mbfitsansLambda" }, "\u{1D79B}": { math: "\\mbfitsansMu" }, "\u{1D79C}": { math: "\\mbfitsansNu" }, "\u{1D79D}": { math: "\\mbfitsansXi" }, "\u{1D79E}": { math: "\\mbfitsansOmicron" }, "\u{1D79F}": { math: "\\mbfitsansPi" }, "\u{1D7A0}": { math: "\\mbfitsansRho" }, "\u{1D7A1}": { math: "\\mbfitsansvarTheta" }, "\u{1D7A2}": { math: "\\mbfitsansSigma" }, "\u{1D7A3}": { math: "\\mbfitsansTau" }, "\u{1D7A4}": { math: "\\mbfitsansUpsilon" }, "\u{1D7A5}": { math: "\\mbfitsansPhi" }, "\u{1D7A6}": { math: "\\mbfitsansChi" }, "\u{1D7A7}": { math: "\\mbfitsansPsi" }, "\u{1D7A8}": { math: "\\mbfitsansOmega" }, "\u{1D7A9}": { math: "\\mbfitsansnabla" }, "\u{1D7AA}": { math: "\\mbfitsansalpha" }, "\u{1D7AB}": { math: "\\mbfitsansbeta" }, "\u{1D7AC}": { math: "\\mbfitsansgamma" }, "\u{1D7AD}": { math: "\\mbfitsansdelta" }, "\u{1D7AE}": { math: "\\mbfitsansvarepsilon" }, "\u{1D7AF}": { math: "\\mbfitsanszeta" }, "\u{1D7B0}": { math: "\\mbfitsanseta" }, "\u{1D7B1}": { math: "\\mbfitsanstheta" }, "\u{1D7B2}": { math: "\\mbfitsansiota" }, "\u{1D7B3}": { math: "\\mbfitsanskappa" }, "\u{1D7B4}": { math: "\\mbfitsanslambda" }, "\u{1D7B5}": { math: "\\mbfitsansmu" }, "\u{1D7B6}": { math: "\\mbfitsansnu" }, "\u{1D7B7}": { math: "\\mbfitsansxi" }, "\u{1D7B8}": { math: "\\mbfitsansomicron" }, "\u{1D7B9}": { math: "\\mbfitsanspi" }, "\u{1D7BA}": { math: "\\mbfitsansrho" }, "\u{1D7BB}": { math: "\\mbfitsansvarsigma" }, "\u{1D7BC}": { math: "\\mbfitsanssigma" }, "\u{1D7BD}": { math: "\\mbfitsanstau" }, "\u{1D7BE}": { math: "\\mbfitsansupsilon" }, "\u{1D7BF}": { math: "\\mbfitsansvarphi" }, "\u{1D7C0}": { math: "\\mbfitsanschi" }, "\u{1D7C1}": { math: "\\mbfitsanspsi" }, "\u{1D7C2}": { math: "\\mbfitsansomega" }, "\u{1D7C3}": { math: "\\mbfitsanspartial" }, "\u{1D7C4}": { math: "\\mbfitsansepsilon" }, "\u{1D7C5}": { math: "\\mbfitsansvartheta" }, "\u{1D7C6}": { math: "\\mbfitsansvarkappa" }, "\u{1D7C7}": { math: "\\mbfitsansphi" }, "\u{1D7C8}": { math: "\\mbfitsansvarrho" }, "\u{1D7C9}": { math: "\\mbfitsansvarpi" }, "\u{1D7CA}": { math: "\\mbfDigamma" }, "\u{1D7CB}": { math: "\\mbfdigamma" }, "\u{1D7CE}": { math: "\\mbfzero" }, "\u{1D7CF}": { math: "\\mbfone" }, "\u{1D7D0}": { math: "\\mbftwo" }, "\u{1D7D1}": { math: "\\mbfthree" }, "\u{1D7D2}": { math: "\\mbffour" }, "\u{1D7D3}": { math: "\\mbffive" }, "\u{1D7D4}": { math: "\\mbfsix" }, "\u{1D7D5}": { math: "\\mbfseven" }, "\u{1D7D6}": { math: "\\mbfeight" }, "\u{1D7D7}": { math: "\\mbfnine" }, "\u{1D7D8}": { math: "\\Bbbzero" }, "\u{1D7D9}": { math: "\\Bbbone" }, "\u{1D7DA}": { math: "\\Bbbtwo" }, "\u{1D7DB}": { math: "\\Bbbthree" }, "\u{1D7DC}": { math: "\\Bbbfour" }, "\u{1D7DD}": { math: "\\Bbbfive" }, "\u{1D7DE}": { math: "\\Bbbsix" }, "\u{1D7DF}": { math: "\\Bbbseven" }, "\u{1D7E0}": { math: "\\Bbbeight" }, "\u{1D7E1}": { math: "\\Bbbnine" }, "\u{1D7E2}": { math: "\\msanszero" }, "\u{1D7E3}": { math: "\\msansone" }, "\u{1D7E4}": { math: "\\msanstwo" }, "\u{1D7E5}": { math: "\\msansthree" }, "\u{1D7E6}": { math: "\\msansfour" }, "\u{1D7E7}": { math: "\\msansfive" }, "\u{1D7E8}": { math: "\\msanssix" }, "\u{1D7E9}": { math: "\\msansseven" }, "\u{1D7EA}": { math: "\\msanseight" }, "\u{1D7EB}": { math: "\\msansnine" }, "\u{1D7EC}": { math: "\\mbfsanszero" }, "\u{1D7ED}": { math: "\\mbfsansone" }, "\u{1D7EE}": { math: "\\mbfsanstwo" }, "\u{1D7EF}": { math: "\\mbfsansthree" }, "\u{1D7F0}": { math: "\\mbfsansfour" }, "\u{1D7F1}": { math: "\\mbfsansfive" }, "\u{1D7F2}": { math: "\\mbfsanssix" }, "\u{1D7F3}": { math: "\\mbfsansseven" }, "\u{1D7F4}": { math: "\\mbfsanseight" }, "\u{1D7F5}": { math: "\\mbfsansnine" }, "\u{1D7F6}": { math: "\\mttzero" }, "\u{1D7F7}": { math: "\\mttone" }, "\u{1D7F8}": { math: "\\mtttwo" }, "\u{1D7F9}": { math: "\\mttthree" }, "\u{1D7FA}": { math: "\\mttfour" }, "\u{1D7FB}": { math: "\\mttfive" }, "\u{1D7FC}": { math: "\\mttsix" }, "\u{1D7FD}": { math: "\\mttseven" }, "\u{1D7FE}": { math: "\\mtteight" }, "\u{1D7FF}": { math: "\\mttnine" }, u\u031B\u03030: { math: "\\arabicmaj" }, u\u031B\u03031: { math: "\\arabichad" }, "\u2010": { math: "\\mathhyphen" }, "\u2015": { math: "\\horizbar" }, "\u2017": { math: "\\twolowline" }, "\u2025": { math: "\\enleadertwodots" }, "\u2033": { math: "\\dprime" }, "\u2034": { math: "\\trprime" }, "\u2035": { math: "\\backprime" }, "\u2036": { math: "\\backdprime" }, "\u2037": { math: "\\backtrprime" }, "\u2038": { math: "\\caretinsert" }, "\u203C": { math: "\\Exclam" }, "\u2040": { math: "\\tieconcat" }, "\u2043": { math: "\\hyphenbullet" }, "\u2044": { math: "\\fracslash" }, "\u2047": { math: "\\Question" }, "\u2050": { math: "\\closure" }, "\u2057": { math: "\\qprime" }, "\u20D2": { math: "\\vertoverlay" }, "\u20D7": { math: "\\vec" }, "\u20DB": { math: "\\dddot" }, "\u20DC": { math: "\\ddddot" }, "\u20DD": { math: "\\enclosecircle" }, "\u20DE": { math: "\\enclosesquare" }, "\u20DF": { math: "\\enclosediamond" }, "\u20E1": { math: "\\overleftrightarrow" }, "\u20E4": { math: "\\enclosetriangle" }, "\u20E7": { math: "\\annuity" }, "\u20E8": { math: "\\threeunderdot" }, "\u20E9": { math: "\\widebridgeabove" }, "\u20EC": { math: "\\underrightharpoondown" }, "\u20ED": { math: "\\underleftharpoondown" }, "\u20EE": { math: "\\underleftarrow" }, "\u20EF": { math: "\\underrightarrow" }, "\u20F0": { math: "\\asteraccent" }, \u210E: { math: "\\Planckconst" }, \u210F: { math: "\\hslash" }, \u2112: { math: "\\mscrL" }, \u211B: { math: "\\mscrR" }, "\u2127": { math: "\\mho" }, "\u2129": { math: "\\turnediota" }, "\u2132": { math: "\\Finv" }, \u2136: { math: "\\beth" }, \u2137: { math: "\\gimel" }, \u2138: { math: "\\daleth" }, "\u2141": { math: "\\Game" }, "\u2142": { math: "\\sansLturned" }, "\u2143": { math: "\\sansLmirrored" }, "\u2144": { math: "\\Yup" }, "\u2145": { math: "\\CapitalDifferentialD" }, "\u214A": { math: "\\PropertyLine" }, "\u2190\u0338": { math: "\\nleftarrow" }, "\u2192\u0338": { math: "\\nrightarrow" }, "\u219E": { math: "\\twoheadleftarrow" }, "\u219F": { math: "\\twoheaduparrow" }, "\u21A0": { math: "\\twoheadrightarrow" }, "\u21A1": { math: "\\twoheaddownarrow" }, "\u21A2": { math: "\\leftarrowtail" }, "\u21A3": { math: "\\rightarrowtail" }, "\u21A4": { math: "\\mapsfrom" }, "\u21A5": { math: "\\mapsup" }, "\u21A7": { math: "\\mapsdown" }, "\u21A8": { math: "\\updownarrowbar" }, "\u21AB": { math: "\\looparrowleft" }, "\u21AC": { math: "\\looparrowright" }, "\u21AD": { math: "\\leftrightsquigarrow" }, "\u2194\u0338": { math: "\\nleftrightarrow" }, "\u21B0": { math: "\\Lsh" }, "\u21B1": { math: "\\Rsh" }, "\u21B3": { text: "\\reflectbox{\\carriagereturn}", math: "\\Rdsh" }, "\u21B4": { math: "\\linefeed" }, "\u21B5": { math: "\\carriagereturn" }, "\u21B6": { math: "\\curvearrowleft" }, "\u21B7": { math: "\\curvearrowright" }, "\u21B8": { math: "\\barovernorthwestarrow" }, "\u21B9": { math: "\\barleftarrowrightarrowbar" }, "\u21BA": { math: "\\circlearrowleft" }, "\u21BE": { math: "\\upharpoonright" }, "\u21BF": { math: "\\upharpoonleft" }, "\u21C1": { math: "\\rightharpoondown" }, "\u21C2": { math: "\\downharpoonright" }, "\u21C3": { math: "\\downharpoonleft" }, "\u21C4": { math: "\\rightleftarrows" }, "\u21C6": { math: "\\leftrightarrows" }, "\u21C7": { math: "\\leftleftarrows" }, "\u21C8": { math: "\\upuparrows" }, "\u21C9": { math: "\\rightrightarrows" }, "\u21CA": { math: "\\downdownarrows" }, "\u21CB": { math: "\\leftrightharpoons" }, "\u21D0\u0338": { math: "\\nLeftarrow" }, "\u21D4\u0338": { math: "\\nLeftrightarrow" }, "\u21D2\u0338": { math: "\\nRightarrow" }, "\u21D6": { math: "\\Nwarrow" }, "\u21D7": { math: "\\Nearrow" }, "\u21D8": { math: "\\Searrow" }, "\u21D9": { math: "\\Swarrow" }, "\u21DA": { math: "\\Lleftarrow" }, "\u21DB": { math: "\\Rrightarrow" }, "\u21DC": { math: "\\leftsquigarrow" }, "\u21DD": { math: "\\rightsquigarrow" }, "\u21DE": { math: "\\nHuparrow" }, "\u21DF": { math: "\\nHdownarrow" }, "\u21E1": { math: "\\updasharrow" }, "\u21E3": { math: "\\downdasharrow" }, "\u21E6": { math: "\\leftwhitearrow" }, "\u21E7": { math: "\\upwhitearrow" }, "\u21E8": { math: "\\rightwhitearrow" }, "\u21E9": { math: "\\downwhitearrow" }, "\u21EA": { math: "\\whitearrowupfrombar" }, "\u21F4": { math: "\\circleonrightarrow" }, "\u21F6": { math: "\\rightthreearrows" }, "\u21F7": { math: "\\nvleftarrow" }, "\u21F9": { math: "\\nvleftrightarrow" }, "\u21FA": { math: "\\nVleftarrow" }, "\u21FC": { math: "\\nVleftrightarrow" }, "\u21FD": { math: "\\leftarrowtriangle" }, "\u21FE": { math: "\\rightarrowtriangle" }, "\u21FF": { math: "\\leftrightarrowtriangle" }, "\u2201": { math: "\\complement" }, "\u2203\u0338": { math: "\\nexists" }, "\u2205": { math: "\\varnothing" }, "\u2206": { math: "\\increment" }, "\u2207": { math: "\\nabla" }, "\u220A": { math: "\\smallin" }, "\u220D": { math: "\\smallni" }, "\u220E": { math: "\\QED" }, "\u2214": { math: "\\dotplus" }, "\u2215": { math: "\\divslash" }, "\u221A": { math: "\\sqrt" }, "\u221F": { math: "\\rightangle" }, "\u2221": { math: "\\measuredangle" }, "\u2222": { math: "\\sphericalangle" }, "\u2223\u0338": { math: "\\nmid" }, "\u2225\u0338": { math: "\\nparallel" }, "\u2232": { math: "\\lcirclerightint" }, "\u2234": { math: "\\therefore" }, "\u2235": { math: "\\because" }, "\u2237": { math: "\\Colon" }, "\u2239": { math: "\\eqcolon" }, "\u223D": { math: "\\backsim" }, "\u224A": { math: "\\approxeq" }, "\u224E": { math: "\\Bumpeq" }, "\u224F": { math: "\\bumpeq" }, "\u2252": { math: "\\fallingdotseq" }, "\u2253": { math: "\\risingdotseq" }, "\u2254": { math: "\\coloneq" }, "\u2256": { math: "\\eqcirc" }, "\u2257": { math: "\\circeq" }, "\u2258": { math: "\\arceq" }, "\u225A": { math: "\\veeeq" }, "\u225C": { math: "\\triangleq" }, "\u225D": { math: "\\eqdef" }, "\u225E": { math: "\\measeq" }, "\u225F": { math: "\\questeq" }, "\u2263": { math: "\\Equiv" }, "\u2268": { math: "\\lneqq" }, "\u2269": { math: "\\gneqq" }, "\u226C": { math: "\\between" }, "\u224D\u0338": { math: "\\nasymp" }, "\u2272\u0338": { math: "\\nlesssim" }, "\u2273\u0338": { math: "\\ngtrsim" }, "\u2276": { math: "\\lessgtr" }, "\u2277": { math: "\\gtrless" }, "\u227C": { math: "\\preccurlyeq" }, "\u227D": { math: "\\succcurlyeq" }, "\u228A": { math: "\\subsetneq" }, "\u228B": { math: "\\supsetneq" }, "\u228C": { math: "\\cupleftarrow" }, "\u228D": { math: "\\cupdot" }, "\u228F": { math: "\\sqsubset" }, "\u2290": { math: "\\sqsupset" }, "\u229A": { math: "\\circledcirc" }, "\u229B": { math: "\\circledast" }, "\u229C": { math: "\\circledequal" }, "\u229D": { math: "\\circleddash" }, "\u229E": { math: "\\boxplus" }, "\u229F": { math: "\\boxminus" }, "\u22A0": { math: "\\boxtimes" }, "\u22A1": { math: "\\boxdot" }, "\u22A6": { math: "\\assert" }, "\u22A9": { math: "\\Vdash" }, "\u22AA": { math: "\\Vvdash" }, "\u22AB": { math: "\\VDash" }, "\u22A2\u0338": { math: "\\nvdash" }, "\u22A8\u0338": { math: "\\nvDash" }, "\u22A9\u0338": { math: "\\nVdash" }, "\u22AB\u0338": { math: "\\nVDash" }, "\u22B0": { math: "\\prurel" }, "\u22B1": { math: "\\scurel" }, "\u22B2": { math: "\\vartriangleleft" }, "\u22B3": { math: "\\vartriangleright" }, "\u22B4": { math: "\\trianglelefteq" }, "\u22B5": { math: "\\trianglerighteq" }, "\u22B8": { math: "\\multimap" }, "\u22BA": { math: "\\intercal" }, "\u22BB": { math: "\\veebar" }, "\u22BC": { math: "\\barwedge" }, "\u22BD": { math: "\\barvee" }, "\u22BF": { math: "\\varlrtriangle" }, "\u22C7": { math: "\\divideontimes" }, "\u22C9": { math: "\\ltimes" }, "\u22CA": { math: "\\rtimes" }, "\u22CB": { math: "\\leftthreetimes" }, "\u22CC": { math: "\\rightthreetimes" }, "\u22CD": { math: "\\backsimeq" }, "\u22CE": { math: "\\curlyvee" }, "\u22CF": { math: "\\curlywedge" }, "\u22D0": { math: "\\Subset" }, "\u22D1": { math: "\\Supset" }, "\u22D2": { math: "\\Cap" }, "\u22D3": { math: "\\Cup" }, "\u22D4": { math: "\\pitchfork" }, "\u22D5": { math: "\\hash" }, "\u22D6": { math: "\\lessdot" }, "\u22D7": { math: "\\gtrdot" }, "\u22DA": { math: "\\lesseqgtr" }, "\u22DB": { math: "\\gtreqless" }, "\u22DC": { math: "\\eqless" }, "\u22DD": { math: "\\eqgtr" }, "\u22DE": { math: "\\curlyeqprec" }, "\u22DF": { math: "\\curlyeqsucc" }, "\u227C\u0338": { math: "\\npreceq" }, "\u227D\u0338": { math: "\\nsucceq" }, "\u22E4": { math: "\\sqsubsetneq" }, "\u22E5": { math: "\\sqsupsetneq" }, "\u22E6": { math: "\\lnsim" }, "\u22E7": { math: "\\gnsim" }, "\u22E8": { math: "\\precedesnotsimilar" }, "\u22E9": { math: "\\succnsim" }, "\u22B4\u0338": { math: "\\ntrianglelefteq" }, "\u22B5\u0338": { math: "\\ntrianglerighteq" }, "\u22F2": { math: "\\disin" }, "\u22F3": { math: "\\varisins" }, "\u22F4": { math: "\\isins" }, "\u22F5": { math: "\\isindot" }, "\u22F7": { math: "\\isinobar" }, "\u22F8": { math: "\\isinvb" }, "\u22F9": { math: "\\isinE" }, "\u22FA": { math: "\\nisd" }, "\u22FB": { math: "\\varnis" }, "\u22FC": { math: "\\nis" }, "\u22FD": { math: "\\varniobar" }, "\u22FE": { math: "\\niobar" }, "\u22FF": { math: "\\bagmember" }, "\u2300": { math: "\\diameter" }, "\u2302": { math: "\\house" }, "\u2305": { text: "\\barwedge", math: "\\varbarwedge", macrospacer: true }, "\u2310": { math: "\\invneg" }, "\u2312": { math: "\\profline" }, "\u2313": { math: "\\profsurf" }, "\u2317": { math: "\\viewdata" }, "\u2319": { math: "\\turnednot" }, "\u231C": { math: "\\ulcorner" }, "\u231D": { math: "\\urcorner" }, "\u231E": { math: "\\llcorner" }, "\u231F": { math: "\\lrcorner" }, "\u2320": { math: "\\inttop" }, "\u2321": { math: "\\intbottom" }, "\u232C": { math: "\\varhexagonlrbonds" }, "\u2332": { math: "\\conictaper" }, "\u2336": { math: "\\topbot" }, "\u233D": { math: "\\obar" }, "\u2353": { math: "\\APLboxupcaret" }, "\u2370": { math: "\\APLboxquestion" }, "\u237C": { math: "\\rangledownzigzagarrow" }, "\u2394": { math: "\\hexagon" }, "\u239B": { math: "\\lparenuend" }, "\u239C": { math: "\\lparenextender" }, "\u239D": { math: "\\lparenlend" }, "\u239E": { math: "\\rparenuend" }, "\u239F": { math: "\\rparenextender" }, "\u23A0": { math: "\\rparenlend" }, "\u23A1": { math: "\\lbrackuend" }, "\u23A2": { math: "\\lbrackextender" }, "\u23A3": { math: "\\lbracklend" }, "\u23A4": { math: "\\rbrackuend" }, "\u23A5": { math: "\\rbrackextender" }, "\u23A6": { math: "\\rbracklend" }, "\u23A7": { math: "\\lbraceuend" }, "\u23A8": { math: "\\lbracemid" }, "\u23A9": { math: "\\lbracelend" }, "\u23AA": { math: "\\vbraceextender" }, "\u23AB": { math: "\\rbraceuend" }, "\u23AC": { math: "\\rbracemid" }, "\u23AD": { math: "\\rbracelend" }, "\u23AE": { math: "\\intextender" }, "\u23AF": { math: "\\harrowextender" }, "\u23B2": { math: "\\sumtop" }, "\u23B3": { math: "\\sumbottom" }, "\u23B4": { math: "\\overbracket" }, "\u23B5": { math: "\\underbracket" }, "\u23B6": { math: "\\bbrktbrk" }, "\u23B7": { math: "\\sqrtbottom" }, "\u23B8": { math: "\\lvboxline" }, "\u23B9": { math: "\\rvboxline" }, "\u23CE": { math: "\\varcarriagereturn" }, "\u23DC": { math: "\\overparen" }, "\u23DD": { math: "\\underparen" }, "\u23DE": { math: "\\overbrace" }, "\u23DF": { math: "\\underbrace" }, "\u23E0": { math: "\\obrbrak" }, "\u23E1": { math: "\\ubrbrak" }, "\u23E2": { math: "\\trapezium" }, "\u23E3": { math: "\\benzenr" }, "\u23E4": { math: "\\strns" }, "\u23E5": { math: "\\fltns" }, "\u23E6": { math: "\\accurrent" }, "\u23E7": { math: "\\elinters" }, "\u2422": { math: "\\blanksymbol" }, "\u2423": { math: "\\mathvisiblespace" }, "\u2506": { math: "\\bdtriplevdash" }, "\u2580": { math: "\\blockuphalf" }, "\u2584": { math: "\\blocklowhalf" }, "\u2588": { math: "\\blockfull" }, "\u258C": { math: "\\blocklefthalf" }, "\u2590": { math: "\\blockrighthalf" }, "\u2591": { math: "\\blockqtrshaded" }, "\u2592": { math: "\\blockhalfshaded" }, "\u2593": { math: "\\blockthreeqtrshaded" }, "\u25A0": { math: "\\mdlgblksquare" }, "\u25A2": { math: "\\squoval" }, "\u25A3": { math: "\\blackinwhitesquare" }, "\u25A4": { math: "\\squarehfill" }, "\u25A5": { math: "\\squarevfill" }, "\u25A6": { math: "\\squarehvfill" }, "\u25A7": { math: "\\squarenwsefill" }, "\u25A8": { math: "\\squareneswfill" }, "\u25A9": { math: "\\squarecrossfill" }, "\u25AA": { math: "\\smblksquare" }, "\u25AB": { math: "\\smwhtsquare" }, "\u25AC": { math: "\\hrectangleblack" }, "\u25AD": { math: "\\hrectangle" }, "\u25AE": { math: "\\vrectangleblack" }, "\u25AF": { math: "\\vrectangle" }, "\u25B0": { math: "\\parallelogramblack" }, "\u25B1": { math: "\\parallelogram" }, "\u25B2": { math: "\\bigblacktriangleup" }, "\u25B3": { math: "\\bigtriangleup" }, "\u25B4": { math: "\\blacktriangle" }, "\u25B5": { math: "\\vartriangle" }, "\u25B8": { math: "\\smallblacktriangleright" }, "\u25B9": { math: "\\smalltriangleright" }, "\u25BA": { math: "\\blackpointerright" }, "\u25BB": { math: "\\whitepointerright" }, "\u25BC": { math: "\\bigblacktriangledown" }, "\u25BE": { math: "\\blacktriangledown" }, "\u25BF": { math: "\\triangledown" }, "\u25C2": { math: "\\smallblacktriangleleft" }, "\u25C3": { math: "\\smalltriangleleft" }, "\u25C4": { math: "\\blackpointerleft" }, "\u25C5": { math: "\\whitepointerleft" }, "\u25C8": { math: "\\blackinwhitediamond" }, "\u25C9": { math: "\\fisheye" }, "\u25CA": { math: "\\lozenge" }, "\u25CC": { math: "\\dottedcircle" }, "\u25CD": { math: "\\circlevertfill" }, "\u25CE": { math: "\\bullseye" }, "\u25D0": { math: "\\circlelefthalfblack" }, "\u25D1": { math: "\\circlerighthalfblack" }, "\u25D2": { math: "\\circlebottomhalfblack" }, "\u25D3": { math: "\\circletophalfblack" }, "\u25D4": { math: "\\circleurquadblack" }, "\u25D5": { math: "\\blackcircleulquadwhite" }, "\u25D6": { math: "\\blacklefthalfcircle" }, "\u25D7": { math: "\\blackrighthalfcircle" }, "\u25D8": { math: "\\inversebullet" }, "\u25D9": { math: "\\inversewhitecircle" }, "\u25DA": { math: "\\invwhiteupperhalfcircle" }, "\u25DB": { math: "\\invwhitelowerhalfcircle" }, "\u25DC": { math: "\\ularc" }, "\u25DD": { math: "\\urarc" }, "\u25DE": { math: "\\lrarc" }, "\u25DF": { math: "\\llarc" }, "\u25E0": { math: "\\topsemicircle" }, "\u25E1": { math: "\\botsemicircle" }, "\u25E2": { math: "\\lrblacktriangle" }, "\u25E3": { math: "\\llblacktriangle" }, "\u25E4": { math: "\\ulblacktriangle" }, "\u25E5": { math: "\\urblacktriangle" }, "\u25E6": { math: "\\smwhtcircle" }, "\u25E7": { math: "\\squareleftblack" }, "\u25E8": { math: "\\squarerightblack" }, "\u25E9": { math: "\\squareulblack" }, "\u25EA": { math: "\\squarelrblack" }, "\u25EB": { math: "\\boxbar" }, "\u25EC": { math: "\\trianglecdot" }, "\u25ED": { math: "\\triangleleftblack" }, "\u25EE": { math: "\\trianglerightblack" }, "\u25F0": { math: "\\squareulquad" }, "\u25F1": { math: "\\squarellquad" }, "\u25F2": { math: "\\squarelrquad" }, "\u25F3": { math: "\\squareurquad" }, "\u25F4": { math: "\\circleulquad" }, "\u25F5": { math: "\\circlellquad" }, "\u25F6": { math: "\\circlelrquad" }, "\u25F7": { math: "\\circleurquad" }, "\u25F8": { math: "\\ultriangle" }, "\u25F9": { math: "\\urtriangle" }, "\u25FA": { math: "\\lltriangle" }, "\u25FB": { math: "\\mdwhtsquare" }, "\u25FC": { math: "\\mdblksquare" }, "\u25FD": { math: "\\mdsmwhtsquare" }, "\u25FE": { math: "\\mdsmblksquare" }, "\u25FF": { math: "\\lrtriangle" }, "\u2605": { math: "\\bigstar" }, "\u2606": { math: "\\bigwhitestar" }, "\u2621": { math: "\\danger" }, "\u263B": { math: "\\blacksmiley" }, "\u263C": { math: "\\sun" }, "\u263D": { math: "\\rightmoon" }, "\u263E": { math: "\\leftmoon" }, "\u2640": { math: "\\female" }, "\u2642": { math: "\\male" }, "\u2664": { math: "\\varspadesuit" }, "\u2665": { math: "\\varheartsuit" }, "\u2666": { math: "\\vardiamondsuit" }, "\u2667": { math: "\\varclubsuit" }, "\u2669": { math: "\\quarternote" }, "\u266A": { math: "\\eighthnote" }, "\u266B": { math: "\\twonotes" }, "\u266C": { math: "\\sixteenthnote" }, "\u267E": { math: "\\acidfree" }, "\u2680": { math: "\\dicei" }, "\u2681": { math: "\\diceii" }, "\u2682": { math: "\\diceiii" }, "\u2683": { math: "\\diceiv" }, "\u2684": { math: "\\dicev" }, "\u2685": { math: "\\dicevi" }, "\u2686": { math: "\\circledrightdot" }, "\u2687": { math: "\\circledtwodots" }, "\u2688": { math: "\\blackcircledrightdot" }, "\u2689": { math: "\\blackcircledtwodots" }, "\u26A5": { math: "\\Hermaphrodite" }, "\u26AC": { math: "\\mdsmwhtcircle" }, "\u26B2": { math: "\\neuter" }, "\u2713": { math: "\\checkmark" }, "\u2720": { math: "\\maltese" }, "\u272A": { math: "\\circledstar" }, "\u2736": { math: "\\varstar" }, "\u273D": { math: "\\dingasterisk" }, "\u2772": { math: "\\lbrbrak" }, "\u2773": { math: "\\rbrbrak" }, "\u279B": { math: "\\draftingarrow" }, "\u27C0": { math: "\\threedangle" }, "\u27C1": { math: "\\whiteinwhitetriangle" }, "\u27C3": { math: "\\subsetcirc" }, "\u27C4": { math: "\\supsetcirc" }, "\u27C7": { math: "\\veedot" }, "\u27C8": { math: "\\bsolhsub" }, "\u27C9": { math: "\\suphsol" }, "\u27CB": { math: "\\diagup" }, "\u27CC": { math: "\\longdivision" }, "\u27CD": { math: "\\diagdown" }, "\u27D1": { math: "\\wedgedot" }, "\u27D2": { math: "\\upin" }, "\u27D3": { math: "\\pullback" }, "\u27D4": { math: "\\pushout" }, "\u27D5": { math: "\\leftouterjoin" }, "\u27D6": { math: "\\rightouterjoin" }, "\u27D7": { math: "\\fullouterjoin" }, "\u27D8": { math: "\\bigbot" }, "\u27D9": { math: "\\bigtop" }, "\u27DA": { math: "\\DashVDash" }, "\u27DB": { math: "\\dashVdash" }, "\u27DC": { math: "\\multimapinv" }, "\u27DD": { math: "\\vlongdash" }, "\u27DE": { math: "\\longdashv" }, "\u27DF": { math: "\\cirbot" }, "\u27E0": { math: "\\lozengeminus" }, "\u27E1": { math: "\\concavediamond" }, "\u27E2": { math: "\\concavediamondtickleft" }, "\u27E3": { math: "\\concavediamondtickright" }, "\u27E4": { math: "\\whitesquaretickleft" }, "\u27E5": { math: "\\whitesquaretickright" }, "\u27EB": { math: "\\rang" }, "\u27EC": { math: "\\Lbrbrak" }, "\u27ED": { math: "\\Rbrbrak" }, "\u27F0": { math: "\\UUparrow" }, "\u27F1": { math: "\\DDownarrow" }, "\u27F2": { math: "\\acwgapcirclearrow" }, "\u27F3": { math: "\\cwgapcirclearrow" }, "\u27F4": { math: "\\rightarrowonoplus" }, "\u27FB": { math: "\\longmapsfrom" }, "\u27FD": { math: "\\Longmapsfrom" }, "\u27FE": { math: "\\Longmapsto" }, "\u27FF": { math: "\\longrightsquigarrow" }, "\u2901": { math: "\\nVtwoheadrightarrow" }, "\u2902": { math: "\\nvLeftarrow" }, "\u2903": { math: "\\nvRightarrow" }, "\u2904": { math: "\\nvLeftrightarrow" }, "\u2905": { math: "\\twoheadmapsto" }, "\u2906": { math: "\\Mapsfrom" }, "\u2907": { math: "\\Mapsto" }, "\u2908": { math: "\\downarrowbarred" }, "\u2909": { math: "\\uparrowbarred" }, "\u290A": { math: "\\Uuparrow" }, "\u290B": { math: "\\Ddownarrow" }, "\u290C": { math: "\\leftbkarrow" }, "\u290D": { math: "\\rightbkarrow" }, "\u290E": { math: "\\leftdbkarrow" }, "\u290F": { math: "\\dbkarrow" }, "\u2910": { math: "\\drbkarrow" }, "\u2911": { math: "\\rightdotarrow" }, "\u2917": { math: "\\nvtwoheadrightarrowtail" }, "\u2918": { math: "\\nVtwoheadrightarrowtail" }, "\u2919": { math: "\\lefttail" }, "\u291A": { math: "\\righttail" }, "\u291B": { math: "\\leftdbltail" }, "\u291C": { math: "\\rightdbltail" }, "\u291D": { math: "\\diamondleftarrow" }, "\u291E": { math: "\\rightarrowdiamond" }, "\u291F": { math: "\\diamondleftarrowbar" }, "\u2920": { math: "\\barrightarrowdiamond" }, "\u2921": { math: "\\nwsearrow" }, "\u2922": { math: "\\neswarrow" }, "\u2923": { math: "\\hknwarrow" }, "\u2924": { math: "\\hknearrow" }, "\u2925": { math: "\\hksearrow" }, "\u2926": { math: "\\hkswarrow" }, "\u2927": { math: "\\tona" }, "\u2928": { math: "\\toea" }, "\u2929": { math: "\\tosa" }, "\u292A": { math: "\\towa" }, "\u292B": { math: "\\rdiagovfdiag" }, "\u292C": { math: "\\fdiagovrdiag" }, "\u292D": { math: "\\seovnearrow" }, "\u292E": { math: "\\neovsearrow" }, "\u292F": { math: "\\fdiagovnearrow" }, "\u2930": { math: "\\rdiagovsearrow" }, "\u2931": { math: "\\neovnwarrow" }, "\u2932": { math: "\\nwovnearrow" }, "\u2933": { math: "\\rightcurvedarrow" }, "\u2934": { math: "\\uprightcurvearrow" }, "\u2935": { math: "\\downrightcurvedarrow" }, "\u2936": { math: "\\leftdowncurvedarrow" }, "\u2937": { math: "\\rightdowncurvedarrow" }, "\u2938": { math: "\\cwrightarcarrow" }, "\u2939": { math: "\\acwleftarcarrow" }, "\u293A": { math: "\\acwoverarcarrow" }, "\u293B": { math: "\\acwunderarcarrow" }, "\u293C": { math: "\\curvearrowrightminus" }, "\u293D": { math: "\\curvearrowleftplus" }, "\u293E": { math: "\\cwundercurvearrow" }, "\u293F": { math: "\\ccwundercurvearrow" }, "\u2942": { math: "\\rightarrowshortleftarrow" }, "\u2943": { math: "\\leftarrowshortrightarrow" }, "\u2944": { math: "\\shortrightarrowleftarrow" }, "\u2945": { math: "\\rightarrowplus" }, "\u2946": { math: "\\leftarrowplus" }, "\u2947": { math: "\\rightarrowx" }, "\u2948": { math: "\\leftrightarrowcircle" }, "\u2949": { math: "\\twoheaduparrowcircle" }, "\u294C": { math: "\\updownharpoonrightleft" }, "\u294D": { math: "\\updownharpoonleftright" }, "\u294E": { math: "\\leftrightharpoonupup" }, "\u2950": { math: "\\DownLeftRightVector" }, "\u2966": { math: "\\leftrightharpoonsup" }, "\u2967": { math: "\\leftrightharpoonsdown" }, "\u2968": { math: "\\rightleftharpoonsup" }, "\u2969": { math: "\\rightleftharpoonsdown" }, "\u2971": { math: "\\equalrightarrow" }, "\u2972": { math: "\\similarrightarrow" }, "\u2973": { math: "\\leftarrowsimilar" }, "\u2974": { math: "\\rightarrowsimilar" }, "\u2975": { math: "\\rightarrowapprox" }, "\u2976": { math: "\\ltlarr" }, "\u2977": { math: "\\leftarrowless" }, "\u2978": { math: "\\gtrarr" }, "\u2979": { math: "\\subrarr" }, "\u297A": { math: "\\leftarrowsubset" }, "\u297B": { math: "\\suplarr" }, "\u297C": { math: "\\leftfishtail" }, "\u297D": { math: "\\rightfishtail" }, "\u297E": { math: "\\upfishtail" }, "\u297F": { math: "\\downfishtail" }, "\u2980": { math: "\\Vvert" }, "\u2981": { math: "\\spot" }, "\u2982": { math: "\\typecolon" }, "\u2983": { math: "\\lBrace" }, "\u2984": { math: "\\rBrace" }, "\u2985": { math: "\\lParen" }, "\u2986": { math: "\\Elroang" }, "\u2987": { math: "\\limg" }, "\u298B": { math: "\\lbrackubar" }, "\u298C": { math: "\\rbrackubar" }, "\u298D": { math: "\\lbrackultick" }, "\u298E": { math: "\\rbracklrtick" }, "\u298F": { math: "\\lbracklltick" }, "\u2990": { math: "\\rbrackurtick" }, "\u2991": { math: "\\langledot" }, "\u2992": { math: "\\rangledot" }, "\u2993": { math: "\\lparenless" }, "\u2994": { math: "\\rparengtr" }, "\u2995": { math: "\\Lparengtr" }, "\u2996": { math: "\\Rparenless" }, "\u2997": { math: "\\lblkbrbrak" }, "\u2998": { math: "\\rblkbrbrak" }, "\u2999": { math: "\\fourvdots" }, "\u299A": { math: "\\vzigzag" }, "\u299B": { math: "\\measuredangleleft" }, "\u299D": { math: "\\rightanglemdot" }, "\u299E": { math: "\\angles" }, "\u299F": { math: "\\angdnr" }, "\u29A0": { math: "\\gtlpar" }, "\u29A1": { math: "\\sphericalangleup" }, "\u29A2": { math: "\\turnangle" }, "\u29A3": { math: "\\revangle" }, "\u29A4": { math: "\\angleubar" }, "\u29A5": { math: "\\revangleubar" }, "\u29A6": { math: "\\wideangledown" }, "\u29A7": { math: "\\wideangleup" }, "\u29A8": { math: "\\measanglerutone" }, "\u29A9": { math: "\\measanglelutonw" }, "\u29AA": { math: "\\measanglerdtose" }, "\u29AB": { math: "\\measangleldtosw" }, "\u29AC": { math: "\\measangleurtone" }, "\u29AD": { math: "\\measangleultonw" }, "\u29AE": { math: "\\measangledrtose" }, "\u29AF": { math: "\\measangledltosw" }, "\u29B0": { math: "\\revemptyset" }, "\u29B1": { math: "\\emptysetobar" }, "\u29B2": { math: "\\emptysetocirc" }, "\u29B3": { math: "\\emptysetoarr" }, "\u29B4": { math: "\\emptysetoarrl" }, "\u29B5": { math: "\\circlehbar" }, "\u29B6": { math: "\\circledvert" }, "\u29B7": { math: "\\circledparallel" }, "\u29B8": { math: "\\circledbslash" }, "\u29B9": { math: "\\operp" }, "\u29BA": { math: "\\obot" }, "\u29BB": { math: "\\olcross" }, "\u29BC": { math: "\\odotslashdot" }, "\u29BD": { math: "\\uparrowoncircle" }, "\u29BE": { math: "\\circledwhitebullet" }, "\u29BF": { math: "\\circledbullet" }, "\u29C0": { math: "\\circledless" }, "\u29C1": { math: "\\circledgtr" }, "\u29C2": { math: "\\cirscir" }, "\u29C3": { math: "\\cirE" }, "\u29C5": { math: "\\boxbslash" }, "\u29C6": { math: "\\boxast" }, "\u29C7": { math: "\\boxcircle" }, "\u29C8": { math: "\\boxbox" }, "\u29C9": { math: "\\boxonbox" }, "\u29CA": { math: "\\triangleodot" }, "\u29CB": { math: "\\triangleubar" }, "\u29CC": { math: "\\triangles" }, "\u29CD": { math: "\\triangleserifs" }, "\u29CE": { math: "\\rtriltri" }, "\u29D1": { math: "\\lfbowtie" }, "\u29D2": { math: "\\rfbowtie" }, "\u29D3": { math: "\\fbowtie" }, "\u29D4": { math: "\\lftimes" }, "\u29D5": { math: "\\rftimes" }, "\u29D6": { math: "\\hourglass" }, "\u29D7": { math: "\\blackhourglass" }, "\u29D8": { math: "\\lvzigzag" }, "\u29D9": { math: "\\rvzigzag" }, "\u29DA": { math: "\\Lvzigzag" }, "\u29DB": { math: "\\Rvzigzag" }, "\u29DC": { math: "\\iinfin" }, "\u29DD": { math: "\\tieinfty" }, "\u29DE": { math: "\\nvinfty" }, "\u29E0": { math: "\\laplac" }, "\u29E1": { math: "\\lrtriangleeq" }, "\u29E2": { math: "\\shuffle" }, "\u29E3": { math: "\\eparsl" }, "\u29E4": { math: "\\smeparsl" }, "\u29E5": { math: "\\eqvparsl" }, "\u29E6": { math: "\\gleichstark" }, "\u29E7": { math: "\\thermod" }, "\u29E8": { math: "\\downtriangleleftblack" }, "\u29E9": { math: "\\downtrianglerightblack" }, "\u29EA": { math: "\\blackdiamonddownarrow" }, "\u29EB": { math: "\\blacklozenge" }, "\u29EC": { math: "\\circledownarrow" }, "\u29ED": { math: "\\blackcircledownarrow" }, "\u29EE": { math: "\\errbarsquare" }, "\u29EF": { math: "\\errbarblacksquare" }, "\u29F0": { math: "\\errbardiamond" }, "\u29F1": { math: "\\errbarblackdiamond" }, "\u29F2": { math: "\\errbarcircle" }, "\u29F3": { math: "\\errbarblackcircle" }, "\u29F4": { math: "\\RuleDelayed" }, "\u29F6": { math: "\\dsol" }, "\u29F7": { math: "\\rsolbar" }, "\u29F8": { math: "\\xsol" }, "\u29FA": { math: "\\doubleplus" }, "\u29FB": { math: "\\tripleplus" }, "\u29FC": { math: "\\lcurvyangle" }, "\u29FD": { math: "\\rcurvyangle" }, "\u29FE": { math: "\\tplus" }, "\u29FF": { math: "\\tminus" }, "\u2A03": { math: "\\bigcupdot" }, "\u2A04": { math: "\\Elxuplus" }, "\u2A05": { math: "\\bigsqcap" }, "\u2A07": { math: "\\conjquant" }, "\u2A08": { math: "\\disjquant" }, "\u2A0A": { math: "\\modtwosum" }, "\u2A0B": { math: "\\sumint" }, "\u2A0C": { math: "\\iiiint" }, "\u2A0D": { math: "\\intbar" }, "\u2A0E": { math: "\\intBar" }, "\u2A10": { math: "\\cirfnint" }, "\u2A11": { math: "\\awint" }, "\u2A12": { math: "\\rppolint" }, "\u2A13": { math: "\\scpolint" }, "\u2A14": { math: "\\npolint" }, "\u2A15": { math: "\\pointint" }, "\u2A17": { math: "\\intlarhk" }, "\u2A18": { math: "\\intx" }, "\u2A19": { math: "\\intcap" }, "\u2A1A": { math: "\\intcup" }, "\u2A1B": { math: "\\upint" }, "\u2A1C": { math: "\\lowint" }, "\u2A1D": { math: "\\Join" }, "\u2A1E": { math: "\\bigtriangleleft" }, "\u2A1F": { math: "\\zcmp" }, "\u2A20": { math: "\\zpipe" }, "\u2A21": { math: "\\zproject" }, "\u2A22": { math: "\\ringplus" }, "\u2A23": { math: "\\plushat" }, "\u2A24": { math: "\\simplus" }, "\u2A25": { math: "\\plusdot" }, "\u2A26": { math: "\\plussim" }, "\u2A27": { math: "\\plussubtwo" }, "\u2A28": { math: "\\plustrif" }, "\u2A29": { math: "\\commaminus" }, "\u2A2A": { math: "\\minusdot" }, "\u2A2B": { math: "\\minusfdots" }, "\u2A2C": { math: "\\minusrdots" }, "\u2A2D": { math: "\\opluslhrim" }, "\u2A2E": { math: "\\oplusrhrim" }, "\u2A2F": { math: "\\vectimes" }, "\u2A30": { math: "\\dottimes" }, "\u2A31": { math: "\\timesbar" }, "\u2A32": { math: "\\btimes" }, "\u2A33": { math: "\\smashtimes" }, "\u2A34": { math: "\\otimeslhrim" }, "\u2A35": { math: "\\otimesrhrim" }, "\u2A36": { math: "\\otimeshat" }, "\u2A37": { math: "\\Otimes" }, "\u2A38": { math: "\\odiv" }, "\u2A39": { math: "\\triangleplus" }, "\u2A3A": { math: "\\triangleminus" }, "\u2A3B": { math: "\\triangletimes" }, "\u2A3C": { math: "\\intprod" }, "\u2A3D": { math: "\\intprodr" }, "\u2A3E": { math: "\\fcmp" }, "\u2A40": { math: "\\capdot" }, "\u2A41": { math: "\\uminus" }, "\u2A42": { math: "\\barcup" }, "\u2A43": { math: "\\barcap" }, "\u2A44": { math: "\\capwedge" }, "\u2A45": { math: "\\cupvee" }, "\u2A46": { math: "\\cupovercap" }, "\u2A47": { math: "\\capovercup" }, "\u2A48": { math: "\\cupbarcap" }, "\u2A49": { math: "\\capbarcup" }, "\u2A4A": { math: "\\twocups" }, "\u2A4B": { math: "\\twocaps" }, "\u2A4C": { math: "\\closedvarcup" }, "\u2A4D": { math: "\\closedvarcap" }, "\u2A4E": { math: "\\Sqcap" }, "\u2A4F": { math: "\\Sqcup" }, "\u2A50": { math: "\\closedvarcupsmashprod" }, "\u2A51": { math: "\\wedgeodot" }, "\u2A52": { math: "\\veeodot" }, "\u2A53": { math: "\\Wedge" }, "\u2A54": { math: "\\Vee" }, "\u2A55": { math: "\\wedgeonwedge" }, "\u2A57": { math: "\\bigslopedvee" }, "\u2A58": { math: "\\bigslopedwedge" }, "\u2A59": { math: "\\veeonwedge" }, "\u2A5A": { math: "\\wedgemidvert" }, "\u2A5B": { math: "\\veemidvert" }, "\u2A5C": { math: "\\midbarwedge" }, "\u2A5D": { math: "\\midbarvee" }, "\u2A5F": { math: "\\wedgebar" }, "\u2A60": { math: "\\wedgedoublebar" }, "\u2A61": { math: "\\varveebar" }, "\u2A62": { math: "\\doublebarvee" }, "\u2A63": { math: "\\veedoublebar" }, "\u2A64": { math: "\\dsub" }, "\u2A65": { math: "\\rsub" }, "\u2A66": { math: "\\eqdot" }, "\u2A67": { math: "\\dotequiv" }, "\u2A68": { math: "\\equivVert" }, "\u2A69": { math: "\\equivVvert" }, "\u2A6A": { math: "\\dotsim" }, "\u2A6B": { math: "\\simrdots" }, "\u2A6C": { math: "\\simminussim" }, "\u2A6D": { math: "\\congdot" }, "\u2A6F": { math: "\\hatapprox" }, "\u2A70": { math: "\\approxeqq" }, "\u2A71": { math: "\\eqqplus" }, "\u2A72": { math: "\\pluseqq" }, "\u2A73": { math: "\\eqqsim" }, "\u2A74": { math: "\\Coloneqq" }, "\u2A77": { math: "\\ddotseq" }, "\u2A78": { math: "\\equivDD" }, "\u2A79": { math: "\\ltcir" }, "\u2A7A": { math: "\\gtcir" }, "\u2A7B": { math: "\\ltquest" }, "\u2A7C": { math: "\\gtquest" }, "\u2A7D": { math: "\\leqslant" }, "\u2A7E": { math: "\\geqslant" }, "\u2A7F": { math: "\\lesdot" }, "\u2A80": { math: "\\gesdot" }, "\u2A81": { math: "\\lesdoto" }, "\u2A82": { math: "\\gesdoto" }, "\u2A83": { math: "\\lesdotor" }, "\u2A84": { math: "\\gesdotol" }, "\u2A85": { math: "\\lessapprox" }, "\u2A86": { math: "\\gtrapprox" }, "\u2A87": { math: "\\lneq" }, "\u2A88": { math: "\\gneq" }, "\u2A89": { math: "\\lnapprox" }, "\u2A8A": { math: "\\gnapprox" }, "\u2A8B": { math: "\\lesseqqgtr" }, "\u2A8C": { math: "\\gtreqqless" }, "\u2A8D": { math: "\\lsime" }, "\u2A8E": { math: "\\gsime" }, "\u2A8F": { math: "\\lsimg" }, "\u2A90": { math: "\\gsiml" }, "\u2A91": { math: "\\lgE" }, "\u2A92": { math: "\\glE" }, "\u2A93": { math: "\\lesges" }, "\u2A94": { math: "\\gesles" }, "\u2A95": { math: "\\eqslantless" }, "\u2A96": { math: "\\eqslantgtr" }, "\u2A97": { math: "\\elsdot" }, "\u2A98": { math: "\\egsdot" }, "\u2A99": { math: "\\eqqless" }, "\u2A9A": { math: "\\eqqgtr" }, "\u2A9B": { math: "\\eqqslantless" }, "\u2A9C": { math: "\\eqqslantgtr" }, "\u2A9D": { math: "\\simless" }, "\u2A9E": { math: "\\simgtr" }, "\u2A9F": { math: "\\simlE" }, "\u2AA0": { math: "\\simgE" }, "\u2AA3": { math: "\\partialmeetcontraction" }, "\u2AA4": { math: "\\glj" }, "\u2AA5": { math: "\\gla" }, "\u2AA8": { math: "\\lescc" }, "\u2AA9": { math: "\\gescc" }, "\u2AAA": { math: "\\smt" }, "\u2AAB": { math: "\\lat" }, "\u2AAC": { math: "\\smte" }, "\u2AAD": { math: "\\late" }, "\u2AAE": { math: "\\bumpeqq" }, "\u2AB1": { math: "\\precneq" }, "\u2AB2": { math: "\\succneq" }, "\u2AB3": { math: "\\preceqq" }, "\u2AB4": { math: "\\succeqq" }, "\u2AB5": { math: "\\precneqq" }, "\u2AB6": { math: "\\succneqq" }, "\u2AB7": { math: "\\precapprox" }, "\u2AB8": { math: "\\succapprox" }, "\u2AB9": { math: "\\precnapprox" }, "\u2ABA": { math: "\\succnapprox" }, "\u2ABD": { math: "\\subsetdot" }, "\u2ABE": { math: "\\supsetdot" }, "\u2ABF": { math: "\\subsetplus" }, "\u2AC0": { math: "\\supsetplus" }, "\u2AC1": { math: "\\submult" }, "\u2AC2": { math: "\\supmult" }, "\u2AC3": { math: "\\subedot" }, "\u2AC4": { math: "\\supedot" }, "\u2AC5": { math: "\\subseteqq" }, "\u2AC6": { math: "\\supseteqq" }, "\u2AC7": { math: "\\subsim" }, "\u2AC8": { math: "\\supsim" }, "\u2AC9": { math: "\\subsetapprox" }, "\u2ACA": { math: "\\supsetapprox" }, "\u2ACB": { math: "\\subsetneqq" }, "\u2ACC": { math: "\\supsetneqq" }, "\u2ACD": { math: "\\lsqhook" }, "\u2ACE": { math: "\\rsqhook" }, "\u2ACF": { math: "\\csub" }, "\u2AD0": { math: "\\csup" }, "\u2AD1": { math: "\\csube" }, "\u2AD2": { math: "\\csupe" }, "\u2AD3": { math: "\\subsup" }, "\u2AD4": { math: "\\supsub" }, "\u2AD5": { math: "\\subsub" }, "\u2AD6": { math: "\\supsup" }, "\u2AD7": { math: "\\suphsub" }, "\u2AD8": { math: "\\supdsub" }, "\u2AD9": { math: "\\forkv" }, "\u2ADA": { math: "\\topfork" }, "\u2ADB": { math: "\\mlcp" }, "\u2ADD\u0338": { math: "\\forks" }, "\u2ADD": { math: "\\forksnot" }, "\u2ADE": { math: "\\shortlefttack" }, "\u2ADF": { math: "\\shortdowntack" }, "\u2AE0": { math: "\\shortuptack" }, "\u2AE1": { math: "\\perps" }, "\u2AE2": { math: "\\vDdash" }, "\u2AE3": { math: "\\dashV" }, "\u2AE4": { math: "\\Dashv" }, "\u2AE5": { math: "\\DashV" }, "\u2AE6": { math: "\\varVdash" }, "\u2AE7": { math: "\\Barv" }, "\u2AE8": { math: "\\vBar" }, "\u2AE9": { math: "\\vBarv" }, "\u2AEB": { math: "\\Vbar" }, "\u2AEC": { math: "\\Not" }, "\u2AED": { math: "\\bNot" }, "\u2AEE": { math: "\\revnmid" }, "\u2AEF": { math: "\\cirmid" }, "\u2AF0": { math: "\\midcir" }, "\u2AF1": { math: "\\topcir" }, "\u2AF2": { math: "\\nhpar" }, "\u2AF3": { math: "\\parsim" }, "\u2AF4": { math: "\\interleave" }, "\u2AF5": { math: "\\nhVvert" }, "\u2AF6": { math: "\\threedotcolon" }, "\u2AF7": { math: "\\lllnest" }, "\u2AF8": { math: "\\gggnest" }, "\u2AF9": { math: "\\leqqslant" }, "\u2AFA": { math: "\\geqqslant" }, "\u2AFB": { math: "\\trslash" }, "\u2AFC": { math: "\\biginterleave" }, "\u2AFE": { math: "\\talloblong" }, "\u2AFF": { math: "\\bigtalloblong" }, "\u2B12": { math: "\\squaretopblack" }, "\u2B13": { math: "\\squarebotblack" }, "\u2B14": { math: "\\squareurblack" }, "\u2B15": { math: "\\squarellblack" }, "\u2B16": { math: "\\diamondleftblack" }, "\u2B17": { math: "\\diamondrightblack" }, "\u2B18": { math: "\\diamondtopblack" }, "\u2B19": { math: "\\diamondbotblack" }, "\u2B1A": { math: "\\dottedsquare" }, "\u2B1B": { math: "\\lgblksquare" }, "\u2B1C": { math: "\\lgwhtsquare" }, "\u2B1D": { math: "\\vysmblksquare" }, "\u2B1E": { math: "\\vysmwhtsquare" }, "\u2B1F": { math: "\\pentagonblack" }, "\u2B20": { math: "\\pentagon" }, "\u2B21": { math: "\\varhexagon" }, "\u2B22": { math: "\\varhexagonblack" }, "\u2B23": { math: "\\hexagonblack" }, "\u2B24": { math: "\\lgblkcircle" }, "\u2B25": { math: "\\mdblkdiamond" }, "\u2B26": { math: "\\mdwhtdiamond" }, "\u2B27": { math: "\\mdblklozenge" }, "\u2B28": { math: "\\mdwhtlozenge" }, "\u2B29": { math: "\\smblkdiamond" }, "\u2B2A": { math: "\\smblklozenge" }, "\u2B2B": { math: "\\smwhtlozenge" }, "\u2B2C": { math: "\\blkhorzoval" }, "\u2B2D": { math: "\\whthorzoval" }, "\u2B2E": { math: "\\blkvertoval" }, "\u2B2F": { math: "\\whtvertoval" }, "\u2B30": { math: "\\circleonleftarrow" }, "\u2B31": { math: "\\leftthreearrows" }, "\u2B32": { math: "\\leftarrowonoplus" }, "\u2B33": { math: "\\longleftsquigarrow" }, "\u2B34": { math: "\\nvtwoheadleftarrow" }, "\u2B35": { math: "\\nVtwoheadleftarrow" }, "\u2B36": { math: "\\twoheadmapsfrom" }, "\u2B37": { math: "\\twoheadleftdbkarrow" }, "\u2B38": { math: "\\leftdotarrow" }, "\u2B39": { math: "\\nvleftarrowtail" }, "\u2B3A": { math: "\\nVleftarrowtail" }, "\u2B3B": { math: "\\twoheadleftarrowtail" }, "\u2B3C": { math: "\\nvtwoheadleftarrowtail" }, "\u2B3D": { math: "\\nVtwoheadleftarrowtail" }, "\u2B3E": { math: "\\leftarrowx" }, "\u2B3F": { math: "\\leftcurvedarrow" }, "\u2B40": { math: "\\equalleftarrow" }, "\u2B41": { math: "\\bsimilarleftarrow" }, "\u2B42": { math: "\\leftarrowbackapprox" }, "\u2B43": { math: "\\rightarrowgtr" }, "\u2B44": { math: "\\rightarrowsupset" }, "\u2B45": { math: "\\LLeftarrow" }, "\u2B46": { math: "\\RRightarrow" }, "\u2B47": { math: "\\bsimilarrightarrow" }, "\u2B48": { math: "\\rightarrowbackapprox" }, "\u2B49": { math: "\\similarleftarrow" }, "\u2B4A": { math: "\\leftarrowapprox" }, "\u2B4B": { math: "\\leftarrowbsimilar" }, "\u2B4C": { math: "\\rightarrowbsimilar" }, "\u2B50": { math: "\\medwhitestar" }, "\u2B51": { math: "\\medblackstar" }, "\u2B52": { math: "\\smwhitestar" }, "\u2B53": { math: "\\rightpentagonblack" }, "\u2B54": { math: "\\rightpentagon" }, "\u3012": { math: "\\postalmark" }, "\u3030": { math: "\\hzigzag" } }, amssymb: { \u00F0: { math: "\\eth" }, "\u2A7D": { math: "\\leqslant" }, "\u2A7D\u0338": { math: "\\nleqslant" }, "\u2A7E": { math: "\\geqslant" }, "\u2A7E\u0338": { math: "\\ngeqslant" } }, arevmath: { \u00F0: { math: "\\eth" } }, MinionPro: { \u03D0: { math: "\\varbeta" }, \u03F0: { math: "\\varkappa" } }, mathrsfs: { \u210A: { math: "\\mathscr{g}" }, \u210B: { math: "\\mathscr{H}" }, \u2110: { math: "\\mathscr{I}" }, \u2112: { math: "\\mathscr{L}" }, \u211B: { math: "\\mathscr{R}" }, \u212C: { math: "\\mathscr{B}" }, \u212F: { math: "\\mathscr{e}" }, \u2130: { math: "\\mathscr{E}" }, \u2131: { math: "\\mathscr{F}" }, \u2133: { math: "\\mathscr{M}" }, \u2134: { math: "\\mathscr{o}" }, "\u{1D49C}": { math: "\\mathscr{A}" }, "\u{1D49E}": { math: "\\mathscr{C}" }, "\u{1D49F}": { math: "\\mathscr{D}" }, "\u{1D4A2}": { math: "\\mathscr{G}" }, "\u{1D4A5}": { math: "\\mathscr{J}" }, "\u{1D4A6}": { math: "\\mathscr{K}" }, "\u{1D4A9}": { math: "\\mathscr{N}" }, "\u{1D4AA}": { math: "\\mathscr{O}" }, "\u{1D4AB}": { math: "\\mathscr{P}" }, "\u{1D4AC}": { math: "\\mathscr{Q}" }, "\u{1D4AE}": { math: "\\mathscr{S}" }, "\u{1D4AF}": { math: "\\mathscr{T}" }, "\u{1D4B0}": { math: "\\mathscr{U}" }, "\u{1D4B1}": { math: "\\mathscr{V}" }, "\u{1D4B2}": { math: "\\mathscr{W}" }, "\u{1D4B3}": { math: "\\mathscr{X}" }, "\u{1D4B4}": { math: "\\mathscr{Y}" }, "\u{1D4B5}": { math: "\\mathscr{Z}" }, "\u{1D4B6}": { math: "\\mathscr{a}" }, "\u{1D4B7}": { math: "\\mathscr{b}" }, "\u{1D4B8}": { math: "\\mathscr{c}" }, "\u{1D4B9}": { math: "\\mathscr{d}" }, "\u{1D4BB}": { math: "\\mathscr{f}" }, "\u{1D4BD}": { math: "\\mathscr{h}" }, "\u{1D4BE}": { math: "\\mathscr{i}" }, "\u{1D4BF}": { math: "\\mathscr{j}" }, "\u{1D4C0}": { math: "\\mathscr{k}" }, "\u{1D4C1}": { math: "\\mathscr{l}" }, "\u{1D4C2}": { math: "\\mathscr{m}" }, "\u{1D4C3}": { math: "\\mathscr{n}" }, "\u{1D4C5}": { math: "\\mathscr{p}" }, "\u{1D4C6}": { math: "\\mathscr{q}" }, "\u{1D4C7}": { math: "\\mathscr{r}" }, "\u{1D4C8}": { math: "\\mathscr{s}" }, "\u{1D4C9}": { math: "\\mathscr{t}" }, "\u{1D4CA}": { math: "\\mathscr{u}" }, "\u{1D4CB}": { math: "\\mathscr{v}" }, "\u{1D4CC}": { math: "\\mathscr{w}" }, "\u{1D4CD}": { math: "\\mathscr{x}" }, "\u{1D4CE}": { math: "\\mathscr{y}" }, "\u{1D4CF}": { math: "\\mathscr{z}" } }, MnSymbol: { "\u2232": { math: "\\lcirclerightint" }, "\u2233": { math: "\\rcirclerightint" } }, mathabx: { "\u2238": { math: "\\dotdiv" } }, xecjk: { "\u2242": { math: "\\texteqsim" }, \u05D0: { text: "\\hebalef", macrospacer: true }, \u05E2: { text: "\\hebayin", macrospacer: true }, \u05D1: { text: "\\hebbet", macrospacer: true }, \u05D3: { text: "\\hebdalet", macrospacer: true }, \u05DA: { text: "\\hebfinalkaf", macrospacer: true }, \u05DD: { text: "\\hebfinalmem", macrospacer: true }, \u05DF: { text: "\\hebfinalnun", macrospacer: true }, \u05E3: { text: "\\hebfinalpe", macrospacer: true }, \u05E5: { text: "\\hebfinaltsadi", macrospacer: true }, \u05D2: { text: "\\hebgimel", macrospacer: true }, \u05D4: { text: "\\hebhe", macrospacer: true }, \u05D7: { text: "\\hebhet", macrospacer: true }, \u05DB: { text: "\\hebkaf", macrospacer: true }, \u05DC: { text: "\\heblamed", macrospacer: true }, \u05DE: { text: "\\hebmem", macrospacer: true }, \u05E0: { text: "\\hebnun", macrospacer: true }, \u05E4: { text: "\\hebpe", macrospacer: true }, \u05E7: { text: "\\hebqof", macrospacer: true }, \u05E8: { text: "\\hebresh", macrospacer: true }, \u05E1: { text: "\\hebsamekh", macrospacer: true }, \u05E9: { text: "\\hebshin", macrospacer: true }, \u05EA: { text: "\\hebtav", macrospacer: true }, \u05D8: { text: "\\hebtet", macrospacer: true }, \u05E6: { text: "\\hebtsadi", macrospacer: true }, \u05D5: { text: "\\hebvav", macrospacer: true }, \u05D9: { text: "\\hebyod", macrospacer: true }, \u05D6: { text: "\\hebzayin", macrospacer: true }, \u0138: { text: "\\textkra", macrospacer: true } }, textcomp: { "\xA2": { text: "\\textcent", macrospacer: true }, "\xA4": { text: "\\textcurrency", macrospacer: true }, "\xA5": { text: "\\textyen", macrospacer: true }, "\u0E3F": { text: "\\textbaht", macrospacer: true }, "\u20A1": { text: "\\textcolonmonetary", macrospacer: true }, "\u20A4": { text: "\\textlira", macrospacer: true }, "\u20A6": { text: "\\textnaira", macrospacer: true }, "\u20A7": { text: "\\textpeseta", macrospacer: true }, "\u20A9": { text: "\\textwon", macrospacer: true }, "\u20AB": { text: "\\textdong", macrospacer: true }, "\u20B1": { text: "\\textpeso", macrospacer: true }, "\xA6": { text: "\\textbrokenbar", macrospacer: true }, "\xA9": { text: "\\textcopyright", macrospacer: true }, \u00AA: { text: "\\textordfeminine", macrospacer: true }, "\xB0": { text: "\\textdegree", macrospacer: true }, "\xB6": { text: "\\textparagraph", macrospacer: true }, \u00BA: { text: "\\textordmasculine", macrospacer: true }, \u00F0: { text: "\\textdh", macrospacer: true }, "\u02D9": { text: "\\textperiodcentered", macrospacer: true }, "\u2022": { text: "\\textbullet", macrospacer: true }, "\u2030": { text: "\\textperthousand", macrospacer: true }, "\u2031": { text: "\\textpertenthousand", macrospacer: true }, "\u211E": { text: "\\textrecipe", macrospacer: true }, "\u2122": { text: "\\texttrademark", macrospacer: true }, "\u2191": { text: "\\textuparrow", macrospacer: true }, "\u2192": { text: "\\textrightarrow", macrospacer: true } }, inputenx: { \u0126: { text: "\\textmalteseH", macrospacer: true }, \u0278: { text: "\\textphi", macrospacer: true }, "\u2248": { text: "\\textapproxequal", macrospacer: true } }, tipa: { \u0127: { text: "\\textcrh", macrospacer: true }, \u0195: { text: "\\texthvlig", macrospacer: true }, \u019E: { text: "\\textipa{\\textnrleg}" }, \u01C2: { text: "\\textdoublebarpipe", macrospacer: true }, \u0250: { text: "\\textipa{\\textturna}" }, \u0252: { text: "textipa{\\textopeno}" }, \u0254: { text: "\\textipa{O}" }, \u0256: { text: "\\textrtaild", macrospacer: true }, \u0259: { text: "\\textschwa", macrospacer: true }, \u0263: { text: "\\textipa{G}" }, \u0264: { text: "\\textrevscripta", macrospacer: true }, \u0278: { text: "\\textphi", macrospacer: true }, \u029E: { text: "\\textturnk", macrospacer: true }, "\u02E5": { text: "\\tone{55}" }, "\u02E6": { text: "\\tone{44}" }, "\u02E7": { text: "\\tone{33}" }, "\u02E8": { text: "\\tone{22}" }, "\u02E9": { text: "\\tone{11}" }, "\u0300\u0304": { text: "\\textgravemacron", macrospacer: true }, "\u0300\u0307": { text: "\\textgravedot", macrospacer: true }, "\u0301\u0304": { text: "\\textacutemacron", macrospacer: true }, "\u0301\u030C": { text: "\\textacutewedge", macrospacer: true }, "\u0302\u0307": { text: "\\textcircumdot", macrospacer: true }, "\u0303\u0307": { text: "\\texttildedot", macrospacer: true }, "\u0304\u0300": { text: "\\textgravemacron", macrospacer: true }, "\u0306\u0304": { text: "\\textbrevemacron", macrospacer: true }, "\u0307\u0301": { text: "\\textdotacute", macrospacer: true }, "\u0307\u0306": { text: "\\textdotbreve", macrospacer: true }, "\u030A\u0304": { text: "\\textringmacron", macrospacer: true }, "\u030D": { text: "\\textvbaraccent", macrospacer: true }, "\u030E": { text: "\\textdoublevbaraccent", macrospacer: true }, "\u0310": { text: "\\textdotbreve", macrospacer: true }, "\u0318": { text: "\\textadvancing", macrospacer: true }, "\u0319": { text: "\\textretracting", macrospacer: true }, "\u031A": { text: "\\textcorner", macrospacer: true }, "\u031C": { text: "\\textsublhalfring", macrospacer: true }, "\u031D": { text: "\\textraising", macrospacer: true }, "\u031E": { text: "\\textlowering", macrospacer: true }, "\u031F": { text: "\\textsubplus", macrospacer: true }, "\u0324": { text: "\\textsubumlaut", macrospacer: true }, "\u0325": { text: "\\textsubring", macrospacer: true }, "\u0329": { text: "\\textsyllabic", macrospacer: true }, "\u032A": { text: "\\textsubbridge", macrospacer: true }, "\u032C": { text: "\\textsubwedge", macrospacer: true }, "\u032F": { text: "\\textsubarch", macrospacer: true }, "\u0330": { text: "\\textsubtilde", macrospacer: true }, "\u0331": { text: "\\textsubbar", macrospacer: true }, "\u0334": { text: "\\textsuperimposetilde", macrospacer: true }, "\u0339": { text: "\\textsubrhalfring", macrospacer: true }, "\u033A": { text: "\\textinvsubbridge", macrospacer: true }, "\u033B": { text: "\\textsubsquare", macrospacer: true }, "\u033C": { text: "\\textseagull", macrospacer: true }, "\u033D": { text: "\\textovercross", macrospacer: true }, "\u2094": { text: "\\textsubscript{\\textschwa}" } }, ipa: { \u026F: { text: "\\textturnm", macrospacer: true } }, mathscinet: { \u02BF: { text: "\\lasp", macrospacer: true } }, textalpha: { \u03B1: { text: "\\textalpha", macrospacer: true } }, graphics: { "\u21B3": { text: "\\reflectbox{\\carriagereturn}" } }, pmboxdraw: { "\u2500": { text: "\\textSFx", macrospacer: true }, "\u2501": { text: "\\pmboxdrawuni{2501}" }, "\u2502": { text: "\\textSFxi", macrospacer: true }, "\u2503": { text: "\\pmboxdrawuni{2503}" }, "\u250C": { text: "\\textSFi", macrospacer: true }, "\u250D": { text: "\\pmboxdrawuni{250D}" }, "\u250E": { text: "\\pmboxdrawuni{250E}" }, "\u250F": { text: "\\pmboxdrawuni{250F}" }, "\u2510": { text: "\\textSFiii", macrospacer: true }, "\u2511": { text: "\\pmboxdrawuni{2511}" }, "\u2512": { text: "\\pmboxdrawuni{2512}" }, "\u2513": { text: "\\pmboxdrawuni{2513}" }, "\u2514": { text: "\\textSFii", macrospacer: true }, "\u2515": { text: "\\pmboxdrawuni{2515}" }, "\u2516": { text: "\\pmboxdrawuni{2516}" }, "\u2517": { text: "\\pmboxdrawuni{2517}" }, "\u2518": { text: "\\textSFiv", macrospacer: true }, "\u2519": { text: "\\pmboxdrawuni{2519}" }, "\u251A": { text: "\\pmboxdrawuni{251A}" }, "\u251B": { text: "\\pmboxdrawuni{251B}" }, "\u251C": { text: "\\textSFviii", macrospacer: true }, "\u251D": { text: "\\pmboxdrawuni{251D}" }, "\u251E": { text: "\\pmboxdrawuni{251E}" }, "\u251F": { text: "\\pmboxdrawuni{251F}" }, "\u2520": { text: "\\pmboxdrawuni{2520}" }, "\u2521": { text: "\\pmboxdrawuni{2521}" }, "\u2522": { text: "\\pmboxdrawuni{2522}" }, "\u2523": { text: "\\pmboxdrawuni{2523}" }, "\u2524": { text: "\\textSFix", macrospacer: true }, "\u2525": { text: "\\pmboxdrawuni{2525}" }, "\u2526": { text: "\\pmboxdrawuni{2526}" }, "\u2527": { text: "\\pmboxdrawuni{2527}" }, "\u2528": { text: "\\pmboxdrawuni{2528}" }, "\u2529": { text: "\\pmboxdrawuni{2529}" }, "\u252A": { text: "\\pmboxdrawuni{252A}" }, "\u252B": { text: "\\pmboxdrawuni{252B}" }, "\u252C": { text: "\\textSFvi", macrospacer: true }, "\u252D": { text: "\\pmboxdrawuni{252D}" }, "\u252E": { text: "\\pmboxdrawuni{252E}" }, "\u252F": { text: "\\pmboxdrawuni{252F}" }, "\u2530": { text: "\\pmboxdrawuni{2530}" }, "\u2531": { text: "\\pmboxdrawuni{2531}" }, "\u2532": { text: "\\pmboxdrawuni{2532}" }, "\u2533": { text: "\\pmboxdrawuni{2533}" }, "\u2534": { text: "\\textSFvii", macrospacer: true }, "\u2535": { text: "\\pmboxdrawuni{2535}" }, "\u2536": { text: "\\pmboxdrawuni{2536}" }, "\u2537": { text: "\\pmboxdrawuni{2537}" }, "\u2538": { text: "\\pmboxdrawuni{2538}" }, "\u2539": { text: "\\pmboxdrawuni{2539}" }, "\u253A": { text: "\\pmboxdrawuni{253A}" }, "\u253B": { text: "\\pmboxdrawuni{253B}" }, "\u253C": { text: "\\textSFv", macrospacer: true }, "\u253D": { text: "\\pmboxdrawuni{253D}" }, "\u253E": { text: "\\pmboxdrawuni{253E}" }, "\u253F": { text: "\\pmboxdrawuni{253F}" }, "\u2540": { text: "\\pmboxdrawuni{2540}" }, "\u2541": { text: "\\pmboxdrawuni{2541}" }, "\u2542": { text: "\\pmboxdrawuni{2542}" }, "\u2543": { text: "\\pmboxdrawuni{2543}" }, "\u2544": { text: "\\pmboxdrawuni{2544}" }, "\u2545": { text: "\\pmboxdrawuni{2545}" }, "\u2546": { text: "\\pmboxdrawuni{2546}" }, "\u2547": { text: "\\pmboxdrawuni{2547}" }, "\u2548": { text: "\\pmboxdrawuni{2548}" }, "\u2549": { text: "\\pmboxdrawuni{2549}" }, "\u254A": { text: "\\pmboxdrawuni{254A}" }, "\u254B": { text: "\\pmboxdrawuni{254B}" }, "\u2550": { text: "\\textSFxliii", macrospacer: true }, "\u2551": { text: "\\textSFxxiv", macrospacer: true }, "\u2552": { text: "\\textSFli", macrospacer: true }, "\u2553": { text: "\\textSFlii", macrospacer: true }, "\u2554": { text: "\\textSFxxxix", macrospacer: true }, "\u2555": { text: "\\textSFxxii", macrospacer: true }, "\u2556": { text: "\\textSFxxi", macrospacer: true }, "\u2557": { text: "\\textSFxxv", macrospacer: true }, "\u2558": { text: "\\textSFl", macrospacer: true }, "\u2559": { text: "\\textSFxlix", macrospacer: true }, "\u255A": { text: "\\textSFxxxviii", macrospacer: true }, "\u255B": { text: "\\textSFxxviii", macrospacer: true }, "\u255C": { text: "\\textSFxxvii", macrospacer: true }, "\u255D": { text: "\\textSFxxvi", macrospacer: true }, "\u255E": { text: "\\textSFxxxvi", macrospacer: true }, "\u255F": { text: "\\textSFxxxvii", macrospacer: true }, "\u2560": { text: "\\textSFxlii", macrospacer: true }, "\u2561": { text: "\\textSFxix", macrospacer: true }, "\u2562": { text: "\\textSFxx", macrospacer: true }, "\u2563": { text: "\\textSFxxiii", macrospacer: true }, "\u2564": { text: "\\textSFxlvii", macrospacer: true }, "\u2565": { text: "\\textSFxlviii", macrospacer: true }, "\u2566": { text: "\\textSFxli", macrospacer: true }, "\u2567": { text: "\\textSFxlv", macrospacer: true }, "\u2568": { text: "\\textSFxlvi", macrospacer: true }, "\u2569": { text: "\\textSFxl", macrospacer: true }, "\u256A": { text: "\\textSFliv", macrospacer: true }, "\u256B": { text: "\\textSFliii", macrospacer: true }, "\u256C": { text: "\\textSFxliv", macrospacer: true }, "\u2574": { text: "\\pmboxdrawuni{2574}" }, "\u2575": { text: "\\pmboxdrawuni{2575}" }, "\u2576": { text: "\\pmboxdrawuni{2576}" }, "\u2577": { text: "\\pmboxdrawuni{2577}" }, "\u2578": { text: "\\pmboxdrawuni{2578}" }, "\u2579": { text: "\\pmboxdrawuni{2579}" }, "\u257A": { text: "\\pmboxdrawuni{257A}" }, "\u257B": { text: "\\pmboxdrawuni{257B}" }, "\u257C": { text: "\\pmboxdrawuni{257C}" }, "\u257D": { text: "\\pmboxdrawuni{257D}" }, "\u257E": { text: "\\pmboxdrawuni{257E}" }, "\u257F": { text: "\\pmboxdrawuni{257F}" }, "\u2580": { text: "\\textupblock", macrospacer: true }, "\u2581": { text: "\\pmboxdrawuni{2581}" }, "\u2582": { text: "\\pmboxdrawuni{2582}" }, "\u2583": { text: "\\pmboxdrawuni{2583}" }, "\u2584": { text: "\\textdnblock", macrospacer: true }, "\u2585": { text: "\\pmboxdrawuni{2585}" }, "\u2586": { text: "\\pmboxdrawuni{2586}" }, "\u2587": { text: "\\pmboxdrawuni{2587}" }, "\u2588": { text: "\\textblock", macrospacer: true }, "\u2589": { text: "\\pmboxdrawuni{2589}" }, "\u258A": { text: "\\pmboxdrawuni{258A}" }, "\u258B": { text: "\\pmboxdrawuni{258B}" }, "\u258C": { text: "\\textlfblock", macrospacer: true }, "\u258D": { text: "\\pmboxdrawuni{258D}" }, "\u258E": { text: "\\pmboxdrawuni{258E}" }, "\u258F": { text: "\\pmboxdrawuni{258F}" }, "\u2590": { text: "\\textrtblock", macrospacer: true }, "\u2591": { text: "\\textltshade", macrospacer: true }, "\u2592": { text: "\\textshade", macrospacer: true }, "\u2593": { text: "\\textdkshade", macrospacer: true }, "\u2594": { text: "\\pmboxdrawuni{2594}" }, "\u2595": { text: "\\pmboxdrawuni{2595}" }, "\u2596": { text: "\\pmboxdrawuni{2596}" }, "\u2597": { text: "\\pmboxdrawuni{2597}" }, "\u2598": { text: "\\pmboxdrawuni{2598}" }, "\u2599": { text: "\\pmboxdrawuni{2599}" }, "\u259A": { text: "\\pmboxdrawuni{259A}" }, "\u259B": { text: "\\pmboxdrawuni{259B}" }, "\u259C": { text: "\\pmboxdrawuni{259C}" }, "\u259D": { text: "\\pmboxdrawuni{259D}" }, "\u259E": { text: "\\pmboxdrawuni{259E}" }, "\u259F": { text: "\\pmboxdrawuni{259F}" } } } };
  }
});

// node_modules/unicode2latex/tables/bibtex.json
var require_bibtex = __commonJS({
  "node_modules/unicode2latex/tables/bibtex.json"(exports2, module2) {
    module2.exports = { base: { "#": { text: "\\#", math: "\\#" }, $: { text: "\\$", math: "\\$" }, "%": { text: "\\%", math: "\\%" }, "&": { text: "\\&", math: "\\&" }, _: { text: "\\_", math: "\\_" }, "\xA0": { text: "~", math: "~" }, "\xA3": { text: "{\\pounds}", math: "\\pounds" }, "\xA7": { text: "{\\S}", math: "\\S" }, "\xA9": { text: "{\\copyright}", math: "\\copyright", alt: ["textcomp"] }, "\xAD": { text: "\\-", math: "\\-" }, "\xB6": { text: "{\\P}", math: "\\P", alt: ["textcomp"] }, "\u2020": { text: "{\\dag}", math: "\\dag" }, "\u2021": { text: "{\\ddag}", math: "\\ddag" }, "\u2026": { text: "{\\dots}", math: "\\dots" }, "\u205F": { text: "\\:", math: "\\:" }, "\u2212": { text: "-", math: "-" }, "\u263F": { text: "{\\mercury}", math: "\\mercury" }, "\u2643": { text: "{\\jupiter}", math: "\\jupiter" }, "\u2644": { text: "{\\saturn}", math: "\\saturn" }, "\u2645": { text: "{\\uranus}", math: "\\uranus" }, "\u2646": { text: "{\\neptune}", math: "\\neptune" }, "\u2647": { text: "{\\pluto}", math: "\\pluto" }, "\u2648": { text: "{\\aries}", math: "\\aries" }, "\u2649": { text: "{\\taurus}", math: "\\taurus" }, "\u264A": { text: "{\\gemini}", math: "\\gemini" }, "\u264B": { text: "{\\cancer}", math: "\\cancer" }, "\u264C": { text: "{\\leo}", math: "\\leo" }, "\u264D": { text: "{\\virgo}", math: "\\virgo" }, "\u264E": { text: "{\\libra}", math: "\\libra" }, "\u264F": { text: "{\\scorpio}", math: "\\scorpio" }, "\u2650": { text: "{\\sagittarius}", math: "\\sagittarius" }, "\u2651": { text: "{\\capricornus}", math: "\\capricornus" }, "\u2652": { text: "{\\aquarius}", math: "\\aquarius" }, "<": { math: "<" }, ">": { math: ">" }, "\\": { text: "{\\textbackslash}", math: "\\backslash" }, "|": { text: "{\\textbar}", math: "\\vert" }, "\xAC": { text: "{\\textlnot}", math: "\\lnot" }, "\xB0": { math: "^\\circ", alt: ["textcomp"] }, "\xB1": { text: "{\\textpm}", math: "\\pm" }, "\xB2": { math: "^{2}" }, "\xB3": { math: "^{3}" }, "\xB7": { math: "\\cdot" }, "\xB9": { math: "^{1}" }, "\xBC": { math: "\\frac{1}{4}" }, "\xBD": { math: "\\frac{1}{2}" }, "\xBE": { math: "\\frac{3}{4}" }, "\xD7": { text: "{\\texttimes}", math: "\\times" }, "\xF7": { text: "{\\textdiv}", math: "\\div" }, \u0127: { math: "\\hbar", alt: ["tipa"] }, \u0131: { text: "{\\i}", math: "\\imath" }, \u0192: { text: "{\\textflorin}", math: "f" }, "\u0237": { math: "\\jmath" }, \u025B: { math: "\\varepsilon" }, \u0263: { math: "\\gamma", alt: ["tipa"] }, \u02B0: { text: "\\textsuperscript{h}", math: "^{h}" }, \u02B2: { text: "\\textsuperscript{j}", math: "^{j}" }, \u02B3: { text: "\\textsuperscript{r}", math: "^{r}" }, \u02B7: { text: "\\textsuperscript{w}", math: "^{w}" }, \u02B8: { text: "\\textsuperscript{y}", math: "^{y}" }, \u02E1: { text: "\\textsuperscript{l}", math: "^{l}" }, \u02E2: { text: "\\textsuperscript{s}", math: "^{s}" }, \u02E3: { text: "\\textsuperscript{x}", math: "^{x}" }, "\u0305": { math: "\\overline" }, "\u030A": { text: "{\\r}", math: "\\mathring" }, "\u0331": { math: "\\underbar", alt: ["tipa"] }, "\u0332": { math: "\\underline" }, "\u0338": { math: "\\not" }, \u03A5\u0301: { math: "\\mathrm{'Y}" }, \u03A9\u0301: { math: "\\mathrm{'\\Omega}" }, \u03B9\u0308\u0301: { math: "\\acute{\\ddot{\\iota}}" }, \u0393: { math: "\\Gamma", alt: ["unicode-math"] }, \u0394: { math: "\\Delta", alt: ["unicode-math"] }, \u0398: { math: "\\Theta", alt: ["unicode-math"] }, \u039B: { math: "\\Lambda", alt: ["unicode-math"] }, \u039E: { math: "\\Xi" }, \u03A0: { math: "\\Pi" }, \u03A3: { math: "\\Sigma" }, \u03A5: { math: "\\Upsilon" }, \u03A6: { math: "\\Phi" }, \u03A8: { math: "\\Psi" }, \u03A9: { text: "{\\textohm}", math: "\\Omega" }, \u0399\u0308: { math: "\\mathrm{\\ddot{I}}" }, \u03A5\u0308: { math: "\\mathrm{\\ddot{Y}}" }, \u03B1\u0301: { math: "\\acute{\\alpha}" }, \u03B5\u0301: { math: "\\acute{\\epsilon}" }, \u03B7\u0301: { math: "\\acute{\\eta}" }, \u03B9\u0301: { math: "\\acute{\\iota}" }, \u03C5\u0308\u0301: { math: "\\acute{\\ddot{\\upsilon}}" }, \u03B1: { math: "\\alpha", alt: ["textalpha"] }, \u03B2: { math: "\\beta" }, \u03B3: { math: "\\gamma" }, \u03B4: { math: "\\delta" }, \u03B5: { math: "\\varepsilon" }, \u03B6: { math: "\\zeta" }, \u03B7: { math: "\\eta" }, \u03B8: { text: "{\\texttheta}", math: "\\theta" }, \u03B9: { math: "\\iota" }, \u03BA: { math: "\\kappa" }, \u03BB: { math: "\\lambda" }, \u03BC: { math: "\\mu" }, \u03BD: { math: "\\nu" }, \u03BE: { math: "\\xi" }, \u03C0: { math: "\\pi" }, "\u{1D70C}": { math: "\\rho", alt: ["unicode-math"] }, \u03C1: { math: "\\rho" }, \u03C2: { math: "\\varsigma" }, \u03C3: { math: "\\sigma" }, \u03C4: { math: "\\tau" }, \u03C5: { math: "\\upsilon" }, \u03C6: { math: "\\varphi" }, \u03C7: { math: "\\chi" }, \u03C8: { math: "\\psi" }, \u03C9: { math: "\\omega" }, \u03B9\u0308: { math: "\\ddot{\\iota}" }, \u03C5\u0308: { math: "\\ddot{\\upsilon}" }, \u03C5\u0301: { math: "\\acute{\\upsilon}" }, \u03C9\u0301: { math: "\\acute{\\omega}" }, \u03D1: { text: "{\\textvartheta}", math: "\\vartheta" }, \u03D2: { math: "\\Upsilon" }, \u03D5: { math: "\\phi" }, \u03D6: { math: "\\varpi" }, "\u03D8": { math: "\\Qoppa" }, "\u03D9": { math: "\\qoppa" }, \u03DA: { math: "\\Stigma" }, \u03DB: { math: "\\stigma" }, \u03DC: { math: "\\Digamma" }, \u03DD: { math: "\\digamma" }, \u03DE: { math: "\\Koppa" }, \u03DF: { math: "\\koppa" }, \u03E0: { math: "\\Sampi" }, \u03E1: { math: "\\sampi" }, \u03F1: { math: "\\varrho" }, "\u03F4": { text: "{\\textTheta}", math: "\\upvarTheta" }, "\u03F5": { math: "\\epsilon" }, "\u03F6": { math: "\\backepsilon", alt: ["unicode-math"] }, "\u0871": { math: "\\\\backslash" }, "\u1D43": { text: "\\textsuperscript{a}", math: "^{a}" }, "\u1D2C": { text: "\\textsuperscript{A}", math: "^{A}" }, "\u1D47": { text: "\\textsuperscript{b}", math: "^{b}" }, "\u1D48": { text: "\\textsuperscript{d}", math: "^{d}" }, "\u1D49": { text: "\\textsuperscript{e}", math: "^{e}" }, "\u1D4D": { text: "\\textsuperscript{g}", math: "^{g}" }, "\u1D4F": { text: "\\textsuperscript{k}", math: "^{k}" }, "\u1D50": { text: "\\textsuperscript{m}", math: "^{m}" }, "\u1D52": { text: "\\textsuperscript{o}", math: "^{o}" }, "\u1D56": { text: "\\textsuperscript{p}", math: "^{p}" }, "\u1D57": { text: "\\textsuperscript{t}", math: "^{t}" }, "\u1D58": { text: "\\textsuperscript{u}", math: "^{u}" }, "\u1D5B": { text: "\\textsuperscript{v}", math: "^{v}" }, "\u1D9C": { text: "\\textsuperscript{c}", math: "^{c}" }, "\u1DA0": { text: "\\textsuperscript{f}", math: "^{f}" }, "\u1DBB": { text: "\\textsuperscript{z}", math: "^{z}" }, "\u2003": { math: "\\quad" }, "\u200A": { math: "\\mkern1mu" }, "\u2022": { math: "\\bullet", alt: ["textcomp"] }, "\u2032": { math: "\\prime" }, "\u2033": { math: "{''}", alt: ["unicode-math"] }, "\u2034": { math: "{'''}", alt: ["unicode-math"] }, "\u2057": { math: "''''", alt: ["unicode-math"] }, "\u2070": { math: "^{0}" }, "\u2071": { text: "\\textsuperscript{i}", math: "^{i}" }, "\u2074": { math: "^{4}" }, "\u2075": { math: "^{5}" }, "\u2076": { math: "^{6}" }, "\u2077": { math: "^{7}" }, "\u2078": { math: "^{8}" }, "\u2079": { math: "^{9}" }, "\u207A": { math: "^{+}" }, "\u207B": { math: "^{-}" }, "\u207C": { math: "^{=}" }, "\u207D": { math: "^{(}" }, "\u207E": { math: "^{)}" }, \u207F: { math: "^{n}" }, "\u2080": { math: "_{0}" }, "\u2081": { math: "_{1}" }, "\u2082": { math: "_{2}" }, "\u2083": { math: "_{3}" }, "\u2084": { math: "_{4}" }, "\u2085": { math: "_{5}" }, "\u2086": { math: "_{6}" }, "\u2087": { math: "_{7}" }, "\u2088": { math: "_{8}" }, "\u2089": { math: "_{9}" }, "\u208A": { math: "_{+}" }, "\u208B": { math: "_{-}" }, "\u208C": { math: "_{=}" }, "\u208D": { math: "_{(}" }, "\u208E": { math: "_{)}" }, "\u2090": { text: "\\textsubscript{a}", math: "_{a}" }, "\u2091": { text: "\\textsubscript{e}", math: "_{e}" }, "\u2092": { text: "\\textsubscript{o}", math: "_{o}" }, "\u2093": { text: "\\textsubscript{x}", math: "_{x}" }, "\u2095": { text: "\\textsubscript{h}", math: "_{h}" }, "\u2096": { text: "\\textsubscript{k}", math: "_{k}" }, "\u2097": { text: "\\textsubscript{l}", math: "_{l}" }, "\u2098": { text: "\\textsubscript{m}", math: "_{m}" }, "\u2099": { text: "\\textsubscript{n}", math: "_{n}" }, "\u209A": { text: "\\textsubscript{p}", math: "_{p}" }, "\u209B": { text: "\\textsubscript{s}", math: "_{s}" }, "\u209C": { text: "\\textsubscript{t}", math: "_{t}" }, "\u20D0": { math: "\\lvec" }, "\u20D6": { math: "\\LVec" }, \u2102: { math: "\\mathbb{C}" }, \u2107: { math: "\\Euler" }, \u210B: { math: "\\mathcal{H}", alt: ["mathrsfs"] }, \u210C: { math: "\\mathfrak{H}" }, \u210D: { math: "\\mathbb{H}" }, \u2111: { math: "\\mathfrak{I}" }, \u2113: { math: "\\ell" }, \u2115: { math: "\\mathbb{N}" }, "\u2118": { math: "\\wp" }, \u2119: { math: "\\mathbb{P}" }, \u211A: { math: "\\mathbb{Q}" }, \u211C: { math: "\\mathfrak{R}" }, \u211D: { math: "\\mathbb{R}" }, \u2124: { math: "\\mathbb{Z}" }, \u2128: { math: "\\mathfrak{Z}" }, A\u030A: { text: "{\\AA}", math: "\\Angstroem" }, \u212D: { math: "\\mathfrak{C}" }, \u2135: { math: "\\aleph" }, "\u213C": { math: "\\mathbb{\\pi}" }, "\u213D": { math: "\\mathbb{\\gamma}" }, "\u213E": { math: "\\mathbb{\\Gamma}" }, "\u213F": { math: "\\mathbb{\\Pi}" }, "\u2140": { math: "\\mathbb{\\Sigma}" }, "\u2146": { math: "\\DifferentialD" }, "\u2147": { math: "\\ExponetialE" }, "\u2148": { math: "\\ComplexI" }, "\u2149": { math: "\\ComplexJ" }, "\u214B": { math: "\\invamp" }, "\u2150": { math: "\\frac{1}{7}" }, "\u2151": { math: "\\frac{1}{9}" }, "\u2152": { math: "\\frac{1}{10}" }, "\u2153": { math: "\\frac{1}{3}" }, "\u2154": { math: "\\frac{2}{3}" }, "\u2155": { math: "\\frac{1}{5}" }, "\u2156": { math: "\\frac{2}{5}" }, "\u2157": { math: "\\frac{3}{5}" }, "\u2158": { math: "\\frac{4}{5}" }, "\u2159": { math: "\\frac{1}{6}" }, "\u215A": { math: "\\frac{5}{6}" }, "\u215B": { math: "\\frac{1}{8}" }, "\u215C": { math: "\\frac{3}{8}" }, "\u215D": { math: "\\frac{5}{8}" }, "\u215E": { math: "\\frac{7}{8}" }, "\u215F": { math: "\\frac{1}" }, "\u2189": { math: "\\frac{0}{3}" }, "\u2190": { text: "{\\textleftarrow}", math: "\\leftarrow" }, "\u2191": { math: "\\uparrow", alt: ["textcomp"] }, "\u2192": { math: "\\rightarrow", alt: ["textcomp"] }, "\u2193": { text: "{\\textdownarrow}", math: "\\downarrow" }, "\u2194": { math: "\\leftrightarrow" }, "\u2195": { math: "\\updownarrow" }, "\u2196": { math: "\\nwarrow" }, "\u2197": { math: "\\nearrow" }, "\u2198": { math: "\\searrow" }, "\u2199": { math: "\\swarrow" }, "\u219C": { math: "\\arrowwaveleft" }, "\u219D": { math: "\\arrowwaveright" }, "\u21A6": { math: "\\mapsto" }, "\u21A9": { math: "\\hookleftarrow" }, "\u21AA": { math: "\\hookrightarrow" }, "\u21AF": { math: "\\lightning" }, "\u21B2": { math: "\\dlsh" }, "\u21BB": { math: "\\circlearrowright" }, "\u21BC": { math: "\\leftharpoonup" }, "\u21BD": { math: "\\leftharpoondown" }, "\u21C0": { math: "\\rightharpoonup" }, "\u21C5": { math: "\\dblarrowupdown" }, "\u21CC": { math: "\\rightleftharpoons" }, "\u21D0": { math: "\\Leftarrow" }, "\u21D1": { math: "\\Uparrow" }, "\u21D2": { math: "\\Rightarrow" }, "\u21D3": { math: "\\Downarrow" }, "\u21D4": { math: "\\Leftrightarrow" }, "\u21D5": { math: "\\Updownarrow" }, "\u21E0": { math: "\\dashleftarrow" }, "\u21E2": { math: "\\dashrightarrow" }, "\u21E4": { math: "\\LeftArrowBar" }, "\u21E5": { math: "\\RightArrowBar" }, "\u21F5": { math: "\\DownArrowUpArrow" }, "\u21F8": { math: "\\pfun" }, "\u21FB": { math: "\\ffun" }, "\u2200": { math: "\\forall" }, "\u2202": { math: "\\partial" }, "\u2203": { math: "\\exists" }, "\u2208": { math: "\\in" }, "\u2208\u0338": { math: "\\notin" }, "\u220B": { math: "\\ni" }, "\u220B\u0338": { math: "\\not\\ni" }, "\u220F": { math: "\\prod" }, "\u2210": { math: "\\coprod" }, "\u2211": { math: "\\sum" }, "\u2213": { math: "\\mp" }, "\u2217": { math: "\\ast" }, "\u2218": { math: "\\circ" }, "\u2219": { math: "\\bullet" }, "\u221B": { math: "\\sqrt[3]" }, "\u221C": { math: "\\sqrt[4]" }, "\u221D": { math: "\\propto" }, "\u221E": { math: "\\infty" }, "\u2220": { math: "\\angle" }, "\u2223": { math: "\\mid" }, "\u2225": { math: "\\parallel" }, "\u2227": { math: "\\wedge" }, "\u2228": { math: "\\vee" }, "\u2229": { math: "\\cap" }, "\u222A": { math: "\\cup" }, "\u222B": { math: "\\int" }, "\u222C": { math: "{\\int\\!\\int}" }, "\u222D": { math: "{\\int\\!\\int\\!\\int}" }, "\u222E": { math: "\\oint" }, "\u222F": { math: "\\surfintegral" }, "\u2230": { math: "\\volintegral" }, "\u2231": { math: "\\clwintegral" }, "\u2236": { math: ":" }, "\u223A": { math: "\\mathbin{{:}\\!\\!{-}\\!\\!{:}}" }, "\u223B": { math: "\\homothetic" }, "\u223C": { math: "\\sim" }, "\u223E": { math: "\\lazysinv" }, "\u223F": { math: "\\AC" }, "\u2240": { math: "\\wr" }, "\u223C\u0338": { math: "\\not\\sim" }, "\u2242\u0338": { math: "\\NotEqualTilde" }, "\u2243": { math: "\\simeq" }, "\u2243\u0338": { math: "\\not\\simeq" }, "\u2245": { math: "\\cong" }, "\u2246": { math: "\\approxnotequal" }, "\u2245\u0338": { math: "\\not\\cong" }, "\u2248": { math: "\\approx", alt: ["inputenx"] }, "\u2248\u0338": { math: "\\not\\approx" }, "\u224B": { math: "\\tildetrpl" }, "\u224B\u0338": { math: "\\not\\apid" }, "\u224C": { math: "\\allequal" }, "\u224D": { math: "\\asymp" }, "\u224E\u0338": { math: "\\NotHumpDownHump" }, "\u224F\u0338": { math: "\\NotHumpEqual" }, "\u2250": { math: "\\doteq" }, "\u2250\u0338": { math: "\\not\\doteq" }, "\u2251": { math: "\\doteqdot" }, "\u2254": { text: ":=", math: ":=", alt: ["unicode-math"] }, "\u2255": { math: "=:" }, "\u2259": { math: "\\estimates" }, "\u225B": { math: "\\starequal" }, "=\u0338": { math: "\\neq" }, "\u2261": { math: "\\equiv" }, "\u2261\u0338": { math: "\\not\\equiv" }, "\u2264": { math: "\\leq" }, "\u2265": { math: "\\geq" }, "\u2266": { math: "\\leqq" }, "\u2267": { math: "\\geqq" }, "\u2268\uFE00": { math: "\\lvertneqq" }, "\u2269\uFE00": { math: "\\gvertneqq" }, "\u226A": { math: "\\ll" }, "\u226A\u0338": { math: "\\NotLessLess" }, "\u226B": { math: "\\gg" }, "\u226B\u0338": { math: "\\NotGreaterGreater" }, "\u224D\u0338": { math: "{\\not\\kern-0.3em\\times}", alt: ["unicode-math"] }, "<\u0338": { math: "\\not<" }, ">\u0338": { math: "\\not>" }, "\u2264\u0338": { math: "\\not\\leq" }, "\u2265\u0338": { math: "\\not\\geq" }, "\u2272": { math: "\\lessequivlnt" }, "\u2273": { math: "\\greaterequivlnt" }, "\u2276\u0338": { math: "\\notlessgreater" }, "\u2277\u0338": { math: "\\notgreaterless" }, "\u227A": { math: "\\prec" }, "\u227B": { math: "\\succ" }, "\u227E": { math: "\\precapprox" }, "\u227E\u0338": { math: "\\NotPrecedesTilde" }, "\u227F": { math: "\\succapprox" }, "\u227F\u0338": { math: "\\NotSucceedsTilde" }, "\u227A\u0338": { math: "\\not\\prec" }, "\u227B\u0338": { math: "\\not\\succ" }, "\u2282": { math: "\\subset" }, "\u2283": { math: "\\supset" }, "\u2282\u0338": { math: "\\not\\subset" }, "\u2283\u0338": { math: "\\not\\supset" }, "\u2286": { math: "\\subseteq" }, "\u2287": { math: "\\supseteq" }, "\u2286\u0338": { math: "\\not\\subseteq" }, "\u2287\u0338": { math: "\\not\\supseteq" }, "\u228A\uFE00": { math: "\\varsubsetneqq" }, "\u228B\uFE00": { math: "\\varsupsetneq" }, "\u228E": { math: "\\uplus" }, "\u228F\u0338": { math: "\\NotSquareSubset" }, "\u2290\u0338": { math: "\\NotSquareSuperset" }, "\u2291": { math: "\\sqsubseteq" }, "\u2292": { math: "\\sqsupseteq" }, "\u2293": { math: "\\sqcap" }, "\u2294": { math: "\\sqcup" }, "\u2295": { math: "\\oplus" }, "\u2296": { math: "\\ominus" }, "\u2297": { math: "\\otimes" }, "\u2298": { math: "\\oslash" }, "\u2299": { math: "\\odot" }, "\u22A2": { math: "\\vdash" }, "\u22A3": { math: "\\dashv" }, "\u22A4": { math: "\\top" }, "\u22A5": { math: "\\perp" }, "\u22A7": { math: "\\truestate" }, "\u22A8": { math: "\\forcesextra" }, "\u22B6": { math: "\\original" }, "\u22B7": { math: "\\image" }, "\u22B9": { math: "\\hermitconjmatrix" }, "\u22BE": { math: "\\rightanglearc" }, "\u22C0": { math: "\\bigwedge" }, "\u22C1": { math: "\\bigvee" }, "\u22C2": { math: "\\bigcap" }, "\u22C3": { math: "\\bigcup" }, "\u22C4": { math: "\\diamond" }, "\u22C5": { math: "\\cdot" }, "\u22C6": { math: "\\star" }, "\u22C8": { math: "\\bowtie" }, "\u22D8": { math: "\\verymuchless" }, "\u22D9": { math: "\\verymuchgreater" }, "\u2291\u0338": { math: "\\not\\sqsubseteq" }, "\u2292\u0338": { math: "\\not\\sqsupseteq" }, "\u22B2\u0338": { math: "\\ntriangleleft" }, "\u22B3\u0338": { math: "\\ntriangleright" }, "\u22EE": { math: "\\vdots" }, "\u22EF": { math: "\\cdots" }, "\u22F0": { math: "\\upslopeellipsis" }, "\u22F1": { math: "\\ddots" }, "\u22F6": { math: "\\barin" }, "\u2306": { math: "\\perspcorrespond" }, "\u2308": { math: "\\lceil" }, "\u2309": { math: "\\rceil" }, "\u230A": { math: "\\lfloor" }, "\u230B": { math: "\\rfloor" }, "\u2311": { math: "\\wasylozenge" }, "\u2315": { math: "\\recorder" }, "\u2316": { math: '{\\mathchar"2208}' }, "\u2322": { math: "\\frown" }, "\u2323": { math: "\\smile" }, "\u3008": { text: "{\\textlangle}", math: "\\langle" }, "\u3009": { text: "{\\textrangle}", math: "\\rangle" }, "\u2339": { math: "\\APLinv" }, "\u233F": { math: "\\notslash" }, "\u2340": { math: "\\notbackslash" }, "\u2347": { math: "\\APLleftarrowbox" }, "\u2348": { math: "\\APLrightarrowbox" }, "\u2349": { math: "\\invdiameter" }, "\u2350": { math: "\\APLuparrowbox" }, "\u2357": { math: "\\APLdownarrowbox" }, "\u235D": { math: "\\APLcomment" }, "\u235E": { math: "\\APLinput" }, "\u235F": { math: "\\APLlog" }, "\u23B0": { math: "\\lmoustache" }, "\u23B1": { math: "\\rmoustache" }, "\u24C8": { math: "\\circledS" }, "\u2571": { math: "\\diagup" }, "\u25A1": { math: "\\square" }, "\u25B6": { math: "\\RHD" }, "\u25B7": { math: "\\rhd" }, "\u25BD": { math: "\\bigtriangledown" }, "\u25C0": { math: "\\LHD" }, "\u25C1": { math: "\\lhd" }, "\u25C6": { text: "\\ding{117}", math: "\\Diamondblack" }, "\u25C7": { math: "\\Diamond" }, "\u25CB": { math: "\\bigcirc" }, "\u25CF": { text: "\\ding{108}", math: "\\CIRCLE" }, "\u25EF": { text: "{\\textbigcircle}", math: "\\bigcirc" }, "\u2609": { math: "\\Sun" }, "\u2610": { math: "\\Square" }, "\u2611": { math: "\\CheckedBox" }, "\u2612": { math: "\\XBox" }, "\u2615": { math: "\\steaming" }, "\u261E": { text: "\\ding{43}", math: "\\pointright" }, "\u2620": { math: "\\skull" }, "\u2622": { math: "\\radiation" }, "\u2623": { math: "\\biohazard" }, "\u262F": { math: "\\yinyang" }, "\u2639": { math: "\\frownie" }, "\u263A": { math: "\\smiley" }, "\u2641": { math: "\\earth" }, "\u2660": { text: "\\ding{171}", math: "\\spadesuit" }, "\u2661": { math: "\\heartsuit" }, "\u2662": { math: "\\diamondsuit" }, "\u2663": { math: "\\clubsuit" }, "\u266D": { math: "\\flat" }, "\u266E": { math: "\\natural" }, "\u266F": { math: "\\sharp" }, "\u267B": { math: "\\recycle" }, "\u2693": { math: "\\anchor" }, "\u2694": { math: "\\swords" }, "\u26A0": { math: "\\warning" }, "\u26AA": { math: "\\medcirc" }, "\u26AB": { math: "\\medbullet" }, "\u270E": { text: "\\ding{46}", math: "\\pencil" }, "\u2717": { text: "\\ding{55}", math: "\\ballotx" }, "\u27A2": { text: "\\ding{226}", math: "\\arrowbullet" }, "\u27C2": { math: "\\perp" }, "\u27C5": { math: "\\Lbag" }, "\u27C6": { math: "\\Rbag" }, "\u27D0": { math: "\\Diamonddot" }, "\u27E6": { math: "\\llbracket" }, "\u27E7": { math: "\\rrbracket" }, "\u27E8": { math: "\\langle" }, "\u27E9": { math: "\\rangle" }, "\u27EA": { math: "\\lang" }, "\u27EE": { math: "\\lgroup" }, "\u27EF": { math: "\\rgroup" }, "\u27F5": { math: "\\longleftarrow" }, "\u27F6": { math: "\\longrightarrow" }, "\u27F7": { math: "\\longleftrightarrow" }, "\u27F8": { math: "\\Longleftarrow" }, "\u27F9": { math: "\\Longrightarrow" }, "\u27FA": { math: "\\Longleftrightarrow" }, "\u27FC": { math: "\\longmapsto" }, "\u2900": { math: "\\psur" }, "\u2912": { math: "\\UpArrowBar" }, "\u2913": { math: "\\DownArrowBar" }, "\u2914": { math: "\\pinj" }, "\u2915": { math: "\\finj" }, "\u2916": { math: "\\bij" }, "\u2940": { math: "\\Elolarr" }, "\u2941": { math: "\\Elorarr" }, "\u294A": { math: "\\leftrightharpoon" }, "\u294B": { math: "\\rightleftharpoon" }, "\u294F": { math: "\\RightUpDownVector" }, "\u2951": { math: "\\LeftUpDownVector" }, "\u2952": { math: "\\LeftVectorBar" }, "\u2953": { math: "\\RightVectorBar" }, "\u2954": { math: "\\RightUpVectorBar" }, "\u2955": { math: "\\RightDownVectorBar" }, "\u2956": { math: "\\DownLeftVectorBar" }, "\u2957": { math: "\\DownRightVectorBar" }, "\u2958": { math: "\\LeftUpVectorBar" }, "\u2959": { math: "\\LeftDownVectorBar" }, "\u295A": { math: "\\LeftTeeVector" }, "\u295B": { math: "\\RightTeeVector" }, "\u295C": { math: "\\RightUpTeeVector" }, "\u295D": { math: "\\RightDownTeeVector" }, "\u295E": { math: "\\DownLeftTeeVector" }, "\u295F": { math: "\\DownRightTeeVector" }, "\u2960": { math: "\\LeftUpTeeVector" }, "\u2961": { math: "\\LeftDownTeeVector" }, "\u2962": { math: "\\leftleftharpoons" }, "\u2963": { math: "\\upupharpoons" }, "\u2964": { math: "\\rightrightharpoons" }, "\u2965": { math: "\\downdownharpoons" }, "\u296A": { math: "\\leftbarharpoon" }, "\u296B": { math: "\\barleftharpoon" }, "\u296C": { math: "\\rightbarharpoon" }, "\u296D": { math: "\\barrightharpoon" }, "\u296E": { math: "\\UpEquilibrium" }, "\u296F": { math: "\\ReverseUpEquilibrium" }, "\u2970": { math: "\\RoundImplies" }, "\u2988": { math: "\\rimg" }, "\u2989": { math: "\\lblot" }, "\u298A": { math: "\\rblot" }, "\u299C": { math: "\\Angle" }, "\u29C4": { math: "\\boxslash" }, "\u29CF": { math: "\\LeftTriangleBar" }, "\u29CF\u0338": { math: "\\NotLeftTriangleBar" }, "\u29D0": { math: "\\RightTriangleBar" }, "\u29D0\u0338": { math: "\\NotRightTriangleBar" }, "\u29DF": { math: "\\multimapboth" }, "\u29F5": { math: "\\setminus" }, "\u29F9": { math: "\\zhide" }, "\u2A00": { math: "\\bigodot" }, "\u2A01": { math: "\\bigoplus" }, "\u2A02": { math: "\\bigotimes" }, "\u2A06": { math: "\\Elxsqcup" }, "\u2A09": { math: "\\varprod" }, "\u2A0F": { math: "\\clockoint" }, "\u2A16": { math: "\\sqrint" }, "\u2A3F": { math: "\\amalg" }, "\u2A56": { math: "\\ElOr" }, "\u2A6E": { math: "\\stackrel{*}{=}" }, "\u2A75": { math: "\\Equal" }, "\u2A76": { math: "\\Same" }, "\u2A7D": { math: "\\leq", alt: ["amssymb", "unicode-math"] }, "\u2AA1": { math: "\\NestedLessLess" }, "\u2AA1\u0338": { math: "\\NotNestedLessLess" }, "\u2AA2": { math: "\\NestedGreaterGreater" }, "\u2AA2\u0338": { math: "\\NotNestedGreaterGreater" }, "\u2AA6": { math: "\\leftslice" }, "\u2AA7": { math: "\\rightslice" }, "\u2AAF": { math: "\\preceq" }, "\u2AAF\u0338": { math: "\\not\\preceq" }, "\u2AB0": { math: "\\succeq" }, "\u2AB0\u0338": { math: "\\not\\succeq" }, "\u2ABB": { math: "\\llcurly" }, "\u2ABC": { math: "\\ggcurly" }, "\u2AC5\u0338": { math: "\\nsubseteqq" }, "\u2AC6\u0338": { math: "\\nsupseteqq" }, "\u2ADD\u0338": { math: "\\forks", alt: ["unicode-math"] }, "\u2AEA": { math: "\\Top" }, "\u2AFD": { math: "{{/}\\!\\!{/}}" }, "\u2AFD\u20E5": { math: "{\\rlap{\\textbackslash}{{/}\\!\\!{/}}}" }, "\u3014": { math: "\\lbrbrak" }, "\u3015": { math: "\\rbrbrak" }, "\u301A": { math: "\\openbracketleft" }, "\u301B": { math: "\\openbracketright" }, "\u{1D400}": { math: "\\mathbf{A}", alt: ["unicode-math"] }, "\u{1D401}": { math: "\\mathbf{B}", alt: ["unicode-math"] }, "\u{1D402}": { math: "\\mathbf{C}", alt: ["unicode-math"] }, "\u{1D403}": { math: "\\mathbf{D}", alt: ["unicode-math"] }, "\u{1D404}": { math: "\\mathbf{E}", alt: ["unicode-math"] }, "\u{1D405}": { math: "\\mathbf{F}", alt: ["unicode-math"] }, "\u{1D406}": { math: "\\mathbf{G}", alt: ["unicode-math"] }, "\u{1D407}": { math: "\\mathbf{H}", alt: ["unicode-math"] }, "\u{1D408}": { math: "\\mathbf{I}", alt: ["unicode-math"] }, "\u{1D409}": { math: "\\mathbf{J}", alt: ["unicode-math"] }, "\u{1D40A}": { math: "\\mathbf{K}", alt: ["unicode-math"] }, "\u{1D40B}": { math: "\\mathbf{L}", alt: ["unicode-math"] }, "\u{1D40C}": { math: "\\mathbf{M}", alt: ["unicode-math"] }, "\u{1D40D}": { math: "\\mathbf{N}", alt: ["unicode-math"] }, "\u{1D40E}": { math: "\\mathbf{O}", alt: ["unicode-math"] }, "\u{1D40F}": { math: "\\mathbf{P}", alt: ["unicode-math"] }, "\u{1D410}": { math: "\\mathbf{Q}", alt: ["unicode-math"] }, "\u{1D411}": { math: "\\mathbf{R}", alt: ["unicode-math"] }, "\u{1D412}": { math: "\\mathbf{S}", alt: ["unicode-math"] }, "\u{1D413}": { math: "\\mathbf{T}", alt: ["unicode-math"] }, "\u{1D414}": { math: "\\mathbf{U}", alt: ["unicode-math"] }, "\u{1D415}": { math: "\\mathbf{V}", alt: ["unicode-math"] }, "\u{1D416}": { math: "\\mathbf{W}", alt: ["unicode-math"] }, "\u{1D417}": { math: "\\mathbf{X}", alt: ["unicode-math"] }, "\u{1D418}": { math: "\\mathbf{Y}", alt: ["unicode-math"] }, "\u{1D419}": { math: "\\mathbf{Z}", alt: ["unicode-math"] }, "\u{1D41A}": { math: "\\mathbf{a}", alt: ["unicode-math"] }, "\u{1D41B}": { math: "\\mathbf{b}", alt: ["unicode-math"] }, "\u{1D41C}": { math: "\\mathbf{c}", alt: ["unicode-math"] }, "\u{1D41D}": { math: "\\mathbf{d}", alt: ["unicode-math"] }, "\u{1D41E}": { math: "\\mathbf{e}", alt: ["unicode-math"] }, "\u{1D41F}": { math: "\\mathbf{f}", alt: ["unicode-math"] }, "\u{1D420}": { math: "\\mathbf{g}", alt: ["unicode-math"] }, "\u{1D421}": { math: "\\mathbf{h}", alt: ["unicode-math"] }, "\u{1D422}": { math: "\\mathbf{i}", alt: ["unicode-math"] }, "\u{1D423}": { math: "\\mathbf{j}", alt: ["unicode-math"] }, "\u{1D424}": { math: "\\mathbf{k}", alt: ["unicode-math"] }, "\u{1D425}": { math: "\\mathbf{l}", alt: ["unicode-math"] }, "\u{1D426}": { math: "\\mathbf{m}", alt: ["unicode-math"] }, "\u{1D427}": { math: "\\mathbf{n}", alt: ["unicode-math"] }, "\u{1D428}": { math: "\\mathbf{o}", alt: ["unicode-math"] }, "\u{1D429}": { math: "\\mathbf{p}", alt: ["unicode-math"] }, "\u{1D42A}": { math: "\\mathbf{q}", alt: ["unicode-math"] }, "\u{1D42B}": { math: "\\mathbf{r}", alt: ["unicode-math"] }, "\u{1D42C}": { math: "\\mathbf{s}", alt: ["unicode-math"] }, "\u{1D42D}": { math: "\\mathbf{t}", alt: ["unicode-math"] }, "\u{1D42E}": { math: "\\mathbf{u}", alt: ["unicode-math"] }, "\u{1D42F}": { math: "\\mathbf{v}", alt: ["unicode-math"] }, "\u{1D430}": { math: "\\mathbf{w}", alt: ["unicode-math"] }, "\u{1D431}": { math: "\\mathbf{x}", alt: ["unicode-math"] }, "\u{1D432}": { math: "\\mathbf{y}", alt: ["unicode-math"] }, "\u{1D433}": { math: "\\mathbf{z}", alt: ["unicode-math"] }, "\u{1D434}": { math: "A", alt: ["unicode-math"] }, "\u{1D435}": { math: "B", alt: ["unicode-math"] }, "\u{1D436}": { math: "C", alt: ["unicode-math"] }, "\u{1D437}": { math: "D", alt: ["unicode-math"] }, "\u{1D438}": { math: "E", alt: ["unicode-math"] }, "\u{1D439}": { math: "F", alt: ["unicode-math"] }, "\u{1D43A}": { math: "G", alt: ["unicode-math"] }, "\u{1D43B}": { math: "H", alt: ["unicode-math"] }, "\u{1D43C}": { math: "I", alt: ["unicode-math"] }, "\u{1D43D}": { math: "J", alt: ["unicode-math"] }, "\u{1D43E}": { math: "K", alt: ["unicode-math"] }, "\u{1D43F}": { math: "L", alt: ["unicode-math"] }, "\u{1D440}": { math: "M", alt: ["unicode-math"] }, "\u{1D441}": { math: "N", alt: ["unicode-math"] }, "\u{1D442}": { math: "O", alt: ["unicode-math"] }, "\u{1D443}": { math: "P", alt: ["unicode-math"] }, "\u{1D444}": { math: "Q", alt: ["unicode-math"] }, "\u{1D445}": { math: "R", alt: ["unicode-math"] }, "\u{1D446}": { math: "S", alt: ["unicode-math"] }, "\u{1D447}": { math: "T", alt: ["unicode-math"] }, "\u{1D448}": { math: "U", alt: ["unicode-math"] }, "\u{1D449}": { math: "V", alt: ["unicode-math"] }, "\u{1D44A}": { math: "W", alt: ["unicode-math"] }, "\u{1D44B}": { math: "X", alt: ["unicode-math"] }, "\u{1D44C}": { math: "Y", alt: ["unicode-math"] }, "\u{1D44D}": { math: "Z", alt: ["unicode-math"] }, "\u{1D44E}": { math: "a", alt: ["unicode-math"] }, "\u{1D44F}": { math: "b", alt: ["unicode-math"] }, "\u{1D450}": { math: "c", alt: ["unicode-math"] }, "\u{1D451}": { math: "d", alt: ["unicode-math"] }, "\u{1D452}": { math: "e", alt: ["unicode-math"] }, "\u{1D453}": { math: "f", alt: ["unicode-math"] }, "\u{1D454}": { math: "g", alt: ["unicode-math"] }, "\u{1D456}": { math: "i", alt: ["unicode-math"] }, "\u{1D457}": { math: "j", alt: ["unicode-math"] }, "\u{1D458}": { math: "k", alt: ["unicode-math"] }, "\u{1D459}": { math: "l", alt: ["unicode-math"] }, "\u{1D45A}": { math: "m", alt: ["unicode-math"] }, "\u{1D45B}": { math: "n", alt: ["unicode-math"] }, "\u{1D45C}": { math: "o", alt: ["unicode-math"] }, "\u{1D45D}": { math: "p", alt: ["unicode-math"] }, "\u{1D45E}": { math: "q", alt: ["unicode-math"] }, "\u{1D45F}": { math: "r", alt: ["unicode-math"] }, "\u{1D460}": { math: "s", alt: ["unicode-math"] }, "\u{1D461}": { math: "t", alt: ["unicode-math"] }, "\u{1D462}": { math: "u", alt: ["unicode-math"] }, "\u{1D463}": { math: "v", alt: ["unicode-math"] }, "\u{1D464}": { math: "w", alt: ["unicode-math"] }, "\u{1D465}": { math: "x", alt: ["unicode-math"] }, "\u{1D466}": { math: "y", alt: ["unicode-math"] }, "\u{1D467}": { math: "z", alt: ["unicode-math"] }, "\u{1D468}": { math: "\\mathbit{A}", alt: ["unicode-math"] }, "\u{1D469}": { math: "\\mathbit{B}", alt: ["unicode-math"] }, "\u{1D46A}": { math: "\\mathbit{C}", alt: ["unicode-math"] }, "\u{1D46B}": { math: "\\mathbit{D}", alt: ["unicode-math"] }, "\u{1D46C}": { math: "\\mathbit{E}", alt: ["unicode-math"] }, "\u{1D46D}": { math: "\\mathbit{F}", alt: ["unicode-math"] }, "\u{1D46E}": { math: "\\mathbit{G}", alt: ["unicode-math"] }, "\u{1D46F}": { math: "\\mathbit{H}", alt: ["unicode-math"] }, "\u{1D470}": { math: "\\mathbit{I}", alt: ["unicode-math"] }, "\u{1D471}": { math: "\\mathbit{J}", alt: ["unicode-math"] }, "\u{1D472}": { math: "\\mathbit{K}", alt: ["unicode-math"] }, "\u{1D473}": { math: "\\mathbit{L}", alt: ["unicode-math"] }, "\u{1D474}": { math: "\\mathbit{M}", alt: ["unicode-math"] }, "\u{1D475}": { math: "\\mathbit{N}", alt: ["unicode-math"] }, "\u{1D476}": { math: "\\mathbit{O}", alt: ["unicode-math"] }, "\u{1D477}": { math: "\\mathbit{P}", alt: ["unicode-math"] }, "\u{1D478}": { math: "\\mathbit{Q}", alt: ["unicode-math"] }, "\u{1D479}": { math: "\\mathbit{R}", alt: ["unicode-math"] }, "\u{1D47A}": { math: "\\mathbit{S}", alt: ["unicode-math"] }, "\u{1D47B}": { math: "\\mathbit{T}", alt: ["unicode-math"] }, "\u{1D47C}": { math: "\\mathbit{U}", alt: ["unicode-math"] }, "\u{1D47D}": { math: "\\mathbit{V}", alt: ["unicode-math"] }, "\u{1D47E}": { math: "\\mathbit{W}", alt: ["unicode-math"] }, "\u{1D47F}": { math: "\\mathbit{X}", alt: ["unicode-math"] }, "\u{1D480}": { math: "\\mathbit{Y}", alt: ["unicode-math"] }, "\u{1D481}": { math: "\\mathbit{Z}", alt: ["unicode-math"] }, "\u{1D482}": { math: "\\mathbit{a}", alt: ["unicode-math"] }, "\u{1D483}": { math: "\\mathbit{b}", alt: ["unicode-math"] }, "\u{1D484}": { math: "\\mathbit{c}", alt: ["unicode-math"] }, "\u{1D485}": { math: "\\mathbit{d}", alt: ["unicode-math"] }, "\u{1D486}": { math: "\\mathbit{e}", alt: ["unicode-math"] }, "\u{1D487}": { math: "\\mathbit{f}", alt: ["unicode-math"] }, "\u{1D488}": { math: "\\mathbit{g}", alt: ["unicode-math"] }, "\u{1D489}": { math: "\\mathbit{h}", alt: ["unicode-math"] }, "\u{1D48A}": { math: "\\mathbit{i}", alt: ["unicode-math"] }, "\u{1D48B}": { math: "\\mathbit{j}", alt: ["unicode-math"] }, "\u{1D48C}": { math: "\\mathbit{k}", alt: ["unicode-math"] }, "\u{1D48D}": { math: "\\mathbit{l}", alt: ["unicode-math"] }, "\u{1D48E}": { math: "\\mathbit{m}", alt: ["unicode-math"] }, "\u{1D48F}": { math: "\\mathbit{n}", alt: ["unicode-math"] }, "\u{1D490}": { math: "\\mathbit{o}", alt: ["unicode-math"] }, "\u{1D491}": { math: "\\mathbit{p}", alt: ["unicode-math"] }, "\u{1D492}": { math: "\\mathbit{q}", alt: ["unicode-math"] }, "\u{1D493}": { math: "\\mathbit{r}", alt: ["unicode-math"] }, "\u{1D494}": { math: "\\mathbit{s}", alt: ["unicode-math"] }, "\u{1D495}": { math: "\\mathbit{t}", alt: ["unicode-math"] }, "\u{1D496}": { math: "\\mathbit{u}", alt: ["unicode-math"] }, "\u{1D497}": { math: "\\mathbit{v}", alt: ["unicode-math"] }, "\u{1D498}": { math: "\\mathbit{w}", alt: ["unicode-math"] }, "\u{1D499}": { math: "\\mathbit{x}", alt: ["unicode-math"] }, "\u{1D49A}": { math: "\\mathbit{y}", alt: ["unicode-math"] }, "\u{1D49B}": { math: "\\mathbit{z}", alt: ["unicode-math"] }, "\u{1D4D0}": { math: "\\mathmit{A}", alt: ["unicode-math"] }, "\u{1D4D1}": { math: "\\mathmit{B}", alt: ["unicode-math"] }, "\u{1D4D2}": { math: "\\mathmit{C}", alt: ["unicode-math"] }, "\u{1D4D3}": { math: "\\mathmit{D}", alt: ["unicode-math"] }, "\u{1D4D4}": { math: "\\mathmit{E}", alt: ["unicode-math"] }, "\u{1D4D5}": { math: "\\mathmit{F}", alt: ["unicode-math"] }, "\u{1D4D6}": { math: "\\mathmit{G}", alt: ["unicode-math"] }, "\u{1D4D7}": { math: "\\mathmit{H}", alt: ["unicode-math"] }, "\u{1D4D8}": { math: "\\mathmit{I}", alt: ["unicode-math"] }, "\u{1D4D9}": { math: "\\mathmit{J}", alt: ["unicode-math"] }, "\u{1D4DA}": { math: "\\mathmit{K}", alt: ["unicode-math"] }, "\u{1D4DB}": { math: "\\mathmit{L}", alt: ["unicode-math"] }, "\u{1D4DC}": { math: "\\mathmit{M}", alt: ["unicode-math"] }, "\u{1D4DD}": { math: "\\mathmit{N}", alt: ["unicode-math"] }, "\u{1D4DE}": { math: "\\mathmit{O}", alt: ["unicode-math"] }, "\u{1D4DF}": { math: "\\mathmit{P}", alt: ["unicode-math"] }, "\u{1D4E0}": { math: "\\mathmit{Q}", alt: ["unicode-math"] }, "\u{1D4E1}": { math: "\\mathmit{R}", alt: ["unicode-math"] }, "\u{1D4E2}": { math: "\\mathmit{S}", alt: ["unicode-math"] }, "\u{1D4E3}": { math: "\\mathmit{T}", alt: ["unicode-math"] }, "\u{1D4E4}": { math: "\\mathmit{U}", alt: ["unicode-math"] }, "\u{1D4E5}": { math: "\\mathmit{V}", alt: ["unicode-math"] }, "\u{1D4E6}": { math: "\\mathmit{W}", alt: ["unicode-math"] }, "\u{1D4E7}": { math: "\\mathmit{X}", alt: ["unicode-math"] }, "\u{1D4E8}": { math: "\\mathmit{Y}", alt: ["unicode-math"] }, "\u{1D4E9}": { math: "\\mathmit{Z}", alt: ["unicode-math"] }, "\u{1D4EA}": { math: "\\mathmit{a}", alt: ["unicode-math"] }, "\u{1D4EB}": { math: "\\mathmit{b}", alt: ["unicode-math"] }, "\u{1D4EC}": { math: "\\mathmit{c}", alt: ["unicode-math"] }, "\u{1D4ED}": { math: "\\mathmit{d}", alt: ["unicode-math"] }, "\u{1D4EE}": { math: "\\mathmit{e}", alt: ["unicode-math"] }, "\u{1D4EF}": { math: "\\mathmit{f}", alt: ["unicode-math"] }, "\u{1D4F0}": { math: "\\mathmit{g}", alt: ["unicode-math"] }, "\u{1D4F1}": { math: "\\mathmit{h}", alt: ["unicode-math"] }, "\u{1D4F2}": { math: "\\mathmit{i}", alt: ["unicode-math"] }, "\u{1D4F3}": { math: "\\mathmit{j}", alt: ["unicode-math"] }, "\u{1D4F4}": { math: "\\mathmit{k}", alt: ["unicode-math"] }, "\u{1D4F5}": { math: "\\mathmit{l}", alt: ["unicode-math"] }, "\u{1D4F6}": { math: "\\mathmit{m}", alt: ["unicode-math"] }, "\u{1D4F7}": { math: "\\mathmit{n}", alt: ["unicode-math"] }, "\u{1D4F8}": { math: "\\mathmit{o}", alt: ["unicode-math"] }, "\u{1D4F9}": { math: "\\mathmit{p}", alt: ["unicode-math"] }, "\u{1D4FA}": { math: "\\mathmit{q}", alt: ["unicode-math"] }, "\u{1D4FB}": { math: "\\mathmit{r}", alt: ["unicode-math"] }, "\u{1D4FC}": { math: "\\mathmit{s}", alt: ["unicode-math"] }, "\u{1D4FD}": { math: "\\mathmit{t}", alt: ["unicode-math"] }, "\u{1D4FE}": { math: "\\mathmit{u}", alt: ["unicode-math"] }, "\u{1D4FF}": { math: "\\mathmit{v}", alt: ["unicode-math"] }, "\u{1D500}": { math: "\\mathmit{w}", alt: ["unicode-math"] }, "\u{1D501}": { math: "\\mathmit{x}", alt: ["unicode-math"] }, "\u{1D502}": { math: "\\mathmit{y}", alt: ["unicode-math"] }, "\u{1D503}": { math: "\\mathmit{z}", alt: ["unicode-math"] }, "\u{1D504}": { math: "\\mathfrak{A}", alt: ["unicode-math"] }, "\u{1D505}": { math: "\\mathfrak{B}", alt: ["unicode-math"] }, "\u{1D507}": { math: "\\mathfrak{D}", alt: ["unicode-math"] }, "\u{1D508}": { math: "\\mathfrak{E}", alt: ["unicode-math"] }, "\u{1D509}": { math: "\\mathfrak{F}", alt: ["unicode-math"] }, "\u{1D50A}": { math: "\\mathfrak{G}", alt: ["unicode-math"] }, "\u{1D50D}": { math: "\\mathfrak{J}", alt: ["unicode-math"] }, "\u{1D50E}": { math: "\\mathfrak{K}", alt: ["unicode-math"] }, "\u{1D50F}": { math: "\\mathfrak{L}", alt: ["unicode-math"] }, "\u{1D510}": { math: "\\mathfrak{M}", alt: ["unicode-math"] }, "\u{1D511}": { math: "\\mathfrak{N}", alt: ["unicode-math"] }, "\u{1D512}": { math: "\\mathfrak{O}", alt: ["unicode-math"] }, "\u{1D513}": { math: "\\mathfrak{P}", alt: ["unicode-math"] }, "\u{1D514}": { math: "\\mathfrak{Q}", alt: ["unicode-math"] }, "\u{1D516}": { math: "\\mathfrak{S}", alt: ["unicode-math"] }, "\u{1D517}": { math: "\\mathfrak{T}", alt: ["unicode-math"] }, "\u{1D518}": { math: "\\mathfrak{U}", alt: ["unicode-math"] }, "\u{1D519}": { math: "\\mathfrak{V}", alt: ["unicode-math"] }, "\u{1D51A}": { math: "\\mathfrak{W}", alt: ["unicode-math"] }, "\u{1D51B}": { math: "\\mathfrak{X}", alt: ["unicode-math"] }, "\u{1D51C}": { math: "\\mathfrak{Y}", alt: ["unicode-math"] }, "\u{1D51E}": { math: "\\mathfrak{a}", alt: ["unicode-math"] }, "\u{1D51F}": { math: "\\mathfrak{b}", alt: ["unicode-math"] }, "\u{1D520}": { math: "\\mathfrak{c}", alt: ["unicode-math"] }, "\u{1D521}": { math: "\\mathfrak{d}", alt: ["unicode-math"] }, "\u{1D522}": { math: "\\mathfrak{e}", alt: ["unicode-math"] }, "\u{1D523}": { math: "\\mathfrak{f}", alt: ["unicode-math"] }, "\u{1D524}": { math: "\\mathfrak{g}", alt: ["unicode-math"] }, "\u{1D525}": { math: "\\mathfrak{h}", alt: ["unicode-math"] }, "\u{1D526}": { math: "\\mathfrak{i}", alt: ["unicode-math"] }, "\u{1D527}": { math: "\\mathfrak{j}", alt: ["unicode-math"] }, "\u{1D528}": { math: "\\mathfrak{k}", alt: ["unicode-math"] }, "\u{1D529}": { math: "\\mathfrak{l}", alt: ["unicode-math"] }, "\u{1D52A}": { math: "\\mathfrak{m}", alt: ["unicode-math"] }, "\u{1D52B}": { math: "\\mathfrak{n}", alt: ["unicode-math"] }, "\u{1D52C}": { math: "\\mathfrak{o}", alt: ["unicode-math"] }, "\u{1D52D}": { math: "\\mathfrak{p}", alt: ["unicode-math"] }, "\u{1D52E}": { math: "\\mathfrak{q}", alt: ["unicode-math"] }, "\u{1D52F}": { math: "\\mathfrak{r}", alt: ["unicode-math"] }, "\u{1D530}": { math: "\\mathfrak{s}", alt: ["unicode-math"] }, "\u{1D531}": { math: "\\mathfrak{t}", alt: ["unicode-math"] }, "\u{1D532}": { math: "\\mathfrak{u}", alt: ["unicode-math"] }, "\u{1D533}": { math: "\\mathfrak{v}", alt: ["unicode-math"] }, "\u{1D534}": { math: "\\mathfrak{w}", alt: ["unicode-math"] }, "\u{1D535}": { math: "\\mathfrak{x}", alt: ["unicode-math"] }, "\u{1D536}": { math: "\\mathfrak{y}", alt: ["unicode-math"] }, "\u{1D537}": { math: "\\mathfrak{z}", alt: ["unicode-math"] }, "\u{1D538}": { math: "\\mathbb{A}", alt: ["unicode-math"] }, "\u{1D539}": { math: "\\mathbb{B}", alt: ["unicode-math"] }, "\u{1D53B}": { math: "\\mathbb{D}", alt: ["unicode-math"] }, "\u{1D53C}": { math: "\\mathbb{E}", alt: ["unicode-math"] }, "\u{1D53D}": { math: "\\mathbb{F}", alt: ["unicode-math"] }, "\u{1D53E}": { math: "\\mathbb{G}", alt: ["unicode-math"] }, "\u{1D540}": { math: "\\mathbb{I}", alt: ["unicode-math"] }, "\u{1D541}": { math: "\\mathbb{J}", alt: ["unicode-math"] }, "\u{1D542}": { math: "\\mathbb{K}", alt: ["unicode-math"] }, "\u{1D543}": { math: "\\mathbb{L}", alt: ["unicode-math"] }, "\u{1D544}": { math: "\\mathbb{M}", alt: ["unicode-math"] }, "\u{1D546}": { math: "\\mathbb{O}", alt: ["unicode-math"] }, "\u{1D54A}": { math: "\\mathbb{S}", alt: ["unicode-math"] }, "\u{1D54B}": { math: "\\mathbb{T}", alt: ["unicode-math"] }, "\u{1D54C}": { math: "\\mathbb{U}", alt: ["unicode-math"] }, "\u{1D54D}": { math: "\\mathbb{V}", alt: ["unicode-math"] }, "\u{1D54E}": { math: "\\mathbb{W}", alt: ["unicode-math"] }, "\u{1D54F}": { math: "\\mathbb{X}", alt: ["unicode-math"] }, "\u{1D550}": { math: "\\mathbb{Y}", alt: ["unicode-math"] }, "\u{1D552}": { math: "\\mathbb{a}", alt: ["unicode-math"] }, "\u{1D553}": { math: "\\mathbb{b}", alt: ["unicode-math"] }, "\u{1D554}": { math: "\\mathbb{c}", alt: ["unicode-math"] }, "\u{1D555}": { math: "\\mathbb{d}", alt: ["unicode-math"] }, "\u{1D556}": { math: "\\mathbb{e}", alt: ["unicode-math"] }, "\u{1D557}": { math: "\\mathbb{f}", alt: ["unicode-math"] }, "\u{1D558}": { math: "\\mathbb{g}", alt: ["unicode-math"] }, "\u{1D559}": { math: "\\mathbb{h}", alt: ["unicode-math"] }, "\u{1D55A}": { math: "\\mathbb{i}", alt: ["unicode-math"] }, "\u{1D55B}": { math: "\\mathbb{j}", alt: ["unicode-math"] }, "\u{1D55C}": { math: "\\mathbb{k}", alt: ["unicode-math"] }, "\u{1D55D}": { math: "\\mathbb{l}", alt: ["unicode-math"] }, "\u{1D55E}": { math: "\\mathbb{m}", alt: ["unicode-math"] }, "\u{1D55F}": { math: "\\mathbb{n}", alt: ["unicode-math"] }, "\u{1D560}": { math: "\\mathbb{o}", alt: ["unicode-math"] }, "\u{1D561}": { math: "\\mathbb{p}", alt: ["unicode-math"] }, "\u{1D562}": { math: "\\mathbb{q}", alt: ["unicode-math"] }, "\u{1D563}": { math: "\\mathbb{r}", alt: ["unicode-math"] }, "\u{1D564}": { math: "\\mathbb{s}", alt: ["unicode-math"] }, "\u{1D565}": { math: "\\mathbb{t}", alt: ["unicode-math"] }, "\u{1D566}": { math: "\\mathbb{u}", alt: ["unicode-math"] }, "\u{1D567}": { math: "\\mathbb{v}", alt: ["unicode-math"] }, "\u{1D568}": { math: "\\mathbb{w}", alt: ["unicode-math"] }, "\u{1D569}": { math: "\\mathbb{x}", alt: ["unicode-math"] }, "\u{1D56A}": { math: "\\mathbb{y}", alt: ["unicode-math"] }, "\u{1D56B}": { math: "\\mathbb{z}", alt: ["unicode-math"] }, "\u{1D56C}": { math: "A", alt: ["unicode-math"] }, "\u{1D56D}": { math: "B", alt: ["unicode-math"] }, "\u{1D56E}": { math: "C", alt: ["unicode-math"] }, "\u{1D56F}": { math: "D", alt: ["unicode-math"] }, "\u{1D570}": { math: "E", alt: ["unicode-math"] }, "\u{1D571}": { math: "F", alt: ["unicode-math"] }, "\u{1D572}": { math: "G", alt: ["unicode-math"] }, "\u{1D573}": { math: "H", alt: ["unicode-math"] }, "\u{1D574}": { math: "I", alt: ["unicode-math"] }, "\u{1D575}": { math: "J", alt: ["unicode-math"] }, "\u{1D576}": { math: "K", alt: ["unicode-math"] }, "\u{1D577}": { math: "L", alt: ["unicode-math"] }, "\u{1D578}": { math: "M", alt: ["unicode-math"] }, "\u{1D579}": { math: "N", alt: ["unicode-math"] }, "\u{1D57A}": { math: "O", alt: ["unicode-math"] }, "\u{1D57B}": { math: "P", alt: ["unicode-math"] }, "\u{1D57C}": { math: "Q", alt: ["unicode-math"] }, "\u{1D57D}": { math: "R", alt: ["unicode-math"] }, "\u{1D57E}": { math: "S", alt: ["unicode-math"] }, "\u{1D57F}": { math: "T", alt: ["unicode-math"] }, "\u{1D580}": { math: "U", alt: ["unicode-math"] }, "\u{1D581}": { math: "V", alt: ["unicode-math"] }, "\u{1D582}": { math: "W", alt: ["unicode-math"] }, "\u{1D583}": { math: "X", alt: ["unicode-math"] }, "\u{1D584}": { math: "Y", alt: ["unicode-math"] }, "\u{1D585}": { math: "Z", alt: ["unicode-math"] }, "\u{1D586}": { math: "a", alt: ["unicode-math"] }, "\u{1D587}": { math: "b", alt: ["unicode-math"] }, "\u{1D588}": { math: "c", alt: ["unicode-math"] }, "\u{1D589}": { math: "d", alt: ["unicode-math"] }, "\u{1D58A}": { math: "e", alt: ["unicode-math"] }, "\u{1D58B}": { math: "f", alt: ["unicode-math"] }, "\u{1D58C}": { math: "g", alt: ["unicode-math"] }, "\u{1D58D}": { math: "h", alt: ["unicode-math"] }, "\u{1D58E}": { math: "i", alt: ["unicode-math"] }, "\u{1D58F}": { math: "j", alt: ["unicode-math"] }, "\u{1D590}": { math: "k", alt: ["unicode-math"] }, "\u{1D591}": { math: "l", alt: ["unicode-math"] }, "\u{1D592}": { math: "m", alt: ["unicode-math"] }, "\u{1D593}": { math: "n", alt: ["unicode-math"] }, "\u{1D594}": { math: "o", alt: ["unicode-math"] }, "\u{1D595}": { math: "p", alt: ["unicode-math"] }, "\u{1D596}": { math: "q", alt: ["unicode-math"] }, "\u{1D597}": { math: "r", alt: ["unicode-math"] }, "\u{1D598}": { math: "s", alt: ["unicode-math"] }, "\u{1D599}": { math: "t", alt: ["unicode-math"] }, "\u{1D59A}": { math: "u", alt: ["unicode-math"] }, "\u{1D59B}": { math: "v", alt: ["unicode-math"] }, "\u{1D59C}": { math: "w", alt: ["unicode-math"] }, "\u{1D59D}": { math: "x", alt: ["unicode-math"] }, "\u{1D59E}": { math: "y", alt: ["unicode-math"] }, "\u{1D59F}": { math: "z", alt: ["unicode-math"] }, "\u{1D5A0}": { math: "\\mathsf{A}", alt: ["unicode-math"] }, "\u{1D5A1}": { math: "\\mathsf{B}", alt: ["unicode-math"] }, "\u{1D5A2}": { math: "\\mathsf{C}", alt: ["unicode-math"] }, "\u{1D5A3}": { math: "\\mathsf{D}", alt: ["unicode-math"] }, "\u{1D5A4}": { math: "\\mathsf{E}", alt: ["unicode-math"] }, "\u{1D5A5}": { math: "\\mathsf{F}", alt: ["unicode-math"] }, "\u{1D5A6}": { math: "\\mathsf{G}", alt: ["unicode-math"] }, "\u{1D5A7}": { math: "\\mathsf{H}", alt: ["unicode-math"] }, "\u{1D5A8}": { math: "\\mathsf{I}", alt: ["unicode-math"] }, "\u{1D5A9}": { math: "\\mathsf{J}", alt: ["unicode-math"] }, "\u{1D5AA}": { math: "\\mathsf{K}", alt: ["unicode-math"] }, "\u{1D5AB}": { math: "\\mathsf{L}", alt: ["unicode-math"] }, "\u{1D5AC}": { math: "\\mathsf{M}", alt: ["unicode-math"] }, "\u{1D5AD}": { math: "\\mathsf{N}", alt: ["unicode-math"] }, "\u{1D5AE}": { math: "\\mathsf{O}", alt: ["unicode-math"] }, "\u{1D5AF}": { math: "\\mathsf{P}", alt: ["unicode-math"] }, "\u{1D5B0}": { math: "\\mathsf{Q}", alt: ["unicode-math"] }, "\u{1D5B1}": { math: "\\mathsf{R}", alt: ["unicode-math"] }, "\u{1D5B2}": { math: "\\mathsf{S}", alt: ["unicode-math"] }, "\u{1D5B3}": { math: "\\mathsf{T}", alt: ["unicode-math"] }, "\u{1D5B4}": { math: "\\mathsf{U}", alt: ["unicode-math"] }, "\u{1D5B5}": { math: "\\mathsf{V}", alt: ["unicode-math"] }, "\u{1D5B6}": { math: "\\mathsf{W}", alt: ["unicode-math"] }, "\u{1D5B7}": { math: "\\mathsf{X}", alt: ["unicode-math"] }, "\u{1D5B8}": { math: "\\mathsf{Y}", alt: ["unicode-math"] }, "\u{1D5B9}": { math: "\\mathsf{Z}", alt: ["unicode-math"] }, "\u{1D5BA}": { math: "\\mathsf{a}", alt: ["unicode-math"] }, "\u{1D5BB}": { math: "\\mathsf{b}", alt: ["unicode-math"] }, "\u{1D5BC}": { math: "\\mathsf{c}", alt: ["unicode-math"] }, "\u{1D5BD}": { math: "\\mathsf{d}", alt: ["unicode-math"] }, "\u{1D5BE}": { math: "\\mathsf{e}", alt: ["unicode-math"] }, "\u{1D5BF}": { math: "\\mathsf{f}", alt: ["unicode-math"] }, "\u{1D5C0}": { math: "\\mathsf{g}", alt: ["unicode-math"] }, "\u{1D5C1}": { math: "\\mathsf{h}", alt: ["unicode-math"] }, "\u{1D5C2}": { math: "\\mathsf{i}", alt: ["unicode-math"] }, "\u{1D5C3}": { math: "\\mathsf{j}", alt: ["unicode-math"] }, "\u{1D5C4}": { math: "\\mathsf{k}", alt: ["unicode-math"] }, "\u{1D5C5}": { math: "\\mathsf{l}", alt: ["unicode-math"] }, "\u{1D5C6}": { math: "\\mathsf{m}", alt: ["unicode-math"] }, "\u{1D5C7}": { math: "\\mathsf{n}", alt: ["unicode-math"] }, "\u{1D5C8}": { math: "\\mathsf{o}", alt: ["unicode-math"] }, "\u{1D5C9}": { math: "\\mathsf{p}", alt: ["unicode-math"] }, "\u{1D5CA}": { math: "\\mathsf{q}", alt: ["unicode-math"] }, "\u{1D5CB}": { math: "\\mathsf{r}", alt: ["unicode-math"] }, "\u{1D5CC}": { math: "\\mathsf{s}", alt: ["unicode-math"] }, "\u{1D5CD}": { math: "\\mathsf{t}", alt: ["unicode-math"] }, "\u{1D5CE}": { math: "\\mathsf{u}", alt: ["unicode-math"] }, "\u{1D5CF}": { math: "\\mathsf{v}", alt: ["unicode-math"] }, "\u{1D5D0}": { math: "\\mathsf{w}", alt: ["unicode-math"] }, "\u{1D5D1}": { math: "\\mathsf{x}", alt: ["unicode-math"] }, "\u{1D5D2}": { math: "\\mathsf{y}", alt: ["unicode-math"] }, "\u{1D5D3}": { math: "\\mathsf{z}", alt: ["unicode-math"] }, "\u{1D5D4}": { math: "\\mathsfbf{A}", alt: ["unicode-math"] }, "\u{1D5D5}": { math: "\\mathsfbf{B}", alt: ["unicode-math"] }, "\u{1D5D6}": { math: "\\mathsfbf{C}", alt: ["unicode-math"] }, "\u{1D5D7}": { math: "\\mathsfbf{D}", alt: ["unicode-math"] }, "\u{1D5D8}": { math: "\\mathsfbf{E}", alt: ["unicode-math"] }, "\u{1D5D9}": { math: "\\mathsfbf{F}", alt: ["unicode-math"] }, "\u{1D5DA}": { math: "\\mathsfbf{G}", alt: ["unicode-math"] }, "\u{1D5DB}": { math: "\\mathsfbf{H}", alt: ["unicode-math"] }, "\u{1D5DC}": { math: "\\mathsfbf{I}", alt: ["unicode-math"] }, "\u{1D5DD}": { math: "\\mathsfbf{J}", alt: ["unicode-math"] }, "\u{1D5DE}": { math: "\\mathsfbf{K}", alt: ["unicode-math"] }, "\u{1D5DF}": { math: "\\mathsfbf{L}", alt: ["unicode-math"] }, "\u{1D5E0}": { math: "\\mathsfbf{M}", alt: ["unicode-math"] }, "\u{1D5E1}": { math: "\\mathsfbf{N}", alt: ["unicode-math"] }, "\u{1D5E2}": { math: "\\mathsfbf{O}", alt: ["unicode-math"] }, "\u{1D5E3}": { math: "\\mathsfbf{P}", alt: ["unicode-math"] }, "\u{1D5E4}": { math: "\\mathsfbf{Q}", alt: ["unicode-math"] }, "\u{1D5E5}": { math: "\\mathsfbf{R}", alt: ["unicode-math"] }, "\u{1D5E6}": { math: "\\mathsfbf{S}", alt: ["unicode-math"] }, "\u{1D5E7}": { math: "\\mathsfbf{T}", alt: ["unicode-math"] }, "\u{1D5E8}": { math: "\\mathsfbf{U}", alt: ["unicode-math"] }, "\u{1D5E9}": { math: "\\mathsfbf{V}", alt: ["unicode-math"] }, "\u{1D5EA}": { math: "\\mathsfbf{W}", alt: ["unicode-math"] }, "\u{1D5EB}": { math: "\\mathsfbf{X}", alt: ["unicode-math"] }, "\u{1D5EC}": { math: "\\mathsfbf{Y}", alt: ["unicode-math"] }, "\u{1D5ED}": { math: "\\mathsfbf{Z}", alt: ["unicode-math"] }, "\u{1D5EE}": { math: "\\mathsfbf{a}", alt: ["unicode-math"] }, "\u{1D5EF}": { math: "\\mathsfbf{b}", alt: ["unicode-math"] }, "\u{1D5F0}": { math: "\\mathsfbf{c}", alt: ["unicode-math"] }, "\u{1D5F1}": { math: "\\mathsfbf{d}", alt: ["unicode-math"] }, "\u{1D5F2}": { math: "\\mathsfbf{e}", alt: ["unicode-math"] }, "\u{1D5F3}": { math: "\\mathsfbf{f}", alt: ["unicode-math"] }, "\u{1D5F4}": { math: "\\mathsfbf{g}", alt: ["unicode-math"] }, "\u{1D5F5}": { math: "\\mathsfbf{h}", alt: ["unicode-math"] }, "\u{1D5F6}": { math: "\\mathsfbf{i}", alt: ["unicode-math"] }, "\u{1D5F7}": { math: "\\mathsfbf{j}", alt: ["unicode-math"] }, "\u{1D5F8}": { math: "\\mathsfbf{k}", alt: ["unicode-math"] }, "\u{1D5F9}": { math: "\\mathsfbf{l}", alt: ["unicode-math"] }, "\u{1D5FA}": { math: "\\mathsfbf{m}", alt: ["unicode-math"] }, "\u{1D5FB}": { math: "\\mathsfbf{n}", alt: ["unicode-math"] }, "\u{1D5FC}": { math: "\\mathsfbf{o}", alt: ["unicode-math"] }, "\u{1D5FD}": { math: "\\mathsfbf{p}", alt: ["unicode-math"] }, "\u{1D5FE}": { math: "\\mathsfbf{q}", alt: ["unicode-math"] }, "\u{1D5FF}": { math: "\\mathsfbf{r}", alt: ["unicode-math"] }, "\u{1D600}": { math: "\\mathsfbf{s}", alt: ["unicode-math"] }, "\u{1D601}": { math: "\\mathsfbf{t}", alt: ["unicode-math"] }, "\u{1D602}": { math: "\\mathsfbf{u}", alt: ["unicode-math"] }, "\u{1D603}": { math: "\\mathsfbf{v}", alt: ["unicode-math"] }, "\u{1D604}": { math: "\\mathsfbf{w}", alt: ["unicode-math"] }, "\u{1D605}": { math: "\\mathsfbf{x}", alt: ["unicode-math"] }, "\u{1D606}": { math: "\\mathsfbf{y}", alt: ["unicode-math"] }, "\u{1D607}": { math: "\\mathsfbf{z}", alt: ["unicode-math"] }, "\u{1D608}": { math: "\\mathsfsl{A}", alt: ["unicode-math"] }, "\u{1D609}": { math: "\\mathsfsl{B}", alt: ["unicode-math"] }, "\u{1D60A}": { math: "\\mathsfsl{C}", alt: ["unicode-math"] }, "\u{1D60B}": { math: "\\mathsfsl{D}", alt: ["unicode-math"] }, "\u{1D60C}": { math: "\\mathsfsl{E}", alt: ["unicode-math"] }, "\u{1D60D}": { math: "\\mathsfsl{F}", alt: ["unicode-math"] }, "\u{1D60E}": { math: "\\mathsfsl{G}", alt: ["unicode-math"] }, "\u{1D60F}": { math: "\\mathsfsl{H}", alt: ["unicode-math"] }, "\u{1D610}": { math: "\\mathsfsl{I}", alt: ["unicode-math"] }, "\u{1D611}": { math: "\\mathsfsl{J}", alt: ["unicode-math"] }, "\u{1D612}": { math: "\\mathsfsl{K}", alt: ["unicode-math"] }, "\u{1D613}": { math: "\\mathsfsl{L}", alt: ["unicode-math"] }, "\u{1D614}": { math: "\\mathsfsl{M}", alt: ["unicode-math"] }, "\u{1D615}": { math: "\\mathsfsl{N}", alt: ["unicode-math"] }, "\u{1D616}": { math: "\\mathsfsl{O}", alt: ["unicode-math"] }, "\u{1D617}": { math: "\\mathsfsl{P}", alt: ["unicode-math"] }, "\u{1D618}": { math: "\\mathsfsl{Q}", alt: ["unicode-math"] }, "\u{1D619}": { math: "\\mathsfsl{R}", alt: ["unicode-math"] }, "\u{1D61A}": { math: "\\mathsfsl{S}", alt: ["unicode-math"] }, "\u{1D61B}": { math: "\\mathsfsl{T}", alt: ["unicode-math"] }, "\u{1D61C}": { math: "\\mathsfsl{U}", alt: ["unicode-math"] }, "\u{1D61D}": { math: "\\mathsfsl{V}", alt: ["unicode-math"] }, "\u{1D61E}": { math: "\\mathsfsl{W}", alt: ["unicode-math"] }, "\u{1D61F}": { math: "\\mathsfsl{X}", alt: ["unicode-math"] }, "\u{1D620}": { math: "\\mathsfsl{Y}", alt: ["unicode-math"] }, "\u{1D621}": { math: "\\mathsfsl{Z}", alt: ["unicode-math"] }, "\u{1D622}": { math: "\\mathsfsl{a}", alt: ["unicode-math"] }, "\u{1D623}": { math: "\\mathsfsl{b}", alt: ["unicode-math"] }, "\u{1D624}": { math: "\\mathsfsl{c}", alt: ["unicode-math"] }, "\u{1D625}": { math: "\\mathsfsl{d}", alt: ["unicode-math"] }, "\u{1D626}": { math: "\\mathsfsl{e}", alt: ["unicode-math"] }, "\u{1D627}": { math: "\\mathsfsl{f}", alt: ["unicode-math"] }, "\u{1D628}": { math: "\\mathsfsl{g}", alt: ["unicode-math"] }, "\u{1D629}": { math: "\\mathsfsl{h}", alt: ["unicode-math"] }, "\u{1D62A}": { math: "\\mathsfsl{i}", alt: ["unicode-math"] }, "\u{1D62B}": { math: "\\mathsfsl{j}", alt: ["unicode-math"] }, "\u{1D62C}": { math: "\\mathsfsl{k}", alt: ["unicode-math"] }, "\u{1D62D}": { math: "\\mathsfsl{l}", alt: ["unicode-math"] }, "\u{1D62E}": { math: "\\mathsfsl{m}", alt: ["unicode-math"] }, "\u{1D62F}": { math: "\\mathsfsl{n}", alt: ["unicode-math"] }, "\u{1D630}": { math: "\\mathsfsl{o}", alt: ["unicode-math"] }, "\u{1D631}": { math: "\\mathsfsl{p}", alt: ["unicode-math"] }, "\u{1D632}": { math: "\\mathsfsl{q}", alt: ["unicode-math"] }, "\u{1D633}": { math: "\\mathsfsl{r}", alt: ["unicode-math"] }, "\u{1D634}": { math: "\\mathsfsl{s}", alt: ["unicode-math"] }, "\u{1D635}": { math: "\\mathsfsl{t}", alt: ["unicode-math"] }, "\u{1D636}": { math: "\\mathsfsl{u}", alt: ["unicode-math"] }, "\u{1D637}": { math: "\\mathsfsl{v}", alt: ["unicode-math"] }, "\u{1D638}": { math: "\\mathsfsl{w}", alt: ["unicode-math"] }, "\u{1D639}": { math: "\\mathsfsl{x}", alt: ["unicode-math"] }, "\u{1D63A}": { math: "\\mathsfsl{y}", alt: ["unicode-math"] }, "\u{1D63B}": { math: "\\mathsfsl{z}", alt: ["unicode-math"] }, "\u{1D63C}": { math: "\\mathsfbfsl{A}", alt: ["unicode-math"] }, "\u{1D63D}": { math: "\\mathsfbfsl{B}", alt: ["unicode-math"] }, "\u{1D63E}": { math: "\\mathsfbfsl{C}", alt: ["unicode-math"] }, "\u{1D63F}": { math: "\\mathsfbfsl{D}", alt: ["unicode-math"] }, "\u{1D640}": { math: "\\mathsfbfsl{E}", alt: ["unicode-math"] }, "\u{1D641}": { math: "\\mathsfbfsl{F}", alt: ["unicode-math"] }, "\u{1D642}": { math: "\\mathsfbfsl{G}", alt: ["unicode-math"] }, "\u{1D643}": { math: "\\mathsfbfsl{H}", alt: ["unicode-math"] }, "\u{1D644}": { math: "\\mathsfbfsl{I}", alt: ["unicode-math"] }, "\u{1D645}": { math: "\\mathsfbfsl{J}", alt: ["unicode-math"] }, "\u{1D646}": { math: "\\mathsfbfsl{K}", alt: ["unicode-math"] }, "\u{1D647}": { math: "\\mathsfbfsl{L}", alt: ["unicode-math"] }, "\u{1D648}": { math: "\\mathsfbfsl{M}", alt: ["unicode-math"] }, "\u{1D649}": { math: "\\mathsfbfsl{N}", alt: ["unicode-math"] }, "\u{1D64A}": { math: "\\mathsfbfsl{O}", alt: ["unicode-math"] }, "\u{1D64B}": { math: "\\mathsfbfsl{P}", alt: ["unicode-math"] }, "\u{1D64C}": { math: "\\mathsfbfsl{Q}", alt: ["unicode-math"] }, "\u{1D64D}": { math: "\\mathsfbfsl{R}", alt: ["unicode-math"] }, "\u{1D64E}": { math: "\\mathsfbfsl{S}", alt: ["unicode-math"] }, "\u{1D64F}": { math: "\\mathsfbfsl{T}", alt: ["unicode-math"] }, "\u{1D650}": { math: "\\mathsfbfsl{U}", alt: ["unicode-math"] }, "\u{1D651}": { math: "\\mathsfbfsl{V}", alt: ["unicode-math"] }, "\u{1D652}": { math: "\\mathsfbfsl{W}", alt: ["unicode-math"] }, "\u{1D653}": { math: "\\mathsfbfsl{X}", alt: ["unicode-math"] }, "\u{1D654}": { math: "\\mathsfbfsl{Y}", alt: ["unicode-math"] }, "\u{1D655}": { math: "\\mathsfbfsl{Z}", alt: ["unicode-math"] }, "\u{1D656}": { math: "\\mathsfbfsl{a}", alt: ["unicode-math"] }, "\u{1D657}": { math: "\\mathsfbfsl{b}", alt: ["unicode-math"] }, "\u{1D658}": { math: "\\mathsfbfsl{c}", alt: ["unicode-math"] }, "\u{1D659}": { math: "\\mathsfbfsl{d}", alt: ["unicode-math"] }, "\u{1D65A}": { math: "\\mathsfbfsl{e}", alt: ["unicode-math"] }, "\u{1D65B}": { math: "\\mathsfbfsl{f}", alt: ["unicode-math"] }, "\u{1D65C}": { math: "\\mathsfbfsl{g}", alt: ["unicode-math"] }, "\u{1D65D}": { math: "\\mathsfbfsl{h}", alt: ["unicode-math"] }, "\u{1D65E}": { math: "\\mathsfbfsl{i}", alt: ["unicode-math"] }, "\u{1D65F}": { math: "\\mathsfbfsl{j}", alt: ["unicode-math"] }, "\u{1D660}": { math: "\\mathsfbfsl{k}", alt: ["unicode-math"] }, "\u{1D661}": { math: "\\mathsfbfsl{l}", alt: ["unicode-math"] }, "\u{1D662}": { math: "\\mathsfbfsl{m}", alt: ["unicode-math"] }, "\u{1D663}": { math: "\\mathsfbfsl{n}", alt: ["unicode-math"] }, "\u{1D664}": { math: "\\mathsfbfsl{o}", alt: ["unicode-math"] }, "\u{1D665}": { math: "\\mathsfbfsl{p}", alt: ["unicode-math"] }, "\u{1D666}": { math: "\\mathsfbfsl{q}", alt: ["unicode-math"] }, "\u{1D667}": { math: "\\mathsfbfsl{r}", alt: ["unicode-math"] }, "\u{1D668}": { math: "\\mathsfbfsl{s}", alt: ["unicode-math"] }, "\u{1D669}": { math: "\\mathsfbfsl{t}", alt: ["unicode-math"] }, "\u{1D66A}": { math: "\\mathsfbfsl{u}", alt: ["unicode-math"] }, "\u{1D66B}": { math: "\\mathsfbfsl{v}", alt: ["unicode-math"] }, "\u{1D66C}": { math: "\\mathsfbfsl{w}", alt: ["unicode-math"] }, "\u{1D66D}": { math: "\\mathsfbfsl{x}", alt: ["unicode-math"] }, "\u{1D66E}": { math: "\\mathsfbfsl{y}", alt: ["unicode-math"] }, "\u{1D66F}": { math: "\\mathsfbfsl{z}", alt: ["unicode-math"] }, "\u{1D670}": { math: "\\mathtt{A}", alt: ["unicode-math"] }, "\u{1D671}": { math: "\\mathtt{B}", alt: ["unicode-math"] }, "\u{1D672}": { math: "\\mathtt{C}", alt: ["unicode-math"] }, "\u{1D673}": { math: "\\mathtt{D}", alt: ["unicode-math"] }, "\u{1D674}": { math: "\\mathtt{E}", alt: ["unicode-math"] }, "\u{1D675}": { math: "\\mathtt{F}", alt: ["unicode-math"] }, "\u{1D676}": { math: "\\mathtt{G}", alt: ["unicode-math"] }, "\u{1D677}": { math: "\\mathtt{H}", alt: ["unicode-math"] }, "\u{1D678}": { math: "\\mathtt{I}", alt: ["unicode-math"] }, "\u{1D679}": { math: "\\mathtt{J}", alt: ["unicode-math"] }, "\u{1D67A}": { math: "\\mathtt{K}", alt: ["unicode-math"] }, "\u{1D67B}": { math: "\\mathtt{L}", alt: ["unicode-math"] }, "\u{1D67C}": { math: "\\mathtt{M}", alt: ["unicode-math"] }, "\u{1D67D}": { math: "\\mathtt{N}", alt: ["unicode-math"] }, "\u{1D67E}": { math: "\\mathtt{O}", alt: ["unicode-math"] }, "\u{1D67F}": { math: "\\mathtt{P}", alt: ["unicode-math"] }, "\u{1D680}": { math: "\\mathtt{Q}", alt: ["unicode-math"] }, "\u{1D681}": { math: "\\mathtt{R}", alt: ["unicode-math"] }, "\u{1D682}": { math: "\\mathtt{S}", alt: ["unicode-math"] }, "\u{1D683}": { math: "\\mathtt{T}", alt: ["unicode-math"] }, "\u{1D684}": { math: "\\mathtt{U}", alt: ["unicode-math"] }, "\u{1D685}": { math: "\\mathtt{V}", alt: ["unicode-math"] }, "\u{1D686}": { math: "\\mathtt{W}", alt: ["unicode-math"] }, "\u{1D687}": { math: "\\mathtt{X}", alt: ["unicode-math"] }, "\u{1D688}": { math: "\\mathtt{Y}", alt: ["unicode-math"] }, "\u{1D689}": { math: "\\mathtt{Z}", alt: ["unicode-math"] }, "\u{1D68A}": { math: "\\mathtt{a}", alt: ["unicode-math"] }, "\u{1D68B}": { math: "\\mathtt{b}", alt: ["unicode-math"] }, "\u{1D68C}": { math: "\\mathtt{c}", alt: ["unicode-math"] }, "\u{1D68D}": { math: "\\mathtt{d}", alt: ["unicode-math"] }, "\u{1D68E}": { math: "\\mathtt{e}", alt: ["unicode-math"] }, "\u{1D68F}": { math: "\\mathtt{f}", alt: ["unicode-math"] }, "\u{1D690}": { math: "\\mathtt{g}", alt: ["unicode-math"] }, "\u{1D691}": { math: "\\mathtt{h}", alt: ["unicode-math"] }, "\u{1D692}": { math: "\\mathtt{i}", alt: ["unicode-math"] }, "\u{1D693}": { math: "\\mathtt{j}", alt: ["unicode-math"] }, "\u{1D694}": { math: "\\mathtt{k}", alt: ["unicode-math"] }, "\u{1D695}": { math: "\\mathtt{l}", alt: ["unicode-math"] }, "\u{1D696}": { math: "\\mathtt{m}", alt: ["unicode-math"] }, "\u{1D697}": { math: "\\mathtt{n}", alt: ["unicode-math"] }, "\u{1D698}": { math: "\\mathtt{o}", alt: ["unicode-math"] }, "\u{1D699}": { math: "\\mathtt{p}", alt: ["unicode-math"] }, "\u{1D69A}": { math: "\\mathtt{q}", alt: ["unicode-math"] }, "\u{1D69B}": { math: "\\mathtt{r}", alt: ["unicode-math"] }, "\u{1D69C}": { math: "\\mathtt{s}", alt: ["unicode-math"] }, "\u{1D69D}": { math: "\\mathtt{t}", alt: ["unicode-math"] }, "\u{1D69E}": { math: "\\mathtt{u}", alt: ["unicode-math"] }, "\u{1D69F}": { math: "\\mathtt{v}", alt: ["unicode-math"] }, "\u{1D6A0}": { math: "\\mathtt{w}", alt: ["unicode-math"] }, "\u{1D6A1}": { math: "\\mathtt{x}", alt: ["unicode-math"] }, "\u{1D6A2}": { math: "\\mathtt{y}", alt: ["unicode-math"] }, "\u{1D6A3}": { math: "\\mathtt{z}", alt: ["unicode-math"] }, "\u{1D6A4}": { math: "\\imath", alt: ["unicode-math"] }, "\u{1D6A5}": { math: "\\jmath", alt: ["unicode-math"] }, "\u{1D6A8}": { math: "\\mathbf{A}", alt: ["unicode-math"] }, "\u{1D6A9}": { math: "\\mathbf{B}", alt: ["unicode-math"] }, "\u{1D6AA}": { math: "\\mathbf{\\Gamma}", alt: ["unicode-math"] }, "\u{1D6AB}": { math: "\\mathbf{\\Delta}", alt: ["unicode-math"] }, "\u{1D6AC}": { math: "\\mathbf{E}", alt: ["unicode-math"] }, "\u{1D6AD}": { math: "\\mathbf{Z}", alt: ["unicode-math"] }, "\u{1D6AE}": { math: "\\mathbf{H}", alt: ["unicode-math"] }, "\u{1D6AF}": { math: "\\mathbf{\\Theta}", alt: ["unicode-math"] }, "\u{1D6B0}": { math: "\\mathbf{I}", alt: ["unicode-math"] }, "\u{1D6B1}": { math: "\\mathbf{K}", alt: ["unicode-math"] }, "\u{1D6B2}": { math: "\\mathbf{\\Lambda}", alt: ["unicode-math"] }, "\u{1D6B3}": { math: "M", alt: ["unicode-math"] }, "\u{1D6B4}": { math: "N", alt: ["unicode-math"] }, "\u{1D6B5}": { math: "\\mathbf{\\Xi}", alt: ["unicode-math"] }, "\u{1D6B6}": { math: "O", alt: ["unicode-math"] }, "\u{1D6B7}": { math: "\\mathbf{\\Pi}", alt: ["unicode-math"] }, "\u{1D6B8}": { math: "\\mathbf{P}", alt: ["unicode-math"] }, "\u{1D6B9}": { math: "\\mathbf{\\vartheta}", alt: ["unicode-math"] }, "\u{1D6BA}": { math: "\\mathbf{\\Sigma}", alt: ["unicode-math"] }, "\u{1D6BB}": { math: "\\mathbf{T}", alt: ["unicode-math"] }, "\u{1D6BC}": { math: "\\mathbf{\\Upsilon}", alt: ["unicode-math"] }, "\u{1D6BD}": { math: "\\mathbf{\\Phi}", alt: ["unicode-math"] }, "\u{1D6BE}": { math: "\\mathbf{X}", alt: ["unicode-math"] }, "\u{1D6BF}": { math: "\\mathbf{\\Psi}", alt: ["unicode-math"] }, "\u{1D6C0}": { math: "\\mathbf{\\Omega}", alt: ["unicode-math"] }, "\u{1D6C1}": { math: "\\mathbf{\\nabla}", alt: ["unicode-math"] }, "\u{1D6C2}": { math: "\\mathbf{\\alpha}", alt: ["unicode-math"] }, "\u{1D6C3}": { math: "\\mathbf{\\beta}", alt: ["unicode-math"] }, "\u{1D6C4}": { math: "\\mathbf{\\gamma}", alt: ["unicode-math"] }, "\u{1D6C5}": { math: "\\mathbf{\\delta}", alt: ["unicode-math"] }, "\u{1D6C6}": { math: "\\mathbf{\\epsilon}", alt: ["unicode-math"] }, "\u{1D6C7}": { math: "\\mathbf{\\zeta}", alt: ["unicode-math"] }, "\u{1D6C8}": { math: "\\mathbf{\\eta}", alt: ["unicode-math"] }, "\u{1D6C9}": { math: "\\mathbf{\\theta}", alt: ["unicode-math"] }, "\u{1D6CA}": { math: "\\mathbf{I}", alt: ["unicode-math"] }, "\u{1D6CB}": { math: "\\mathbf{K}", alt: ["unicode-math"] }, "\u{1D6CC}": { math: "\\mathbf{\\lambda}", alt: ["unicode-math"] }, "\u{1D6CD}": { math: "m", alt: ["unicode-math"] }, "\u{1D6CE}": { math: "v", alt: ["unicode-math"] }, "\u{1D6CF}": { math: "\\mathbf{\\xi}", alt: ["unicode-math"] }, "\u{1D6D0}": { math: "O", alt: ["unicode-math"] }, "\u{1D6D1}": { math: "\\mathbf{\\pi}", alt: ["unicode-math"] }, "\u{1D6D2}": { math: "\\mathbf{P}", alt: ["unicode-math"] }, "\u{1D6D3}": { math: "\\mathbf{\\varsigma}", alt: ["unicode-math"] }, "\u{1D6D4}": { math: "\\mathbf{\\sigma}", alt: ["unicode-math"] }, "\u{1D6D5}": { math: "\\mathbf{T}", alt: ["unicode-math"] }, "\u{1D6D6}": { math: "\\mathbf{\\upsilon}", alt: ["unicode-math"] }, "\u{1D6D7}": { math: "\\mathbf{\\phi}", alt: ["unicode-math"] }, "\u{1D6D8}": { math: "\\mathbf{X}", alt: ["unicode-math"] }, "\u{1D6D9}": { math: "\\mathbf{\\psi}", alt: ["unicode-math"] }, "\u{1D6DA}": { math: "\\mathbf{\\omega}", alt: ["unicode-math"] }, "\u{1D6DB}": { math: "\\partial", alt: ["unicode-math"] }, "\u{1D6DC}": { math: "\\in", alt: ["unicode-math"] }, "\u{1D6DD}": { math: "\\mathbf{\\vartheta}", alt: ["unicode-math"] }, "\u{1D6DE}": { math: "\\mathbf{\\varkappa}", alt: ["unicode-math"] }, "\u{1D6DF}": { math: "\\mathbf{\\phi}", alt: ["unicode-math"] }, "\u{1D6E0}": { math: "\\mathbf{\\varrho}", alt: ["unicode-math"] }, "\u{1D6E1}": { math: "\\mathbf{\\varpi}", alt: ["unicode-math"] }, "\u{1D6E2}": { math: "A", alt: ["unicode-math"] }, "\u{1D6E3}": { math: "B", alt: ["unicode-math"] }, "\u{1D6E4}": { math: "\\Gamma", alt: ["unicode-math"] }, "\u{1D6E5}": { math: "\\Delta", alt: ["unicode-math"] }, "\u{1D6E6}": { math: "E", alt: ["unicode-math"] }, "\u{1D6E7}": { math: "Z", alt: ["unicode-math"] }, "\u{1D6E8}": { math: "H", alt: ["unicode-math"] }, "\u{1D6E9}": { math: "\\Theta", alt: ["unicode-math"] }, "\u{1D6EA}": { math: "I", alt: ["unicode-math"] }, "\u{1D6EB}": { math: "K", alt: ["unicode-math"] }, "\u{1D6EC}": { math: "\\Lambda", alt: ["unicode-math"] }, "\u{1D6ED}": { math: "M", alt: ["unicode-math"] }, "\u{1D6EE}": { math: "N", alt: ["unicode-math"] }, "\u{1D6EF}": { math: "\\Xi", alt: ["unicode-math"] }, "\u{1D6F0}": { math: "O", alt: ["unicode-math"] }, "\u{1D6F1}": { math: "\\Pi", alt: ["unicode-math"] }, "\u{1D6F2}": { math: "P", alt: ["unicode-math"] }, "\u{1D6F3}": { math: "\\Theta", alt: ["unicode-math"] }, "\u{1D6F4}": { math: "\\Sigma", alt: ["unicode-math"] }, "\u{1D6F5}": { math: "T", alt: ["unicode-math"] }, "\u{1D6F6}": { math: "\\Upsilon", alt: ["unicode-math"] }, "\u{1D6F7}": { math: "\\Phi", alt: ["unicode-math"] }, "\u{1D6F8}": { math: "X", alt: ["unicode-math"] }, "\u{1D6F9}": { math: "\\Psi", alt: ["unicode-math"] }, "\u{1D6FA}": { math: "\\Omega", alt: ["unicode-math"] }, "\u{1D6FB}": { math: "\\nabla", alt: ["unicode-math"] }, "\u{1D6FC}": { math: "A", alt: ["unicode-math"] }, "\u{1D6FD}": { math: "B", alt: ["unicode-math"] }, "\u{1D6FE}": { math: "\\gamma", alt: ["unicode-math"] }, "\u{1D6FF}": { math: "\\delta", alt: ["unicode-math"] }, "\u{1D700}": { math: "E", alt: ["unicode-math"] }, "\u{1D701}": { math: "Z", alt: ["unicode-math"] }, "\u{1D702}": { math: "H", alt: ["unicode-math"] }, "\u{1D703}": { math: "\\theta", alt: ["unicode-math"] }, "\u{1D704}": { math: "I", alt: ["unicode-math"] }, "\u{1D705}": { math: "K", alt: ["unicode-math"] }, "\u{1D706}": { math: "\\lambda", alt: ["unicode-math"] }, "\u{1D707}": { math: "\\mu", alt: ["unicode-math"] }, "\u{1D708}": { math: "\\nu", alt: ["unicode-math"] }, "\u{1D709}": { math: "\\xi", alt: ["unicode-math"] }, "\u{1D70A}": { math: "o", alt: ["unicode-math"] }, "\u{1D70B}": { math: "\\pi", alt: ["unicode-math"] }, "\u{1D70D}": { math: "\\varsigma", alt: ["unicode-math"] }, "\u{1D70E}": { math: "\\sigma", alt: ["unicode-math"] }, "\u{1D70F}": { math: "T", alt: ["unicode-math"] }, "\u{1D710}": { math: "\\upsilon", alt: ["unicode-math"] }, "\u{1D711}": { math: "\\varphi", alt: ["unicode-math"] }, "\u{1D712}": { math: "X", alt: ["unicode-math"] }, "\u{1D713}": { math: "\\psi", alt: ["unicode-math"] }, "\u{1D714}": { math: "\\omega", alt: ["unicode-math"] }, "\u{1D715}": { math: "\\partial", alt: ["unicode-math"] }, "\u{1D716}": { math: "\\in", alt: ["unicode-math"] }, "\u{1D717}": { math: "\\vartheta", alt: ["unicode-math"] }, "\u{1D718}": { math: "\\varkappa", alt: ["unicode-math"] }, "\u{1D719}": { math: "\\phi", alt: ["unicode-math"] }, "\u{1D71A}": { math: "\\varrho", alt: ["unicode-math"] }, "\u{1D71B}": { math: "\\varpi", alt: ["unicode-math"] }, "\u{1D71C}": { math: "\\mathbit{A}", alt: ["unicode-math"] }, "\u{1D71D}": { math: "\\mathbit{B}", alt: ["unicode-math"] }, "\u{1D71E}": { math: "\\mathbit{\\Gamma}", alt: ["unicode-math"] }, "\u{1D71F}": { math: "\\mathbit{\\Delta}", alt: ["unicode-math"] }, "\u{1D720}": { math: "\\mathbit{E}", alt: ["unicode-math"] }, "\u{1D721}": { math: "\\mathbit{Z}", alt: ["unicode-math"] }, "\u{1D722}": { math: "\\mathbit{H}", alt: ["unicode-math"] }, "\u{1D723}": { math: "\\mathbit{\\Theta}", alt: ["unicode-math"] }, "\u{1D724}": { math: "\\mathbit{I}", alt: ["unicode-math"] }, "\u{1D725}": { math: "\\mathbit{K}", alt: ["unicode-math"] }, "\u{1D726}": { math: "\\mathbit{\\Lambda}", alt: ["unicode-math"] }, "\u{1D727}": { math: "M", alt: ["unicode-math"] }, "\u{1D728}": { math: "N", alt: ["unicode-math"] }, "\u{1D729}": { math: "\\mathbit{\\Xi}", alt: ["unicode-math"] }, "\u{1D72A}": { math: "O", alt: ["unicode-math"] }, "\u{1D72B}": { math: "\\mathbit{\\Pi}", alt: ["unicode-math"] }, "\u{1D72C}": { math: "\\mathbit{P}", alt: ["unicode-math"] }, "\u{1D72D}": { math: "\\mathbit{O}", alt: ["unicode-math"] }, "\u{1D72E}": { math: "\\mathbit{\\Sigma}", alt: ["unicode-math"] }, "\u{1D72F}": { math: "\\mathbit{T}", alt: ["unicode-math"] }, "\u{1D730}": { math: "\\mathbit{\\Upsilon}", alt: ["unicode-math"] }, "\u{1D731}": { math: "\\mathbit{\\Phi}", alt: ["unicode-math"] }, "\u{1D732}": { math: "\\mathbit{X}", alt: ["unicode-math"] }, "\u{1D733}": { math: "\\mathbit{\\Psi}", alt: ["unicode-math"] }, "\u{1D734}": { math: "\\mathbit{\\Omega}", alt: ["unicode-math"] }, "\u{1D735}": { math: "\\mathbit{\\nabla}", alt: ["unicode-math"] }, "\u{1D736}": { math: "\\mathbit{\\alpha}", alt: ["unicode-math"] }, "\u{1D737}": { math: "\\mathbit{\\beta}", alt: ["unicode-math"] }, "\u{1D738}": { math: "\\mathbit{\\gamma}", alt: ["unicode-math"] }, "\u{1D739}": { math: "\\mathbit{\\delta}", alt: ["unicode-math"] }, "\u{1D73A}": { math: "\\mathbit{\\epsilon}", alt: ["unicode-math"] }, "\u{1D73B}": { math: "\\mathbit{\\zeta}", alt: ["unicode-math"] }, "\u{1D73C}": { math: "\\mathbit{\\eta}", alt: ["unicode-math"] }, "\u{1D73D}": { math: "\\mathbit{\\theta}", alt: ["unicode-math"] }, "\u{1D73E}": { math: "\\mathbit{\\imath}", alt: ["unicode-math"] }, "\u{1D73F}": { math: "\\mathbit{\\kappa}", alt: ["unicode-math"] }, "\u{1D740}": { math: "\\mathbit{\\lambda}", alt: ["unicode-math"] }, "\u{1D741}": { math: "\\mu", alt: ["unicode-math"] }, "\u{1D742}": { math: "v", alt: ["unicode-math"] }, "\u{1D743}": { math: "\\mathbit{\\xi}", alt: ["unicode-math"] }, "\u{1D744}": { math: "O", alt: ["unicode-math"] }, "\u{1D745}": { math: "\\mathbit{\\pi}", alt: ["unicode-math"] }, "\u{1D746}": { math: "\\mathbit{\\rho}", alt: ["unicode-math"] }, "\u{1D747}": { math: "\\mathbit{\\varsigma}", alt: ["unicode-math"] }, "\u{1D748}": { math: "\\mathbit{\\sigma}", alt: ["unicode-math"] }, "\u{1D749}": { math: "\\mathbit{\\tau}", alt: ["unicode-math"] }, "\u{1D74A}": { math: "\\mathbit{\\upsilon}", alt: ["unicode-math"] }, "\u{1D74B}": { math: "\\mathbit{\\varphi}", alt: ["unicode-math"] }, "\u{1D74C}": { math: "\\mathbit{\\chi}", alt: ["unicode-math"] }, "\u{1D74D}": { math: "\\mathbit{\\psi}", alt: ["unicode-math"] }, "\u{1D74E}": { math: "\\mathbit{\\omega}", alt: ["unicode-math"] }, "\u{1D74F}": { math: "\\partial", alt: ["unicode-math"] }, "\u{1D750}": { math: "\\in", alt: ["unicode-math"] }, "\u{1D751}": { math: "\\mathbit{\\vartheta}", alt: ["unicode-math"] }, "\u{1D752}": { math: "\\mathbit{\\varkappa}", alt: ["unicode-math"] }, "\u{1D753}": { math: "\\mathbit{\\phi}", alt: ["unicode-math"] }, "\u{1D754}": { math: "\\mathbit{\\varrho}", alt: ["unicode-math"] }, "\u{1D755}": { math: "\\mathbit{\\varpi}", alt: ["unicode-math"] }, "\u{1D756}": { math: "\\mathsfbf{A}", alt: ["unicode-math"] }, "\u{1D757}": { math: "\\mathsfbf{B}", alt: ["unicode-math"] }, "\u{1D758}": { math: "\\mathsfbf{\\Gamma}", alt: ["unicode-math"] }, "\u{1D759}": { math: "\\mathsfbf{\\Delta}", alt: ["unicode-math"] }, "\u{1D75A}": { math: "\\mathsfbf{E}", alt: ["unicode-math"] }, "\u{1D75B}": { math: "\\mathsfbf{Z}", alt: ["unicode-math"] }, "\u{1D75C}": { math: "\\mathsfbf{H}", alt: ["unicode-math"] }, "\u{1D75D}": { math: "\\mathsfbf{\\Theta}", alt: ["unicode-math"] }, "\u{1D75E}": { math: "\\mathsfbf{I}", alt: ["unicode-math"] }, "\u{1D75F}": { math: "\\mathsfbf{K}", alt: ["unicode-math"] }, "\u{1D760}": { math: "\\mathsfbf{\\Lambda}", alt: ["unicode-math"] }, "\u{1D761}": { math: "M", alt: ["unicode-math"] }, "\u{1D762}": { math: "N", alt: ["unicode-math"] }, "\u{1D763}": { math: "\\mathsfbf{\\Xi}", alt: ["unicode-math"] }, "\u{1D764}": { math: "O", alt: ["unicode-math"] }, "\u{1D765}": { math: "\\mathsfbf{\\Pi}", alt: ["unicode-math"] }, "\u{1D766}": { math: "\\mathsfbf{P}", alt: ["unicode-math"] }, "\u{1D767}": { math: "\\mathsfbf{\\Theta}", alt: ["unicode-math"] }, "\u{1D768}": { math: "\\mathsfbf{\\Sigma}", alt: ["unicode-math"] }, "\u{1D769}": { math: "\\mathsfbf{T}", alt: ["unicode-math"] }, "\u{1D76A}": { math: "\\mathsfbf{\\Upsilon}", alt: ["unicode-math"] }, "\u{1D76B}": { math: "\\mathsfbf{\\Phi}", alt: ["unicode-math"] }, "\u{1D76C}": { math: "\\mathsfbf{X}", alt: ["unicode-math"] }, "\u{1D76D}": { math: "\\mathsfbf{\\Psi}", alt: ["unicode-math"] }, "\u{1D76E}": { math: "\\mathsfbf{\\Omega}", alt: ["unicode-math"] }, "\u{1D76F}": { math: "\\mathsfbf{\\nabla}", alt: ["unicode-math"] }, "\u{1D770}": { math: "\\mathsfbf{\\alpha}", alt: ["unicode-math"] }, "\u{1D771}": { math: "\\mathsfbf{\\beta}", alt: ["unicode-math"] }, "\u{1D772}": { math: "\\mathsfbf{\\gamma}", alt: ["unicode-math"] }, "\u{1D773}": { math: "\\mathsfbf{\\delta}", alt: ["unicode-math"] }, "\u{1D774}": { math: "\\mathsfbf{\\varepsilon}", alt: ["unicode-math"] }, "\u{1D775}": { math: "\\mathsfbf{\\zeta}", alt: ["unicode-math"] }, "\u{1D776}": { math: "\\mathsfbf{\\eta}", alt: ["unicode-math"] }, "\u{1D777}": { math: "\\mathsfbf{\\theta}", alt: ["unicode-math"] }, "\u{1D778}": { math: "\\mathsfbf{\\imath}", alt: ["unicode-math"] }, "\u{1D779}": { math: "\\mathsfbf{\\kappa}", alt: ["unicode-math"] }, "\u{1D77A}": { math: "\\mathsfbf{\\lambda}", alt: ["unicode-math"] }, "\u{1D77B}": { math: "\\mu", alt: ["unicode-math"] }, "\u{1D77C}": { math: "\\nu", alt: ["unicode-math"] }, "\u{1D77D}": { math: "\\mathsfbf{\\xi}", alt: ["unicode-math"] }, "\u{1D77E}": { math: "o", alt: ["unicode-math"] }, "\u{1D77F}": { math: "\\mathsfbf{\\pi}", alt: ["unicode-math"] }, "\u{1D780}": { math: "\\mathsfbf{\\rho}", alt: ["unicode-math"] }, "\u{1D781}": { math: "\\mathsfbf{\\varsigma}", alt: ["unicode-math"] }, "\u{1D782}": { math: "\\mathsfbf{\\sigma}", alt: ["unicode-math"] }, "\u{1D783}": { math: "\\mathsfbf{\\tau}", alt: ["unicode-math"] }, "\u{1D784}": { math: "\\mathsfbf{\\upsilon}", alt: ["unicode-math"] }, "\u{1D785}": { math: "\\mathsfbf{\\varphi}", alt: ["unicode-math"] }, "\u{1D786}": { math: "\\mathsfbf{\\chi}", alt: ["unicode-math"] }, "\u{1D787}": { math: "\\mathsfbf{\\psi}", alt: ["unicode-math"] }, "\u{1D788}": { math: "\\mathsfbf{\\omega}", alt: ["unicode-math"] }, "\u{1D789}": { math: "\\partial", alt: ["unicode-math"] }, "\u{1D78A}": { math: "\\in", alt: ["unicode-math"] }, "\u{1D78B}": { math: "\\mathsfbf{\\vartheta}", alt: ["unicode-math"] }, "\u{1D78C}": { math: "\\mathsfbf{\\varkappa}", alt: ["unicode-math"] }, "\u{1D78D}": { math: "\\mathsfbf{\\phi}", alt: ["unicode-math"] }, "\u{1D78E}": { math: "\\mathsfbf{\\varrho}", alt: ["unicode-math"] }, "\u{1D78F}": { math: "\\mathsfbf{\\varpi}", alt: ["unicode-math"] }, "\u{1D790}": { math: "\\mathsfbfsl{A}", alt: ["unicode-math"] }, "\u{1D791}": { math: "\\mathsfbfsl{B}", alt: ["unicode-math"] }, "\u{1D792}": { math: "\\mathsfbfsl{\\Gamma}", alt: ["unicode-math"] }, "\u{1D793}": { math: "\\mathsfbfsl{\\Delta}", alt: ["unicode-math"] }, "\u{1D794}": { math: "\\mathsfbfsl{E}", alt: ["unicode-math"] }, "\u{1D795}": { math: "\\mathsfbfsl{Z}", alt: ["unicode-math"] }, "\u{1D796}": { math: "\\mathsfbfsl{H}", alt: ["unicode-math"] }, "\u{1D797}": { math: "\\mathsfbfsl{\\Theta}", alt: ["unicode-math"] }, "\u{1D798}": { math: "\\mathsfbfsl{I}", alt: ["unicode-math"] }, "\u{1D799}": { math: "\\mathsfbfsl{K}", alt: ["unicode-math"] }, "\u{1D79A}": { math: "\\mathsfbfsl{\\Lambda}", alt: ["unicode-math"] }, "\u{1D79B}": { math: "\\mathsfbfsl{M}", alt: ["unicode-math"] }, "\u{1D79C}": { math: "\\mathsfbfsl{N}", alt: ["unicode-math"] }, "\u{1D79D}": { math: "\\mathsfbfsl{\\Xi}", alt: ["unicode-math"] }, "\u{1D79E}": { math: "\\mathsfbfsl{O}", alt: ["unicode-math"] }, "\u{1D79F}": { math: "\\mathsfbfsl{\\Pi}", alt: ["unicode-math"] }, "\u{1D7A0}": { math: "\\mathsfbfsl{P}", alt: ["unicode-math"] }, "\u{1D7A1}": { math: "\\mathsfbfsl{\\Theta}", alt: ["unicode-math"] }, "\u{1D7A2}": { math: "\\mathsfbfsl{\\Sigma}", alt: ["unicode-math"] }, "\u{1D7A3}": { math: "\\mathsfbfsl{T}", alt: ["unicode-math"] }, "\u{1D7A4}": { math: "\\mathsfbfsl{\\Upsilon}", alt: ["unicode-math"] }, "\u{1D7A5}": { math: "\\mathsfbfsl{\\Phi}", alt: ["unicode-math"] }, "\u{1D7A6}": { math: "\\mathsfbfsl{X}", alt: ["unicode-math"] }, "\u{1D7A7}": { math: "\\mathsfbfsl{\\Psi}", alt: ["unicode-math"] }, "\u{1D7A8}": { math: "\\mathsfbfsl{\\Omega}", alt: ["unicode-math"] }, "\u{1D7A9}": { math: "\\mathsfbfsl{\\nabla}", alt: ["unicode-math"] }, "\u{1D7AA}": { math: "\\mathsfbfsl{\\alpha}", alt: ["unicode-math"] }, "\u{1D7AB}": { math: "\\mathsfbfsl{\\beta}", alt: ["unicode-math"] }, "\u{1D7AC}": { math: "\\mathsfbfsl{\\gamma}", alt: ["unicode-math"] }, "\u{1D7AD}": { math: "\\mathsfbfsl{\\delta}", alt: ["unicode-math"] }, "\u{1D7AE}": { math: "\\mathsfbfsl{\\varepsilon}", alt: ["unicode-math"] }, "\u{1D7AF}": { math: "\\mathsfbfsl{\\zeta}", alt: ["unicode-math"] }, "\u{1D7B0}": { math: "\\mathsfbfsl{\\eta}", alt: ["unicode-math"] }, "\u{1D7B1}": { math: "\\mathsfbfsl{\\theta}", alt: ["unicode-math"] }, "\u{1D7B2}": { math: "\\mathsfbfsl{\\imath}", alt: ["unicode-math"] }, "\u{1D7B3}": { math: "\\mathsfbfsl{\\kappa}", alt: ["unicode-math"] }, "\u{1D7B4}": { math: "\\mathsfbfsl{\\lambda}", alt: ["unicode-math"] }, "\u{1D7B5}": { math: "\\mu", alt: ["unicode-math"] }, "\u{1D7B6}": { math: "\\nu", alt: ["unicode-math"] }, "\u{1D7B7}": { math: "\\mathsfbfsl{\\xi}", alt: ["unicode-math"] }, "\u{1D7B8}": { math: "o", alt: ["unicode-math"] }, "\u{1D7B9}": { math: "\\mathsfbfsl{\\pi}", alt: ["unicode-math"] }, "\u{1D7BA}": { math: "\\mathsfbfsl{\\rho}", alt: ["unicode-math"] }, "\u{1D7BB}": { math: "\\mathsfbfsl{\\varsigma}", alt: ["unicode-math"] }, "\u{1D7BC}": { math: "\\mathsfbfsl{\\sigma}", alt: ["unicode-math"] }, "\u{1D7BD}": { math: "\\mathsfbfsl{\\tau}", alt: ["unicode-math"] }, "\u{1D7BE}": { math: "\\mathsfbfsl{\\upsilon}", alt: ["unicode-math"] }, "\u{1D7BF}": { math: "\\mathsfbfsl{\\varphi}", alt: ["unicode-math"] }, "\u{1D7C0}": { math: "\\mathsfbfsl{\\chi}", alt: ["unicode-math"] }, "\u{1D7C1}": { math: "\\mathsfbfsl{\\psi}", alt: ["unicode-math"] }, "\u{1D7C2}": { math: "\\mathsfbfsl{\\omega}", alt: ["unicode-math"] }, "\u{1D7C3}": { math: "\\partial", alt: ["unicode-math"] }, "\u{1D7C4}": { math: "\\in", alt: ["unicode-math"] }, "\u{1D7C5}": { math: "\\mathsfbfsl{\\vartheta}", alt: ["unicode-math"] }, "\u{1D7C6}": { math: "\\mathsfbfsl{\\varkappa}", alt: ["unicode-math"] }, "\u{1D7C7}": { math: "\\mathsfbfsl{\\phi}", alt: ["unicode-math"] }, "\u{1D7C8}": { math: "\\mathsfbfsl{\\varrho}", alt: ["unicode-math"] }, "\u{1D7C9}": { math: "\\mathsfbfsl{\\varpi}", alt: ["unicode-math"] }, "\u{1D7CA}": { math: "\\mbfDigamma", alt: ["unicode-math"] }, "\u{1D7CB}": { math: "\\mbfdigamma", alt: ["unicode-math"] }, "\u{1D7CE}": { math: "\\mathbf{0}", alt: ["unicode-math"] }, "\u{1D7CF}": { math: "\\mathbf{1}", alt: ["unicode-math"] }, "\u{1D7D0}": { math: "\\mathbf{2}", alt: ["unicode-math"] }, "\u{1D7D1}": { math: "\\mathbf{3}", alt: ["unicode-math"] }, "\u{1D7D2}": { math: "\\mathbf{4}", alt: ["unicode-math"] }, "\u{1D7D3}": { math: "\\mathbf{5}", alt: ["unicode-math"] }, "\u{1D7D4}": { math: "\\mathbf{6}", alt: ["unicode-math"] }, "\u{1D7D5}": { math: "\\mathbf{7}", alt: ["unicode-math"] }, "\u{1D7D6}": { math: "\\mathbf{8}", alt: ["unicode-math"] }, "\u{1D7D7}": { math: "\\mathbf{9}", alt: ["unicode-math"] }, "\u{1D7D8}": { math: "\\mathbb{0}", alt: ["unicode-math"] }, "\u{1D7D9}": { math: "\\mathbb{1}", alt: ["unicode-math"] }, "\u{1D7DA}": { math: "\\mathbb{2}", alt: ["unicode-math"] }, "\u{1D7DB}": { math: "\\mathbb{3}", alt: ["unicode-math"] }, "\u{1D7DC}": { math: "\\mathbb{4}", alt: ["unicode-math"] }, "\u{1D7DD}": { math: "\\mathbb{5}", alt: ["unicode-math"] }, "\u{1D7DE}": { math: "\\mathbb{6}", alt: ["unicode-math"] }, "\u{1D7DF}": { math: "\\mathbb{7}", alt: ["unicode-math"] }, "\u{1D7E0}": { math: "\\mathbb{8}", alt: ["unicode-math"] }, "\u{1D7E1}": { math: "\\mathbb{9}", alt: ["unicode-math"] }, "\u{1D7E2}": { math: "\\mathsf{0}", alt: ["unicode-math"] }, "\u{1D7E3}": { math: "\\mathsf{1}", alt: ["unicode-math"] }, "\u{1D7E4}": { math: "\\mathsf{2}", alt: ["unicode-math"] }, "\u{1D7E5}": { math: "\\mathsf{3}", alt: ["unicode-math"] }, "\u{1D7E6}": { math: "\\mathsf{4}", alt: ["unicode-math"] }, "\u{1D7E7}": { math: "\\mathsf{5}", alt: ["unicode-math"] }, "\u{1D7E8}": { math: "\\mathsf{6}", alt: ["unicode-math"] }, "\u{1D7E9}": { math: "\\mathsf{7}", alt: ["unicode-math"] }, "\u{1D7EA}": { math: "\\mathsf{8}", alt: ["unicode-math"] }, "\u{1D7EB}": { math: "\\mathsf{9}", alt: ["unicode-math"] }, "\u{1D7EC}": { math: "\\mathsfbf{0}", alt: ["unicode-math"] }, "\u{1D7ED}": { math: "\\mathsfbf{1}", alt: ["unicode-math"] }, "\u{1D7EE}": { math: "\\mathsfbf{2}", alt: ["unicode-math"] }, "\u{1D7EF}": { math: "\\mathsfbf{3}", alt: ["unicode-math"] }, "\u{1D7F0}": { math: "\\mathsfbf{4}", alt: ["unicode-math"] }, "\u{1D7F1}": { math: "\\mathsfbf{5}", alt: ["unicode-math"] }, "\u{1D7F2}": { math: "\\mathsfbf{6}", alt: ["unicode-math"] }, "\u{1D7F3}": { math: "\\mathsfbf{7}", alt: ["unicode-math"] }, "\u{1D7F4}": { math: "\\mathsfbf{8}", alt: ["unicode-math"] }, "\u{1D7F5}": { math: "\\mathsfbf{9}", alt: ["unicode-math"] }, "\u{1D7F6}": { math: "\\mathtt{0}", alt: ["unicode-math"] }, "\u{1D7F7}": { math: "\\mathtt{1}", alt: ["unicode-math"] }, "\u{1D7F8}": { math: "\\mathtt{2}", alt: ["unicode-math"] }, "\u{1D7F9}": { math: "\\mathtt{3}", alt: ["unicode-math"] }, "\u{1D7FA}": { math: "\\mathtt{4}", alt: ["unicode-math"] }, "\u{1D7FB}": { math: "\\mathtt{5}", alt: ["unicode-math"] }, "\u{1D7FC}": { math: "\\mathtt{6}", alt: ["unicode-math"] }, "\u{1D7FD}": { math: "\\mathtt{7}", alt: ["unicode-math"] }, "\u{1D7FE}": { math: "\\mathtt{8}", alt: ["unicode-math"] }, "\u{1D7FF}": { math: "\\mathtt{9}", alt: ["unicode-math"] }, " \u035A": { math: "_\\infty" }, "\u2029": { text: "{\\par}" }, "/\u200B": { text: "{\\slash}" }, "^": { text: "{\\textasciicircum}" }, i\uFE20a\uFE21: { text: "\\t{ia}" }, "{": { text: "\\{" }, "}": { text: "\\}" }, "~": { text: "{\\textasciitilde}" }, "\xA1": { text: "{\\textexclamdown}" }, "\u20AC": { text: "{\\texteuro}", alt: ["unicode-math"] }, "\xA8": { text: "{\\textasciidieresis}" }, "\xAB": { text: "<<" }, "\xAE": { text: "{\\textregistered}" }, "\xAF": { text: "{\\textasciimacron}" }, "\xB4": { text: "{\\textasciiacute}" }, \u00B5: { text: "{\\textmu}" }, "\xB8": { text: "{\\c}" }, "\xBB": { text: ">>" }, "\xBF": { text: "{\\textquestiondown}" }, \u00C6: { text: "{\\AE}" }, \u00D0: { text: "{\\DH}" }, \u00D8: { text: "{\\O}" }, \u00DE: { text: "{\\TH}" }, \u00DF: { text: "{\\ss}" }, a\u030A: { text: "{\\aa}" }, \u00E6: { text: "{\\ae}" }, \u00F0: { text: "{\\dh}", alt: ["amssymb", "arevmath", "textcomp"] }, \u00F8: { text: "{\\o}" }, \u00FE: { text: "{\\th}" }, \u0110: { text: "{\\DJ}" }, \u0111: { text: "{\\dj}" }, i\u0306: { text: "{\\u \\i}" }, \u0132: { text: "{\\IJ}" }, \u0133: { text: "{\\ij}" }, j\u0302: { text: "{\\^\\j}" }, \u0138: { text: "K", alt: ["xecjk"] }, \u0141: { text: "{\\L}" }, \u0142: { text: "{\\l}" }, \u0149: { text: "'n" }, \u014A: { text: "{\\NG}" }, \u014B: { text: "{\\ng}" }, \u0152: { text: "{\\OE}" }, \u0153: { text: "{\\oe}" }, \u017F: { text: "s" }, \u01AA: { text: "{\\textesh}" }, \u01C2: { text: "{\\textdoublepipe}", alt: ["tipa"] }, \u0261: { text: "g" }, "\u02B9": { text: "'" }, \u02BB: { text: "'" }, \u02BC: { text: "'" }, \u02BD: { text: "'" }, "\u02C6": { text: "{\\textasciicircum}" }, "\u02C7": { text: "{\\textasciicaron}" }, "\u02C9": { text: "-" }, "\u02D8": { text: "{\\textasciibreve}" }, "\u02DA": { text: "{\\r{}}" }, "\u02DB": { text: "{\\k{}}" }, "\u02DC": { text: "{\\texttildelow}" }, "\u02DD": { text: "{\\textacutedbl}" }, "\u0300": { text: "{\\`}", alt: ["unicode-math"] }, "\u0301": { text: "{\\'}", alt: ["unicode-math"] }, "\u0302": { text: "{\\^}" }, "\u0303": { text: "{\\~}", alt: ["unicode-math"] }, "\u0304": { text: "{\\=}" }, "\u0306": { text: "{\\u}", alt: ["unicode-math"] }, "\u0307": { text: "{\\.}", alt: ["unicode-math"] }, "\u0308": { text: '{\\"}', alt: ["unicode-math"] }, "\u030B": { text: "{\\H}" }, "\u030C": { text: "{\\v}", alt: ["unicode-math"] }, "\u030F": { text: "{\\textdoublegrave}" }, "\u0316": { text: "{\\textsubgrave}" }, "\u0323": { text: "{\\d}" }, "\u0326": { text: "{\\textcommabelow}" }, "\u0327": { text: "{\\c}" }, "\u0328": { text: "{\\k}" }, "\u0375": { text: "," }, ";": { text: ";" }, \u0399\u0301: { text: "{\\'{}I}" }, \u039F\u0301: { text: "{\\'{}O}" }, \u03D0: { text: "\\Pisymbol{ppi022}{87}", alt: ["MinionPro", "unicode-math"] }, \u046B: { text: "{\\cyrchar\\cyrbyus}" }, \u0473: { text: "{\\cyrchar\\cyrfita}" }, \u0475: { text: "{\\cyrchar\\cyrizh}" }, "\u04C5": { text: "{\\cyrchar\\CYRLDSC}" }, "\u04C6": { text: "{\\cyrchar\\cyrldsc}" }, "\u04CD": { text: "{\\cyrchar\\CYRMDSC}" }, "\u04CE": { text: "{\\cyrchar\\cyrmdsc}" }, \u0463: { text: "{\\cyrchar\\cyryat}" }, \u0415\u0308: { text: "{\\cyrchar\\CYRYO}" }, \u0402: { text: "{\\cyrchar\\CYRDJE}" }, \u0413\u0301: { text: "\\cyrchar{\\'\\CYRG}" }, \u0404: { text: "{\\cyrchar\\CYRIE}" }, \u0405: { text: "{\\cyrchar\\CYRDZE}" }, \u0406: { text: "{\\cyrchar\\CYRII}" }, \u0406\u0308: { text: "{\\cyrchar\\CYRYI}" }, \u0408: { text: "{\\cyrchar\\CYRJE}" }, \u0409: { text: "{\\cyrchar\\CYRLJE}" }, \u040A: { text: "{\\cyrchar\\CYRNJE}" }, \u040B: { text: "{\\cyrchar\\CYRTSHE}" }, \u041A\u0301: { text: "\\cyrchar{\\'\\CYRK}" }, \u0423\u0306: { text: "{\\cyrchar\\CYRUSHRT}" }, \u040F: { text: "{\\cyrchar\\CYRDZHE}" }, \u0410: { text: "{\\cyrchar\\CYRA}" }, \u0411: { text: "{\\cyrchar\\CYRB}" }, \u0412: { text: "{\\cyrchar\\CYRV}" }, \u0413: { text: "{\\cyrchar\\CYRG}" }, \u0414: { text: "{\\cyrchar\\CYRD}" }, \u0415: { text: "{\\cyrchar\\CYRE}" }, \u0416: { text: "{\\cyrchar\\CYRZH}" }, \u0417: { text: "{\\cyrchar\\CYRZ}" }, \u0418: { text: "{\\cyrchar\\CYRI}" }, \u0418\u0306: { text: "{\\cyrchar\\CYRISHRT}" }, \u041A: { text: "{\\cyrchar\\CYRK}" }, \u041B: { text: "{\\cyrchar\\CYRL}" }, \u041C: { text: "{\\cyrchar\\CYRM}" }, \u041D: { text: "{\\cyrchar\\CYRN}" }, \u041E: { text: "{\\cyrchar\\CYRO}" }, \u041F: { text: "{\\cyrchar\\CYRP}" }, \u0420: { text: "{\\cyrchar\\CYRR}" }, \u0421: { text: "{\\cyrchar\\CYRS}" }, \u0422: { text: "{\\cyrchar\\CYRT}" }, \u0423: { text: "{\\cyrchar\\CYRU}" }, \u0424: { text: "{\\cyrchar\\CYRF}" }, \u0425: { text: "{\\cyrchar\\CYRH}" }, \u0426: { text: "{\\cyrchar\\CYRC}" }, \u0427: { text: "{\\cyrchar\\CYRCH}" }, \u0428: { text: "{\\cyrchar\\CYRSH}" }, \u0429: { text: "{\\cyrchar\\CYRSHCH}" }, \u042A: { text: "{\\cyrchar\\CYRHRDSN}" }, \u042B: { text: "{\\cyrchar\\CYRERY}" }, \u042C: { text: "{\\cyrchar\\CYRSFTSN}" }, \u042D: { text: "{\\cyrchar\\CYREREV}" }, \u042E: { text: "{\\cyrchar\\CYRYU}" }, \u042F: { text: "{\\cyrchar\\CYRYA}" }, \u0430: { text: "{\\cyrchar\\cyra}" }, \u0431: { text: "{\\cyrchar\\cyrb}" }, \u0432: { text: "{\\cyrchar\\cyrv}" }, \u0433: { text: "{\\cyrchar\\cyrg}" }, \u0434: { text: "{\\cyrchar\\cyrd}" }, \u0435: { text: "{\\cyrchar\\cyre}" }, \u0436: { text: "{\\cyrchar\\cyrzh}" }, \u0437: { text: "{\\cyrchar\\cyrz}" }, \u0438: { text: "{\\cyrchar\\cyri}" }, \u0438\u0306: { text: "{\\cyrchar\\cyrishrt}" }, \u043A: { text: "{\\cyrchar\\cyrk}" }, \u043B: { text: "{\\cyrchar\\cyrl}" }, \u043C: { text: "{\\cyrchar\\cyrm}" }, \u043D: { text: "{\\cyrchar\\cyrn}" }, \u043E: { text: "{\\cyrchar\\cyro}" }, \u043F: { text: "{\\cyrchar\\cyrp}" }, \u0440: { text: "{\\cyrchar\\cyrr}" }, \u0441: { text: "{\\cyrchar\\cyrs}" }, \u0442: { text: "{\\cyrchar\\cyrt}" }, \u0443: { text: "{\\cyrchar\\cyru}" }, \u0444: { text: "{\\cyrchar\\cyrf}" }, \u0445: { text: "{\\cyrchar\\cyrh}" }, \u0446: { text: "{\\cyrchar\\cyrc}" }, \u0447: { text: "{\\cyrchar\\cyrch}" }, \u0448: { text: "{\\cyrchar\\cyrsh}" }, \u0449: { text: "{\\cyrchar\\cyrshch}" }, \u044A: { text: "{\\cyrchar\\cyrhrdsn}" }, \u044B: { text: "{\\cyrchar\\cyrery}" }, \u044C: { text: "{\\cyrchar\\cyrsftsn}" }, \u044D: { text: "{\\cyrchar\\cyrerev}" }, \u044E: { text: "{\\cyrchar\\cyryu}" }, \u044F: { text: "{\\cyrchar\\cyrya}" }, \u0435\u0308: { text: "{\\cyrchar\\cyryo}" }, \u0452: { text: "{\\cyrchar\\cyrdje}" }, \u0433\u0301: { text: "\\cyrchar{\\'\\cyrg}" }, \u0454: { text: "{\\cyrchar\\cyrie}" }, \u0455: { text: "{\\cyrchar\\cyrdze}" }, \u0456: { text: "{\\cyrchar\\cyrii}" }, \u0456\u0308: { text: "{\\cyrchar\\cyryi}" }, \u0458: { text: "{\\cyrchar\\cyrje}" }, \u0459: { text: "{\\cyrchar\\cyrlje}" }, \u045A: { text: "{\\cyrchar\\cyrnje}" }, \u045B: { text: "{\\cyrchar\\cyrtshe}" }, \u043A\u0301: { text: "\\cyrchar{\\'\\cyrk}" }, \u0443\u0306: { text: "{\\cyrchar\\cyrushrt}" }, \u045F: { text: "{\\cyrchar\\cyrdzhe}" }, \u0460: { text: "{\\cyrchar\\CYROMEGA}" }, \u0461: { text: "{\\cyrchar\\cyromega}" }, \u0462: { text: "{\\cyrchar\\CYRYAT}" }, \u0464: { text: "{\\cyrchar\\CYRIOTE}" }, \u0465: { text: "{\\cyrchar\\cyriote}" }, \u0466: { text: "{\\cyrchar\\CYRLYUS}" }, \u0467: { text: "{\\cyrchar\\cyrlyus}" }, \u0468: { text: "{\\cyrchar\\CYRIOTLYUS}" }, \u0469: { text: "{\\cyrchar\\cyriotlyus}" }, \u046A: { text: "{\\cyrchar\\CYRBYUS}" }, \u046C: { text: "{\\cyrchar\\CYRIOTBYUS}" }, \u046D: { text: "{\\cyrchar\\cyriotbyus}" }, \u046E: { text: "{\\cyrchar\\CYRKSI}" }, \u046F: { text: "{\\cyrchar\\cyrksi}" }, \u0470: { text: "{\\cyrchar\\CYRPSI}" }, \u0471: { text: "{\\cyrchar\\cyrpsi}" }, \u0472: { text: "{\\cyrchar\\CYRFITA}" }, \u0474: { text: "{\\cyrchar\\CYRIZH}" }, \u0478: { text: "{\\cyrchar\\CYRUK}" }, \u0479: { text: "{\\cyrchar\\cyruk}" }, \u047A: { text: "{\\cyrchar\\CYROMEGARND}" }, \u047B: { text: "{\\cyrchar\\cyromegarnd}" }, \u047C: { text: "{\\cyrchar\\CYROMEGATITLO}" }, \u047D: { text: "{\\cyrchar\\cyromegatitlo}" }, \u047E: { text: "{\\cyrchar\\CYROT}" }, \u047F: { text: "{\\cyrchar\\cyrot}" }, \u0480: { text: "{\\cyrchar\\CYRKOPPA}" }, \u0481: { text: "{\\cyrchar\\cyrkoppa}" }, "\u0482": { text: "{\\cyrchar\\cyrthousands}" }, "\u0488": { text: "{\\cyrchar\\cyrhundredthousands}" }, "\u0489": { text: "{\\cyrchar\\cyrmillions}" }, \u048C: { text: "{\\cyrchar\\CYRSEMISFTSN}" }, \u048D: { text: "{\\cyrchar\\cyrsemisftsn}" }, \u048E: { text: "{\\cyrchar\\CYRRTICK}" }, \u048F: { text: "{\\cyrchar\\cyrrtick}" }, \u0490: { text: "{\\cyrchar\\CYRGUP}" }, \u0491: { text: "{\\cyrchar\\cyrgup}" }, \u0492: { text: "{\\cyrchar\\CYRGHCRS}" }, \u0493: { text: "{\\cyrchar\\cyrghcrs}" }, \u0494: { text: "{\\cyrchar\\CYRGHK}" }, \u0495: { text: "{\\cyrchar\\cyrghk}" }, \u0496: { text: "{\\cyrchar\\CYRZHDSC}" }, \u0497: { text: "{\\cyrchar\\cyrzhdsc}" }, \u0498: { text: "{\\cyrchar\\CYRZDSC}" }, \u0499: { text: "{\\cyrchar\\cyrzdsc}" }, \u049A: { text: "{\\cyrchar\\CYRKDSC}" }, \u049B: { text: "{\\cyrchar\\cyrkdsc}" }, \u049C: { text: "{\\cyrchar\\CYRKVCRS}" }, \u049D: { text: "{\\cyrchar\\cyrkvcrs}" }, \u049E: { text: "{\\cyrchar\\CYRKHCRS}" }, \u049F: { text: "{\\cyrchar\\cyrkhcrs}" }, \u04A0: { text: "{\\cyrchar\\CYRKBEAK}" }, \u04A1: { text: "{\\cyrchar\\cyrkbeak}" }, \u04A2: { text: "{\\cyrchar\\CYRNDSC}" }, \u04A3: { text: "{\\cyrchar\\cyrndsc}" }, \u04A4: { text: "{\\cyrchar\\CYRNG}" }, \u04A5: { text: "{\\cyrchar\\cyrng}" }, \u04A6: { text: "{\\cyrchar\\CYRPHK}" }, \u04A7: { text: "{\\cyrchar\\cyrphk}" }, \u04A8: { text: "{\\cyrchar\\CYRABHHA}" }, \u04A9: { text: "{\\cyrchar\\cyrabhha}" }, \u04AA: { text: "{\\cyrchar\\CYRSDSC}" }, \u04AB: { text: "{\\cyrchar\\cyrsdsc}" }, \u04AC: { text: "{\\cyrchar\\CYRTDSC}" }, \u04AD: { text: "{\\cyrchar\\cyrtdsc}" }, \u04AE: { text: "{\\cyrchar\\CYRY}" }, \u04AF: { text: "{\\cyrchar\\cyry}" }, \u04B0: { text: "{\\cyrchar\\CYRYHCRS}" }, \u04B1: { text: "{\\cyrchar\\cyryhcrs}" }, \u04B2: { text: "{\\cyrchar\\CYRHDSC}" }, \u04B3: { text: "{\\cyrchar\\cyrhdsc}" }, \u04B4: { text: "{\\cyrchar\\CYRTETSE}" }, \u04B5: { text: "{\\cyrchar\\cyrtetse}" }, \u04B6: { text: "{\\cyrchar\\CYRCHRDSC}" }, \u04B7: { text: "{\\cyrchar\\cyrchrdsc}" }, \u04B8: { text: "{\\cyrchar\\CYRCHVCRS}" }, \u04B9: { text: "{\\cyrchar\\cyrchvcrs}" }, \u04BA: { text: "{\\cyrchar\\CYRSHHA}" }, \u04BB: { text: "{\\cyrchar\\cyrshha}" }, \u04BC: { text: "{\\cyrchar\\CYRABHCH}" }, \u04BD: { text: "{\\cyrchar\\cyrabhch}" }, \u04BE: { text: "{\\cyrchar\\CYRABHCHDSC}" }, \u04BF: { text: "{\\cyrchar\\cyrabhchdsc}" }, \u04C0: { text: "{\\cyrchar\\CYRpalochka}" }, \u04C3: { text: "{\\cyrchar\\CYRKHK}" }, \u04C4: { text: "{\\cyrchar\\cyrkhk}" }, \u04C7: { text: "{\\cyrchar\\CYRNHK}" }, \u04C8: { text: "{\\cyrchar\\cyrnhk}" }, \u04CB: { text: "{\\cyrchar\\CYRCHLDSC}" }, \u04CC: { text: "{\\cyrchar\\cyrchldsc}" }, \u04D4: { text: "{\\cyrchar\\CYRAE}" }, \u04D5: { text: "{\\cyrchar\\cyrae}" }, \u04D8: { text: "{\\cyrchar\\CYRSCHWA}" }, \u04D9: { text: "{\\cyrchar\\cyrschwa}" }, \u04E0: { text: "{\\cyrchar\\CYRABHDZE}" }, \u04E1: { text: "{\\cyrchar\\cyrabhdze}" }, \u04E8: { text: "{\\cyrchar\\CYROTLD}" }, \u04E9: { text: "{\\cyrchar\\cyrotld}" }, E\u0327\u0306: { text: "\\c{\\u{E}}" }, e\u0327\u0306: { text: "\\c{\\u{e}}" }, "\u2002": { text: "{\\enspace}" }, "\u2003\u2003": { text: "{\\qquad}" }, "\u2004": { text: "\\;" }, "\u2005": { text: "\\>" }, "\u2006": { text: "\\hspace{0.166em}" }, "\u2007": { text: "\\hphantom{0}" }, "\u2008": { text: "\\hphantom{,}" }, "\u2009": { text: "\\," }, "\u200B": { text: "\\hspace{0pt}" }, "\u200C": { text: "{\\null}" }, "\u2010": { text: "-", alt: ["unicode-math"] }, "\u2011": { text: "-" }, "\u2012": { text: "-" }, "\u2013": { text: "--" }, "\u2014": { text: "---" }, "\u2015": { text: "{\\texthorizontalbar}", alt: ["unicode-math"] }, "\u2016": { text: "{\\textbardbl}" }, "\u2018": { text: "`" }, "\u2019": { text: "'" }, "\u201A": { text: "{\\quotesinglbase}" }, "\u201C": { text: "``" }, "\u201D": { text: "''" }, "\u201E": { text: ",," }, "\u201F": { text: "{\\quotedblbase}" }, "\u2023": { text: ">" }, "\u2024": { text: "." }, "\u2025": { text: "..", alt: ["unicode-math"] }, "\u2027": { text: "-" }, "\u202F": { text: "\\," }, "\u2039": { text: "{\\guilsinglleft}" }, "\u203A": { text: "{\\guilsinglright}" }, "\u203E": { text: "-" }, "\u2044": { text: "{\\textfractionsolidus}", alt: ["unicode-math"] }, "\u2048": { text: "?!" }, "\u2049": { text: "!?" }, "\u204A": { text: "7" }, "\u2060": { text: "{\\nolinebreak}" }, "\u2100": { text: "a/c" }, "\u2101": { text: "a/s" }, "\u2103": { text: "{\\textcelsius}" }, "\u2105": { text: "c/o" }, "\u2106": { text: "c/u" }, "\u2109": { text: "F" }, "\u2116": { text: "{\\textnumero}" }, "\u2117": { text: "{\\textcircledP}" }, "\u2120": { text: "{\\textservicemark}" }, "\u2121": { text: "TEL" }, "\u2127": { text: "{\\textmho}", alt: ["unicode-math"] }, "\u2129": { text: "{\\textriota}", alt: ["unicode-math"] }, "\u212E": { text: "{\\textestimated}" }, "\u2160": { text: "I" }, "\u2161": { text: "II" }, "\u2162": { text: "III" }, "\u2163": { text: "IV" }, "\u2164": { text: "V" }, "\u2165": { text: "VI" }, "\u2166": { text: "VII" }, "\u2167": { text: "VIII" }, "\u2168": { text: "IX" }, "\u2169": { text: "X" }, "\u216A": { text: "XI" }, "\u216B": { text: "XII" }, "\u216C": { text: "L" }, "\u216D": { text: "C" }, "\u216E": { text: "D" }, "\u216F": { text: "M" }, "\u2170": { text: "i" }, "\u2171": { text: "ii" }, "\u2172": { text: "iii" }, "\u2173": { text: "iv" }, "\u2174": { text: "v" }, "\u2175": { text: "vi" }, "\u2176": { text: "vii" }, "\u2177": { text: "viii" }, "\u2178": { text: "ix" }, "\u2179": { text: "x" }, "\u217A": { text: "xi" }, "\u217B": { text: "xii" }, "\u217C": { text: "l" }, "\u217D": { text: "c" }, "\u217E": { text: "d" }, "\u217F": { text: "m" }, "\u2215": { text: "/", alt: ["unicode-math"] }, "\u221A": { text: "{\\textsurd}", alt: ["unicode-math"] }, "\u2422": { text: "{\\textblank}", alt: ["unicode-math"] }, "\u2460": { text: "\\ding{172}" }, "\u2461": { text: "\\ding{173}" }, "\u2462": { text: "\\ding{174}" }, "\u2463": { text: "\\ding{175}" }, "\u2464": { text: "\\ding{176}" }, "\u2465": { text: "\\ding{177}" }, "\u2466": { text: "\\ding{178}" }, "\u2467": { text: "\\ding{179}" }, "\u2468": { text: "\\ding{180}" }, "\u2469": { text: "\\ding{181}" }, "\u246A": { text: "(11)" }, "\u246B": { text: "(12)" }, "\u246C": { text: "(13)" }, "\u246D": { text: "(14)" }, "\u246E": { text: "(15)" }, "\u246F": { text: "(16)" }, "\u2470": { text: "(17)" }, "\u2471": { text: "(18)" }, "\u2472": { text: "(19)" }, "\u2473": { text: "(20)" }, "\u2474": { text: "(1)" }, "\u2475": { text: "(2)" }, "\u2476": { text: "(3)" }, "\u2477": { text: "(4)" }, "\u2478": { text: "(5)" }, "\u2479": { text: "(6)" }, "\u247A": { text: "(7)" }, "\u247B": { text: "(8)" }, "\u247C": { text: "(9)" }, "\u247D": { text: "(10)" }, "\u247E": { text: "(11)" }, "\u247F": { text: "(12)" }, "\u2480": { text: "(13)" }, "\u2481": { text: "(14)" }, "\u2482": { text: "(15)" }, "\u2483": { text: "(16)" }, "\u2484": { text: "(17)" }, "\u2485": { text: "(18)" }, "\u2486": { text: "(19)" }, "\u2487": { text: "(20)" }, "\u2488": { text: "1." }, "\u2489": { text: "2." }, "\u248A": { text: "3." }, "\u248B": { text: "4." }, "\u248C": { text: "5." }, "\u248D": { text: "6." }, "\u248E": { text: "7." }, "\u248F": { text: "8." }, "\u2490": { text: "9." }, "\u2491": { text: "10." }, "\u2492": { text: "11." }, "\u2493": { text: "12." }, "\u2494": { text: "13." }, "\u2495": { text: "14." }, "\u2496": { text: "15." }, "\u2497": { text: "16." }, "\u2498": { text: "17." }, "\u2499": { text: "18." }, "\u249A": { text: "19." }, "\u249B": { text: "20." }, "\u249C": { text: "(a)" }, "\u249D": { text: "(b)" }, "\u249E": { text: "(c)" }, "\u249F": { text: "(d)" }, "\u24A0": { text: "(e)" }, "\u24A1": { text: "(f)" }, "\u24A2": { text: "(g)" }, "\u24A3": { text: "(h)" }, "\u24A4": { text: "(i)" }, "\u24A5": { text: "(j)" }, "\u24A6": { text: "(k)" }, "\u24A7": { text: "(l)" }, "\u24A8": { text: "(m)" }, "\u24A9": { text: "(n)" }, "\u24AA": { text: "(o)" }, "\u24AB": { text: "(p)" }, "\u24AC": { text: "(q)" }, "\u24AD": { text: "(r)" }, "\u24AE": { text: "(s)" }, "\u24AF": { text: "(t)" }, "\u24B0": { text: "(u)" }, "\u24B1": { text: "(v)" }, "\u24B2": { text: "(w)" }, "\u24B3": { text: "(x)" }, "\u24B4": { text: "(y)" }, "\u24B5": { text: "(z)" }, "\u2500": { text: "-", alt: ["pmboxdraw"] }, "\u2504": { text: "-" }, "\u2508": { text: "-" }, "\u254C": { text: "-" }, "\u2572": { text: "\\" }, "\u2573": { text: "X" }, "\u257C": { text: "-", alt: ["pmboxdraw"] }, "\u257E": { text: "-", alt: ["pmboxdraw"] }, "\u25A0": { text: "\\ding{110}", alt: ["unicode-math"] }, "\u25B2": { text: "\\ding{115}", alt: ["unicode-math"] }, "\u25BC": { text: "\\ding{116}", alt: ["unicode-math"] }, "\u25D7": { text: "\\ding{119}", alt: ["unicode-math"] }, "\u25E6": { text: "{\\textopenbullet}", alt: ["unicode-math"] }, "\u2605": { text: "\\ding{72}", alt: ["unicode-math"] }, "\u2606": { text: "\\ding{73}", alt: ["unicode-math"] }, "\u260E": { text: "\\ding{37}" }, "\u2613": { text: "X" }, "\u261B": { text: "\\ding{42}" }, "\u2640": { text: "{\\venus}", alt: ["unicode-math"] }, "\u2665": { text: "\\ding{170}", alt: ["unicode-math"] }, "\u2666": { text: "\\ding{169}", alt: ["unicode-math"] }, "\u266A": { text: "{\\textmusicalnote}", alt: ["unicode-math"] }, "\u2701": { text: "\\ding{33}" }, "\u2702": { text: "\\ding{34}" }, "\u2703": { text: "\\ding{35}" }, "\u2704": { text: "\\ding{36}" }, "\u2706": { text: "\\ding{38}" }, "\u2707": { text: "\\ding{39}" }, "\u2708": { text: "\\ding{40}" }, "\u2709": { text: "\\ding{41}" }, "\u270C": { text: "\\ding{44}" }, "\u270D": { text: "\\ding{45}" }, "\u270F": { text: "\\ding{47}" }, "\u2710": { text: "\\ding{48}" }, "\u2711": { text: "\\ding{49}" }, "\u2712": { text: "\\ding{50}" }, "\u2713": { text: "\\ding{51}", alt: ["unicode-math"] }, "\u2714": { text: "\\ding{52}" }, "\u2715": { text: "\\ding{53}" }, "\u2716": { text: "\\ding{54}" }, "\u2718": { text: "\\ding{56}" }, "\u2719": { text: "\\ding{57}" }, "\u271A": { text: "\\ding{58}" }, "\u271B": { text: "\\ding{59}" }, "\u271C": { text: "\\ding{60}" }, "\u271D": { text: "\\ding{61}" }, "\u271E": { text: "\\ding{62}" }, "\u271F": { text: "\\ding{63}" }, "\u2720": { text: "\\ding{64}", alt: ["unicode-math"] }, "\u2721": { text: "\\ding{65}" }, "\u2722": { text: "\\ding{66}" }, "\u2723": { text: "\\ding{67}" }, "\u2724": { text: "\\ding{68}" }, "\u2725": { text: "\\ding{69}" }, "\u2726": { text: "\\ding{70}" }, "\u2727": { text: "\\ding{71}" }, "\u2729": { text: "\\ding{73}" }, "\u272A": { text: "\\ding{74}", alt: ["unicode-math"] }, "\u272B": { text: "\\ding{75}" }, "\u272C": { text: "\\ding{76}" }, "\u272D": { text: "\\ding{77}" }, "\u272E": { text: "\\ding{78}" }, "\u272F": { text: "\\ding{79}" }, "\u2730": { text: "\\ding{80}" }, "\u2731": { text: "\\ding{81}" }, "\u2732": { text: "\\ding{82}" }, "\u2733": { text: "\\ding{83}" }, "\u2734": { text: "\\ding{84}" }, "\u2735": { text: "\\ding{85}" }, "\u2736": { text: "\\ding{86}", alt: ["unicode-math"] }, "\u2737": { text: "\\ding{87}" }, "\u2738": { text: "\\ding{88}" }, "\u2739": { text: "\\ding{89}" }, "\u273A": { text: "\\ding{90}" }, "\u273B": { text: "\\ding{91}" }, "\u273C": { text: "\\ding{92}" }, "\u273D": { text: "\\ding{93}", alt: ["unicode-math"] }, "\u273E": { text: "\\ding{94}" }, "\u273F": { text: "\\ding{95}" }, "\u2740": { text: "\\ding{96}" }, "\u2741": { text: "\\ding{97}" }, "\u2742": { text: "\\ding{98}" }, "\u2743": { text: "\\ding{99}" }, "\u2744": { text: "\\ding{100}" }, "\u2745": { text: "\\ding{101}" }, "\u2746": { text: "\\ding{102}" }, "\u2747": { text: "\\ding{103}" }, "\u2748": { text: "\\ding{104}" }, "\u2749": { text: "\\ding{105}" }, "\u274A": { text: "\\ding{106}" }, "\u274B": { text: "\\ding{107}" }, "\u274D": { text: "\\ding{109}" }, "\u274F": { text: "\\ding{111}" }, "\u2750": { text: "\\ding{112}" }, "\u2751": { text: "\\ding{113}" }, "\u2752": { text: "\\ding{114}" }, "\u2756": { text: "\\ding{118}" }, "\u2758": { text: "\\ding{120}" }, "\u2759": { text: "\\ding{121}" }, "\u275A": { text: "\\ding{122}" }, "\u275B": { text: "\\ding{123}" }, "\u275C": { text: "\\ding{124}" }, "\u275D": { text: "\\ding{125}" }, "\u275E": { text: "\\ding{126}" }, "\u2761": { text: "\\ding{161}" }, "\u2762": { text: "\\ding{162}" }, "\u2763": { text: "\\ding{163}" }, "\u2764": { text: "\\ding{164}" }, "\u2765": { text: "\\ding{165}" }, "\u2766": { text: "\\ding{166}" }, "\u2767": { text: "\\ding{167}" }, "\u2776": { text: "\\ding{182}" }, "\u2777": { text: "\\ding{183}" }, "\u2778": { text: "\\ding{184}" }, "\u2779": { text: "\\ding{185}" }, "\u277A": { text: "\\ding{186}" }, "\u277B": { text: "\\ding{187}" }, "\u277C": { text: "\\ding{188}" }, "\u277D": { text: "\\ding{189}" }, "\u277E": { text: "\\ding{190}" }, "\u277F": { text: "\\ding{191}" }, "\u2780": { text: "\\ding{192}" }, "\u2781": { text: "\\ding{193}" }, "\u2782": { text: "\\ding{194}" }, "\u2783": { text: "\\ding{195}" }, "\u2784": { text: "\\ding{196}" }, "\u2785": { text: "\\ding{197}" }, "\u2786": { text: "\\ding{198}" }, "\u2787": { text: "\\ding{199}" }, "\u2788": { text: "\\ding{200}" }, "\u2789": { text: "\\ding{201}" }, "\u278A": { text: "\\ding{202}" }, "\u278B": { text: "\\ding{203}" }, "\u278C": { text: "\\ding{204}" }, "\u278D": { text: "\\ding{205}" }, "\u278E": { text: "\\ding{206}" }, "\u278F": { text: "\\ding{207}" }, "\u2790": { text: "\\ding{208}" }, "\u2791": { text: "\\ding{209}" }, "\u2792": { text: "\\ding{210}" }, "\u2793": { text: "\\ding{211}" }, "\u2794": { text: "\\ding{212}" }, "\u2798": { text: "\\ding{216}" }, "\u2799": { text: "\\ding{217}" }, "\u279A": { text: "\\ding{218}" }, "\u279B": { text: "\\ding{219}", alt: ["unicode-math"] }, "\u279C": { text: "\\ding{220}" }, "\u279D": { text: "\\ding{221}" }, "\u279E": { text: "\\ding{222}" }, "\u279F": { text: "\\ding{223}" }, "\u27A0": { text: "\\ding{224}" }, "\u27A1": { text: "\\ding{225}" }, "\u27A3": { text: "\\ding{227}" }, "\u27A4": { text: "\\ding{228}" }, "\u27A5": { text: "\\ding{229}" }, "\u27A6": { text: "\\ding{230}" }, "\u27A7": { text: "\\ding{231}" }, "\u27A8": { text: "\\ding{232}" }, "\u27A9": { text: "\\ding{233}" }, "\u27AA": { text: "\\ding{234}" }, "\u27AB": { text: "\\ding{235}" }, "\u27AC": { text: "\\ding{236}" }, "\u27AD": { text: "\\ding{237}" }, "\u27AE": { text: "\\ding{238}" }, "\u27AF": { text: "\\ding{239}" }, "\u27B1": { text: "\\ding{241}" }, "\u27B2": { text: "\\ding{242}" }, "\u27B3": { text: "\\ding{243}" }, "\u27B4": { text: "\\ding{244}" }, "\u27B5": { text: "\\ding{245}" }, "\u27B6": { text: "\\ding{246}" }, "\u27B7": { text: "\\ding{247}" }, "\u27B8": { text: "\\ding{248}" }, "\u27B9": { text: "\\ding{249}" }, "\u27BA": { text: "\\ding{250}" }, "\u27BB": { text: "\\ding{251}" }, "\u27BC": { text: "\\ding{252}" }, "\u27BD": { text: "\\ding{253}" }, "\u27BE": { text: "\\ding{254}" }, \uFB00: { text: "ff" }, \uFB01: { text: "fi" }, \uFB02: { text: "fl" }, \uFB03: { text: "ffi" }, \uFB04: { text: "ffl" }, \uFB05: { text: "st" }, \uFB06: { text: "st" }, "\uFFFD": { text: "{\\dbend}" }, "\u2052": { text: "{\\textdiscount}" }, "\u203D": { text: "{\\textinterrobang}" }, "\u203B": { text: "{\\textreferencemark}" }, \u0166: { text: "{\\textTstroke}" }, \u0167: { text: "{\\texttstroke}" }, "\u02CB": { text: "{\\textasciigrave}" }, \u0391: { math: "A", alt: ["unicode-math"] }, \u0392: { math: "B", alt: ["unicode-math"] }, \u0395: { math: "E", alt: ["unicode-math"] }, \u0396: { math: "Z", alt: ["unicode-math"] }, \u0397: { math: "H", alt: ["unicode-math"] }, \u0399: { math: "I", alt: ["unicode-math"] }, \u039A: { math: "K", alt: ["unicode-math"] }, \u039C: { math: "M", alt: ["unicode-math"] }, \u039D: { math: "N", alt: ["unicode-math"] }, \u039F: { math: "O", alt: ["unicode-math"] }, \u03A1: { math: "P", alt: ["unicode-math"] }, \u03A4: { math: "T", alt: ["unicode-math"] }, \u03A7: { math: "X", alt: ["unicode-math"] }, \u03BF: { math: "o", alt: ["unicode-math"] }, \u210A: { math: "g", alt: ["mathrsfs"] }, \u2110: { math: "I", alt: ["mathrsfs"] }, \u2112: { math: "L", alt: ["mathrsfs", "unicode-math"] }, \u211B: { math: "R", alt: ["mathrsfs", "unicode-math"] }, \u212C: { math: "B", alt: ["mathrsfs"] }, \u212F: { math: "e", alt: ["mathrsfs"] }, \u2130: { math: "E", alt: ["mathrsfs"] }, \u2131: { math: "F", alt: ["mathrsfs"] }, \u2133: { math: "M", alt: ["mathrsfs"] }, \u2134: { math: "o", alt: ["mathrsfs"] }, "\u{1D49C}": { math: "A", alt: ["mathrsfs", "unicode-math"] }, "\u{1D49E}": { math: "C", alt: ["mathrsfs", "unicode-math"] }, "\u{1D49F}": { math: "D", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4A2}": { math: "G", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4A5}": { math: "J", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4A6}": { math: "K", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4A9}": { math: "N", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4AA}": { math: "O", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4AB}": { math: "P", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4AC}": { math: "Q", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4AE}": { math: "S", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4AF}": { math: "T", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4B0}": { math: "U", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4B1}": { math: "V", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4B2}": { math: "W", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4B3}": { math: "X", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4B4}": { math: "Y", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4B5}": { math: "Z", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4B6}": { math: "a", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4B7}": { math: "b", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4B8}": { math: "c", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4B9}": { math: "d", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4BB}": { math: "f", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4BD}": { math: "h", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4BE}": { math: "i", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4BF}": { math: "j", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4C0}": { math: "k", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4C1}": { math: "l", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4C2}": { math: "m", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4C3}": { math: "n", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4C5}": { math: "p", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4C6}": { math: "q", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4C7}": { math: "r", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4C8}": { math: "s", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4C9}": { math: "t", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4CA}": { math: "u", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4CB}": { math: "v", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4CC}": { math: "w", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4CD}": { math: "x", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4CE}": { math: "y", alt: ["mathrsfs", "unicode-math"] }, "\u{1D4CF}": { math: "z", alt: ["mathrsfs", "unicode-math"] }, "\u24B6": { text: "(A)" }, "\u24B7": { text: "(B)" }, "\u24B8": { text: "(C)" }, "\u24B9": { text: "(D)" }, "\u24BA": { text: "(E)" }, "\u24BB": { text: "(F)" }, "\u24BC": { text: "(G)" }, "\u24BD": { text: "(H)" }, "\u24BE": { text: "(I)" }, "\u24BF": { text: "(J)" }, "\u24C0": { text: "(K)" }, "\u24C1": { text: "(L)" }, "\u24C2": { text: "(M)" }, "\u24C3": { text: "(N)" }, "\u24C4": { text: "(O)" }, "\u24C5": { text: "(P)" }, "\u24C6": { text: "(Q)" }, "\u24C7": { text: "(R)" }, "\u24C9": { text: "(T)" }, "\u24CA": { text: "(U)" }, "\u24CB": { text: "(V)" }, "\u24CC": { text: "(W)" }, "\u24CD": { text: "(X)" }, "\u24CE": { text: "(Y)" }, "\u24CF": { text: "(Z)" }, "\u24D0": { text: "(a)" }, "\u24D1": { text: "(b)" }, "\u24D2": { text: "(c)" }, "\u24D3": { text: "(d)" }, "\u24D4": { text: "(e)" }, "\u24D5": { text: "(f)" }, "\u24D6": { text: "(g)" }, "\u24D7": { text: "(h)" }, "\u24D8": { text: "(i)" }, "\u24D9": { text: "(j)" }, "\u24DA": { text: "(k)" }, "\u24DB": { text: "(l)" }, "\u24DC": { text: "(m)" }, "\u24DD": { text: "(n)" }, "\u24DE": { text: "(o)" }, "\u24DF": { text: "(p)" }, "\u24E0": { text: "(q)" }, "\u24E1": { text: "(r)" }, "\u24E2": { text: "(s)" }, "\u24E3": { text: "(t)" }, "\u24E4": { text: "(u)" }, "\u24E5": { text: "(v)" }, "\u24E6": { text: "(w)" }, "\u24E7": { text: "(x)" }, "\u24E8": { text: "(y)" }, "\u24E9": { text: "(z)" }, "\u24EA": { text: "(0)" }, "\u2501": { text: "=", alt: ["pmboxdraw"] }, "\u2502": { text: "|", alt: ["pmboxdraw"] }, "\u2503": { text: "|", alt: ["pmboxdraw"] }, "\u2505": { text: "=" }, "\u2507": { text: "|" }, "\u2509": { text: "=" }, "\u250A": { text: "|" }, "\u250B": { text: "|" }, "\u254D": { text: "=" }, "\u254E": { text: "|" }, "\u254F": { text: "|" }, "\u2550": { text: "=", alt: ["pmboxdraw"] }, "\u2551": { text: "|", alt: ["pmboxdraw"] }, "\u257D": { text: "|", alt: ["pmboxdraw"] }, "\u257F": { text: "|", alt: ["pmboxdraw"] } }, package: { wasysym: { "\u2653": { text: "{\\pisces}", math: "\\pisces" }, "\u263D": { text: "{\\rightmoon}" }, "\u263E": { text: "{\\leftmoon}" } }, "unicode-math": { "\u20AC": { math: "\\euro" }, "\u0300": { math: "\\grave" }, "\u0301": { math: "\\acute" }, "\u0303": { math: "\\tilde" }, "\u0306": { math: "\\breve" }, "\u0307": { math: "\\dot" }, "\u0308": { math: "\\ddot" }, "\u0309": { math: "\\ovhook" }, "\u030C": { math: "\\check" }, "\u0310": { math: "\\candra" }, "\u0312": { math: "\\oturnedcomma" }, "\u0315": { math: "\\ocommatopright" }, "\u031A": { math: "\\droang" }, "\u034D": { math: "\\underleftrightarrow" }, \u0391: { math: "\\mupAlpha" }, \u0392: { math: "\\mupBeta" }, \u0393: { math: "\\mupGamma" }, \u0394: { math: "\\mupDelta" }, \u0395: { math: "\\mupEpsilon" }, \u0396: { math: "\\mupZeta" }, \u0397: { math: "\\mupEta" }, \u0398: { math: "\\mupTheta" }, \u0399: { math: "\\mupIota" }, \u039A: { math: "\\mupKappa" }, \u039B: { math: "\\mupLambda" }, \u039C: { math: "\\mupMu" }, \u039D: { math: "\\mupNu" }, \u039F: { math: "\\mupOmicron" }, \u03A1: { math: "\\mupRho" }, \u03A4: { math: "\\mupTau" }, \u03A7: { math: "\\mupChi" }, \u03BF: { math: "\\mupomicron" }, \u03D0: { math: "\\varbeta" }, \u03F0: { math: "\\varkappa" }, "\u03F6": { math: "\\upbackepsilon" }, "\u{1D400}": { math: "\\mbfA" }, "\u{1D401}": { math: "\\mbfB" }, "\u{1D402}": { math: "\\mbfC" }, "\u{1D403}": { math: "\\mbfD" }, "\u{1D404}": { math: "\\mbfE" }, "\u{1D405}": { math: "\\mbfF" }, "\u{1D406}": { math: "\\mbfG" }, "\u{1D407}": { math: "\\mbfH" }, "\u{1D408}": { math: "\\mbfI" }, "\u{1D409}": { math: "\\mbfJ" }, "\u{1D40A}": { math: "\\mbfK" }, "\u{1D40B}": { math: "\\mbfL" }, "\u{1D40C}": { math: "\\mbfM" }, "\u{1D40D}": { math: "\\mbfN" }, "\u{1D40E}": { math: "\\mbfO" }, "\u{1D40F}": { math: "\\mbfP" }, "\u{1D410}": { math: "\\mbfQ" }, "\u{1D411}": { math: "\\mbfR" }, "\u{1D412}": { math: "\\mbfS" }, "\u{1D413}": { math: "\\mbfT" }, "\u{1D414}": { math: "\\mbfU" }, "\u{1D415}": { math: "\\mbfV" }, "\u{1D416}": { math: "\\mbfW" }, "\u{1D417}": { math: "\\mbfX" }, "\u{1D418}": { math: "\\mbfY" }, "\u{1D419}": { math: "\\mbfZ" }, "\u{1D41A}": { math: "\\mbfa" }, "\u{1D41B}": { math: "\\mbfb" }, "\u{1D41C}": { math: "\\mbfc" }, "\u{1D41D}": { math: "\\mbfd" }, "\u{1D41E}": { math: "\\mbfe" }, "\u{1D41F}": { math: "\\mbff" }, "\u{1D420}": { math: "\\mbfg" }, "\u{1D421}": { math: "\\mbfh" }, "\u{1D422}": { math: "\\mbfi" }, "\u{1D423}": { math: "\\mbfj" }, "\u{1D424}": { math: "\\mbfk" }, "\u{1D425}": { math: "\\mbfl" }, "\u{1D426}": { math: "\\mbfm" }, "\u{1D427}": { math: "\\mbfn" }, "\u{1D428}": { math: "\\mbfo" }, "\u{1D429}": { math: "\\mbfp" }, "\u{1D42A}": { math: "\\mbfq" }, "\u{1D42B}": { math: "\\mbfr" }, "\u{1D42C}": { math: "\\mbfs" }, "\u{1D42D}": { math: "\\mbft" }, "\u{1D42E}": { math: "\\mbfu" }, "\u{1D42F}": { math: "\\mbfv" }, "\u{1D430}": { math: "\\mbfw" }, "\u{1D431}": { math: "\\mbfx" }, "\u{1D432}": { math: "\\mbfy" }, "\u{1D433}": { math: "\\mbfz" }, "\u{1D434}": { math: "\\mitA" }, "\u{1D435}": { math: "\\mitB" }, "\u{1D436}": { math: "\\mitC" }, "\u{1D437}": { math: "\\mitD" }, "\u{1D438}": { math: "\\mitE" }, "\u{1D439}": { math: "\\mitF" }, "\u{1D43A}": { math: "\\mitG" }, "\u{1D43B}": { math: "\\mitH" }, "\u{1D43C}": { math: "\\mitI" }, "\u{1D43D}": { math: "\\mitJ" }, "\u{1D43E}": { math: "\\mitK" }, "\u{1D43F}": { math: "\\mitL" }, "\u{1D440}": { math: "\\mitM" }, "\u{1D441}": { math: "\\mitN" }, "\u{1D442}": { math: "\\mitO" }, "\u{1D443}": { math: "\\mitP" }, "\u{1D444}": { math: "\\mitQ" }, "\u{1D445}": { math: "\\mitR" }, "\u{1D446}": { math: "\\mitS" }, "\u{1D447}": { math: "\\mitT" }, "\u{1D448}": { math: "\\mitU" }, "\u{1D449}": { math: "\\mitV" }, "\u{1D44A}": { math: "\\mitW" }, "\u{1D44B}": { math: "\\mitX" }, "\u{1D44C}": { math: "\\mitY" }, "\u{1D44D}": { math: "\\mitZ" }, "\u{1D44E}": { math: "\\mita" }, "\u{1D44F}": { math: "\\mitb" }, "\u{1D450}": { math: "\\mitc" }, "\u{1D451}": { math: "\\mitd" }, "\u{1D452}": { math: "\\mite" }, "\u{1D453}": { math: "\\mitf" }, "\u{1D454}": { math: "\\mitg" }, "\u{1D456}": { math: "\\miti" }, "\u{1D457}": { math: "\\mitj" }, "\u{1D458}": { math: "\\mitk" }, "\u{1D459}": { math: "\\mitl" }, "\u{1D45A}": { math: "\\mitm" }, "\u{1D45B}": { math: "\\mitn" }, "\u{1D45C}": { math: "\\mito" }, "\u{1D45D}": { math: "\\mitp" }, "\u{1D45E}": { math: "\\mitq" }, "\u{1D45F}": { math: "\\mitr" }, "\u{1D460}": { math: "\\mits" }, "\u{1D461}": { math: "\\mitt" }, "\u{1D462}": { math: "\\mitu" }, "\u{1D463}": { math: "\\mitv" }, "\u{1D464}": { math: "\\mitw" }, "\u{1D465}": { math: "\\mitx" }, "\u{1D466}": { math: "\\mity" }, "\u{1D467}": { math: "\\mitz" }, "\u{1D468}": { math: "\\mbfitA" }, "\u{1D469}": { math: "\\mbfitB" }, "\u{1D46A}": { math: "\\mbfitC" }, "\u{1D46B}": { math: "\\mbfitD" }, "\u{1D46C}": { math: "\\mbfitE" }, "\u{1D46D}": { math: "\\mbfitF" }, "\u{1D46E}": { math: "\\mbfitG" }, "\u{1D46F}": { math: "\\mbfitH" }, "\u{1D470}": { math: "\\mbfitI" }, "\u{1D471}": { math: "\\mbfitJ" }, "\u{1D472}": { math: "\\mbfitK" }, "\u{1D473}": { math: "\\mbfitL" }, "\u{1D474}": { math: "\\mbfitM" }, "\u{1D475}": { math: "\\mbfitN" }, "\u{1D476}": { math: "\\mbfitO" }, "\u{1D477}": { math: "\\mbfitP" }, "\u{1D478}": { math: "\\mbfitQ" }, "\u{1D479}": { math: "\\mbfitR" }, "\u{1D47A}": { math: "\\mbfitS" }, "\u{1D47B}": { math: "\\mbfitT" }, "\u{1D47C}": { math: "\\mbfitU" }, "\u{1D47D}": { math: "\\mbfitV" }, "\u{1D47E}": { math: "\\mbfitW" }, "\u{1D47F}": { math: "\\mbfitX" }, "\u{1D480}": { math: "\\mbfitY" }, "\u{1D481}": { math: "\\mbfitZ" }, "\u{1D482}": { math: "\\mbfita" }, "\u{1D483}": { math: "\\mbfitb" }, "\u{1D484}": { math: "\\mbfitc" }, "\u{1D485}": { math: "\\mbfitd" }, "\u{1D486}": { math: "\\mbfite" }, "\u{1D487}": { math: "\\mbfitf" }, "\u{1D488}": { math: "\\mbfitg" }, "\u{1D489}": { math: "\\mbfith" }, "\u{1D48A}": { math: "\\mbfiti" }, "\u{1D48B}": { math: "\\mbfitj" }, "\u{1D48C}": { math: "\\mbfitk" }, "\u{1D48D}": { math: "\\mbfitl" }, "\u{1D48E}": { math: "\\mbfitm" }, "\u{1D48F}": { math: "\\mbfitn" }, "\u{1D490}": { math: "\\mbfito" }, "\u{1D491}": { math: "\\mbfitp" }, "\u{1D492}": { math: "\\mbfitq" }, "\u{1D493}": { math: "\\mbfitr" }, "\u{1D494}": { math: "\\mbfits" }, "\u{1D495}": { math: "\\mbfitt" }, "\u{1D496}": { math: "\\mbfitu" }, "\u{1D497}": { math: "\\mbfitv" }, "\u{1D498}": { math: "\\mbfitw" }, "\u{1D499}": { math: "\\mbfitx" }, "\u{1D49A}": { math: "\\mbfity" }, "\u{1D49B}": { math: "\\mbfitz" }, "\u{1D49C}": { math: "\\mscrA" }, "\u{1D49E}": { math: "\\mscrC" }, "\u{1D49F}": { math: "\\mscrD" }, "\u{1D4A2}": { math: "\\mscrG" }, "\u{1D4A5}": { math: "\\mscrJ" }, "\u{1D4A6}": { math: "\\mscrK" }, "\u{1D4A9}": { math: "\\mscrN" }, "\u{1D4AA}": { math: "\\mscrO" }, "\u{1D4AB}": { math: "\\mscrP" }, "\u{1D4AC}": { math: "\\mscrQ" }, "\u{1D4AE}": { math: "\\mscrS" }, "\u{1D4AF}": { math: "\\mscrT" }, "\u{1D4B0}": { math: "\\mscrU" }, "\u{1D4B1}": { math: "\\mscrV" }, "\u{1D4B2}": { math: "\\mscrW" }, "\u{1D4B3}": { math: "\\mscrX" }, "\u{1D4B4}": { math: "\\mscrY" }, "\u{1D4B5}": { math: "\\mscrZ" }, "\u{1D4B6}": { math: "\\mscra" }, "\u{1D4B7}": { math: "\\mscrb" }, "\u{1D4B8}": { math: "\\mscrc" }, "\u{1D4B9}": { math: "\\mscrd" }, "\u{1D4BB}": { math: "\\mscrf" }, "\u{1D4BD}": { math: "\\mscrh" }, "\u{1D4BE}": { math: "\\mscri" }, "\u{1D4BF}": { math: "\\mscrj" }, "\u{1D4C0}": { math: "\\mscrk" }, "\u{1D4C1}": { math: "\\mscrl" }, "\u{1D4C2}": { math: "\\mscrm" }, "\u{1D4C3}": { math: "\\mscrn" }, "\u{1D4C5}": { math: "\\mscrp" }, "\u{1D4C6}": { math: "\\mscrq" }, "\u{1D4C7}": { math: "\\mscrr" }, "\u{1D4C8}": { math: "\\mscrs" }, "\u{1D4C9}": { math: "\\mscrt" }, "\u{1D4CA}": { math: "\\mscru" }, "\u{1D4CB}": { math: "\\mscrv" }, "\u{1D4CC}": { math: "\\mscrw" }, "\u{1D4CD}": { math: "\\mscrx" }, "\u{1D4CE}": { math: "\\mscry" }, "\u{1D4CF}": { math: "\\mscrz" }, "\u{1D4D0}": { math: "\\mbfscrA" }, "\u{1D4D1}": { math: "\\mbfscrB" }, "\u{1D4D2}": { math: "\\mbfscrC" }, "\u{1D4D3}": { math: "\\mbfscrD" }, "\u{1D4D4}": { math: "\\mbfscrE" }, "\u{1D4D5}": { math: "\\mbfscrF" }, "\u{1D4D6}": { math: "\\mbfscrG" }, "\u{1D4D7}": { math: "\\mbfscrH" }, "\u{1D4D8}": { math: "\\mbfscrI" }, "\u{1D4D9}": { math: "\\mbfscrJ" }, "\u{1D4DA}": { math: "\\mbfscrK" }, "\u{1D4DB}": { math: "\\mbfscrL" }, "\u{1D4DC}": { math: "\\mbfscrM" }, "\u{1D4DD}": { math: "\\mbfscrN" }, "\u{1D4DE}": { math: "\\mbfscrO" }, "\u{1D4DF}": { math: "\\mbfscrP" }, "\u{1D4E0}": { math: "\\mbfscrQ" }, "\u{1D4E1}": { math: "\\mbfscrR" }, "\u{1D4E2}": { math: "\\mbfscrS" }, "\u{1D4E3}": { math: "\\mbfscrT" }, "\u{1D4E4}": { math: "\\mbfscrU" }, "\u{1D4E5}": { math: "\\mbfscrV" }, "\u{1D4E6}": { math: "\\mbfscrW" }, "\u{1D4E7}": { math: "\\mbfscrX" }, "\u{1D4E8}": { math: "\\mbfscrY" }, "\u{1D4E9}": { math: "\\mbfscrZ" }, "\u{1D4EA}": { math: "\\mbfscra" }, "\u{1D4EB}": { math: "\\mbfscrb" }, "\u{1D4EC}": { math: "\\mbfscrc" }, "\u{1D4ED}": { math: "\\mbfscrd" }, "\u{1D4EE}": { math: "\\mbfscre" }, "\u{1D4EF}": { math: "\\mbfscrf" }, "\u{1D4F0}": { math: "\\mbfscrg" }, "\u{1D4F1}": { math: "\\mbfscrh" }, "\u{1D4F2}": { math: "\\mbfscri" }, "\u{1D4F3}": { math: "\\mbfscrj" }, "\u{1D4F4}": { math: "\\mbfscrk" }, "\u{1D4F5}": { math: "\\mbfscrl" }, "\u{1D4F6}": { math: "\\mbfscrm" }, "\u{1D4F7}": { math: "\\mbfscrn" }, "\u{1D4F8}": { math: "\\mbfscro" }, "\u{1D4F9}": { math: "\\mbfscrp" }, "\u{1D4FA}": { math: "\\mbfscrq" }, "\u{1D4FB}": { math: "\\mbfscrr" }, "\u{1D4FC}": { math: "\\mbfscrs" }, "\u{1D4FD}": { math: "\\mbfscrt" }, "\u{1D4FE}": { math: "\\mbfscru" }, "\u{1D4FF}": { math: "\\mbfscrv" }, "\u{1D500}": { math: "\\mbfscrw" }, "\u{1D501}": { math: "\\mbfscrx" }, "\u{1D502}": { math: "\\mbfscry" }, "\u{1D503}": { math: "\\mbfscrz" }, "\u{1D504}": { math: "\\mfrakA" }, "\u{1D505}": { math: "\\mfrakB" }, "\u{1D507}": { math: "\\mfrakD" }, "\u{1D508}": { math: "\\mfrakE" }, "\u{1D509}": { math: "\\mfrakF" }, "\u{1D50A}": { math: "\\mfrakG" }, "\u{1D50D}": { math: "\\mfrakJ" }, "\u{1D50E}": { math: "\\mfrakK" }, "\u{1D50F}": { math: "\\mfrakL" }, "\u{1D510}": { math: "\\mfrakM" }, "\u{1D511}": { math: "\\mfrakN" }, "\u{1D512}": { math: "\\mfrakO" }, "\u{1D513}": { math: "\\mfrakP" }, "\u{1D514}": { math: "\\mfrakQ" }, "\u{1D516}": { math: "\\mfrakS" }, "\u{1D517}": { math: "\\mfrakT" }, "\u{1D518}": { math: "\\mfrakU" }, "\u{1D519}": { math: "\\mfrakV" }, "\u{1D51A}": { math: "\\mfrakW" }, "\u{1D51B}": { math: "\\mfrakX" }, "\u{1D51C}": { math: "\\mfrakY" }, "\u{1D51E}": { math: "\\mfraka" }, "\u{1D51F}": { math: "\\mfrakb" }, "\u{1D520}": { math: "\\mfrakc" }, "\u{1D521}": { math: "\\mfrakd" }, "\u{1D522}": { math: "\\mfrake" }, "\u{1D523}": { math: "\\mfrakf" }, "\u{1D524}": { math: "\\mfrakg" }, "\u{1D525}": { math: "\\mfrakh" }, "\u{1D526}": { math: "\\mfraki" }, "\u{1D527}": { math: "\\mfrakj" }, "\u{1D528}": { math: "\\mfrakk" }, "\u{1D529}": { math: "\\mfrakl" }, "\u{1D52A}": { math: "\\mfrakm" }, "\u{1D52B}": { math: "\\mfrakn" }, "\u{1D52C}": { math: "\\mfrako" }, "\u{1D52D}": { math: "\\mfrakp" }, "\u{1D52E}": { math: "\\mfrakq" }, "\u{1D52F}": { math: "\\mfrakr" }, "\u{1D530}": { math: "\\mfraks" }, "\u{1D531}": { math: "\\mfrakt" }, "\u{1D532}": { math: "\\mfraku" }, "\u{1D533}": { math: "\\mfrakv" }, "\u{1D534}": { math: "\\mfrakw" }, "\u{1D535}": { math: "\\mfrakx" }, "\u{1D536}": { math: "\\mfraky" }, "\u{1D537}": { math: "\\mfrakz" }, "\u{1D538}": { math: "\\BbbA" }, "\u{1D539}": { math: "\\BbbB" }, "\u{1D53B}": { math: "\\BbbD" }, "\u{1D53C}": { math: "\\BbbE" }, "\u{1D53D}": { math: "\\BbbF" }, "\u{1D53E}": { math: "\\BbbG" }, "\u{1D540}": { math: "\\BbbI" }, "\u{1D541}": { math: "\\BbbJ" }, "\u{1D542}": { math: "\\BbbK" }, "\u{1D543}": { math: "\\BbbL" }, "\u{1D544}": { math: "\\BbbM" }, "\u{1D546}": { math: "\\BbbO" }, "\u{1D54A}": { math: "\\BbbS" }, "\u{1D54B}": { math: "\\BbbT" }, "\u{1D54C}": { math: "\\BbbU" }, "\u{1D54D}": { math: "\\BbbV" }, "\u{1D54E}": { math: "\\BbbW" }, "\u{1D54F}": { math: "\\BbbX" }, "\u{1D550}": { math: "\\BbbY" }, "\u{1D552}": { math: "\\Bbba" }, "\u{1D553}": { math: "\\Bbbb" }, "\u{1D554}": { math: "\\Bbbc" }, "\u{1D555}": { math: "\\Bbbd" }, "\u{1D556}": { math: "\\Bbbe" }, "\u{1D557}": { math: "\\Bbbf" }, "\u{1D558}": { math: "\\Bbbg" }, "\u{1D559}": { math: "\\Bbbh" }, "\u{1D55A}": { math: "\\Bbbi" }, "\u{1D55B}": { math: "\\Bbbj" }, "\u{1D55C}": { math: "\\Bbbk" }, "\u{1D55D}": { math: "\\Bbbl" }, "\u{1D55E}": { math: "\\Bbbm" }, "\u{1D55F}": { math: "\\Bbbn" }, "\u{1D560}": { math: "\\Bbbo" }, "\u{1D561}": { math: "\\Bbbp" }, "\u{1D562}": { math: "\\Bbbq" }, "\u{1D563}": { math: "\\Bbbr" }, "\u{1D564}": { math: "\\Bbbs" }, "\u{1D565}": { math: "\\Bbbt" }, "\u{1D566}": { math: "\\Bbbu" }, "\u{1D567}": { math: "\\Bbbv" }, "\u{1D568}": { math: "\\Bbbw" }, "\u{1D569}": { math: "\\Bbbx" }, "\u{1D56A}": { math: "\\Bbby" }, "\u{1D56B}": { math: "\\Bbbz" }, "\u{1D56C}": { math: "\\mbffrakA" }, "\u{1D56D}": { math: "\\mbffrakB" }, "\u{1D56E}": { math: "\\mbffrakC" }, "\u{1D56F}": { math: "\\mbffrakD" }, "\u{1D570}": { math: "\\mbffrakE" }, "\u{1D571}": { math: "\\mbffrakF" }, "\u{1D572}": { math: "\\mbffrakG" }, "\u{1D573}": { math: "\\mbffrakH" }, "\u{1D574}": { math: "\\mbffrakI" }, "\u{1D575}": { math: "\\mbffrakJ" }, "\u{1D576}": { math: "\\mbffrakK" }, "\u{1D577}": { math: "\\mbffrakL" }, "\u{1D578}": { math: "\\mbffrakM" }, "\u{1D579}": { math: "\\mbffrakN" }, "\u{1D57A}": { math: "\\mbffrakO" }, "\u{1D57B}": { math: "\\mbffrakP" }, "\u{1D57C}": { math: "\\mbffrakQ" }, "\u{1D57D}": { math: "\\mbffrakR" }, "\u{1D57E}": { math: "\\mbffrakS" }, "\u{1D57F}": { math: "\\mbffrakT" }, "\u{1D580}": { math: "\\mbffrakU" }, "\u{1D581}": { math: "\\mbffrakV" }, "\u{1D582}": { math: "\\mbffrakW" }, "\u{1D583}": { math: "\\mbffrakX" }, "\u{1D584}": { math: "\\mbffrakY" }, "\u{1D585}": { math: "\\mbffrakZ" }, "\u{1D586}": { math: "\\mbffraka" }, "\u{1D587}": { math: "\\mbffrakb" }, "\u{1D588}": { math: "\\mbffrakc" }, "\u{1D589}": { math: "\\mbffrakd" }, "\u{1D58A}": { math: "\\mbffrake" }, "\u{1D58B}": { math: "\\mbffrakf" }, "\u{1D58C}": { math: "\\mbffrakg" }, "\u{1D58D}": { math: "\\mbffrakh" }, "\u{1D58E}": { math: "\\mbffraki" }, "\u{1D58F}": { math: "\\mbffrakj" }, "\u{1D590}": { math: "\\mbffrakk" }, "\u{1D591}": { math: "\\mbffrakl" }, "\u{1D592}": { math: "\\mbffrakm" }, "\u{1D593}": { math: "\\mbffrakn" }, "\u{1D594}": { math: "\\mbffrako" }, "\u{1D595}": { math: "\\mbffrakp" }, "\u{1D596}": { math: "\\mbffrakq" }, "\u{1D597}": { math: "\\mbffrakr" }, "\u{1D598}": { math: "\\mbffraks" }, "\u{1D599}": { math: "\\mbffrakt" }, "\u{1D59A}": { math: "\\mbffraku" }, "\u{1D59B}": { math: "\\mbffrakv" }, "\u{1D59C}": { math: "\\mbffrakw" }, "\u{1D59D}": { math: "\\mbffrakx" }, "\u{1D59E}": { math: "\\mbffraky" }, "\u{1D59F}": { math: "\\mbffrakz" }, "\u{1D5A0}": { math: "\\msansA" }, "\u{1D5A1}": { math: "\\msansB" }, "\u{1D5A2}": { math: "\\msansC" }, "\u{1D5A3}": { math: "\\msansD" }, "\u{1D5A4}": { math: "\\msansE" }, "\u{1D5A5}": { math: "\\msansF" }, "\u{1D5A6}": { math: "\\msansG" }, "\u{1D5A7}": { math: "\\msansH" }, "\u{1D5A8}": { math: "\\msansI" }, "\u{1D5A9}": { math: "\\msansJ" }, "\u{1D5AA}": { math: "\\msansK" }, "\u{1D5AB}": { math: "\\msansL" }, "\u{1D5AC}": { math: "\\msansM" }, "\u{1D5AD}": { math: "\\msansN" }, "\u{1D5AE}": { math: "\\msansO" }, "\u{1D5AF}": { math: "\\msansP" }, "\u{1D5B0}": { math: "\\msansQ" }, "\u{1D5B1}": { math: "\\msansR" }, "\u{1D5B2}": { math: "\\msansS" }, "\u{1D5B3}": { math: "\\msansT" }, "\u{1D5B4}": { math: "\\msansU" }, "\u{1D5B5}": { math: "\\msansV" }, "\u{1D5B6}": { math: "\\msansW" }, "\u{1D5B7}": { math: "\\msansX" }, "\u{1D5B8}": { math: "\\msansY" }, "\u{1D5B9}": { math: "\\msansZ" }, "\u{1D5BA}": { math: "\\msansa" }, "\u{1D5BB}": { math: "\\msansb" }, "\u{1D5BC}": { math: "\\msansc" }, "\u{1D5BD}": { math: "\\msansd" }, "\u{1D5BE}": { math: "\\msanse" }, "\u{1D5BF}": { math: "\\msansf" }, "\u{1D5C0}": { math: "\\msansg" }, "\u{1D5C1}": { math: "\\msansh" }, "\u{1D5C2}": { math: "\\msansi" }, "\u{1D5C3}": { math: "\\msansj" }, "\u{1D5C4}": { math: "\\msansk" }, "\u{1D5C5}": { math: "\\msansl" }, "\u{1D5C6}": { math: "\\msansm" }, "\u{1D5C7}": { math: "\\msansn" }, "\u{1D5C8}": { math: "\\msanso" }, "\u{1D5C9}": { math: "\\msansp" }, "\u{1D5CA}": { math: "\\msansq" }, "\u{1D5CB}": { math: "\\msansr" }, "\u{1D5CC}": { math: "\\msanss" }, "\u{1D5CD}": { math: "\\msanst" }, "\u{1D5CE}": { math: "\\msansu" }, "\u{1D5CF}": { math: "\\msansv" }, "\u{1D5D0}": { math: "\\msansw" }, "\u{1D5D1}": { math: "\\msansx" }, "\u{1D5D2}": { math: "\\msansy" }, "\u{1D5D3}": { math: "\\msansz" }, "\u{1D5D4}": { math: "\\mbfsansA" }, "\u{1D5D5}": { math: "\\mbfsansB" }, "\u{1D5D6}": { math: "\\mbfsansC" }, "\u{1D5D7}": { math: "\\mbfsansD" }, "\u{1D5D8}": { math: "\\mbfsansE" }, "\u{1D5D9}": { math: "\\mbfsansF" }, "\u{1D5DA}": { math: "\\mbfsansG" }, "\u{1D5DB}": { math: "\\mbfsansH" }, "\u{1D5DC}": { math: "\\mbfsansI" }, "\u{1D5DD}": { math: "\\mbfsansJ" }, "\u{1D5DE}": { math: "\\mbfsansK" }, "\u{1D5DF}": { math: "\\mbfsansL" }, "\u{1D5E0}": { math: "\\mbfsansM" }, "\u{1D5E1}": { math: "\\mbfsansN" }, "\u{1D5E2}": { math: "\\mbfsansO" }, "\u{1D5E3}": { math: "\\mbfsansP" }, "\u{1D5E4}": { math: "\\mbfsansQ" }, "\u{1D5E5}": { math: "\\mbfsansR" }, "\u{1D5E6}": { math: "\\mbfsansS" }, "\u{1D5E7}": { math: "\\mbfsansT" }, "\u{1D5E8}": { math: "\\mbfsansU" }, "\u{1D5E9}": { math: "\\mbfsansV" }, "\u{1D5EA}": { math: "\\mbfsansW" }, "\u{1D5EB}": { math: "\\mbfsansX" }, "\u{1D5EC}": { math: "\\mbfsansY" }, "\u{1D5ED}": { math: "\\mbfsansZ" }, "\u{1D5EE}": { math: "\\mbfsansa" }, "\u{1D5EF}": { math: "\\mbfsansb" }, "\u{1D5F0}": { math: "\\mbfsansc" }, "\u{1D5F1}": { math: "\\mbfsansd" }, "\u{1D5F2}": { math: "\\mbfsanse" }, "\u{1D5F3}": { math: "\\mbfsansf" }, "\u{1D5F4}": { math: "\\mbfsansg" }, "\u{1D5F5}": { math: "\\mbfsansh" }, "\u{1D5F6}": { math: "\\mbfsansi" }, "\u{1D5F7}": { math: "\\mbfsansj" }, "\u{1D5F8}": { math: "\\mbfsansk" }, "\u{1D5F9}": { math: "\\mbfsansl" }, "\u{1D5FA}": { math: "\\mbfsansm" }, "\u{1D5FB}": { math: "\\mbfsansn" }, "\u{1D5FC}": { math: "\\mbfsanso" }, "\u{1D5FD}": { math: "\\mbfsansp" }, "\u{1D5FE}": { math: "\\mbfsansq" }, "\u{1D5FF}": { math: "\\mbfsansr" }, "\u{1D600}": { math: "\\mbfsanss" }, "\u{1D601}": { math: "\\mbfsanst" }, "\u{1D602}": { math: "\\mbfsansu" }, "\u{1D603}": { math: "\\mbfsansv" }, "\u{1D604}": { math: "\\mbfsansw" }, "\u{1D605}": { math: "\\mbfsansx" }, "\u{1D606}": { math: "\\mbfsansy" }, "\u{1D607}": { math: "\\mbfsansz" }, "\u{1D608}": { math: "\\mitsansA" }, "\u{1D609}": { math: "\\mitsansB" }, "\u{1D60A}": { math: "\\mitsansC" }, "\u{1D60B}": { math: "\\mitsansD" }, "\u{1D60C}": { math: "\\mitsansE" }, "\u{1D60D}": { math: "\\mitsansF" }, "\u{1D60E}": { math: "\\mitsansG" }, "\u{1D60F}": { math: "\\mitsansH" }, "\u{1D610}": { math: "\\mitsansI" }, "\u{1D611}": { math: "\\mitsansJ" }, "\u{1D612}": { math: "\\mitsansK" }, "\u{1D613}": { math: "\\mitsansL" }, "\u{1D614}": { math: "\\mitsansM" }, "\u{1D615}": { math: "\\mitsansN" }, "\u{1D616}": { math: "\\mitsansO" }, "\u{1D617}": { math: "\\mitsansP" }, "\u{1D618}": { math: "\\mitsansQ" }, "\u{1D619}": { math: "\\mitsansR" }, "\u{1D61A}": { math: "\\mitsansS" }, "\u{1D61B}": { math: "\\mitsansT" }, "\u{1D61C}": { math: "\\mitsansU" }, "\u{1D61D}": { math: "\\mitsansV" }, "\u{1D61E}": { math: "\\mitsansW" }, "\u{1D61F}": { math: "\\mitsansX" }, "\u{1D620}": { math: "\\mitsansY" }, "\u{1D621}": { math: "\\mitsansZ" }, "\u{1D622}": { math: "\\mitsansa" }, "\u{1D623}": { math: "\\mitsansb" }, "\u{1D624}": { math: "\\mitsansc" }, "\u{1D625}": { math: "\\mitsansd" }, "\u{1D626}": { math: "\\mitsanse" }, "\u{1D627}": { math: "\\mitsansf" }, "\u{1D628}": { math: "\\mitsansg" }, "\u{1D629}": { math: "\\mitsansh" }, "\u{1D62A}": { math: "\\mitsansi" }, "\u{1D62B}": { math: "\\mitsansj" }, "\u{1D62C}": { math: "\\mitsansk" }, "\u{1D62D}": { math: "\\mitsansl" }, "\u{1D62E}": { math: "\\mitsansm" }, "\u{1D62F}": { math: "\\mitsansn" }, "\u{1D630}": { math: "\\mitsanso" }, "\u{1D631}": { math: "\\mitsansp" }, "\u{1D632}": { math: "\\mitsansq" }, "\u{1D633}": { math: "\\mitsansr" }, "\u{1D634}": { math: "\\mitsanss" }, "\u{1D635}": { math: "\\mitsanst" }, "\u{1D636}": { math: "\\mitsansu" }, "\u{1D637}": { math: "\\mitsansv" }, "\u{1D638}": { math: "\\mitsansw" }, "\u{1D639}": { math: "\\mitsansx" }, "\u{1D63A}": { math: "\\mitsansy" }, "\u{1D63B}": { math: "\\mitsansz" }, "\u{1D63C}": { math: "\\mbfitsansA" }, "\u{1D63D}": { math: "\\mbfitsansB" }, "\u{1D63E}": { math: "\\mbfitsansC" }, "\u{1D63F}": { math: "\\mbfitsansD" }, "\u{1D640}": { math: "\\mbfitsansE" }, "\u{1D641}": { math: "\\mbfitsansF" }, "\u{1D642}": { math: "\\mbfitsansG" }, "\u{1D643}": { math: "\\mbfitsansH" }, "\u{1D644}": { math: "\\mbfitsansI" }, "\u{1D645}": { math: "\\mbfitsansJ" }, "\u{1D646}": { math: "\\mbfitsansK" }, "\u{1D647}": { math: "\\mbfitsansL" }, "\u{1D648}": { math: "\\mbfitsansM" }, "\u{1D649}": { math: "\\mbfitsansN" }, "\u{1D64A}": { math: "\\mbfitsansO" }, "\u{1D64B}": { math: "\\mbfitsansP" }, "\u{1D64C}": { math: "\\mbfitsansQ" }, "\u{1D64D}": { math: "\\mbfitsansR" }, "\u{1D64E}": { math: "\\mbfitsansS" }, "\u{1D64F}": { math: "\\mbfitsansT" }, "\u{1D650}": { math: "\\mbfitsansU" }, "\u{1D651}": { math: "\\mbfitsansV" }, "\u{1D652}": { math: "\\mbfitsansW" }, "\u{1D653}": { math: "\\mbfitsansX" }, "\u{1D654}": { math: "\\mbfitsansY" }, "\u{1D655}": { math: "\\mbfitsansZ" }, "\u{1D656}": { math: "\\mbfitsansa" }, "\u{1D657}": { math: "\\mbfitsansb" }, "\u{1D658}": { math: "\\mbfitsansc" }, "\u{1D659}": { math: "\\mbfitsansd" }, "\u{1D65A}": { math: "\\mbfitsanse" }, "\u{1D65B}": { math: "\\mbfitsansf" }, "\u{1D65C}": { math: "\\mbfitsansg" }, "\u{1D65D}": { math: "\\mbfitsansh" }, "\u{1D65E}": { math: "\\mbfitsansi" }, "\u{1D65F}": { math: "\\mbfitsansj" }, "\u{1D660}": { math: "\\mbfitsansk" }, "\u{1D661}": { math: "\\mbfitsansl" }, "\u{1D662}": { math: "\\mbfitsansm" }, "\u{1D663}": { math: "\\mbfitsansn" }, "\u{1D664}": { math: "\\mbfitsanso" }, "\u{1D665}": { math: "\\mbfitsansp" }, "\u{1D666}": { math: "\\mbfitsansq" }, "\u{1D667}": { math: "\\mbfitsansr" }, "\u{1D668}": { math: "\\mbfitsanss" }, "\u{1D669}": { math: "\\mbfitsanst" }, "\u{1D66A}": { math: "\\mbfitsansu" }, "\u{1D66B}": { math: "\\mbfitsansv" }, "\u{1D66C}": { math: "\\mbfitsansw" }, "\u{1D66D}": { math: "\\mbfitsansx" }, "\u{1D66E}": { math: "\\mbfitsansy" }, "\u{1D66F}": { math: "\\mbfitsansz" }, "\u{1D670}": { math: "\\mttA" }, "\u{1D671}": { math: "\\mttB" }, "\u{1D672}": { math: "\\mttC" }, "\u{1D673}": { math: "\\mttD" }, "\u{1D674}": { math: "\\mttE" }, "\u{1D675}": { math: "\\mttF" }, "\u{1D676}": { math: "\\mttG" }, "\u{1D677}": { math: "\\mttH" }, "\u{1D678}": { math: "\\mttI" }, "\u{1D679}": { math: "\\mttJ" }, "\u{1D67A}": { math: "\\mttK" }, "\u{1D67B}": { math: "\\mttL" }, "\u{1D67C}": { math: "\\mttM" }, "\u{1D67D}": { math: "\\mttN" }, "\u{1D67E}": { math: "\\mttO" }, "\u{1D67F}": { math: "\\mttP" }, "\u{1D680}": { math: "\\mttQ" }, "\u{1D681}": { math: "\\mttR" }, "\u{1D682}": { math: "\\mttS" }, "\u{1D683}": { math: "\\mttT" }, "\u{1D684}": { math: "\\mttU" }, "\u{1D685}": { math: "\\mttV" }, "\u{1D686}": { math: "\\mttW" }, "\u{1D687}": { math: "\\mttX" }, "\u{1D688}": { math: "\\mttY" }, "\u{1D689}": { math: "\\mttZ" }, "\u{1D68A}": { math: "\\mtta" }, "\u{1D68B}": { math: "\\mttb" }, "\u{1D68C}": { math: "\\mttc" }, "\u{1D68D}": { math: "\\mttd" }, "\u{1D68E}": { math: "\\mtte" }, "\u{1D68F}": { math: "\\mttf" }, "\u{1D690}": { math: "\\mttg" }, "\u{1D691}": { math: "\\mtth" }, "\u{1D692}": { math: "\\mtti" }, "\u{1D693}": { math: "\\mttj" }, "\u{1D694}": { math: "\\mttk" }, "\u{1D695}": { math: "\\mttl" }, "\u{1D696}": { math: "\\mttm" }, "\u{1D697}": { math: "\\mttn" }, "\u{1D698}": { math: "\\mtto" }, "\u{1D699}": { math: "\\mttp" }, "\u{1D69A}": { math: "\\mttq" }, "\u{1D69B}": { math: "\\mttr" }, "\u{1D69C}": { math: "\\mtts" }, "\u{1D69D}": { math: "\\mttt" }, "\u{1D69E}": { math: "\\mttu" }, "\u{1D69F}": { math: "\\mttv" }, "\u{1D6A0}": { math: "\\mttw" }, "\u{1D6A1}": { math: "\\mttx" }, "\u{1D6A2}": { math: "\\mtty" }, "\u{1D6A3}": { math: "\\mttz" }, "\u{1D6A4}": { math: "\\imath" }, "\u{1D6A5}": { math: "\\jmath" }, "\u{1D6A8}": { math: "\\mbfAlpha" }, "\u{1D6A9}": { math: "\\mbfBeta" }, "\u{1D6AA}": { math: "\\mbfGamma" }, "\u{1D6AB}": { math: "\\mbfDelta" }, "\u{1D6AC}": { math: "\\mbfEpsilon" }, "\u{1D6AD}": { math: "\\mbfZeta" }, "\u{1D6AE}": { math: "\\mbfEta" }, "\u{1D6AF}": { math: "\\mbfTheta" }, "\u{1D6B0}": { math: "\\mbfIota" }, "\u{1D6B1}": { math: "\\mbfKappa" }, "\u{1D6B2}": { math: "\\mbfLambda" }, "\u{1D6B3}": { math: "\\mbfMu" }, "\u{1D6B4}": { math: "\\mbfNu" }, "\u{1D6B5}": { math: "\\mbfXi" }, "\u{1D6B6}": { math: "\\mbfOmicron" }, "\u{1D6B7}": { math: "\\mbfPi" }, "\u{1D6B8}": { math: "\\mbfRho" }, "\u{1D6B9}": { math: "\\mbfvarTheta" }, "\u{1D6BA}": { math: "\\mbfSigma" }, "\u{1D6BB}": { math: "\\mbfTau" }, "\u{1D6BC}": { math: "\\mbfUpsilon" }, "\u{1D6BD}": { math: "\\mbfPhi" }, "\u{1D6BE}": { math: "\\mbfChi" }, "\u{1D6BF}": { math: "\\mbfPsi" }, "\u{1D6C0}": { math: "\\mbfOmega" }, "\u{1D6C1}": { math: "\\mbfnabla" }, "\u{1D6C2}": { math: "\\mbfalpha" }, "\u{1D6C3}": { math: "\\mbfbeta" }, "\u{1D6C4}": { math: "\\mbfgamma" }, "\u{1D6C5}": { math: "\\mbfdelta" }, "\u{1D6C6}": { math: "\\mbfvarepsilon" }, "\u{1D6C7}": { math: "\\mbfzeta" }, "\u{1D6C8}": { math: "\\mbfeta" }, "\u{1D6C9}": { math: "\\mbftheta" }, "\u{1D6CA}": { math: "\\mbfiota" }, "\u{1D6CB}": { math: "\\mbfkappa" }, "\u{1D6CC}": { math: "\\mbflambda" }, "\u{1D6CD}": { math: "\\mbfmu" }, "\u{1D6CE}": { math: "\\mbfnu" }, "\u{1D6CF}": { math: "\\mbfxi" }, "\u{1D6D0}": { math: "\\mbfomicron" }, "\u{1D6D1}": { math: "\\mbfpi" }, "\u{1D6D2}": { math: "\\mbfrho" }, "\u{1D6D3}": { math: "\\mbfvarsigma" }, "\u{1D6D4}": { math: "\\mbfsigma" }, "\u{1D6D5}": { math: "\\mbftau" }, "\u{1D6D6}": { math: "\\mbfupsilon" }, "\u{1D6D7}": { math: "\\mbfvarphi" }, "\u{1D6D8}": { math: "\\mbfchi" }, "\u{1D6D9}": { math: "\\mbfpsi" }, "\u{1D6DA}": { math: "\\mbfomega" }, "\u{1D6DB}": { math: "\\mbfpartial" }, "\u{1D6DC}": { math: "\\mbfepsilon" }, "\u{1D6DD}": { math: "\\mbfvartheta" }, "\u{1D6DE}": { math: "\\mbfvarkappa" }, "\u{1D6DF}": { math: "\\mbfphi" }, "\u{1D6E0}": { math: "\\mbfvarrho" }, "\u{1D6E1}": { math: "\\mbfvarpi" }, "\u{1D6E2}": { math: "\\mitAlpha" }, "\u{1D6E3}": { math: "\\mitBeta" }, "\u{1D6E4}": { math: "\\mitGamma" }, "\u{1D6E5}": { math: "\\mitDelta" }, "\u{1D6E6}": { math: "\\mitEpsilon" }, "\u{1D6E7}": { math: "\\mitZeta" }, "\u{1D6E8}": { math: "\\mitEta" }, "\u{1D6E9}": { math: "\\mitTheta" }, "\u{1D6EA}": { math: "\\mitIota" }, "\u{1D6EB}": { math: "\\mitKappa" }, "\u{1D6EC}": { math: "\\mitLambda" }, "\u{1D6ED}": { math: "\\mitMu" }, "\u{1D6EE}": { math: "\\mitNu" }, "\u{1D6EF}": { math: "\\mitXi" }, "\u{1D6F0}": { math: "\\mitOmicron" }, "\u{1D6F1}": { math: "\\mitPi" }, "\u{1D6F2}": { math: "\\mitRho" }, "\u{1D6F3}": { math: "\\mitvarTheta" }, "\u{1D6F4}": { math: "\\mitSigma" }, "\u{1D6F5}": { math: "\\mitTau" }, "\u{1D6F6}": { math: "\\mitUpsilon" }, "\u{1D6F7}": { math: "\\mitPhi" }, "\u{1D6F8}": { math: "\\mitChi" }, "\u{1D6F9}": { math: "\\mitPsi" }, "\u{1D6FA}": { math: "\\mitOmega" }, "\u{1D6FB}": { math: "\\mitnabla" }, "\u{1D6FC}": { math: "\\mitalpha" }, "\u{1D6FD}": { math: "\\mitbeta" }, "\u{1D6FE}": { math: "\\mitgamma" }, "\u{1D6FF}": { math: "\\mitdelta" }, "\u{1D700}": { math: "\\mitvarepsilon" }, "\u{1D701}": { math: "\\mitzeta" }, "\u{1D702}": { math: "\\miteta" }, "\u{1D703}": { math: "\\mittheta" }, "\u{1D704}": { math: "\\mitiota" }, "\u{1D705}": { math: "\\mitkappa" }, "\u{1D706}": { math: "\\mitlambda" }, "\u{1D707}": { math: "\\mitmu" }, "\u{1D708}": { math: "\\mitnu" }, "\u{1D709}": { math: "\\mitxi" }, "\u{1D70A}": { math: "\\mitomicron" }, "\u{1D70B}": { math: "\\mitpi" }, "\u{1D70C}": { math: "\\mitrho" }, "\u{1D70D}": { math: "\\mitvarsigma" }, "\u{1D70E}": { math: "\\mitsigma" }, "\u{1D70F}": { math: "\\mittau" }, "\u{1D710}": { math: "\\mitupsilon" }, "\u{1D711}": { math: "\\mitvarphi" }, "\u{1D712}": { math: "\\mitchi" }, "\u{1D713}": { math: "\\mitpsi" }, "\u{1D714}": { math: "\\mitomega" }, "\u{1D715}": { math: "\\mitpartial" }, "\u{1D716}": { math: "\\mitepsilon" }, "\u{1D717}": { math: "\\mitvartheta" }, "\u{1D718}": { math: "\\mitvarkappa" }, "\u{1D719}": { math: "\\mitphi" }, "\u{1D71A}": { math: "\\mitvarrho" }, "\u{1D71B}": { math: "\\mitvarpi" }, "\u{1D71C}": { math: "\\mbfitAlpha" }, "\u{1D71D}": { math: "\\mbfitBeta" }, "\u{1D71E}": { math: "\\mbfitGamma" }, "\u{1D71F}": { math: "\\mbfitDelta" }, "\u{1D720}": { math: "\\mbfitEpsilon" }, "\u{1D721}": { math: "\\mbfitZeta" }, "\u{1D722}": { math: "\\mbfitEta" }, "\u{1D723}": { math: "\\mbfitTheta" }, "\u{1D724}": { math: "\\mbfitIota" }, "\u{1D725}": { math: "\\mbfitKappa" }, "\u{1D726}": { math: "\\mbfitLambda" }, "\u{1D727}": { math: "\\mbfitMu" }, "\u{1D728}": { math: "\\mbfitNu" }, "\u{1D729}": { math: "\\mbfitXi" }, "\u{1D72A}": { math: "\\mbfitOmicron" }, "\u{1D72B}": { math: "\\mbfitPi" }, "\u{1D72C}": { math: "\\mbfitRho" }, "\u{1D72D}": { math: "\\mbfitvarTheta" }, "\u{1D72E}": { math: "\\mbfitSigma" }, "\u{1D72F}": { math: "\\mbfitTau" }, "\u{1D730}": { math: "\\mbfitUpsilon" }, "\u{1D731}": { math: "\\mbfitPhi" }, "\u{1D732}": { math: "\\mbfitChi" }, "\u{1D733}": { math: "\\mbfitPsi" }, "\u{1D734}": { math: "\\mbfitOmega" }, "\u{1D735}": { math: "\\mbfitnabla" }, "\u{1D736}": { math: "\\mbfitalpha" }, "\u{1D737}": { math: "\\mbfitbeta" }, "\u{1D738}": { math: "\\mbfitgamma" }, "\u{1D739}": { math: "\\mbfitdelta" }, "\u{1D73A}": { math: "\\mbfitvarepsilon" }, "\u{1D73B}": { math: "\\mbfitzeta" }, "\u{1D73C}": { math: "\\mbfiteta" }, "\u{1D73D}": { math: "\\mbfittheta" }, "\u{1D73E}": { math: "\\mbfitiota" }, "\u{1D73F}": { math: "\\mbfitkappa" }, "\u{1D740}": { math: "\\mbfitlambda" }, "\u{1D741}": { math: "\\mbfitmu" }, "\u{1D742}": { math: "\\mbfitnu" }, "\u{1D743}": { math: "\\mbfitxi" }, "\u{1D744}": { math: "\\mbfitomicron" }, "\u{1D745}": { math: "\\mbfitpi" }, "\u{1D746}": { math: "\\mbfitrho" }, "\u{1D747}": { math: "\\mbfitvarsigma" }, "\u{1D748}": { math: "\\mbfitsigma" }, "\u{1D749}": { math: "\\mbfittau" }, "\u{1D74A}": { math: "\\mbfitupsilon" }, "\u{1D74B}": { math: "\\mbfitvarphi" }, "\u{1D74C}": { math: "\\mbfitchi" }, "\u{1D74D}": { math: "\\mbfitpsi" }, "\u{1D74E}": { math: "\\mbfitomega" }, "\u{1D74F}": { math: "\\mbfitpartial" }, "\u{1D750}": { math: "\\mbfitepsilon" }, "\u{1D751}": { math: "\\mbfitvartheta" }, "\u{1D752}": { math: "\\mbfitvarkappa" }, "\u{1D753}": { math: "\\mbfitphi" }, "\u{1D754}": { math: "\\mbfitvarrho" }, "\u{1D755}": { math: "\\mbfitvarpi" }, "\u{1D756}": { math: "\\mbfsansAlpha" }, "\u{1D757}": { math: "\\mbfsansBeta" }, "\u{1D758}": { math: "\\mbfsansGamma" }, "\u{1D759}": { math: "\\mbfsansDelta" }, "\u{1D75A}": { math: "\\mbfsansEpsilon" }, "\u{1D75B}": { math: "\\mbfsansZeta" }, "\u{1D75C}": { math: "\\mbfsansEta" }, "\u{1D75D}": { math: "\\mbfsansTheta" }, "\u{1D75E}": { math: "\\mbfsansIota" }, "\u{1D75F}": { math: "\\mbfsansKappa" }, "\u{1D760}": { math: "\\mbfsansLambda" }, "\u{1D761}": { math: "\\mbfsansMu" }, "\u{1D762}": { math: "\\mbfsansNu" }, "\u{1D763}": { math: "\\mbfsansXi" }, "\u{1D764}": { math: "\\mbfsansOmicron" }, "\u{1D765}": { math: "\\mbfsansPi" }, "\u{1D766}": { math: "\\mbfsansRho" }, "\u{1D767}": { math: "\\mbfsansvarTheta" }, "\u{1D768}": { math: "\\mbfsansSigma" }, "\u{1D769}": { math: "\\mbfsansTau" }, "\u{1D76A}": { math: "\\mbfsansUpsilon" }, "\u{1D76B}": { math: "\\mbfsansPhi" }, "\u{1D76C}": { math: "\\mbfsansChi" }, "\u{1D76D}": { math: "\\mbfsansPsi" }, "\u{1D76E}": { math: "\\mbfsansOmega" }, "\u{1D76F}": { math: "\\mbfsansnabla" }, "\u{1D770}": { math: "\\mbfsansalpha" }, "\u{1D771}": { math: "\\mbfsansbeta" }, "\u{1D772}": { math: "\\mbfsansgamma" }, "\u{1D773}": { math: "\\mbfsansdelta" }, "\u{1D774}": { math: "\\mbfsansvarepsilon" }, "\u{1D775}": { math: "\\mbfsanszeta" }, "\u{1D776}": { math: "\\mbfsanseta" }, "\u{1D777}": { math: "\\mbfsanstheta" }, "\u{1D778}": { math: "\\mbfsansiota" }, "\u{1D779}": { math: "\\mbfsanskappa" }, "\u{1D77A}": { math: "\\mbfsanslambda" }, "\u{1D77B}": { math: "\\mbfsansmu" }, "\u{1D77C}": { math: "\\mbfsansnu" }, "\u{1D77D}": { math: "\\mbfsansxi" }, "\u{1D77E}": { math: "\\mbfsansomicron" }, "\u{1D77F}": { math: "\\mbfsanspi" }, "\u{1D780}": { math: "\\mbfsansrho" }, "\u{1D781}": { math: "\\mbfsansvarsigma" }, "\u{1D782}": { math: "\\mbfsanssigma" }, "\u{1D783}": { math: "\\mbfsanstau" }, "\u{1D784}": { math: "\\mbfsansupsilon" }, "\u{1D785}": { math: "\\mbfsansvarphi" }, "\u{1D786}": { math: "\\mbfsanschi" }, "\u{1D787}": { math: "\\mbfsanspsi" }, "\u{1D788}": { math: "\\mbfsansomega" }, "\u{1D789}": { math: "\\mbfsanspartial" }, "\u{1D78A}": { math: "\\mbfsansepsilon" }, "\u{1D78B}": { math: "\\mbfsansvartheta" }, "\u{1D78C}": { math: "\\mbfsansvarkappa" }, "\u{1D78D}": { math: "\\mbfsansphi" }, "\u{1D78E}": { math: "\\mbfsansvarrho" }, "\u{1D78F}": { math: "\\mbfsansvarpi" }, "\u{1D790}": { math: "\\mbfitsansAlpha" }, "\u{1D791}": { math: "\\mbfitsansBeta" }, "\u{1D792}": { math: "\\mbfitsansGamma" }, "\u{1D793}": { math: "\\mbfitsansDelta" }, "\u{1D794}": { math: "\\mbfitsansEpsilon" }, "\u{1D795}": { math: "\\mbfitsansZeta" }, "\u{1D796}": { math: "\\mbfitsansEta" }, "\u{1D797}": { math: "\\mbfitsansTheta" }, "\u{1D798}": { math: "\\mbfitsansIota" }, "\u{1D799}": { math: "\\mbfitsansKappa" }, "\u{1D79A}": { math: "\\mbfitsansLambda" }, "\u{1D79B}": { math: "\\mbfitsansMu" }, "\u{1D79C}": { math: "\\mbfitsansNu" }, "\u{1D79D}": { math: "\\mbfitsansXi" }, "\u{1D79E}": { math: "\\mbfitsansOmicron" }, "\u{1D79F}": { math: "\\mbfitsansPi" }, "\u{1D7A0}": { math: "\\mbfitsansRho" }, "\u{1D7A1}": { math: "\\mbfitsansvarTheta" }, "\u{1D7A2}": { math: "\\mbfitsansSigma" }, "\u{1D7A3}": { math: "\\mbfitsansTau" }, "\u{1D7A4}": { math: "\\mbfitsansUpsilon" }, "\u{1D7A5}": { math: "\\mbfitsansPhi" }, "\u{1D7A6}": { math: "\\mbfitsansChi" }, "\u{1D7A7}": { math: "\\mbfitsansPsi" }, "\u{1D7A8}": { math: "\\mbfitsansOmega" }, "\u{1D7A9}": { math: "\\mbfitsansnabla" }, "\u{1D7AA}": { math: "\\mbfitsansalpha" }, "\u{1D7AB}": { math: "\\mbfitsansbeta" }, "\u{1D7AC}": { math: "\\mbfitsansgamma" }, "\u{1D7AD}": { math: "\\mbfitsansdelta" }, "\u{1D7AE}": { math: "\\mbfitsansvarepsilon" }, "\u{1D7AF}": { math: "\\mbfitsanszeta" }, "\u{1D7B0}": { math: "\\mbfitsanseta" }, "\u{1D7B1}": { math: "\\mbfitsanstheta" }, "\u{1D7B2}": { math: "\\mbfitsansiota" }, "\u{1D7B3}": { math: "\\mbfitsanskappa" }, "\u{1D7B4}": { math: "\\mbfitsanslambda" }, "\u{1D7B5}": { math: "\\mbfitsansmu" }, "\u{1D7B6}": { math: "\\mbfitsansnu" }, "\u{1D7B7}": { math: "\\mbfitsansxi" }, "\u{1D7B8}": { math: "\\mbfitsansomicron" }, "\u{1D7B9}": { math: "\\mbfitsanspi" }, "\u{1D7BA}": { math: "\\mbfitsansrho" }, "\u{1D7BB}": { math: "\\mbfitsansvarsigma" }, "\u{1D7BC}": { math: "\\mbfitsanssigma" }, "\u{1D7BD}": { math: "\\mbfitsanstau" }, "\u{1D7BE}": { math: "\\mbfitsansupsilon" }, "\u{1D7BF}": { math: "\\mbfitsansvarphi" }, "\u{1D7C0}": { math: "\\mbfitsanschi" }, "\u{1D7C1}": { math: "\\mbfitsanspsi" }, "\u{1D7C2}": { math: "\\mbfitsansomega" }, "\u{1D7C3}": { math: "\\mbfitsanspartial" }, "\u{1D7C4}": { math: "\\mbfitsansepsilon" }, "\u{1D7C5}": { math: "\\mbfitsansvartheta" }, "\u{1D7C6}": { math: "\\mbfitsansvarkappa" }, "\u{1D7C7}": { math: "\\mbfitsansphi" }, "\u{1D7C8}": { math: "\\mbfitsansvarrho" }, "\u{1D7C9}": { math: "\\mbfitsansvarpi" }, "\u{1D7CA}": { math: "\\mbfDigamma" }, "\u{1D7CB}": { math: "\\mbfdigamma" }, "\u{1D7CE}": { math: "\\mbfzero" }, "\u{1D7CF}": { math: "\\mbfone" }, "\u{1D7D0}": { math: "\\mbftwo" }, "\u{1D7D1}": { math: "\\mbfthree" }, "\u{1D7D2}": { math: "\\mbffour" }, "\u{1D7D3}": { math: "\\mbffive" }, "\u{1D7D4}": { math: "\\mbfsix" }, "\u{1D7D5}": { math: "\\mbfseven" }, "\u{1D7D6}": { math: "\\mbfeight" }, "\u{1D7D7}": { math: "\\mbfnine" }, "\u{1D7D8}": { math: "\\Bbbzero" }, "\u{1D7D9}": { math: "\\Bbbone" }, "\u{1D7DA}": { math: "\\Bbbtwo" }, "\u{1D7DB}": { math: "\\Bbbthree" }, "\u{1D7DC}": { math: "\\Bbbfour" }, "\u{1D7DD}": { math: "\\Bbbfive" }, "\u{1D7DE}": { math: "\\Bbbsix" }, "\u{1D7DF}": { math: "\\Bbbseven" }, "\u{1D7E0}": { math: "\\Bbbeight" }, "\u{1D7E1}": { math: "\\Bbbnine" }, "\u{1D7E2}": { math: "\\msanszero" }, "\u{1D7E3}": { math: "\\msansone" }, "\u{1D7E4}": { math: "\\msanstwo" }, "\u{1D7E5}": { math: "\\msansthree" }, "\u{1D7E6}": { math: "\\msansfour" }, "\u{1D7E7}": { math: "\\msansfive" }, "\u{1D7E8}": { math: "\\msanssix" }, "\u{1D7E9}": { math: "\\msansseven" }, "\u{1D7EA}": { math: "\\msanseight" }, "\u{1D7EB}": { math: "\\msansnine" }, "\u{1D7EC}": { math: "\\mbfsanszero" }, "\u{1D7ED}": { math: "\\mbfsansone" }, "\u{1D7EE}": { math: "\\mbfsanstwo" }, "\u{1D7EF}": { math: "\\mbfsansthree" }, "\u{1D7F0}": { math: "\\mbfsansfour" }, "\u{1D7F1}": { math: "\\mbfsansfive" }, "\u{1D7F2}": { math: "\\mbfsanssix" }, "\u{1D7F3}": { math: "\\mbfsansseven" }, "\u{1D7F4}": { math: "\\mbfsanseight" }, "\u{1D7F5}": { math: "\\mbfsansnine" }, "\u{1D7F6}": { math: "\\mttzero" }, "\u{1D7F7}": { math: "\\mttone" }, "\u{1D7F8}": { math: "\\mtttwo" }, "\u{1D7F9}": { math: "\\mttthree" }, "\u{1D7FA}": { math: "\\mttfour" }, "\u{1D7FB}": { math: "\\mttfive" }, "\u{1D7FC}": { math: "\\mttsix" }, "\u{1D7FD}": { math: "\\mttseven" }, "\u{1D7FE}": { math: "\\mtteight" }, "\u{1D7FF}": { math: "\\mttnine" }, u\u031B\u03030: { math: "\\arabicmaj" }, u\u031B\u03031: { math: "\\arabichad" }, "\u2010": { math: "\\mathhyphen" }, "\u2015": { math: "\\horizbar" }, "\u2017": { math: "\\twolowline" }, "\u2025": { math: "\\enleadertwodots" }, "\u2033": { math: "\\dprime" }, "\u2034": { math: "\\trprime" }, "\u2035": { math: "\\backprime" }, "\u2036": { math: "\\backdprime" }, "\u2037": { math: "\\backtrprime" }, "\u2038": { math: "\\caretinsert" }, "\u203C": { math: "\\Exclam" }, "\u2040": { math: "\\tieconcat" }, "\u2043": { math: "\\hyphenbullet" }, "\u2044": { math: "\\fracslash" }, "\u2047": { math: "\\Question" }, "\u2050": { math: "\\closure" }, "\u2057": { math: "\\qprime" }, "\u20D2": { math: "\\vertoverlay" }, "\u20D7": { math: "\\vec" }, "\u20DB": { math: "\\dddot" }, "\u20DC": { math: "\\ddddot" }, "\u20DD": { math: "\\enclosecircle" }, "\u20DE": { math: "\\enclosesquare" }, "\u20DF": { math: "\\enclosediamond" }, "\u20E1": { math: "\\overleftrightarrow" }, "\u20E4": { math: "\\enclosetriangle" }, "\u20E7": { math: "\\annuity" }, "\u20E8": { math: "\\threeunderdot" }, "\u20E9": { math: "\\widebridgeabove" }, "\u20EC": { math: "\\underrightharpoondown" }, "\u20ED": { math: "\\underleftharpoondown" }, "\u20EE": { math: "\\underleftarrow" }, "\u20EF": { math: "\\underrightarrow" }, "\u20F0": { math: "\\asteraccent" }, \u210E: { math: "\\Planckconst" }, \u210F: { math: "\\hslash" }, \u2112: { math: "\\mscrL" }, \u211B: { math: "\\mscrR" }, "\u2127": { math: "\\mho" }, "\u2129": { math: "\\turnediota" }, "\u2132": { math: "\\Finv" }, \u2136: { math: "\\beth" }, \u2137: { math: "\\gimel" }, \u2138: { math: "\\daleth" }, "\u2141": { math: "\\Game" }, "\u2142": { math: "\\sansLturned" }, "\u2143": { math: "\\sansLmirrored" }, "\u2144": { math: "\\Yup" }, "\u2145": { math: "\\CapitalDifferentialD" }, "\u214A": { math: "\\PropertyLine" }, "\u2190\u0338": { math: "\\nleftarrow" }, "\u2192\u0338": { math: "\\nrightarrow" }, "\u219E": { math: "\\twoheadleftarrow" }, "\u219F": { math: "\\twoheaduparrow" }, "\u21A0": { math: "\\twoheadrightarrow" }, "\u21A1": { math: "\\twoheaddownarrow" }, "\u21A2": { math: "\\leftarrowtail" }, "\u21A3": { math: "\\rightarrowtail" }, "\u21A4": { math: "\\mapsfrom" }, "\u21A5": { math: "\\mapsup" }, "\u21A7": { math: "\\mapsdown" }, "\u21A8": { math: "\\updownarrowbar" }, "\u21AB": { math: "\\looparrowleft" }, "\u21AC": { math: "\\looparrowright" }, "\u21AD": { math: "\\leftrightsquigarrow" }, "\u2194\u0338": { math: "\\nleftrightarrow" }, "\u21B0": { math: "\\Lsh" }, "\u21B1": { math: "\\Rsh" }, "\u21B3": { text: "\\reflectbox{\\carriagereturn}", math: "\\Rdsh" }, "\u21B4": { math: "\\linefeed" }, "\u21B5": { math: "\\carriagereturn" }, "\u21B6": { math: "\\curvearrowleft" }, "\u21B7": { math: "\\curvearrowright" }, "\u21B8": { math: "\\barovernorthwestarrow" }, "\u21B9": { math: "\\barleftarrowrightarrowbar" }, "\u21BA": { math: "\\circlearrowleft" }, "\u21BE": { math: "\\upharpoonright" }, "\u21BF": { math: "\\upharpoonleft" }, "\u21C1": { math: "\\rightharpoondown" }, "\u21C2": { math: "\\downharpoonright" }, "\u21C3": { math: "\\downharpoonleft" }, "\u21C4": { math: "\\rightleftarrows" }, "\u21C6": { math: "\\leftrightarrows" }, "\u21C7": { math: "\\leftleftarrows" }, "\u21C8": { math: "\\upuparrows" }, "\u21C9": { math: "\\rightrightarrows" }, "\u21CA": { math: "\\downdownarrows" }, "\u21CB": { math: "\\leftrightharpoons" }, "\u21D0\u0338": { math: "\\nLeftarrow" }, "\u21D4\u0338": { math: "\\nLeftrightarrow" }, "\u21D2\u0338": { math: "\\nRightarrow" }, "\u21D6": { math: "\\Nwarrow" }, "\u21D7": { math: "\\Nearrow" }, "\u21D8": { math: "\\Searrow" }, "\u21D9": { math: "\\Swarrow" }, "\u21DA": { math: "\\Lleftarrow" }, "\u21DB": { math: "\\Rrightarrow" }, "\u21DC": { math: "\\leftsquigarrow" }, "\u21DD": { math: "\\rightsquigarrow" }, "\u21DE": { math: "\\nHuparrow" }, "\u21DF": { math: "\\nHdownarrow" }, "\u21E1": { math: "\\updasharrow" }, "\u21E3": { math: "\\downdasharrow" }, "\u21E6": { math: "\\leftwhitearrow" }, "\u21E7": { math: "\\upwhitearrow" }, "\u21E8": { math: "\\rightwhitearrow" }, "\u21E9": { math: "\\downwhitearrow" }, "\u21EA": { math: "\\whitearrowupfrombar" }, "\u21F4": { math: "\\circleonrightarrow" }, "\u21F6": { math: "\\rightthreearrows" }, "\u21F7": { math: "\\nvleftarrow" }, "\u21F9": { math: "\\nvleftrightarrow" }, "\u21FA": { math: "\\nVleftarrow" }, "\u21FC": { math: "\\nVleftrightarrow" }, "\u21FD": { math: "\\leftarrowtriangle" }, "\u21FE": { math: "\\rightarrowtriangle" }, "\u21FF": { math: "\\leftrightarrowtriangle" }, "\u2201": { math: "\\complement" }, "\u2203\u0338": { math: "\\nexists" }, "\u2205": { math: "\\varnothing" }, "\u2206": { math: "\\increment" }, "\u2207": { math: "\\nabla" }, "\u220A": { math: "\\smallin" }, "\u220D": { math: "\\smallni" }, "\u220E": { math: "\\QED" }, "\u2214": { math: "\\dotplus" }, "\u2215": { math: "\\divslash" }, "\u221A": { math: "\\sqrt" }, "\u221F": { math: "\\rightangle" }, "\u2221": { math: "\\measuredangle" }, "\u2222": { math: "\\sphericalangle" }, "\u2223\u0338": { math: "\\nmid" }, "\u2225\u0338": { math: "\\nparallel" }, "\u2232": { math: "\\lcirclerightint" }, "\u2234": { math: "\\therefore" }, "\u2235": { math: "\\because" }, "\u2237": { math: "\\Colon" }, "\u2239": { math: "\\eqcolon" }, "\u223D": { math: "\\backsim" }, "\u224A": { math: "\\approxeq" }, "\u224E": { math: "\\Bumpeq" }, "\u224F": { math: "\\bumpeq" }, "\u2252": { math: "\\fallingdotseq" }, "\u2253": { math: "\\risingdotseq" }, "\u2254": { math: "\\coloneq" }, "\u2256": { math: "\\eqcirc" }, "\u2257": { math: "\\circeq" }, "\u2258": { math: "\\arceq" }, "\u225A": { math: "\\veeeq" }, "\u225C": { math: "\\triangleq" }, "\u225D": { math: "\\eqdef" }, "\u225E": { math: "\\measeq" }, "\u225F": { math: "\\questeq" }, "\u2263": { math: "\\Equiv" }, "\u2268": { math: "\\lneqq" }, "\u2269": { math: "\\gneqq" }, "\u226C": { math: "\\between" }, "\u224D\u0338": { math: "\\nasymp" }, "\u2272\u0338": { math: "\\nlesssim" }, "\u2273\u0338": { math: "\\ngtrsim" }, "\u2276": { math: "\\lessgtr" }, "\u2277": { math: "\\gtrless" }, "\u227C": { math: "\\preccurlyeq" }, "\u227D": { math: "\\succcurlyeq" }, "\u228A": { math: "\\subsetneq" }, "\u228B": { math: "\\supsetneq" }, "\u228C": { math: "\\cupleftarrow" }, "\u228D": { math: "\\cupdot" }, "\u228F": { math: "\\sqsubset" }, "\u2290": { math: "\\sqsupset" }, "\u229A": { math: "\\circledcirc" }, "\u229B": { math: "\\circledast" }, "\u229C": { math: "\\circledequal" }, "\u229D": { math: "\\circleddash" }, "\u229E": { math: "\\boxplus" }, "\u229F": { math: "\\boxminus" }, "\u22A0": { math: "\\boxtimes" }, "\u22A1": { math: "\\boxdot" }, "\u22A6": { math: "\\assert" }, "\u22A9": { math: "\\Vdash" }, "\u22AA": { math: "\\Vvdash" }, "\u22AB": { math: "\\VDash" }, "\u22A2\u0338": { math: "\\nvdash" }, "\u22A8\u0338": { math: "\\nvDash" }, "\u22A9\u0338": { math: "\\nVdash" }, "\u22AB\u0338": { math: "\\nVDash" }, "\u22B0": { math: "\\prurel" }, "\u22B1": { math: "\\scurel" }, "\u22B2": { math: "\\vartriangleleft" }, "\u22B3": { math: "\\vartriangleright" }, "\u22B4": { math: "\\trianglelefteq" }, "\u22B5": { math: "\\trianglerighteq" }, "\u22B8": { math: "\\multimap" }, "\u22BA": { math: "\\intercal" }, "\u22BB": { math: "\\veebar" }, "\u22BC": { math: "\\barwedge" }, "\u22BD": { math: "\\barvee" }, "\u22BF": { math: "\\varlrtriangle" }, "\u22C7": { math: "\\divideontimes" }, "\u22C9": { math: "\\ltimes" }, "\u22CA": { math: "\\rtimes" }, "\u22CB": { math: "\\leftthreetimes" }, "\u22CC": { math: "\\rightthreetimes" }, "\u22CD": { math: "\\backsimeq" }, "\u22CE": { math: "\\curlyvee" }, "\u22CF": { math: "\\curlywedge" }, "\u22D0": { math: "\\Subset" }, "\u22D1": { math: "\\Supset" }, "\u22D2": { math: "\\Cap" }, "\u22D3": { math: "\\Cup" }, "\u22D4": { math: "\\pitchfork" }, "\u22D5": { math: "\\hash" }, "\u22D6": { math: "\\lessdot" }, "\u22D7": { math: "\\gtrdot" }, "\u22DA": { math: "\\lesseqgtr" }, "\u22DB": { math: "\\gtreqless" }, "\u22DC": { math: "\\eqless" }, "\u22DD": { math: "\\eqgtr" }, "\u22DE": { math: "\\curlyeqprec" }, "\u22DF": { math: "\\curlyeqsucc" }, "\u227C\u0338": { math: "\\npreceq" }, "\u227D\u0338": { math: "\\nsucceq" }, "\u22E4": { math: "\\sqsubsetneq" }, "\u22E5": { math: "\\sqsupsetneq" }, "\u22E6": { math: "\\lnsim" }, "\u22E7": { math: "\\gnsim" }, "\u22E8": { math: "\\precedesnotsimilar" }, "\u22E9": { math: "\\succnsim" }, "\u22B4\u0338": { math: "\\ntrianglelefteq" }, "\u22B5\u0338": { math: "\\ntrianglerighteq" }, "\u22F2": { math: "\\disin" }, "\u22F3": { math: "\\varisins" }, "\u22F4": { math: "\\isins" }, "\u22F5": { math: "\\isindot" }, "\u22F7": { math: "\\isinobar" }, "\u22F8": { math: "\\isinvb" }, "\u22F9": { math: "\\isinE" }, "\u22FA": { math: "\\nisd" }, "\u22FB": { math: "\\varnis" }, "\u22FC": { math: "\\nis" }, "\u22FD": { math: "\\varniobar" }, "\u22FE": { math: "\\niobar" }, "\u22FF": { math: "\\bagmember" }, "\u2300": { math: "\\diameter" }, "\u2302": { math: "\\house" }, "\u2305": { text: "{\\barwedge}", math: "\\varbarwedge" }, "\u2310": { math: "\\invneg" }, "\u2312": { math: "\\profline" }, "\u2313": { math: "\\profsurf" }, "\u2317": { math: "\\viewdata" }, "\u2319": { math: "\\turnednot" }, "\u231C": { math: "\\ulcorner" }, "\u231D": { math: "\\urcorner" }, "\u231E": { math: "\\llcorner" }, "\u231F": { math: "\\lrcorner" }, "\u2320": { math: "\\inttop" }, "\u2321": { math: "\\intbottom" }, "\u232C": { math: "\\varhexagonlrbonds" }, "\u2332": { math: "\\conictaper" }, "\u2336": { math: "\\topbot" }, "\u233D": { math: "\\obar" }, "\u2353": { math: "\\APLboxupcaret" }, "\u2370": { math: "\\APLboxquestion" }, "\u237C": { math: "\\rangledownzigzagarrow" }, "\u2394": { math: "\\hexagon" }, "\u239B": { math: "\\lparenuend" }, "\u239C": { math: "\\lparenextender" }, "\u239D": { math: "\\lparenlend" }, "\u239E": { math: "\\rparenuend" }, "\u239F": { math: "\\rparenextender" }, "\u23A0": { math: "\\rparenlend" }, "\u23A1": { math: "\\lbrackuend" }, "\u23A2": { math: "\\lbrackextender" }, "\u23A3": { math: "\\lbracklend" }, "\u23A4": { math: "\\rbrackuend" }, "\u23A5": { math: "\\rbrackextender" }, "\u23A6": { math: "\\rbracklend" }, "\u23A7": { math: "\\lbraceuend" }, "\u23A8": { math: "\\lbracemid" }, "\u23A9": { math: "\\lbracelend" }, "\u23AA": { math: "\\vbraceextender" }, "\u23AB": { math: "\\rbraceuend" }, "\u23AC": { math: "\\rbracemid" }, "\u23AD": { math: "\\rbracelend" }, "\u23AE": { math: "\\intextender" }, "\u23AF": { math: "\\harrowextender" }, "\u23B2": { math: "\\sumtop" }, "\u23B3": { math: "\\sumbottom" }, "\u23B4": { math: "\\overbracket" }, "\u23B5": { math: "\\underbracket" }, "\u23B6": { math: "\\bbrktbrk" }, "\u23B7": { math: "\\sqrtbottom" }, "\u23B8": { math: "\\lvboxline" }, "\u23B9": { math: "\\rvboxline" }, "\u23CE": { math: "\\varcarriagereturn" }, "\u23DC": { math: "\\overparen" }, "\u23DD": { math: "\\underparen" }, "\u23DE": { math: "\\overbrace" }, "\u23DF": { math: "\\underbrace" }, "\u23E0": { math: "\\obrbrak" }, "\u23E1": { math: "\\ubrbrak" }, "\u23E2": { math: "\\trapezium" }, "\u23E3": { math: "\\benzenr" }, "\u23E4": { math: "\\strns" }, "\u23E5": { math: "\\fltns" }, "\u23E6": { math: "\\accurrent" }, "\u23E7": { math: "\\elinters" }, "\u2422": { math: "\\blanksymbol" }, "\u2423": { math: "\\mathvisiblespace" }, "\u2506": { math: "\\bdtriplevdash" }, "\u2580": { math: "\\blockuphalf" }, "\u2584": { math: "\\blocklowhalf" }, "\u2588": { math: "\\blockfull" }, "\u258C": { math: "\\blocklefthalf" }, "\u2590": { math: "\\blockrighthalf" }, "\u2591": { math: "\\blockqtrshaded" }, "\u2592": { math: "\\blockhalfshaded" }, "\u2593": { math: "\\blockthreeqtrshaded" }, "\u25A0": { math: "\\mdlgblksquare" }, "\u25A2": { math: "\\squoval" }, "\u25A3": { math: "\\blackinwhitesquare" }, "\u25A4": { math: "\\squarehfill" }, "\u25A5": { math: "\\squarevfill" }, "\u25A6": { math: "\\squarehvfill" }, "\u25A7": { math: "\\squarenwsefill" }, "\u25A8": { math: "\\squareneswfill" }, "\u25A9": { math: "\\squarecrossfill" }, "\u25AA": { math: "\\smblksquare" }, "\u25AB": { math: "\\smwhtsquare" }, "\u25AC": { math: "\\hrectangleblack" }, "\u25AD": { math: "\\hrectangle" }, "\u25AE": { math: "\\vrectangleblack" }, "\u25AF": { math: "\\vrectangle" }, "\u25B0": { math: "\\parallelogramblack" }, "\u25B1": { math: "\\parallelogram" }, "\u25B2": { math: "\\bigblacktriangleup" }, "\u25B3": { math: "\\bigtriangleup" }, "\u25B4": { math: "\\blacktriangle" }, "\u25B5": { math: "\\vartriangle" }, "\u25B8": { math: "\\smallblacktriangleright" }, "\u25B9": { math: "\\smalltriangleright" }, "\u25BA": { math: "\\blackpointerright" }, "\u25BB": { math: "\\whitepointerright" }, "\u25BC": { math: "\\bigblacktriangledown" }, "\u25BE": { math: "\\blacktriangledown" }, "\u25BF": { math: "\\triangledown" }, "\u25C2": { math: "\\smallblacktriangleleft" }, "\u25C3": { math: "\\smalltriangleleft" }, "\u25C4": { math: "\\blackpointerleft" }, "\u25C5": { math: "\\whitepointerleft" }, "\u25C8": { math: "\\blackinwhitediamond" }, "\u25C9": { math: "\\fisheye" }, "\u25CA": { math: "\\lozenge" }, "\u25CC": { math: "\\dottedcircle" }, "\u25CD": { math: "\\circlevertfill" }, "\u25CE": { math: "\\bullseye" }, "\u25D0": { math: "\\circlelefthalfblack" }, "\u25D1": { math: "\\circlerighthalfblack" }, "\u25D2": { math: "\\circlebottomhalfblack" }, "\u25D3": { math: "\\circletophalfblack" }, "\u25D4": { math: "\\circleurquadblack" }, "\u25D5": { math: "\\blackcircleulquadwhite" }, "\u25D6": { math: "\\blacklefthalfcircle" }, "\u25D7": { math: "\\blackrighthalfcircle" }, "\u25D8": { math: "\\inversebullet" }, "\u25D9": { math: "\\inversewhitecircle" }, "\u25DA": { math: "\\invwhiteupperhalfcircle" }, "\u25DB": { math: "\\invwhitelowerhalfcircle" }, "\u25DC": { math: "\\ularc" }, "\u25DD": { math: "\\urarc" }, "\u25DE": { math: "\\lrarc" }, "\u25DF": { math: "\\llarc" }, "\u25E0": { math: "\\topsemicircle" }, "\u25E1": { math: "\\botsemicircle" }, "\u25E2": { math: "\\lrblacktriangle" }, "\u25E3": { math: "\\llblacktriangle" }, "\u25E4": { math: "\\ulblacktriangle" }, "\u25E5": { math: "\\urblacktriangle" }, "\u25E6": { math: "\\smwhtcircle" }, "\u25E7": { math: "\\squareleftblack" }, "\u25E8": { math: "\\squarerightblack" }, "\u25E9": { math: "\\squareulblack" }, "\u25EA": { math: "\\squarelrblack" }, "\u25EB": { math: "\\boxbar" }, "\u25EC": { math: "\\trianglecdot" }, "\u25ED": { math: "\\triangleleftblack" }, "\u25EE": { math: "\\trianglerightblack" }, "\u25F0": { math: "\\squareulquad" }, "\u25F1": { math: "\\squarellquad" }, "\u25F2": { math: "\\squarelrquad" }, "\u25F3": { math: "\\squareurquad" }, "\u25F4": { math: "\\circleulquad" }, "\u25F5": { math: "\\circlellquad" }, "\u25F6": { math: "\\circlelrquad" }, "\u25F7": { math: "\\circleurquad" }, "\u25F8": { math: "\\ultriangle" }, "\u25F9": { math: "\\urtriangle" }, "\u25FA": { math: "\\lltriangle" }, "\u25FB": { math: "\\mdwhtsquare" }, "\u25FC": { math: "\\mdblksquare" }, "\u25FD": { math: "\\mdsmwhtsquare" }, "\u25FE": { math: "\\mdsmblksquare" }, "\u25FF": { math: "\\lrtriangle" }, "\u2605": { math: "\\bigstar" }, "\u2606": { math: "\\bigwhitestar" }, "\u2621": { math: "\\danger" }, "\u263B": { math: "\\blacksmiley" }, "\u263C": { math: "\\sun" }, "\u263D": { math: "\\rightmoon" }, "\u263E": { math: "\\leftmoon" }, "\u2640": { math: "\\female" }, "\u2642": { math: "\\male" }, "\u2664": { math: "\\varspadesuit" }, "\u2665": { math: "\\varheartsuit" }, "\u2666": { math: "\\vardiamondsuit" }, "\u2667": { math: "\\varclubsuit" }, "\u2669": { math: "\\quarternote" }, "\u266A": { math: "\\eighthnote" }, "\u266B": { math: "\\twonotes" }, "\u266C": { math: "\\sixteenthnote" }, "\u267E": { math: "\\acidfree" }, "\u2680": { math: "\\dicei" }, "\u2681": { math: "\\diceii" }, "\u2682": { math: "\\diceiii" }, "\u2683": { math: "\\diceiv" }, "\u2684": { math: "\\dicev" }, "\u2685": { math: "\\dicevi" }, "\u2686": { math: "\\circledrightdot" }, "\u2687": { math: "\\circledtwodots" }, "\u2688": { math: "\\blackcircledrightdot" }, "\u2689": { math: "\\blackcircledtwodots" }, "\u26A5": { math: "\\Hermaphrodite" }, "\u26AC": { math: "\\mdsmwhtcircle" }, "\u26B2": { math: "\\neuter" }, "\u2713": { math: "\\checkmark" }, "\u2720": { math: "\\maltese" }, "\u272A": { math: "\\circledstar" }, "\u2736": { math: "\\varstar" }, "\u273D": { math: "\\dingasterisk" }, "\u2772": { math: "\\lbrbrak" }, "\u2773": { math: "\\rbrbrak" }, "\u279B": { math: "\\draftingarrow" }, "\u27C0": { math: "\\threedangle" }, "\u27C1": { math: "\\whiteinwhitetriangle" }, "\u27C3": { math: "\\subsetcirc" }, "\u27C4": { math: "\\supsetcirc" }, "\u27C7": { math: "\\veedot" }, "\u27C8": { math: "\\bsolhsub" }, "\u27C9": { math: "\\suphsol" }, "\u27CB": { math: "\\diagup" }, "\u27CC": { math: "\\longdivision" }, "\u27CD": { math: "\\diagdown" }, "\u27D1": { math: "\\wedgedot" }, "\u27D2": { math: "\\upin" }, "\u27D3": { math: "\\pullback" }, "\u27D4": { math: "\\pushout" }, "\u27D5": { math: "\\leftouterjoin" }, "\u27D6": { math: "\\rightouterjoin" }, "\u27D7": { math: "\\fullouterjoin" }, "\u27D8": { math: "\\bigbot" }, "\u27D9": { math: "\\bigtop" }, "\u27DA": { math: "\\DashVDash" }, "\u27DB": { math: "\\dashVdash" }, "\u27DC": { math: "\\multimapinv" }, "\u27DD": { math: "\\vlongdash" }, "\u27DE": { math: "\\longdashv" }, "\u27DF": { math: "\\cirbot" }, "\u27E0": { math: "\\lozengeminus" }, "\u27E1": { math: "\\concavediamond" }, "\u27E2": { math: "\\concavediamondtickleft" }, "\u27E3": { math: "\\concavediamondtickright" }, "\u27E4": { math: "\\whitesquaretickleft" }, "\u27E5": { math: "\\whitesquaretickright" }, "\u27EB": { math: "\\rang" }, "\u27EC": { math: "\\Lbrbrak" }, "\u27ED": { math: "\\Rbrbrak" }, "\u27F0": { math: "\\UUparrow" }, "\u27F1": { math: "\\DDownarrow" }, "\u27F2": { math: "\\acwgapcirclearrow" }, "\u27F3": { math: "\\cwgapcirclearrow" }, "\u27F4": { math: "\\rightarrowonoplus" }, "\u27FB": { math: "\\longmapsfrom" }, "\u27FD": { math: "\\Longmapsfrom" }, "\u27FE": { math: "\\Longmapsto" }, "\u27FF": { math: "\\longrightsquigarrow" }, "\u2901": { math: "\\nVtwoheadrightarrow" }, "\u2902": { math: "\\nvLeftarrow" }, "\u2903": { math: "\\nvRightarrow" }, "\u2904": { math: "\\nvLeftrightarrow" }, "\u2905": { math: "\\twoheadmapsto" }, "\u2906": { math: "\\Mapsfrom" }, "\u2907": { math: "\\Mapsto" }, "\u2908": { math: "\\downarrowbarred" }, "\u2909": { math: "\\uparrowbarred" }, "\u290A": { math: "\\Uuparrow" }, "\u290B": { math: "\\Ddownarrow" }, "\u290C": { math: "\\leftbkarrow" }, "\u290D": { math: "\\rightbkarrow" }, "\u290E": { math: "\\leftdbkarrow" }, "\u290F": { math: "\\dbkarrow" }, "\u2910": { math: "\\drbkarrow" }, "\u2911": { math: "\\rightdotarrow" }, "\u2917": { math: "\\nvtwoheadrightarrowtail" }, "\u2918": { math: "\\nVtwoheadrightarrowtail" }, "\u2919": { math: "\\lefttail" }, "\u291A": { math: "\\righttail" }, "\u291B": { math: "\\leftdbltail" }, "\u291C": { math: "\\rightdbltail" }, "\u291D": { math: "\\diamondleftarrow" }, "\u291E": { math: "\\rightarrowdiamond" }, "\u291F": { math: "\\diamondleftarrowbar" }, "\u2920": { math: "\\barrightarrowdiamond" }, "\u2921": { math: "\\nwsearrow" }, "\u2922": { math: "\\neswarrow" }, "\u2923": { math: "\\hknwarrow" }, "\u2924": { math: "\\hknearrow" }, "\u2925": { math: "\\hksearrow" }, "\u2926": { math: "\\hkswarrow" }, "\u2927": { math: "\\tona" }, "\u2928": { math: "\\toea" }, "\u2929": { math: "\\tosa" }, "\u292A": { math: "\\towa" }, "\u292B": { math: "\\rdiagovfdiag" }, "\u292C": { math: "\\fdiagovrdiag" }, "\u292D": { math: "\\seovnearrow" }, "\u292E": { math: "\\neovsearrow" }, "\u292F": { math: "\\fdiagovnearrow" }, "\u2930": { math: "\\rdiagovsearrow" }, "\u2931": { math: "\\neovnwarrow" }, "\u2932": { math: "\\nwovnearrow" }, "\u2933": { math: "\\rightcurvedarrow" }, "\u2934": { math: "\\uprightcurvearrow" }, "\u2935": { math: "\\downrightcurvedarrow" }, "\u2936": { math: "\\leftdowncurvedarrow" }, "\u2937": { math: "\\rightdowncurvedarrow" }, "\u2938": { math: "\\cwrightarcarrow" }, "\u2939": { math: "\\acwleftarcarrow" }, "\u293A": { math: "\\acwoverarcarrow" }, "\u293B": { math: "\\acwunderarcarrow" }, "\u293C": { math: "\\curvearrowrightminus" }, "\u293D": { math: "\\curvearrowleftplus" }, "\u293E": { math: "\\cwundercurvearrow" }, "\u293F": { math: "\\ccwundercurvearrow" }, "\u2942": { math: "\\rightarrowshortleftarrow" }, "\u2943": { math: "\\leftarrowshortrightarrow" }, "\u2944": { math: "\\shortrightarrowleftarrow" }, "\u2945": { math: "\\rightarrowplus" }, "\u2946": { math: "\\leftarrowplus" }, "\u2947": { math: "\\rightarrowx" }, "\u2948": { math: "\\leftrightarrowcircle" }, "\u2949": { math: "\\twoheaduparrowcircle" }, "\u294C": { math: "\\updownharpoonrightleft" }, "\u294D": { math: "\\updownharpoonleftright" }, "\u294E": { math: "\\leftrightharpoonupup" }, "\u2950": { math: "\\DownLeftRightVector" }, "\u2966": { math: "\\leftrightharpoonsup" }, "\u2967": { math: "\\leftrightharpoonsdown" }, "\u2968": { math: "\\rightleftharpoonsup" }, "\u2969": { math: "\\rightleftharpoonsdown" }, "\u2971": { math: "\\equalrightarrow" }, "\u2972": { math: "\\similarrightarrow" }, "\u2973": { math: "\\leftarrowsimilar" }, "\u2974": { math: "\\rightarrowsimilar" }, "\u2975": { math: "\\rightarrowapprox" }, "\u2976": { math: "\\ltlarr" }, "\u2977": { math: "\\leftarrowless" }, "\u2978": { math: "\\gtrarr" }, "\u2979": { math: "\\subrarr" }, "\u297A": { math: "\\leftarrowsubset" }, "\u297B": { math: "\\suplarr" }, "\u297C": { math: "\\leftfishtail" }, "\u297D": { math: "\\rightfishtail" }, "\u297E": { math: "\\upfishtail" }, "\u297F": { math: "\\downfishtail" }, "\u2980": { math: "\\Vvert" }, "\u2981": { math: "\\spot" }, "\u2982": { math: "\\typecolon" }, "\u2983": { math: "\\lBrace" }, "\u2984": { math: "\\rBrace" }, "\u2985": { math: "\\lParen" }, "\u2986": { math: "\\Elroang" }, "\u2987": { math: "\\limg" }, "\u298B": { math: "\\lbrackubar" }, "\u298C": { math: "\\rbrackubar" }, "\u298D": { math: "\\lbrackultick" }, "\u298E": { math: "\\rbracklrtick" }, "\u298F": { math: "\\lbracklltick" }, "\u2990": { math: "\\rbrackurtick" }, "\u2991": { math: "\\langledot" }, "\u2992": { math: "\\rangledot" }, "\u2993": { math: "\\lparenless" }, "\u2994": { math: "\\rparengtr" }, "\u2995": { math: "\\Lparengtr" }, "\u2996": { math: "\\Rparenless" }, "\u2997": { math: "\\lblkbrbrak" }, "\u2998": { math: "\\rblkbrbrak" }, "\u2999": { math: "\\fourvdots" }, "\u299A": { math: "\\vzigzag" }, "\u299B": { math: "\\measuredangleleft" }, "\u299D": { math: "\\rightanglemdot" }, "\u299E": { math: "\\angles" }, "\u299F": { math: "\\angdnr" }, "\u29A0": { math: "\\gtlpar" }, "\u29A1": { math: "\\sphericalangleup" }, "\u29A2": { math: "\\turnangle" }, "\u29A3": { math: "\\revangle" }, "\u29A4": { math: "\\angleubar" }, "\u29A5": { math: "\\revangleubar" }, "\u29A6": { math: "\\wideangledown" }, "\u29A7": { math: "\\wideangleup" }, "\u29A8": { math: "\\measanglerutone" }, "\u29A9": { math: "\\measanglelutonw" }, "\u29AA": { math: "\\measanglerdtose" }, "\u29AB": { math: "\\measangleldtosw" }, "\u29AC": { math: "\\measangleurtone" }, "\u29AD": { math: "\\measangleultonw" }, "\u29AE": { math: "\\measangledrtose" }, "\u29AF": { math: "\\measangledltosw" }, "\u29B0": { math: "\\revemptyset" }, "\u29B1": { math: "\\emptysetobar" }, "\u29B2": { math: "\\emptysetocirc" }, "\u29B3": { math: "\\emptysetoarr" }, "\u29B4": { math: "\\emptysetoarrl" }, "\u29B5": { math: "\\circlehbar" }, "\u29B6": { math: "\\circledvert" }, "\u29B7": { math: "\\circledparallel" }, "\u29B8": { math: "\\circledbslash" }, "\u29B9": { math: "\\operp" }, "\u29BA": { math: "\\obot" }, "\u29BB": { math: "\\olcross" }, "\u29BC": { math: "\\odotslashdot" }, "\u29BD": { math: "\\uparrowoncircle" }, "\u29BE": { math: "\\circledwhitebullet" }, "\u29BF": { math: "\\circledbullet" }, "\u29C0": { math: "\\circledless" }, "\u29C1": { math: "\\circledgtr" }, "\u29C2": { math: "\\cirscir" }, "\u29C3": { math: "\\cirE" }, "\u29C5": { math: "\\boxbslash" }, "\u29C6": { math: "\\boxast" }, "\u29C7": { math: "\\boxcircle" }, "\u29C8": { math: "\\boxbox" }, "\u29C9": { math: "\\boxonbox" }, "\u29CA": { math: "\\triangleodot" }, "\u29CB": { math: "\\triangleubar" }, "\u29CC": { math: "\\triangles" }, "\u29CD": { math: "\\triangleserifs" }, "\u29CE": { math: "\\rtriltri" }, "\u29D1": { math: "\\lfbowtie" }, "\u29D2": { math: "\\rfbowtie" }, "\u29D3": { math: "\\fbowtie" }, "\u29D4": { math: "\\lftimes" }, "\u29D5": { math: "\\rftimes" }, "\u29D6": { math: "\\hourglass" }, "\u29D7": { math: "\\blackhourglass" }, "\u29D8": { math: "\\lvzigzag" }, "\u29D9": { math: "\\rvzigzag" }, "\u29DA": { math: "\\Lvzigzag" }, "\u29DB": { math: "\\Rvzigzag" }, "\u29DC": { math: "\\iinfin" }, "\u29DD": { math: "\\tieinfty" }, "\u29DE": { math: "\\nvinfty" }, "\u29E0": { math: "\\laplac" }, "\u29E1": { math: "\\lrtriangleeq" }, "\u29E2": { math: "\\shuffle" }, "\u29E3": { math: "\\eparsl" }, "\u29E4": { math: "\\smeparsl" }, "\u29E5": { math: "\\eqvparsl" }, "\u29E6": { math: "\\gleichstark" }, "\u29E7": { math: "\\thermod" }, "\u29E8": { math: "\\downtriangleleftblack" }, "\u29E9": { math: "\\downtrianglerightblack" }, "\u29EA": { math: "\\blackdiamonddownarrow" }, "\u29EB": { math: "\\blacklozenge" }, "\u29EC": { math: "\\circledownarrow" }, "\u29ED": { math: "\\blackcircledownarrow" }, "\u29EE": { math: "\\errbarsquare" }, "\u29EF": { math: "\\errbarblacksquare" }, "\u29F0": { math: "\\errbardiamond" }, "\u29F1": { math: "\\errbarblackdiamond" }, "\u29F2": { math: "\\errbarcircle" }, "\u29F3": { math: "\\errbarblackcircle" }, "\u29F4": { math: "\\RuleDelayed" }, "\u29F6": { math: "\\dsol" }, "\u29F7": { math: "\\rsolbar" }, "\u29F8": { math: "\\xsol" }, "\u29FA": { math: "\\doubleplus" }, "\u29FB": { math: "\\tripleplus" }, "\u29FC": { math: "\\lcurvyangle" }, "\u29FD": { math: "\\rcurvyangle" }, "\u29FE": { math: "\\tplus" }, "\u29FF": { math: "\\tminus" }, "\u2A03": { math: "\\bigcupdot" }, "\u2A04": { math: "\\Elxuplus" }, "\u2A05": { math: "\\bigsqcap" }, "\u2A07": { math: "\\conjquant" }, "\u2A08": { math: "\\disjquant" }, "\u2A0A": { math: "\\modtwosum" }, "\u2A0B": { math: "\\sumint" }, "\u2A0C": { math: "\\iiiint" }, "\u2A0D": { math: "\\intbar" }, "\u2A0E": { math: "\\intBar" }, "\u2A10": { math: "\\cirfnint" }, "\u2A11": { math: "\\awint" }, "\u2A12": { math: "\\rppolint" }, "\u2A13": { math: "\\scpolint" }, "\u2A14": { math: "\\npolint" }, "\u2A15": { math: "\\pointint" }, "\u2A17": { math: "\\intlarhk" }, "\u2A18": { math: "\\intx" }, "\u2A19": { math: "\\intcap" }, "\u2A1A": { math: "\\intcup" }, "\u2A1B": { math: "\\upint" }, "\u2A1C": { math: "\\lowint" }, "\u2A1D": { math: "\\Join" }, "\u2A1E": { math: "\\bigtriangleleft" }, "\u2A1F": { math: "\\zcmp" }, "\u2A20": { math: "\\zpipe" }, "\u2A21": { math: "\\zproject" }, "\u2A22": { math: "\\ringplus" }, "\u2A23": { math: "\\plushat" }, "\u2A24": { math: "\\simplus" }, "\u2A25": { math: "\\plusdot" }, "\u2A26": { math: "\\plussim" }, "\u2A27": { math: "\\plussubtwo" }, "\u2A28": { math: "\\plustrif" }, "\u2A29": { math: "\\commaminus" }, "\u2A2A": { math: "\\minusdot" }, "\u2A2B": { math: "\\minusfdots" }, "\u2A2C": { math: "\\minusrdots" }, "\u2A2D": { math: "\\opluslhrim" }, "\u2A2E": { math: "\\oplusrhrim" }, "\u2A2F": { math: "\\vectimes" }, "\u2A30": { math: "\\dottimes" }, "\u2A31": { math: "\\timesbar" }, "\u2A32": { math: "\\btimes" }, "\u2A33": { math: "\\smashtimes" }, "\u2A34": { math: "\\otimeslhrim" }, "\u2A35": { math: "\\otimesrhrim" }, "\u2A36": { math: "\\otimeshat" }, "\u2A37": { math: "\\Otimes" }, "\u2A38": { math: "\\odiv" }, "\u2A39": { math: "\\triangleplus" }, "\u2A3A": { math: "\\triangleminus" }, "\u2A3B": { math: "\\triangletimes" }, "\u2A3C": { math: "\\intprod" }, "\u2A3D": { math: "\\intprodr" }, "\u2A3E": { math: "\\fcmp" }, "\u2A40": { math: "\\capdot" }, "\u2A41": { math: "\\uminus" }, "\u2A42": { math: "\\barcup" }, "\u2A43": { math: "\\barcap" }, "\u2A44": { math: "\\capwedge" }, "\u2A45": { math: "\\cupvee" }, "\u2A46": { math: "\\cupovercap" }, "\u2A47": { math: "\\capovercup" }, "\u2A48": { math: "\\cupbarcap" }, "\u2A49": { math: "\\capbarcup" }, "\u2A4A": { math: "\\twocups" }, "\u2A4B": { math: "\\twocaps" }, "\u2A4C": { math: "\\closedvarcup" }, "\u2A4D": { math: "\\closedvarcap" }, "\u2A4E": { math: "\\Sqcap" }, "\u2A4F": { math: "\\Sqcup" }, "\u2A50": { math: "\\closedvarcupsmashprod" }, "\u2A51": { math: "\\wedgeodot" }, "\u2A52": { math: "\\veeodot" }, "\u2A53": { math: "\\Wedge" }, "\u2A54": { math: "\\Vee" }, "\u2A55": { math: "\\wedgeonwedge" }, "\u2A57": { math: "\\bigslopedvee" }, "\u2A58": { math: "\\bigslopedwedge" }, "\u2A59": { math: "\\veeonwedge" }, "\u2A5A": { math: "\\wedgemidvert" }, "\u2A5B": { math: "\\veemidvert" }, "\u2A5C": { math: "\\midbarwedge" }, "\u2A5D": { math: "\\midbarvee" }, "\u2A5F": { math: "\\wedgebar" }, "\u2A60": { math: "\\wedgedoublebar" }, "\u2A61": { math: "\\varveebar" }, "\u2A62": { math: "\\doublebarvee" }, "\u2A63": { math: "\\veedoublebar" }, "\u2A64": { math: "\\dsub" }, "\u2A65": { math: "\\rsub" }, "\u2A66": { math: "\\eqdot" }, "\u2A67": { math: "\\dotequiv" }, "\u2A68": { math: "\\equivVert" }, "\u2A69": { math: "\\equivVvert" }, "\u2A6A": { math: "\\dotsim" }, "\u2A6B": { math: "\\simrdots" }, "\u2A6C": { math: "\\simminussim" }, "\u2A6D": { math: "\\congdot" }, "\u2A6F": { math: "\\hatapprox" }, "\u2A70": { math: "\\approxeqq" }, "\u2A71": { math: "\\eqqplus" }, "\u2A72": { math: "\\pluseqq" }, "\u2A73": { math: "\\eqqsim" }, "\u2A74": { math: "\\Coloneqq" }, "\u2A77": { math: "\\ddotseq" }, "\u2A78": { math: "\\equivDD" }, "\u2A79": { math: "\\ltcir" }, "\u2A7A": { math: "\\gtcir" }, "\u2A7B": { math: "\\ltquest" }, "\u2A7C": { math: "\\gtquest" }, "\u2A7D": { math: "\\leqslant" }, "\u2A7E": { math: "\\geqslant" }, "\u2A7F": { math: "\\lesdot" }, "\u2A80": { math: "\\gesdot" }, "\u2A81": { math: "\\lesdoto" }, "\u2A82": { math: "\\gesdoto" }, "\u2A83": { math: "\\lesdotor" }, "\u2A84": { math: "\\gesdotol" }, "\u2A85": { math: "\\lessapprox" }, "\u2A86": { math: "\\gtrapprox" }, "\u2A87": { math: "\\lneq" }, "\u2A88": { math: "\\gneq" }, "\u2A89": { math: "\\lnapprox" }, "\u2A8A": { math: "\\gnapprox" }, "\u2A8B": { math: "\\lesseqqgtr" }, "\u2A8C": { math: "\\gtreqqless" }, "\u2A8D": { math: "\\lsime" }, "\u2A8E": { math: "\\gsime" }, "\u2A8F": { math: "\\lsimg" }, "\u2A90": { math: "\\gsiml" }, "\u2A91": { math: "\\lgE" }, "\u2A92": { math: "\\glE" }, "\u2A93": { math: "\\lesges" }, "\u2A94": { math: "\\gesles" }, "\u2A95": { math: "\\eqslantless" }, "\u2A96": { math: "\\eqslantgtr" }, "\u2A97": { math: "\\elsdot" }, "\u2A98": { math: "\\egsdot" }, "\u2A99": { math: "\\eqqless" }, "\u2A9A": { math: "\\eqqgtr" }, "\u2A9B": { math: "\\eqqslantless" }, "\u2A9C": { math: "\\eqqslantgtr" }, "\u2A9D": { math: "\\simless" }, "\u2A9E": { math: "\\simgtr" }, "\u2A9F": { math: "\\simlE" }, "\u2AA0": { math: "\\simgE" }, "\u2AA3": { math: "\\partialmeetcontraction" }, "\u2AA4": { math: "\\glj" }, "\u2AA5": { math: "\\gla" }, "\u2AA8": { math: "\\lescc" }, "\u2AA9": { math: "\\gescc" }, "\u2AAA": { math: "\\smt" }, "\u2AAB": { math: "\\lat" }, "\u2AAC": { math: "\\smte" }, "\u2AAD": { math: "\\late" }, "\u2AAE": { math: "\\bumpeqq" }, "\u2AB1": { math: "\\precneq" }, "\u2AB2": { math: "\\succneq" }, "\u2AB3": { math: "\\preceqq" }, "\u2AB4": { math: "\\succeqq" }, "\u2AB5": { math: "\\precneqq" }, "\u2AB6": { math: "\\succneqq" }, "\u2AB7": { math: "\\precapprox" }, "\u2AB8": { math: "\\succapprox" }, "\u2AB9": { math: "\\precnapprox" }, "\u2ABA": { math: "\\succnapprox" }, "\u2ABD": { math: "\\subsetdot" }, "\u2ABE": { math: "\\supsetdot" }, "\u2ABF": { math: "\\subsetplus" }, "\u2AC0": { math: "\\supsetplus" }, "\u2AC1": { math: "\\submult" }, "\u2AC2": { math: "\\supmult" }, "\u2AC3": { math: "\\subedot" }, "\u2AC4": { math: "\\supedot" }, "\u2AC5": { math: "\\subseteqq" }, "\u2AC6": { math: "\\supseteqq" }, "\u2AC7": { math: "\\subsim" }, "\u2AC8": { math: "\\supsim" }, "\u2AC9": { math: "\\subsetapprox" }, "\u2ACA": { math: "\\supsetapprox" }, "\u2ACB": { math: "\\subsetneqq" }, "\u2ACC": { math: "\\supsetneqq" }, "\u2ACD": { math: "\\lsqhook" }, "\u2ACE": { math: "\\rsqhook" }, "\u2ACF": { math: "\\csub" }, "\u2AD0": { math: "\\csup" }, "\u2AD1": { math: "\\csube" }, "\u2AD2": { math: "\\csupe" }, "\u2AD3": { math: "\\subsup" }, "\u2AD4": { math: "\\supsub" }, "\u2AD5": { math: "\\subsub" }, "\u2AD6": { math: "\\supsup" }, "\u2AD7": { math: "\\suphsub" }, "\u2AD8": { math: "\\supdsub" }, "\u2AD9": { math: "\\forkv" }, "\u2ADA": { math: "\\topfork" }, "\u2ADB": { math: "\\mlcp" }, "\u2ADD\u0338": { math: "\\forks" }, "\u2ADD": { math: "\\forksnot" }, "\u2ADE": { math: "\\shortlefttack" }, "\u2ADF": { math: "\\shortdowntack" }, "\u2AE0": { math: "\\shortuptack" }, "\u2AE1": { math: "\\perps" }, "\u2AE2": { math: "\\vDdash" }, "\u2AE3": { math: "\\dashV" }, "\u2AE4": { math: "\\Dashv" }, "\u2AE5": { math: "\\DashV" }, "\u2AE6": { math: "\\varVdash" }, "\u2AE7": { math: "\\Barv" }, "\u2AE8": { math: "\\vBar" }, "\u2AE9": { math: "\\vBarv" }, "\u2AEB": { math: "\\Vbar" }, "\u2AEC": { math: "\\Not" }, "\u2AED": { math: "\\bNot" }, "\u2AEE": { math: "\\revnmid" }, "\u2AEF": { math: "\\cirmid" }, "\u2AF0": { math: "\\midcir" }, "\u2AF1": { math: "\\topcir" }, "\u2AF2": { math: "\\nhpar" }, "\u2AF3": { math: "\\parsim" }, "\u2AF4": { math: "\\interleave" }, "\u2AF5": { math: "\\nhVvert" }, "\u2AF6": { math: "\\threedotcolon" }, "\u2AF7": { math: "\\lllnest" }, "\u2AF8": { math: "\\gggnest" }, "\u2AF9": { math: "\\leqqslant" }, "\u2AFA": { math: "\\geqqslant" }, "\u2AFB": { math: "\\trslash" }, "\u2AFC": { math: "\\biginterleave" }, "\u2AFE": { math: "\\talloblong" }, "\u2AFF": { math: "\\bigtalloblong" }, "\u2B12": { math: "\\squaretopblack" }, "\u2B13": { math: "\\squarebotblack" }, "\u2B14": { math: "\\squareurblack" }, "\u2B15": { math: "\\squarellblack" }, "\u2B16": { math: "\\diamondleftblack" }, "\u2B17": { math: "\\diamondrightblack" }, "\u2B18": { math: "\\diamondtopblack" }, "\u2B19": { math: "\\diamondbotblack" }, "\u2B1A": { math: "\\dottedsquare" }, "\u2B1B": { math: "\\lgblksquare" }, "\u2B1C": { math: "\\lgwhtsquare" }, "\u2B1D": { math: "\\vysmblksquare" }, "\u2B1E": { math: "\\vysmwhtsquare" }, "\u2B1F": { math: "\\pentagonblack" }, "\u2B20": { math: "\\pentagon" }, "\u2B21": { math: "\\varhexagon" }, "\u2B22": { math: "\\varhexagonblack" }, "\u2B23": { math: "\\hexagonblack" }, "\u2B24": { math: "\\lgblkcircle" }, "\u2B25": { math: "\\mdblkdiamond" }, "\u2B26": { math: "\\mdwhtdiamond" }, "\u2B27": { math: "\\mdblklozenge" }, "\u2B28": { math: "\\mdwhtlozenge" }, "\u2B29": { math: "\\smblkdiamond" }, "\u2B2A": { math: "\\smblklozenge" }, "\u2B2B": { math: "\\smwhtlozenge" }, "\u2B2C": { math: "\\blkhorzoval" }, "\u2B2D": { math: "\\whthorzoval" }, "\u2B2E": { math: "\\blkvertoval" }, "\u2B2F": { math: "\\whtvertoval" }, "\u2B30": { math: "\\circleonleftarrow" }, "\u2B31": { math: "\\leftthreearrows" }, "\u2B32": { math: "\\leftarrowonoplus" }, "\u2B33": { math: "\\longleftsquigarrow" }, "\u2B34": { math: "\\nvtwoheadleftarrow" }, "\u2B35": { math: "\\nVtwoheadleftarrow" }, "\u2B36": { math: "\\twoheadmapsfrom" }, "\u2B37": { math: "\\twoheadleftdbkarrow" }, "\u2B38": { math: "\\leftdotarrow" }, "\u2B39": { math: "\\nvleftarrowtail" }, "\u2B3A": { math: "\\nVleftarrowtail" }, "\u2B3B": { math: "\\twoheadleftarrowtail" }, "\u2B3C": { math: "\\nvtwoheadleftarrowtail" }, "\u2B3D": { math: "\\nVtwoheadleftarrowtail" }, "\u2B3E": { math: "\\leftarrowx" }, "\u2B3F": { math: "\\leftcurvedarrow" }, "\u2B40": { math: "\\equalleftarrow" }, "\u2B41": { math: "\\bsimilarleftarrow" }, "\u2B42": { math: "\\leftarrowbackapprox" }, "\u2B43": { math: "\\rightarrowgtr" }, "\u2B44": { math: "\\rightarrowsupset" }, "\u2B45": { math: "\\LLeftarrow" }, "\u2B46": { math: "\\RRightarrow" }, "\u2B47": { math: "\\bsimilarrightarrow" }, "\u2B48": { math: "\\rightarrowbackapprox" }, "\u2B49": { math: "\\similarleftarrow" }, "\u2B4A": { math: "\\leftarrowapprox" }, "\u2B4B": { math: "\\leftarrowbsimilar" }, "\u2B4C": { math: "\\rightarrowbsimilar" }, "\u2B50": { math: "\\medwhitestar" }, "\u2B51": { math: "\\medblackstar" }, "\u2B52": { math: "\\smwhitestar" }, "\u2B53": { math: "\\rightpentagonblack" }, "\u2B54": { math: "\\rightpentagon" }, "\u3012": { math: "\\postalmark" }, "\u3030": { math: "\\hzigzag" } }, amssymb: { \u00F0: { math: "\\eth" }, "\u2A7D": { math: "\\leqslant" }, "\u2A7D\u0338": { math: "\\nleqslant" }, "\u2A7E": { math: "\\geqslant" }, "\u2A7E\u0338": { math: "\\ngeqslant" } }, arevmath: { \u00F0: { math: "\\eth" } }, MinionPro: { \u03D0: { math: "\\varbeta" }, \u03F0: { math: "\\varkappa" } }, mathrsfs: { \u210A: { math: "\\mathscr{g}" }, \u210B: { math: "\\mathscr{H}" }, \u2110: { math: "\\mathscr{I}" }, \u2112: { math: "\\mathscr{L}" }, \u211B: { math: "\\mathscr{R}" }, \u212C: { math: "\\mathscr{B}" }, \u212F: { math: "\\mathscr{e}" }, \u2130: { math: "\\mathscr{E}" }, \u2131: { math: "\\mathscr{F}" }, \u2133: { math: "\\mathscr{M}" }, \u2134: { math: "\\mathscr{o}" }, "\u{1D49C}": { math: "\\mathscr{A}" }, "\u{1D49E}": { math: "\\mathscr{C}" }, "\u{1D49F}": { math: "\\mathscr{D}" }, "\u{1D4A2}": { math: "\\mathscr{G}" }, "\u{1D4A5}": { math: "\\mathscr{J}" }, "\u{1D4A6}": { math: "\\mathscr{K}" }, "\u{1D4A9}": { math: "\\mathscr{N}" }, "\u{1D4AA}": { math: "\\mathscr{O}" }, "\u{1D4AB}": { math: "\\mathscr{P}" }, "\u{1D4AC}": { math: "\\mathscr{Q}" }, "\u{1D4AE}": { math: "\\mathscr{S}" }, "\u{1D4AF}": { math: "\\mathscr{T}" }, "\u{1D4B0}": { math: "\\mathscr{U}" }, "\u{1D4B1}": { math: "\\mathscr{V}" }, "\u{1D4B2}": { math: "\\mathscr{W}" }, "\u{1D4B3}": { math: "\\mathscr{X}" }, "\u{1D4B4}": { math: "\\mathscr{Y}" }, "\u{1D4B5}": { math: "\\mathscr{Z}" }, "\u{1D4B6}": { math: "\\mathscr{a}" }, "\u{1D4B7}": { math: "\\mathscr{b}" }, "\u{1D4B8}": { math: "\\mathscr{c}" }, "\u{1D4B9}": { math: "\\mathscr{d}" }, "\u{1D4BB}": { math: "\\mathscr{f}" }, "\u{1D4BD}": { math: "\\mathscr{h}" }, "\u{1D4BE}": { math: "\\mathscr{i}" }, "\u{1D4BF}": { math: "\\mathscr{j}" }, "\u{1D4C0}": { math: "\\mathscr{k}" }, "\u{1D4C1}": { math: "\\mathscr{l}" }, "\u{1D4C2}": { math: "\\mathscr{m}" }, "\u{1D4C3}": { math: "\\mathscr{n}" }, "\u{1D4C5}": { math: "\\mathscr{p}" }, "\u{1D4C6}": { math: "\\mathscr{q}" }, "\u{1D4C7}": { math: "\\mathscr{r}" }, "\u{1D4C8}": { math: "\\mathscr{s}" }, "\u{1D4C9}": { math: "\\mathscr{t}" }, "\u{1D4CA}": { math: "\\mathscr{u}" }, "\u{1D4CB}": { math: "\\mathscr{v}" }, "\u{1D4CC}": { math: "\\mathscr{w}" }, "\u{1D4CD}": { math: "\\mathscr{x}" }, "\u{1D4CE}": { math: "\\mathscr{y}" }, "\u{1D4CF}": { math: "\\mathscr{z}" } }, MnSymbol: { "\u2232": { math: "\\lcirclerightint" }, "\u2233": { math: "\\rcirclerightint" } }, mathabx: { "\u2238": { math: "\\dotdiv" } }, xecjk: { "\u2242": { math: "\\texteqsim" }, \u05D0: { text: "{\\hebalef}" }, \u05E2: { text: "{\\hebayin}" }, \u05D1: { text: "{\\hebbet}" }, \u05D3: { text: "{\\hebdalet}" }, \u05DA: { text: "{\\hebfinalkaf}" }, \u05DD: { text: "{\\hebfinalmem}" }, \u05DF: { text: "{\\hebfinalnun}" }, \u05E3: { text: "{\\hebfinalpe}" }, \u05E5: { text: "{\\hebfinaltsadi}" }, \u05D2: { text: "{\\hebgimel}" }, \u05D4: { text: "{\\hebhe}" }, \u05D7: { text: "{\\hebhet}" }, \u05DB: { text: "{\\hebkaf}" }, \u05DC: { text: "{\\heblamed}" }, \u05DE: { text: "{\\hebmem}" }, \u05E0: { text: "{\\hebnun}" }, \u05E4: { text: "{\\hebpe}" }, \u05E7: { text: "{\\hebqof}" }, \u05E8: { text: "{\\hebresh}" }, \u05E1: { text: "{\\hebsamekh}" }, \u05E9: { text: "{\\hebshin}" }, \u05EA: { text: "{\\hebtav}" }, \u05D8: { text: "{\\hebtet}" }, \u05E6: { text: "{\\hebtsadi}" }, \u05D5: { text: "{\\hebvav}" }, \u05D9: { text: "{\\hebyod}" }, \u05D6: { text: "{\\hebzayin}" }, \u0138: { text: "{\\textkra}" } }, textcomp: { "\xA2": { text: "{\\textcent}" }, "\xA4": { text: "{\\textcurrency}" }, "\xA5": { text: "{\\textyen}" }, "\u0E3F": { text: "{\\textbaht}" }, "\u20A1": { text: "{\\textcolonmonetary}" }, "\u20A4": { text: "{\\textlira}" }, "\u20A6": { text: "{\\textnaira}" }, "\u20A7": { text: "{\\textpeseta}" }, "\u20A9": { text: "{\\textwon}" }, "\u20AB": { text: "{\\textdong}" }, "\u20B1": { text: "{\\textpeso}" }, "\xA6": { text: "{\\textbrokenbar}" }, "\xA9": { text: "{\\textcopyright}" }, \u00AA: { text: "{\\textordfeminine}" }, "\xB0": { text: "{\\textdegree}" }, "\xB6": { text: "{\\textparagraph}" }, \u00BA: { text: "{\\textordmasculine}" }, \u00F0: { text: "{\\textdh}" }, "\u02D9": { text: "{\\textperiodcentered}" }, "\u2022": { text: "{\\textbullet}" }, "\u2030": { text: "{\\textperthousand}" }, "\u2031": { text: "{\\textpertenthousand}" }, "\u211E": { text: "{\\textrecipe}" }, "\u2122": { text: "{\\texttrademark}" }, "\u2191": { text: "{\\textuparrow}" }, "\u2192": { text: "{\\textrightarrow}" } }, inputenx: { \u0126: { text: "{\\textmalteseH}" }, \u0278: { text: "{\\textphi}" }, "\u2248": { text: "{\\textapproxequal}" } }, tipa: { \u0127: { text: "{\\textcrh}" }, \u0195: { text: "{\\texthvlig}" }, \u019E: { text: "\\textipa{\\textnrleg}" }, \u01C2: { text: "{\\textdoublebarpipe}" }, \u0250: { text: "\\textipa{\\textturna}" }, \u0252: { text: "textipa{\\textopeno}" }, \u0254: { text: "\\textipa{O}" }, \u0256: { text: "{\\textrtaild}" }, \u0259: { text: "{\\textschwa}" }, \u0263: { text: "\\textipa{G}" }, \u0264: { text: "{\\textrevscripta}" }, \u0278: { text: "{\\textphi}" }, \u029E: { text: "{\\textturnk}" }, "\u02E5": { text: "\\tone{55}" }, "\u02E6": { text: "\\tone{44}" }, "\u02E7": { text: "\\tone{33}" }, "\u02E8": { text: "\\tone{22}" }, "\u02E9": { text: "\\tone{11}" }, "\u0300\u0304": { text: "{\\textgravemacron}" }, "\u0300\u0307": { text: "{\\textgravedot}" }, "\u0301\u0304": { text: "{\\textacutemacron}" }, "\u0301\u030C": { text: "{\\textacutewedge}" }, "\u0302\u0307": { text: "{\\textcircumdot}" }, "\u0303\u0307": { text: "{\\texttildedot}" }, "\u0304\u0300": { text: "{\\textgravemacron}" }, "\u0306\u0304": { text: "{\\textbrevemacron}" }, "\u0307\u0301": { text: "{\\textdotacute}" }, "\u0307\u0306": { text: "{\\textdotbreve}" }, "\u030A\u0304": { text: "{\\textringmacron}" }, "\u030D": { text: "{\\textvbaraccent}" }, "\u030E": { text: "{\\textdoublevbaraccent}" }, "\u0310": { text: "{\\textdotbreve}" }, "\u0318": { text: "{\\textadvancing}" }, "\u0319": { text: "{\\textretracting}" }, "\u031A": { text: "{\\textcorner}" }, "\u031C": { text: "{\\textsublhalfring}" }, "\u031D": { text: "{\\textraising}" }, "\u031E": { text: "{\\textlowering}" }, "\u031F": { text: "{\\textsubplus}" }, "\u0324": { text: "{\\textsubumlaut}" }, "\u0325": { text: "{\\textsubring}" }, "\u0329": { text: "{\\textsyllabic}" }, "\u032A": { text: "{\\textsubbridge}" }, "\u032C": { text: "{\\textsubwedge}" }, "\u032F": { text: "{\\textsubarch}" }, "\u0330": { text: "{\\textsubtilde}" }, "\u0331": { text: "{\\textsubbar}" }, "\u0334": { text: "{\\textsuperimposetilde}" }, "\u0339": { text: "{\\textsubrhalfring}" }, "\u033A": { text: "{\\textinvsubbridge}" }, "\u033B": { text: "{\\textsubsquare}" }, "\u033C": { text: "{\\textseagull}" }, "\u033D": { text: "{\\textovercross}" }, "\u2094": { text: "\\textsubscript{\\textschwa}" } }, ipa: { \u026F: { text: "{\\textturnm}" } }, mathscinet: { \u02BF: { text: "{\\lasp}" } }, textalpha: { \u03B1: { text: "{\\textalpha}" } }, graphics: { "\u21B3": { text: "\\reflectbox{\\carriagereturn}" } }, pmboxdraw: { "\u2500": { text: "{\\textSFx}" }, "\u2501": { text: "\\pmboxdrawuni{2501}" }, "\u2502": { text: "{\\textSFxi}" }, "\u2503": { text: "\\pmboxdrawuni{2503}" }, "\u250C": { text: "{\\textSFi}" }, "\u250D": { text: "\\pmboxdrawuni{250D}" }, "\u250E": { text: "\\pmboxdrawuni{250E}" }, "\u250F": { text: "\\pmboxdrawuni{250F}" }, "\u2510": { text: "{\\textSFiii}" }, "\u2511": { text: "\\pmboxdrawuni{2511}" }, "\u2512": { text: "\\pmboxdrawuni{2512}" }, "\u2513": { text: "\\pmboxdrawuni{2513}" }, "\u2514": { text: "{\\textSFii}" }, "\u2515": { text: "\\pmboxdrawuni{2515}" }, "\u2516": { text: "\\pmboxdrawuni{2516}" }, "\u2517": { text: "\\pmboxdrawuni{2517}" }, "\u2518": { text: "{\\textSFiv}" }, "\u2519": { text: "\\pmboxdrawuni{2519}" }, "\u251A": { text: "\\pmboxdrawuni{251A}" }, "\u251B": { text: "\\pmboxdrawuni{251B}" }, "\u251C": { text: "{\\textSFviii}" }, "\u251D": { text: "\\pmboxdrawuni{251D}" }, "\u251E": { text: "\\pmboxdrawuni{251E}" }, "\u251F": { text: "\\pmboxdrawuni{251F}" }, "\u2520": { text: "\\pmboxdrawuni{2520}" }, "\u2521": { text: "\\pmboxdrawuni{2521}" }, "\u2522": { text: "\\pmboxdrawuni{2522}" }, "\u2523": { text: "\\pmboxdrawuni{2523}" }, "\u2524": { text: "{\\textSFix}" }, "\u2525": { text: "\\pmboxdrawuni{2525}" }, "\u2526": { text: "\\pmboxdrawuni{2526}" }, "\u2527": { text: "\\pmboxdrawuni{2527}" }, "\u2528": { text: "\\pmboxdrawuni{2528}" }, "\u2529": { text: "\\pmboxdrawuni{2529}" }, "\u252A": { text: "\\pmboxdrawuni{252A}" }, "\u252B": { text: "\\pmboxdrawuni{252B}" }, "\u252C": { text: "{\\textSFvi}" }, "\u252D": { text: "\\pmboxdrawuni{252D}" }, "\u252E": { text: "\\pmboxdrawuni{252E}" }, "\u252F": { text: "\\pmboxdrawuni{252F}" }, "\u2530": { text: "\\pmboxdrawuni{2530}" }, "\u2531": { text: "\\pmboxdrawuni{2531}" }, "\u2532": { text: "\\pmboxdrawuni{2532}" }, "\u2533": { text: "\\pmboxdrawuni{2533}" }, "\u2534": { text: "{\\textSFvii}" }, "\u2535": { text: "\\pmboxdrawuni{2535}" }, "\u2536": { text: "\\pmboxdrawuni{2536}" }, "\u2537": { text: "\\pmboxdrawuni{2537}" }, "\u2538": { text: "\\pmboxdrawuni{2538}" }, "\u2539": { text: "\\pmboxdrawuni{2539}" }, "\u253A": { text: "\\pmboxdrawuni{253A}" }, "\u253B": { text: "\\pmboxdrawuni{253B}" }, "\u253C": { text: "{\\textSFv}" }, "\u253D": { text: "\\pmboxdrawuni{253D}" }, "\u253E": { text: "\\pmboxdrawuni{253E}" }, "\u253F": { text: "\\pmboxdrawuni{253F}" }, "\u2540": { text: "\\pmboxdrawuni{2540}" }, "\u2541": { text: "\\pmboxdrawuni{2541}" }, "\u2542": { text: "\\pmboxdrawuni{2542}" }, "\u2543": { text: "\\pmboxdrawuni{2543}" }, "\u2544": { text: "\\pmboxdrawuni{2544}" }, "\u2545": { text: "\\pmboxdrawuni{2545}" }, "\u2546": { text: "\\pmboxdrawuni{2546}" }, "\u2547": { text: "\\pmboxdrawuni{2547}" }, "\u2548": { text: "\\pmboxdrawuni{2548}" }, "\u2549": { text: "\\pmboxdrawuni{2549}" }, "\u254A": { text: "\\pmboxdrawuni{254A}" }, "\u254B": { text: "\\pmboxdrawuni{254B}" }, "\u2550": { text: "{\\textSFxliii}" }, "\u2551": { text: "{\\textSFxxiv}" }, "\u2552": { text: "{\\textSFli}" }, "\u2553": { text: "{\\textSFlii}" }, "\u2554": { text: "{\\textSFxxxix}" }, "\u2555": { text: "{\\textSFxxii}" }, "\u2556": { text: "{\\textSFxxi}" }, "\u2557": { text: "{\\textSFxxv}" }, "\u2558": { text: "{\\textSFl}" }, "\u2559": { text: "{\\textSFxlix}" }, "\u255A": { text: "{\\textSFxxxviii}" }, "\u255B": { text: "{\\textSFxxviii}" }, "\u255C": { text: "{\\textSFxxvii}" }, "\u255D": { text: "{\\textSFxxvi}" }, "\u255E": { text: "{\\textSFxxxvi}" }, "\u255F": { text: "{\\textSFxxxvii}" }, "\u2560": { text: "{\\textSFxlii}" }, "\u2561": { text: "{\\textSFxix}" }, "\u2562": { text: "{\\textSFxx}" }, "\u2563": { text: "{\\textSFxxiii}" }, "\u2564": { text: "{\\textSFxlvii}" }, "\u2565": { text: "{\\textSFxlviii}" }, "\u2566": { text: "{\\textSFxli}" }, "\u2567": { text: "{\\textSFxlv}" }, "\u2568": { text: "{\\textSFxlvi}" }, "\u2569": { text: "{\\textSFxl}" }, "\u256A": { text: "{\\textSFliv}" }, "\u256B": { text: "{\\textSFliii}" }, "\u256C": { text: "{\\textSFxliv}" }, "\u2574": { text: "\\pmboxdrawuni{2574}" }, "\u2575": { text: "\\pmboxdrawuni{2575}" }, "\u2576": { text: "\\pmboxdrawuni{2576}" }, "\u2577": { text: "\\pmboxdrawuni{2577}" }, "\u2578": { text: "\\pmboxdrawuni{2578}" }, "\u2579": { text: "\\pmboxdrawuni{2579}" }, "\u257A": { text: "\\pmboxdrawuni{257A}" }, "\u257B": { text: "\\pmboxdrawuni{257B}" }, "\u257C": { text: "\\pmboxdrawuni{257C}" }, "\u257D": { text: "\\pmboxdrawuni{257D}" }, "\u257E": { text: "\\pmboxdrawuni{257E}" }, "\u257F": { text: "\\pmboxdrawuni{257F}" }, "\u2580": { text: "{\\textupblock}" }, "\u2581": { text: "\\pmboxdrawuni{2581}" }, "\u2582": { text: "\\pmboxdrawuni{2582}" }, "\u2583": { text: "\\pmboxdrawuni{2583}" }, "\u2584": { text: "{\\textdnblock}" }, "\u2585": { text: "\\pmboxdrawuni{2585}" }, "\u2586": { text: "\\pmboxdrawuni{2586}" }, "\u2587": { text: "\\pmboxdrawuni{2587}" }, "\u2588": { text: "{\\textblock}" }, "\u2589": { text: "\\pmboxdrawuni{2589}" }, "\u258A": { text: "\\pmboxdrawuni{258A}" }, "\u258B": { text: "\\pmboxdrawuni{258B}" }, "\u258C": { text: "{\\textlfblock}" }, "\u258D": { text: "\\pmboxdrawuni{258D}" }, "\u258E": { text: "\\pmboxdrawuni{258E}" }, "\u258F": { text: "\\pmboxdrawuni{258F}" }, "\u2590": { text: "{\\textrtblock}" }, "\u2591": { text: "{\\textltshade}" }, "\u2592": { text: "{\\textshade}" }, "\u2593": { text: "{\\textdkshade}" }, "\u2594": { text: "\\pmboxdrawuni{2594}" }, "\u2595": { text: "\\pmboxdrawuni{2595}" }, "\u2596": { text: "\\pmboxdrawuni{2596}" }, "\u2597": { text: "\\pmboxdrawuni{2597}" }, "\u2598": { text: "\\pmboxdrawuni{2598}" }, "\u2599": { text: "\\pmboxdrawuni{2599}" }, "\u259A": { text: "\\pmboxdrawuni{259A}" }, "\u259B": { text: "\\pmboxdrawuni{259B}" }, "\u259C": { text: "\\pmboxdrawuni{259C}" }, "\u259D": { text: "\\pmboxdrawuni{259D}" }, "\u259E": { text: "\\pmboxdrawuni{259E}" }, "\u259F": { text: "\\pmboxdrawuni{259F}" } } } };
  }
});

// node_modules/unicode2latex/tables/minimal.json
var require_minimal = __commonJS({
  "node_modules/unicode2latex/tables/minimal.json"(exports2, module2) {
    module2.exports = { base: { "#": { text: "\\#", math: "\\#" }, $: { text: "\\$", math: "\\$" }, "%": { text: "\\%", math: "\\%" }, "&": { text: "\\&", math: "\\&" }, _: { text: "\\_", math: "\\_" }, "\xA0": { text: "~", math: "~" }, "\u205F": { text: "\\:", math: "\\:" }, "<": { math: "<" }, ">": { math: ">" }, "\\": { text: "\\textbackslash", math: "\\backslash", macrospacer: true }, "\u2003": { math: "\\quad" }, "\u200A": { math: "\\mkern1mu" }, "^": { text: "\\textasciicircum", macrospacer: true }, "{": { text: "\\{" }, "}": { text: "\\}" }, "~": { text: "\\textasciitilde", macrospacer: true }, "\u2002": { text: "\\enspace", macrospacer: true }, "\u2004": { text: "\\;" }, "\u2005": { text: "\\>" }, "\u2006": { text: "\\hspace{0.166em}" }, "\u2007": { text: "\\hphantom{0}" }, "\u2008": { text: "\\hphantom{,}" }, "\u2009": { text: "\\," }, "\u200B": { text: "\\hspace{0pt}" }, "\u202F": { text: "\\," } }, package: {} };
  }
});

// node_modules/unicode2latex/tables/latex2unicode.json
var require_latex2unicode = __commonJS({
  "node_modules/unicode2latex/tables/latex2unicode.json"(exports2, module2) {
    module2.exports = { "''": { text: "\u201D", math: "''" }, "--": { text: "\u2013", math: "--" }, "---": { text: "\u2014", math: "---" }, "<": { text: "\xA1", math: "<" }, "<<": { text: "\xAB", math: "<<" }, "<\\kern-0.58em(": "\u2993", ">": { text: "\xBF", math: ">" }, ">>": { text: "\xBB", math: ">>" }, "\\": "\\", '\\"': "\u0308", '\\"{\\i}': "i\u0308", "\\#": "#", "\\$": "$", "\\%": "%", "\\&": "&", "\\'": "\u0301", "\\'\\i": "i\u0301", "\\,": "\u2009", "\\-": "\xAD", "\\.": "\u0307", "\\/": "", "\\:": "\u205F", "\\;": "\u2004", "\\=": "\u0304", "\\>": "\u2005", "\\@": "", "\\AA": "A\u030A", "\\AC": "\u223F", "\\AE": "\xC6", "\\APLboxquestion": "\u2370", "\\APLboxupcaret": "\u2353", "\\APLcomment": "\u235D", "\\APLdownarrowbox": "\u2357", "\\APLinput": "\u235E", "\\APLinv": "\u2339", "\\APLleftarrowbox": "\u2347", "\\APLlog": "\u235F", "\\APLnotbackslash": "\u2340", "\\APLnotslash": "\u233F", "\\APLrightarrowbox": "\u2348", "\\APLuparrowbox": "\u2350", "\\Angle": "\u299C", "\\Angstroem": "A\u030A", "\\Angstrom": "A\u030A", "\\Barv": "\u2AE7", "\\BbbA": "\u{1D538}", "\\BbbB": "\u{1D539}", "\\BbbC": "\u2102", "\\BbbD": "\u{1D53B}", "\\BbbE": "\u{1D53C}", "\\BbbF": "\u{1D53D}", "\\BbbG": "\u{1D53E}", "\\BbbGamma": "\u213E", "\\BbbH": "\u210D", "\\BbbI": "\u{1D540}", "\\BbbJ": "\u{1D541}", "\\BbbK": "\u{1D542}", "\\BbbL": "\u{1D543}", "\\BbbM": "\u{1D544}", "\\BbbN": "\u2115", "\\BbbO": "\u{1D546}", "\\BbbP": "\u2119", "\\BbbPi": "\u213F", "\\BbbQ": "\u211A", "\\BbbR": "\u211D", "\\BbbS": "\u{1D54A}", "\\BbbT": "\u{1D54B}", "\\BbbU": "\u{1D54C}", "\\BbbV": "\u{1D54D}", "\\BbbW": "\u{1D54E}", "\\BbbX": "\u{1D54F}", "\\BbbY": "\u{1D550}", "\\BbbZ": "\u2124", "\\Bbba": "\u{1D552}", "\\Bbbb": "\u{1D553}", "\\Bbbc": "\u{1D554}", "\\Bbbd": "\u{1D555}", "\\Bbbe": "\u{1D556}", "\\Bbbeight": "\u{1D7E0}", "\\Bbbf": "\u{1D557}", "\\Bbbfive": "\u{1D7DD}", "\\Bbbfour": "\u{1D7DC}", "\\Bbbg": "\u{1D558}", "\\Bbbgamma": "\u213D", "\\Bbbh": "\u{1D559}", "\\Bbbi": "\u{1D55A}", "\\Bbbj": "\u{1D55B}", "\\Bbbk": "\u{1D55C}", "\\Bbbl": "\u{1D55D}", "\\Bbbm": "\u{1D55E}", "\\Bbbn": "\u{1D55F}", "\\Bbbnine": "\u{1D7E1}", "\\Bbbo": "\u{1D560}", "\\Bbbone": "\u{1D7D9}", "\\Bbbp": "\u{1D561}", "\\Bbbpi": "\u213C", "\\Bbbq": "\u{1D562}", "\\Bbbr": "\u{1D563}", "\\Bbbs": "\u{1D564}", "\\Bbbseven": "\u{1D7DF}", "\\Bbbsix": "\u{1D7DE}", "\\Bbbsum": "\u2140", "\\Bbbt": "\u{1D565}", "\\Bbbthree": "\u{1D7DB}", "\\Bbbtwo": "\u{1D7DA}", "\\Bbbu": "\u{1D566}", "\\Bbbv": "\u{1D567}", "\\Bbbw": "\u{1D568}", "\\Bbbx": "\u{1D569}", "\\Bbby": "\u{1D56A}", "\\Bbbz": "\u{1D56B}", "\\Bbbzero": "\u{1D7D8}", "\\Box": "\u25A1", "\\Bumpeq": "\u224E", "\\CIRCLE": "\u25CF", "\\Cap": "\u22D2", "\\CapitalDifferentialD": "\u2145", "\\CheckedBox": "\u2611", "\\Colon": "\u2237", "\\Coloneq": "\u2A74", "\\Coloneqq": "\u2A74", "\\ComplexI": "\u2148", "\\ComplexJ": "\u2149", "\\Cup": "\u22D3", "\\DDownarrow": "\u27F1", "\\DH": "\xD0", "\\DJ": "\u0110", "\\DashV": "\u2AE5", "\\DashVDash": "\u27DA", "\\Dashv": "\u2AE4", "\\Ddownarrow": "\u290B", "\\Delta": "\u0394", "\\Diamond": "\u25C7", "\\Diamondblack": "\u25C6", "\\Diamonddot": "\u27D0", "\\DifferentialD": "\u2146", "\\Digamma": "\u03DC", "\\Doteq": "\u2251", "\\DownArrowBar": "\u2913", "\\DownArrowUpArrow": "\u21F5", "\\DownLeftRightVector": "\u2950", "\\DownLeftTeeVector": "\u295E", "\\DownLeftVectorBar": "\u2956", "\\DownRightTeeVector": "\u295F", "\\DownRightVectorBar": "\u2957", "\\Downarrow": "\u21D3", "\\ElOr": "\u2A56", "\\Elolarr": "\u2940", "\\Elorarr": "\u2941", "\\Elroang": "\u2986", "\\Elxsqcup": "\u2A06", "\\Elxuplus": "\u2A04", "\\Equal": "\u2A75", "\\Equiv": "\u2263", "\\Euler": "\u2107", "\\Eulerconst": "\u2107", "\\Exclam": "\u203C", "\\ExponetialE": "\u2147", "\\Finv": "\u2132", "\\Game": "\u2141", "\\Gamma": "\u0393", "\\Gt": "\u2AA2", "\\H": "\u030B", "\\Hermaphrodite": "\u26A5", "\\H{}": "\u02DD", "\\IJ": "\u0132", "\\Im": "\u2111", "\\Join": "\u2A1D", "\\Koppa": "\u03DE", "\\L": "\u0141", "\\LEFTCIRCLE": "\u25D6", "\\LHD": "\u25C0", "\\LLeftarrow": "\u2B45", "\\LVec": "\u20D6", "\\Lambda": "\u039B", "\\Lbag": "\u27C5", "\\Lbrbrak": "\u27EC", "\\Ldsh": "\u21B2", "\\LeftArrowBar": "\u21E4", "\\LeftDownTeeVector": "\u2961", "\\LeftDownVectorBar": "\u2959", "\\LeftRightVector": "\u294E", "\\LeftTeeVector": "\u295A", "\\LeftTriangleBar": "\u29CF", "\\LeftUpDownVector": "\u2951", "\\LeftUpTeeVector": "\u2960", "\\LeftUpVectorBar": "\u2958", "\\LeftVectorBar": "\u2952", "\\Leftarrow": "\u21D0", "\\Leftrightarrow": "\u21D4", "\\Lleftarrow": "\u21DA", "\\Longleftarrow": "\u27F8", "\\Longleftrightarrow": "\u27FA", "\\Longmapsfrom": "\u27FD", "\\Longmapsto": "\u27FE", "\\Longrightarrow": "\u27F9", "\\Lparengtr": "\u2995", "\\Lsh": "\u21B0", "\\Lt": "\u2AA1", "\\Lvzigzag": "\u29DA", "\\MapsDown": "\u21A7", "\\MapsUp": "\u21A5", "\\Mapsfrom": "\u2906", "\\Mapsto": "\u2907", "\\NG": "\u014A", "\\Nearrow": "\u21D7", "\\NestedGreaterGreater": "\u2AA2", "\\NestedLessLess": "\u2AA1", "\\Not": "\u2AEC", "\\NotEqualTilde": "\u2242\u0338", "\\NotGreaterGreater": "\u226B\u0338", "\\NotHumpDownHump": "\u224E\u0338", "\\NotHumpEqual": "\u224F\u0338", "\\NotLeftTriangleBar": "\u29CF\u0338", "\\NotLessLess": "\u226A\u0338", "\\NotNestedGreaterGreater": "\u2AA2\u0338", "\\NotNestedLessLess": "\u2AA1\u0338", "\\NotPrecedesTilde": "\u227E\u0338", "\\NotRightTriangleBar": "\u29D0\u0338", "\\NotSquareSubset": "\u228F\u0338", "\\NotSquareSuperset": "\u2290\u0338", "\\NotSucceedsTilde": "\u227F\u0338", "\\Nwarrow": "\u21D6", "\\O": "\xD8", "\\OE": "\u0152", "\\Omega": "\u03A9", "\\Otimes": "\u2A37", "\\P": "\xB6", "\\Phi": "\u03A6", "\\Pi": "\u03A0", "\\Pisymbol{ppi020}{105}": "\u2A9E", "\\Pisymbol{ppi020}{117}": "\u2A9D", "\\Pisymbol{ppi022}{87}": "\u03D0", "\\Planckconst": "\u210E", "\\Prec": "\u2ABB", "\\PropertyLine": "\u214A", "\\Psi": "\u03A8", "\\QED": "\u220E", "\\Qoppa": "\u03D8", "\\Question": "\u2047", "\\RHD": "\u25B6", "\\RIGHTCIRCLE": "\u25D7", "\\RRightarrow": "\u2B46", "\\Rbag": "\u27C6", "\\Rbrbrak": "\u27ED", "\\Rdsh": "\u21B3", "\\Re": "\u211C", "\\ReverseUpEquilibrium": "\u296F", "\\RightArrowBar": "\u21E5", "\\RightDownTeeVector": "\u295D", "\\RightDownVectorBar": "\u2955", "\\RightTeeVector": "\u295B", "\\RightTriangleBar": "\u29D0", "\\RightUpDownVector": "\u294F", "\\RightUpTeeVector": "\u295C", "\\RightUpVectorBar": "\u2954", "\\RightVectorBar": "\u2953", "\\Rightarrow": "\u21D2", "\\RoundImplies": "\u2970", "\\Rparenless": "\u2996", "\\Rrightarrow": "\u21DB", "\\Rsh": "\u21B1", "\\RuleDelayed": "\u29F4", "\\Rvzigzag": "\u29DB", "\\S": "\xA7", "\\Same": "\u2A76", "\\Sampi": "\u03E0", "\\Searrow": "\u21D8", "\\Sigma": "\u03A3", "\\Sqcap": "\u2A4E", "\\Sqcup": "\u2A4F", "\\Square": "\u2610", "\\Stigma": "\u03DA", "\\Subset": "\u22D0", "\\Succ": "\u2ABC", "\\Sun": "\u2609", "\\Supset": "\u22D1", "\\Swarrow": "\u21D9", "\\TH": "\xDE", "\\Theta": "\u0398", "\\Top": "\u2AEA", "\\UUparrow": "\u27F0", "\\UpArrowBar": "\u2912", "\\UpEquilibrium": "\u296E", "\\Uparrow": "\u21D1", "\\Updownarrow": "\u21D5", "\\Upsilon": "\u03A5", "\\Uuparrow": "\u290A", "\\VDash": "\u22AB", "\\Vbar": "\u2AEB", "\\Vdash": "\u22A9", "\\Vee": "\u2A54", "\\Vert": "\u2016", "\\Vvdash": "\u22AA", "\\Vvert": "\u2980", "\\Wedge": "\u2A53", "\\XBox": "\u2612", "\\Xi": "\u039E", "\\Yup": "\u2144", "\\\\backslash": "\u0871", "\\^": "\u0302", "\\^\\j": "j\u0302", "\\^{\\i}": "i\u0302", "\\_": "_", "\\`": "\u0300", "\\`\\i": "i\u0300", "\\aa": "a\u030A", "\\accurrent": "\u23E6", "\\acidfree": "\u267E", "\\acute": "\u0301", "\\acute{\\alpha}": "\u03B1\u0301", "\\acute{\\ddot{\\iota}}": "\u03B9\u0308\u0301", "\\acute{\\ddot{\\upsilon}}": "\u03C5\u0308\u0301", "\\acute{\\epsilon}": "\u03B5\u0301", "\\acute{\\eta}": "\u03B7\u0301", "\\acute{\\iota}": "\u03B9\u0301", "\\acute{\\omega}": "\u03C9\u0301", "\\acute{\\upsilon}": "\u03C5\u0301", "\\acwcirclearrow": "\u2940", "\\acwgapcirclearrow": "\u27F2", "\\acwleftarcarrow": "\u2939", "\\acwopencirclearrow": "\u21BA", "\\acwoverarcarrow": "\u293A", "\\acwunderarcarrow": "\u293B", "\\adots": "\u22F0", "\\ae": "\xE6", "\\aleph": "\u2135", "\\allequal": "\u224C", "\\alpha": "\u03B1", "\\amalg": "\u2A3F", "\\anchor": "\u2693", "\\angdnr": "\u299F", "\\angle": "\u2220", "\\angles": "\u299E", "\\angleubar": "\u29A4", "\\annuity": "\u20E7", "\\approx": "\u2248", "\\approxeq": "\u224A", "\\approxeqq": "\u2A70", "\\approxident": "\u224B", "\\approxnotequal": "\u2246", "\\aquarius": "\u2652", "\\arabichad": "u\u031B\u03031", "\\arabicmaj": "u\u031B\u03030", "\\arceq": "\u2258", "\\aries": "\u2648", "\\arrowbullet": "\u27A2", "\\arrowwaveleft": "\u219C", "\\arrowwaveright": "\u219D", "\\assert": "\u22A6", "\\ast": "\u2217", "\\asteq": "\u2A6E", "\\asteraccent": "\u20F0", "\\astrosun": "\u2609", "\\asymp": "\u224D", "\\awint": "\u2A11", "\\bNot": "\u2AED", "\\backcong": "\u224C", "\\backdprime": "\u2036", "\\backepsilon": "\u03F6", "\\backprime": "\u2035", "\\backsim": "\u223D", "\\backsimeq": "\u22CD", "\\backslash": "\\", "\\backtrprime": "\u2037", "\\bagmember": "\u22FF", "\\ballotx": "\u2717", "\\bar": "\u0305", "\\barV": "\u2AEA", "\\barcap": "\u2A43", "\\barcup": "\u2A42", "\\bardownharpoonleft": "\u2961", "\\bardownharpoonright": "\u295D", "\\barin": "\u22F6", "\\barleftarrow": "\u21E4", "\\barleftarrowrightarrowbar": "\u21B9", "\\barleftharpoon": "\u296B", "\\barleftharpoondown": "\u2956", "\\barleftharpoonup": "\u2952", "\\barovernorthwestarrow": "\u21B8", "\\barrightarrowdiamond": "\u2920", "\\barrightharpoon": "\u296D", "\\barrightharpoondown": "\u295F", "\\barrightharpoonup": "\u295B", "\\baruparrow": "\u2912", "\\barupharpoonleft": "\u2958", "\\barupharpoonright": "\u2954", "\\barvee": "\u22BD", "\\barwedge": { text: "\u2305", math: "\u22BC" }, "\\bbrktbrk": "\u23B6", "\\bdtriplevdash": "\u2506", "\\because": "\u2235", "\\benzenr": "\u23E3", "\\beta": "\u03B2", "\\beth": "\u2136", "\\between": "\u226C", "\\bigblacktriangledown": "\u25BC", "\\bigblacktriangleup": "\u25B2", "\\bigbot": "\u27D8", "\\bigcap": "\u22C2", "\\bigcirc": "\u25EF", "\\bigcup": "\u22C3", "\\bigcupdot": "\u2A03", "\\biginterleave": "\u2AFC", "\\bigodot": "\u2A00", "\\bigoplus": "\u2A01", "\\bigotimes": "\u2A02", "\\bigslopedvee": "\u2A57", "\\bigslopedwedge": "\u2A58", "\\bigsqcap": "\u2A05", "\\bigsqcup": "\u2A06", "\\bigstar": "\u2605", "\\bigtalloblong": "\u2AFF", "\\bigtimes": "\u2A09", "\\bigtop": "\u27D9", "\\bigtriangledown": "\u25BD", "\\bigtriangleleft": "\u2A1E", "\\bigtriangleup": "\u25B3", "\\biguplus": "\u2A04", "\\bigvee": "\u22C1", "\\bigwedge": "\u22C0", "\\bigwhitestar": "\u2606", "\\bij": "\u2916", "\\biohazard": "\u2623", "\\blackcircledownarrow": "\u29ED", "\\blackcircledrightdot": "\u2688", "\\blackcircledtwodots": "\u2689", "\\blackcircleulquadwhite": "\u25D5", "\\blackdiamonddownarrow": "\u29EA", "\\blackhourglass": "\u29D7", "\\blackinwhitediamond": "\u25C8", "\\blackinwhitesquare": "\u25A3", "\\blacklefthalfcircle": "\u25D6", "\\blacklozenge": "\u29EB", "\\blackpointerleft": "\u25C4", "\\blackpointerright": "\u25BA", "\\blackrighthalfcircle": "\u25D7", "\\blacksmiley": "\u263B", "\\blacksquare": "\u2B1B", "\\blacktriangle": "\u25B4", "\\blacktriangledown": "\u25BE", "\\blacktriangleleft": "\u25C0", "\\blacktriangleright": "\u25B6", "\\blanksymbol": "\u2422", "\\blkhorzoval": "\u2B2C", "\\blkvertoval": "\u2B2E", "\\blockfull": "\u2588", "\\blockhalfshaded": "\u2592", "\\blocklefthalf": "\u258C", "\\blocklowhalf": "\u2584", "\\blockqtrshaded": "\u2591", "\\blockrighthalf": "\u2590", "\\blockthreeqtrshaded": "\u2593", "\\blockuphalf": "\u2580", "\\bot": "\u22A5", "\\botsemicircle": "\u25E1", "\\bowtie": "\u22C8", "\\boxast": "\u29C6", "\\boxbar": "\u25EB", "\\boxbox": "\u29C8", "\\boxbslash": "\u29C5", "\\boxcircle": "\u29C7", "\\boxdiag": "\u29C4", "\\boxdot": "\u22A1", "\\boxminus": "\u229F", "\\boxonbox": "\u29C9", "\\boxplus": "\u229E", "\\boxslash": "\u29C4", "\\boxtimes": "\u22A0", "\\breve": "\u0306", "\\bsimilarleftarrow": "\u2B41", "\\bsimilarrightarrow": "\u2B47", "\\bsolhsub": "\u27C8", "\\btimes": "\u2A32", "\\bud": "\u042A", "\\bullet": "\u2219", "\\bullseye": "\u25CE", "\\bumpeq": "\u224F", "\\bumpeqq": "\u2AAE", "\\c": "\u0327", "\\cancer": "\u264B", "\\candra": "\u0310", "\\cap": "\u2229", "\\capbarcup": "\u2A49", "\\capdot": "\u2A40", "\\capovercup": "\u2A47", "\\capricornus": "\u2651", "\\capwedge": "\u2A44", "\\caretinsert": "\u2038", "\\carriagereturn": "\u21B5", "\\ccwundercurvearrow": "\u293F", "\\cdot": "\u22C5", "\\cdotp": "\xB7", "\\cdots": "\u22EF", "\\cdprime": "\u042A", "\\check": "\u030C", "\\checkmark": "\u2713", "\\chi": "\u03C7", "\\cirE": "\u29C3", "\\cirbot": "\u27DF", "\\circ": "\u2218", "\\circeq": "\u2257", "\\circlearrowleft": "\u21BA", "\\circlearrowright": "\u21BB", "\\circlebottomhalfblack": "\u25D2", "\\circledS": "\u24C8", "\\circledast": "\u229B", "\\circledbslash": "\u29B8", "\\circledbullet": "\u29BF", "\\circledcirc": "\u229A", "\\circleddash": "\u229D", "\\circledequal": "\u229C", "\\circledgtr": "\u29C1", "\\circledless": "\u29C0", "\\circledownarrow": "\u29EC", "\\circledparallel": "\u29B7", "\\circledrightdot": "\u2686", "\\circledstar": "\u272A", "\\circledtwodots": "\u2687", "\\circledvert": "\u29B6", "\\circledwhitebullet": "\u29BE", "\\circlehbar": "\u29B5", "\\circlelefthalfblack": "\u25D0", "\\circlellquad": "\u25F5", "\\circlelrquad": "\u25F6", "\\circleonleftarrow": "\u2B30", "\\circleonrightarrow": "\u21F4", "\\circlerighthalfblack": "\u25D1", "\\circletophalfblack": "\u25D3", "\\circleulquad": "\u25F4", "\\circleurquad": "\u25F7", "\\circleurquadblack": "\u25D4", "\\circlevertfill": "\u25CD", "\\cirfnint": "\u2A10", "\\cirmid": "\u2AEF", "\\cirscir": "\u29C2", "\\clockoint": "\u2A0F", "\\closedvarcap": "\u2A4D", "\\closedvarcup": "\u2A4C", "\\closedvarcupsmashprod": "\u2A50", "\\closure": "\u2050", "\\clubsuit": "\u2663", "\\clwintegral": "\u2231", "\\coloneq": "\u2254", "\\commaminus": "\u2A29", "\\complement": "\u2201", "\\concavediamond": "\u27E1", "\\concavediamondtickleft": "\u27E2", "\\concavediamondtickright": "\u27E3", "\\cong": "\u2245", "\\congdot": "\u2A6D", "\\conictaper": "\u2332", "\\conjquant": "\u2A07", "\\coprod": "\u2210", "\\copyright": "\xA9", "\\cprime": "\u042C", "\\csub": "\u2ACF", "\\csube": "\u2AD1", "\\csup": "\u2AD0", "\\csupe": "\u2AD2", "\\cuberoot": "\u221B", "\\cup": "\u222A", "\\cupbarcap": "\u2A48", "\\cupdot": "\u228D", "\\cupleftarrow": "\u228C", "\\cupovercap": "\u2A46", "\\cupvee": "\u2A45", "\\curlyeqprec": "\u22DE", "\\curlyeqsucc": "\u22DF", "\\curlyvee": "\u22CE", "\\curlywedge": "\u22CF", "\\curvearrowleft": "\u21B6", "\\curvearrowleftplus": "\u293D", "\\curvearrowright": "\u21B7", "\\curvearrowrightminus": "\u293C", "\\cwcirclearrow": "\u2941", "\\cwgapcirclearrow": "\u27F3", "\\cwopencirclearrow": "\u21BB", "\\cwrightarcarrow": "\u2938", "\\cwundercurvearrow": "\u293E", "\\cyrchar\\CYRA": "\u0410", "\\cyrchar\\CYRABHCH": "\u04BC", "\\cyrchar\\CYRABHCHDSC": "\u04BE", "\\cyrchar\\CYRABHDZE": "\u04E0", "\\cyrchar\\CYRABHHA": "\u04A8", "\\cyrchar\\CYRAE": "\u04D4", "\\cyrchar\\CYRB": "\u0411", "\\cyrchar\\CYRBYUS": "\u046A", "\\cyrchar\\CYRC": "\u0426", "\\cyrchar\\CYRCH": "\u0427", "\\cyrchar\\CYRCHLDSC": "\u04CB", "\\cyrchar\\CYRCHRDSC": "\u04B6", "\\cyrchar\\CYRCHVCRS": "\u04B8", "\\cyrchar\\CYRD": "\u0414", "\\cyrchar\\CYRDJE": "\u0402", "\\cyrchar\\CYRDZE": "\u0405", "\\cyrchar\\CYRDZHE": "\u040F", "\\cyrchar\\CYRE": "\u0415", "\\cyrchar\\CYREREV": "\u042D", "\\cyrchar\\CYRERY": "\u042B", "\\cyrchar\\CYRF": "\u0424", "\\cyrchar\\CYRFITA": "\u0472", "\\cyrchar\\CYRG": "\u0413", "\\cyrchar\\CYRGHCRS": "\u0492", "\\cyrchar\\CYRGHK": "\u0494", "\\cyrchar\\CYRGUP": "\u0490", "\\cyrchar\\CYRH": "\u0425", "\\cyrchar\\CYRHDSC": "\u04B2", "\\cyrchar\\CYRHRDSN": "\u042A", "\\cyrchar\\CYRI": "\u0418", "\\cyrchar\\CYRIE": "\u0404", "\\cyrchar\\CYRII": "\u0406", "\\cyrchar\\CYRIOTBYUS": "\u046C", "\\cyrchar\\CYRIOTE": "\u0464", "\\cyrchar\\CYRIOTLYUS": "\u0468", "\\cyrchar\\CYRISHRT": "\u0418\u0306", "\\cyrchar\\CYRIZH": "\u0474", "\\cyrchar\\CYRJE": "\u0408", "\\cyrchar\\CYRK": "\u041A", "\\cyrchar\\CYRKBEAK": "\u04A0", "\\cyrchar\\CYRKDSC": "\u049A", "\\cyrchar\\CYRKHCRS": "\u049E", "\\cyrchar\\CYRKHK": "\u04C3", "\\cyrchar\\CYRKOPPA": "\u0480", "\\cyrchar\\CYRKSI": "\u046E", "\\cyrchar\\CYRKVCRS": "\u049C", "\\cyrchar\\CYRL": "\u041B", "\\cyrchar\\CYRLDSC": "\u04C5", "\\cyrchar\\CYRLJE": "\u0409", "\\cyrchar\\CYRLYUS": "\u0466", "\\cyrchar\\CYRM": "\u041C", "\\cyrchar\\CYRMDSC": "\u04CD", "\\cyrchar\\CYRN": "\u041D", "\\cyrchar\\CYRNDSC": "\u04A2", "\\cyrchar\\CYRNG": "\u04A4", "\\cyrchar\\CYRNHK": "\u04C7", "\\cyrchar\\CYRNJE": "\u040A", "\\cyrchar\\CYRO": "\u041E", "\\cyrchar\\CYROMEGA": "\u0460", "\\cyrchar\\CYROMEGARND": "\u047A", "\\cyrchar\\CYROMEGATITLO": "\u047C", "\\cyrchar\\CYROT": "\u047E", "\\cyrchar\\CYROTLD": "\u04E8", "\\cyrchar\\CYRP": "\u041F", "\\cyrchar\\CYRPHK": "\u04A6", "\\cyrchar\\CYRPSI": "\u0470", "\\cyrchar\\CYRR": "\u0420", "\\cyrchar\\CYRRTICK": "\u048E", "\\cyrchar\\CYRS": "\u0421", "\\cyrchar\\CYRSCHWA": "\u04D8", "\\cyrchar\\CYRSDSC": "\u04AA", "\\cyrchar\\CYRSEMISFTSN": "\u048C", "\\cyrchar\\CYRSFTSN": "\u042C", "\\cyrchar\\CYRSH": "\u0428", "\\cyrchar\\CYRSHCH": "\u0429", "\\cyrchar\\CYRSHHA": "\u04BA", "\\cyrchar\\CYRT": "\u0422", "\\cyrchar\\CYRTDSC": "\u04AC", "\\cyrchar\\CYRTETSE": "\u04B4", "\\cyrchar\\CYRTSHE": "\u040B", "\\cyrchar\\CYRU": "\u0423", "\\cyrchar\\CYRUK": "\u0478", "\\cyrchar\\CYRUSHRT": "\u0423\u0306", "\\cyrchar\\CYRV": "\u0412", "\\cyrchar\\CYRY": "\u04AE", "\\cyrchar\\CYRYA": "\u042F", "\\cyrchar\\CYRYAT": "\u0462", "\\cyrchar\\CYRYHCRS": "\u04B0", "\\cyrchar\\CYRYI": "\u0406\u0308", "\\cyrchar\\CYRYO": "\u0415\u0308", "\\cyrchar\\CYRYU": "\u042E", "\\cyrchar\\CYRZ": "\u0417", "\\cyrchar\\CYRZDSC": "\u0498", "\\cyrchar\\CYRZH": "\u0416", "\\cyrchar\\CYRZHDSC": "\u0496", "\\cyrchar\\CYRpalochka": "\u04C0", "\\cyrchar\\cyra": "\u0430", "\\cyrchar\\cyrabhch": "\u04BD", "\\cyrchar\\cyrabhchdsc": "\u04BF", "\\cyrchar\\cyrabhdze": "\u04E1", "\\cyrchar\\cyrabhha": "\u04A9", "\\cyrchar\\cyrae": "\u04D5", "\\cyrchar\\cyrb": "\u0431", "\\cyrchar\\cyrbyus": "\u046B", "\\cyrchar\\cyrc": "\u0446", "\\cyrchar\\cyrch": "\u0447", "\\cyrchar\\cyrchldsc": "\u04CC", "\\cyrchar\\cyrchrdsc": "\u04B7", "\\cyrchar\\cyrchvcrs": "\u04B9", "\\cyrchar\\cyrd": "\u0434", "\\cyrchar\\cyrdje": "\u0452", "\\cyrchar\\cyrdze": "\u0455", "\\cyrchar\\cyrdzhe": "\u045F", "\\cyrchar\\cyre": "\u0435", "\\cyrchar\\cyrerev": "\u044D", "\\cyrchar\\cyrery": "\u044B", "\\cyrchar\\cyrf": "\u0444", "\\cyrchar\\cyrfita": "\u0473", "\\cyrchar\\cyrg": "\u0433", "\\cyrchar\\cyrghcrs": "\u0493", "\\cyrchar\\cyrghk": "\u0495", "\\cyrchar\\cyrgup": "\u0491", "\\cyrchar\\cyrh": "\u0445", "\\cyrchar\\cyrhdsc": "\u04B3", "\\cyrchar\\cyrhrdsn": "\u044A", "\\cyrchar\\cyrhundredthousands": "\u0488", "\\cyrchar\\cyri": "\u0438", "\\cyrchar\\cyrie": "\u0454", "\\cyrchar\\cyrii": "\u0456", "\\cyrchar\\cyriotbyus": "\u046D", "\\cyrchar\\cyriote": "\u0465", "\\cyrchar\\cyriotlyus": "\u0469", "\\cyrchar\\cyrishrt": "\u0438\u0306", "\\cyrchar\\cyrizh": "\u0475", "\\cyrchar\\cyrje": "\u0458", "\\cyrchar\\cyrk": "\u043A", "\\cyrchar\\cyrkbeak": "\u04A1", "\\cyrchar\\cyrkdsc": "\u049B", "\\cyrchar\\cyrkhcrs": "\u049F", "\\cyrchar\\cyrkhk": "\u04C4", "\\cyrchar\\cyrkoppa": "\u0481", "\\cyrchar\\cyrksi": "\u046F", "\\cyrchar\\cyrkvcrs": "\u049D", "\\cyrchar\\cyrl": "\u043B", "\\cyrchar\\cyrldsc": "\u04C6", "\\cyrchar\\cyrlje": "\u0459", "\\cyrchar\\cyrlyus": "\u0467", "\\cyrchar\\cyrm": "\u043C", "\\cyrchar\\cyrmdsc": "\u04CE", "\\cyrchar\\cyrmillions": "\u0489", "\\cyrchar\\cyrn": "\u043D", "\\cyrchar\\cyrndsc": "\u04A3", "\\cyrchar\\cyrng": "\u04A5", "\\cyrchar\\cyrnhk": "\u04C8", "\\cyrchar\\cyrnje": "\u045A", "\\cyrchar\\cyro": "\u043E", "\\cyrchar\\cyromega": "\u0461", "\\cyrchar\\cyromegarnd": "\u047B", "\\cyrchar\\cyromegatitlo": "\u047D", "\\cyrchar\\cyrot": "\u047F", "\\cyrchar\\cyrotld": "\u04E9", "\\cyrchar\\cyrp": "\u043F", "\\cyrchar\\cyrphk": "\u04A7", "\\cyrchar\\cyrpsi": "\u0471", "\\cyrchar\\cyrr": "\u0440", "\\cyrchar\\cyrrtick": "\u048F", "\\cyrchar\\cyrs": "\u0441", "\\cyrchar\\cyrschwa": "\u04D9", "\\cyrchar\\cyrsdsc": "\u04AB", "\\cyrchar\\cyrsemisftsn": "\u048D", "\\cyrchar\\cyrsftsn": "\u044C", "\\cyrchar\\cyrsh": "\u0448", "\\cyrchar\\cyrshch": "\u0449", "\\cyrchar\\cyrshha": "\u04BB", "\\cyrchar\\cyrt": "\u0442", "\\cyrchar\\cyrtdsc": "\u04AD", "\\cyrchar\\cyrtetse": "\u04B5", "\\cyrchar\\cyrthousands": "\u0482", "\\cyrchar\\cyrtshe": "\u045B", "\\cyrchar\\cyru": "\u0443", "\\cyrchar\\cyruk": "\u0479", "\\cyrchar\\cyrushrt": "\u0443\u0306", "\\cyrchar\\cyrv": "\u0432", "\\cyrchar\\cyry": "\u04AF", "\\cyrchar\\cyrya": "\u044F", "\\cyrchar\\cyryat": "\u0463", "\\cyrchar\\cyryhcrs": "\u04B1", "\\cyrchar\\cyryi": "\u0456\u0308", "\\cyrchar\\cyryo": "\u0435\u0308", "\\cyrchar\\cyryu": "\u044E", "\\cyrchar\\cyrz": "\u0437", "\\cyrchar\\cyrzdsc": "\u0499", "\\cyrchar\\cyrzh": "\u0436", "\\cyrchar\\cyrzhdsc": "\u0497", "\\cyrchar{\\'\\CYRG}": "\u0413\u0301", "\\cyrchar{\\'\\CYRK}": "\u041A\u0301", "\\cyrchar{\\'\\cyrg}": "\u0433\u0301", "\\cyrchar{\\'\\cyrk}": "\u043A\u0301", "\\c{\\u{E}}": "E\u0327\u0306", "\\c{\\u{e}}": "e\u0327\u0306", "\\d": "\u0323", "\\dag": "\u2020", "\\dagger": "\u2020", "\\daleth": "\u2138", "\\danger": "\u2621", "\\dashV": "\u2AE3", "\\dashVdash": "\u27DB", "\\dashcolon": "\u2239", "\\dashleftarrow": "\u21E0", "\\dashleftharpoondown": "\u296B", "\\dashrightarrow": "\u21E2", "\\dashrightharpoondown": "\u296D", "\\dashv": "\u22A3", "\\dbend": "\uFFFD", "\\dbkarrow": "\u290F", "\\dblarrowupdown": "\u21C5", "\\ddag": "\u2021", "\\ddagger": "\u2021", "\\ddddot": "\u20DC", "\\dddot": "\u20DB", "\\ddot": "\u0308", "\\ddots": "\u22F1", "\\ddotseq": "\u2A77", "\\ddot{\\iota}": "\u03B9\u0308", "\\ddot{\\upsilon}": "\u03C5\u0308", "\\delta": "\u03B4", "\\dh": "\xF0", "\\diagdown": "\u27CD", "\\diagup": "\u27CB", "\\diameter": "\u2300", "\\diamond": "\u2662", "\\diamondbotblack": "\u2B19", "\\diamondcdot": "\u27D0", "\\diamondleftarrow": "\u291D", "\\diamondleftarrowbar": "\u291F", "\\diamondleftblack": "\u2B16", "\\diamondrightblack": "\u2B17", "\\diamondsuit": "\u2662", "\\diamondtopblack": "\u2B18", "\\dicei": "\u2680", "\\diceii": "\u2681", "\\diceiii": "\u2682", "\\diceiv": "\u2683", "\\dicev": "\u2684", "\\dicevi": "\u2685", "\\digamma": "\u03DD", "\\dingasterisk": "\u273D", "\\ding{100}": "\u2744", "\\ding{101}": "\u2745", "\\ding{102}": "\u2746", "\\ding{103}": "\u2747", "\\ding{104}": "\u2748", "\\ding{105}": "\u2749", "\\ding{106}": "\u274A", "\\ding{107}": "\u274B", "\\ding{108}": "\u25CF", "\\ding{109}": "\u274D", "\\ding{110}": "\u25A0", "\\ding{111}": "\u274F", "\\ding{112}": "\u2750", "\\ding{113}": "\u2751", "\\ding{114}": "\u2752", "\\ding{115}": "\u25B2", "\\ding{116}": "\u25BC", "\\ding{117}": "\u25C6", "\\ding{118}": "\u2756", "\\ding{119}": "\u25D7", "\\ding{120}": "\u2758", "\\ding{121}": "\u2759", "\\ding{122}": "\u275A", "\\ding{123}": "\u275B", "\\ding{124}": "\u275C", "\\ding{125}": "\u275D", "\\ding{126}": "\u275E", "\\ding{161}": "\u2761", "\\ding{162}": "\u2762", "\\ding{163}": "\u2763", "\\ding{164}": "\u2764", "\\ding{165}": "\u2765", "\\ding{166}": "\u2766", "\\ding{167}": "\u2767", "\\ding{168}": "\u2663", "\\ding{169}": "\u2666", "\\ding{170}": "\u2665", "\\ding{171}": "\u2660", "\\ding{172}": "\u2460", "\\ding{173}": "\u2461", "\\ding{174}": "\u2462", "\\ding{175}": "\u2463", "\\ding{176}": "\u2464", "\\ding{177}": "\u2465", "\\ding{178}": "\u2466", "\\ding{179}": "\u2467", "\\ding{180}": "\u2468", "\\ding{181}": "\u2469", "\\ding{182}": "\u2776", "\\ding{183}": "\u2777", "\\ding{184}": "\u2778", "\\ding{185}": "\u2779", "\\ding{186}": "\u277A", "\\ding{187}": "\u277B", "\\ding{188}": "\u277C", "\\ding{189}": "\u277D", "\\ding{190}": "\u277E", "\\ding{191}": "\u277F", "\\ding{192}": "\u2780", "\\ding{193}": "\u2781", "\\ding{194}": "\u2782", "\\ding{195}": "\u2783", "\\ding{196}": "\u2784", "\\ding{197}": "\u2785", "\\ding{198}": "\u2786", "\\ding{199}": "\u2787", "\\ding{200}": "\u2788", "\\ding{201}": "\u2789", "\\ding{202}": "\u278A", "\\ding{203}": "\u278B", "\\ding{204}": "\u278C", "\\ding{205}": "\u278D", "\\ding{206}": "\u278E", "\\ding{207}": "\u278F", "\\ding{208}": "\u2790", "\\ding{209}": "\u2791", "\\ding{210}": "\u2792", "\\ding{211}": "\u2793", "\\ding{212}": "\u2794", "\\ding{216}": "\u2798", "\\ding{217}": "\u2799", "\\ding{218}": "\u279A", "\\ding{219}": "\u279B", "\\ding{220}": "\u279C", "\\ding{221}": "\u279D", "\\ding{222}": "\u279E", "\\ding{223}": "\u279F", "\\ding{224}": "\u27A0", "\\ding{225}": "\u27A1", "\\ding{226}": "\u27A2", "\\ding{227}": "\u27A3", "\\ding{228}": "\u27A4", "\\ding{229}": "\u27A5", "\\ding{230}": "\u27A6", "\\ding{231}": "\u27A7", "\\ding{232}": "\u27A8", "\\ding{233}": "\u27A9", "\\ding{234}": "\u27AA", "\\ding{235}": "\u27AB", "\\ding{236}": "\u27AC", "\\ding{237}": "\u27AD", "\\ding{238}": "\u27AE", "\\ding{239}": "\u27AF", "\\ding{241}": "\u27B1", "\\ding{242}": "\u27B2", "\\ding{243}": "\u27B3", "\\ding{244}": "\u27B4", "\\ding{245}": "\u27B5", "\\ding{246}": "\u27B6", "\\ding{247}": "\u27B7", "\\ding{248}": "\u27B8", "\\ding{249}": "\u27B9", "\\ding{250}": "\u27BA", "\\ding{251}": "\u27BB", "\\ding{252}": "\u27BC", "\\ding{253}": "\u27BD", "\\ding{254}": "\u27BE", "\\ding{33}": "\u2701", "\\ding{34}": "\u2702", "\\ding{35}": "\u2703", "\\ding{36}": "\u2704", "\\ding{37}": "\u260E", "\\ding{38}": "\u2706", "\\ding{39}": "\u2707", "\\ding{40}": "\u2708", "\\ding{41}": "\u2709", "\\ding{42}": "\u261B", "\\ding{43}": "\u261E", "\\ding{44}": "\u270C", "\\ding{45}": "\u270D", "\\ding{46}": "\u270E", "\\ding{47}": "\u270F", "\\ding{48}": "\u2710", "\\ding{49}": "\u2711", "\\ding{50}": "\u2712", "\\ding{51}": "\u2713", "\\ding{52}": "\u2714", "\\ding{53}": "\u2715", "\\ding{54}": "\u2716", "\\ding{55}": "\u2717", "\\ding{56}": "\u2718", "\\ding{57}": "\u2719", "\\ding{58}": "\u271A", "\\ding{59}": "\u271B", "\\ding{60}": "\u271C", "\\ding{61}": "\u271D", "\\ding{62}": "\u271E", "\\ding{63}": "\u271F", "\\ding{64}": "\u2720", "\\ding{65}": "\u2721", "\\ding{66}": "\u2722", "\\ding{67}": "\u2723", "\\ding{68}": "\u2724", "\\ding{69}": "\u2725", "\\ding{70}": "\u2726", "\\ding{71}": "\u2727", "\\ding{72}": "\u2605", "\\ding{73}": "\u2606", "\\ding{74}": "\u272A", "\\ding{75}": "\u272B", "\\ding{76}": "\u272C", "\\ding{77}": "\u272D", "\\ding{78}": "\u272E", "\\ding{79}": "\u272F", "\\ding{80}": "\u2730", "\\ding{81}": "\u2731", "\\ding{82}": "\u2732", "\\ding{83}": "\u2733", "\\ding{84}": "\u2734", "\\ding{85}": "\u2735", "\\ding{86}": "\u2736", "\\ding{87}": "\u2737", "\\ding{88}": "\u2738", "\\ding{89}": "\u2739", "\\ding{90}": "\u273A", "\\ding{91}": "\u273B", "\\ding{92}": "\u273C", "\\ding{93}": "\u273D", "\\ding{94}": "\u273E", "\\ding{95}": "\u273F", "\\ding{96}": "\u2740", "\\ding{97}": "\u2741", "\\ding{98}": "\u2742", "\\ding{99}": "\u2743", "\\disin": "\u22F2", "\\disjquant": "\u2A08", "\\div": "\xF7", "\\divideontimes": "\u22C7", "\\divslash": "\u2215", "\\dj": "\u0111", "\\dlsh": "\u21B2", "\\dot": "\u0307", "\\dotdiv": "\u2238", "\\doteq": "\u2250", "\\doteqdot": "\u2251", "\\dotequiv": "\u2A67", "\\dotminus": "\u2238", "\\dotplus": "\u2214", "\\dots": "\u2026", "\\dotsim": "\u2A6A", "\\dotsminusdots": "\u223A", "\\dottedcircle": "\u25CC", "\\dottedsquare": "\u2B1A", "\\dottimes": "\u2A30", "\\doublebarvee": "\u2A62", "\\doublebarwedge": "\u2A5E", "\\doubleplus": "\u29FA", "\\downarrow": "\u2193", "\\downarrowbar": "\u2913", "\\downarrowbarred": "\u2908", "\\downdasharrow": "\u21E3", "\\downdownarrows": "\u21CA", "\\downdownharpoons": "\u2965", "\\downfishtail": "\u297F", "\\downharpoonleft": "\u21C3", "\\downharpoonleftbar": "\u2959", "\\downharpoonright": "\u21C2", "\\downharpoonrightbar": "\u2955", "\\downharpoonsleftright": "\u2965", "\\downrightcurvedarrow": "\u2935", "\\downslopeellipsis": "\u22F1", "\\downtriangleleftblack": "\u29E8", "\\downtrianglerightblack": "\u29E9", "\\downuparrows": "\u21F5", "\\downupharpoonsleftright": "\u296F", "\\downwhitearrow": "\u21E9", "\\downzigzagarrow": "\u21AF", "\\dprime": "\u2033", "\\draftingarrow": "\u279B", "\\drbkarrow": "\u2910", "\\droang": "\u031A", "\\dsol": "\u29F6", "\\dsub": "\u2A64", "\\dualmap": "\u29DF", "\\earth": "\u2641", "\\egsdot": "\u2A98", "\\eighthnote": "\u266A", "\\elinters": "\u23E7", "\\ell": "\u2113", "\\elsdot": "\u2A97", "\\emptysetoarr": "\u29B3", "\\emptysetoarrl": "\u29B4", "\\emptysetobar": "\u29B1", "\\emptysetocirc": "\u29B2", "\\enclosecircle": "\u20DD", "\\enclosediamond": "\u20DF", "\\enclosesquare": "\u20DE", "\\enclosetriangle": "\u20E4", "\\enleadertwodots": "\u2025", "\\enspace": "\u2002", "\\eparsl": "\u29E3", "\\epsilon": "\u03F5", "\\eqcirc": "\u2256", "\\eqcolon": "\u2255", "\\eqdef": "\u225D", "\\eqdot": "\u2A66", "\\eqeq": "\u2A75", "\\eqeqeq": "\u2A76", "\\eqgtr": "\u22DD", "\\eqless": "\u22DC", "\\eqqgtr": "\u2A9A", "\\eqqless": "\u2A99", "\\eqqplus": "\u2A71", "\\eqqsim": "\u2A73", "\\eqqslantgtr": "\u2A9C", "\\eqqslantless": "\u2A9B", "\\eqsim": "\u2242", "\\eqslantgtr": "\u2A96", "\\eqslantless": "\u2A95", "\\equal": "=", "\\equalleftarrow": "\u2B40", "\\equalparallel": "\u22D5", "\\equalrightarrow": "\u2971", "\\equiv": "\u2261", "\\equivDD": "\u2A78", "\\equivVert": "\u2A68", "\\equivVvert": "\u2A69", "\\eqvparsl": "\u29E5", "\\errbarblackcircle": "\u29F3", "\\errbarblackdiamond": "\u29F1", "\\errbarblacksquare": "\u29EF", "\\errbarcircle": "\u29F2", "\\errbardiamond": "\u29F0", "\\errbarsquare": "\u29EE", "\\estimates": "\u2259", "\\eta": "\u03B7", "\\eth": "\xF0", "\\euro": "\u20AC", "\\exists": "\u2203", "\\fallingdotseq": "\u2252", "\\fbowtie": "\u29D3", "\\fbox{~~}": "\u25AD", "\\fcmp": "\u2A3E", "\\fdiagovnearrow": "\u292F", "\\fdiagovrdiag": "\u292C", "\\female": "\u2640", "\\ffun": "\u21FB", "\\finj": "\u2915", "\\fint": "\u2A0F", "\\fisheye": "\u25C9", "\\flat": "\u266D", "\\fltns": "\u23E5", "\\forall": "\u2200", "\\forcesextra": "\u22A8", "\\forks": "\u2ADD\u0338", "\\forksnot": "\u2ADD", "\\forkv": "\u2AD9", "\\fourthroot": "\u221C", "\\fourvdots": "\u2999", "\\fracslash": "\u2044", "\\frac{0}{3}": "\u2189", "\\frac{1}": "\u215F", "\\frac{1}{10}": "\u2152", "\\frac{1}{2}": "\xBD", "\\frac{1}{3}": "\u2153", "\\frac{1}{4}": "\xBC", "\\frac{1}{5}": "\u2155", "\\frac{1}{6}": "\u2159", "\\frac{1}{7}": "\u2150", "\\frac{1}{8}": "\u215B", "\\frac{1}{9}": "\u2151", "\\frac{2}{3}": "\u2154", "\\frac{2}{5}": "\u2156", "\\frac{3}{4}": "\xBE", "\\frac{3}{5}": "\u2157", "\\frac{3}{8}": "\u215C", "\\frac{4}{5}": "\u2158", "\\frac{5}{6}": "\u215A", "\\frac{5}{8}": "\u215D", "\\frac{7}{8}": "\u215E", "\\frown": "\u2322", "\\frownie": "\u2639", "\\fullouterjoin": "\u27D7", "\\gamma": "\u03B3", "\\ge": "\u2265", "\\gemini": "\u264A", "\\geq": "\u2265", "\\geqq": "\u2267", "\\geqqslant": "\u2AFA", "\\geqslant": "\u2A7E", "\\gescc": "\u2AA9", "\\gesdot": "\u2A80", "\\gesdoto": "\u2A82", "\\gesdotol": "\u2A84", "\\gesles": "\u2A94", "\\gg": "\u226B", "\\ggcurly": "\u2ABC", "\\ggg": "\u22D9", "\\gggnest": "\u2AF8", "\\gimel": "\u2137", "\\glE": "\u2A92", "\\gla": "\u2AA5", "\\gleichstark": "\u29E6", "\\glj": "\u2AA4", "\\gnapprox": "\u2A8A", "\\gneq": "\u2A88", "\\gneqq": "\u2269", "\\gnsim": "\u22E7", "\\grave": "\u0300", "\\greater": ">", "\\greaterequivlnt": "\u2273", "\\gsime": "\u2A8E", "\\gsiml": "\u2A90", "\\gtcc": "\u2AA7", "\\gtcir": "\u2A7A", "\\gtlpar": "\u29A0", "\\gtquest": "\u2A7C", "\\gtrapprox": "\u2A86", "\\gtrarr": "\u2978", "\\gtrdot": "\u22D7", "\\gtreqless": "\u22DB", "\\gtreqqless": "\u2A8C", "\\gtrless": "\u2277", "\\gtrsim": "\u2273", "\\guillemotleft": "\xAB", "\\guillemotright": "\xBB", "\\guilsinglleft": "\u2039", "\\guilsinglright": "\u203A", "\\gvertneqq": "\u2269\uFE00", "\\harrowextender": "\u23AF", "\\hash": "\u22D5", "\\hat": "\u2227", "\\hatapprox": "\u2A6F", "\\hbar": "\u0127", "\\heartsuit": "\u2661", "\\hebalef": "\u05D0", "\\hebayin": "\u05E2", "\\hebbet": "\u05D1", "\\hebdalet": "\u05D3", "\\hebfinalkaf": "\u05DA", "\\hebfinalmem": "\u05DD", "\\hebfinalnun": "\u05DF", "\\hebfinalpe": "\u05E3", "\\hebfinaltsadi": "\u05E5", "\\hebgimel": "\u05D2", "\\hebhe": "\u05D4", "\\hebhet": "\u05D7", "\\hebkaf": "\u05DB", "\\heblamed": "\u05DC", "\\hebmem": "\u05DE", "\\hebnun": "\u05E0", "\\hebpe": "\u05E4", "\\hebqof": "\u05E7", "\\hebresh": "\u05E8", "\\hebsamekh": "\u05E1", "\\hebshin": "\u05E9", "\\hebtav": "\u05EA", "\\hebtet": "\u05D8", "\\hebtsadi": "\u05E6", "\\hebvav": "\u05D5", "\\hebyod": "\u05D9", "\\hebzayin": "\u05D6", "\\hermitconjmatrix": "\u22B9", "\\hermitmatrix": "\u22B9", "\\hexagon": "\u2394", "\\hexagonblack": "\u2B23", "\\hknearrow": "\u2924", "\\hknwarrow": "\u2923", "\\hksearrow": "\u2925", "\\hkswarrow": "\u2926", "\\homothetic": "\u223B", "\\hookleftarrow": "\u21A9", "\\hookrightarrow": "\u21AA", "\\horizbar": "\u2015", "\\hourglass": "\u29D6", "\\house": "\u2302", "\\hphantom{,}": "\u2008", "\\hphantom{0}": "\u2007", "\\hrectangle": "\u25AD", "\\hrectangleblack": "\u25AC", "\\hslash": "\u210F", "\\hspace{0.166em}": "\u2006", "\\hspace{0.25em}": "\u2005", "\\hspace{0.6em}": "\u2002", "\\hspace{0pt}": "\u200B", "\\hyphenbullet": "\u2043", "\\hzigzag": "\u3030", "\\i": "\u0131", "\\iiiint": "\u2A0C", "\\iiint": "\u222D", "\\iinfin": "\u29DC", "\\iint": "\u222C", "\\ij": "\u0133", "\\image": "\u22B7", "\\imageof": "\u22B7", "\\imath": "\u{1D6A4}", "\\in": "\u2208", "\\increment": "\u2206", "\\infty": "\u221E", "\\int": "\u222B", "\\intBar": "\u2A0E", "\\intbar": "\u2A0D", "\\intbottom": "\u2321", "\\intcap": "\u2A19", "\\intclockwise": "\u2231", "\\intcup": "\u2A1A", "\\intercal": "\u22BA", "\\interleave": "\u2AF4", "\\intextender": "\u23AE", "\\intlarhk": "\u2A17", "\\intprod": "\u2A3C", "\\intprodr": "\u2A3D", "\\inttop": "\u2320", "\\intx": "\u2A18", "\\invamp": "\u214B", "\\invdiameter": "\u2349", "\\inversebullet": "\u25D8", "\\inversewhitecircle": "\u25D9", "\\invlazys": "\u223E", "\\invneg": "\u2310", "\\invnot": "\u2310", "\\invwhitelowerhalfcircle": "\u25DB", "\\invwhiteupperhalfcircle": "\u25DA", "\\iota": "\u03B9", "\\isinE": "\u22F9", "\\isindot": "\u22F5", "\\isinobar": "\u22F7", "\\isins": "\u22F4", "\\isinvb": "\u22F8", "\\j": "\u0237", "\\jmath": "\u{1D6A5}", "\\jupiter": "\u2643", "\\k": "\u0328", "\\kappa": "\u03BA", "\\kernelcontraction": "\u223B", "\\koppa": "\u03DF", "\\k{}": "\u02DB", "\\l": "\u0142", "\\lAngle": "\u27EA", "\\lBrace": "\u2983", "\\lBrack": "\u27E6", "\\lParen": "\u2985", "\\lambda": "\u03BB", "\\lang": "\u27EA", "\\langle": "\u27E8", "\\langledot": "\u2991", "\\laplac": "\u29E0", "\\lasp": "\u02BF", "\\lat": "\u2AAB", "\\late": "\u2AAD", "\\lazysinv": "\u223E", "\\lbag": "\u27C5", "\\lblkbrbrak": "\u2997", "\\lblot": "\u2989", "\\lbrace": "{", "\\lbracelend": "\u23A9", "\\lbracemid": "\u23A8", "\\lbraceuend": "\u23A7", "\\lbrack": "[", "\\lbrackextender": "\u23A2", "\\lbracklend": "\u23A3", "\\lbracklltick": "\u298F", "\\lbrackubar": "\u298B", "\\lbrackuend": "\u23A1", "\\lbrackultick": "\u298D", "\\lbrbrak": "\u3014", "\\lceil": "\u2308", "\\lcirclerightint": "\u2232", "\\lcurvyangle": "\u29FC", "\\ldots": "\u2026", "\\le": "\u2264", "\\left": "", "\\leftarrow": "\u2190", "\\leftarrowapprox": "\u2B4A", "\\leftarrowbackapprox": "\u2B42", "\\leftarrowbsimilar": "\u2B4B", "\\leftarrowless": "\u2977", "\\leftarrowonoplus": "\u2B32", "\\leftarrowplus": "\u2946", "\\leftarrowshortrightarrow": "\u2943", "\\leftarrowsimilar": "\u2973", "\\leftarrowsubset": "\u297A", "\\leftarrowtail": "\u21A2", "\\leftarrowtriangle": "\u21FD", "\\leftarrowx": "\u2B3E", "\\leftbarharpoon": "\u296A", "\\leftbkarrow": "\u290C", "\\leftcurvedarrow": "\u2B3F", "\\leftdasharrow": "\u21E0", "\\leftdbkarrow": "\u290E", "\\leftdbltail": "\u291B", "\\leftdotarrow": "\u2B38", "\\leftdowncurvedarrow": "\u2936", "\\leftfishtail": "\u297C", "\\leftharpoonaccent": "\u20D0", "\\leftharpoondown": "\u21BD", "\\leftharpoondownbar": "\u295E", "\\leftharpoonsupdown": "\u2962", "\\leftharpoonup": "\u21BC", "\\leftharpoonupbar": "\u295A", "\\leftharpoonupdash": "\u296A", "\\leftleftarrows": "\u21C7", "\\leftleftharpoons": "\u2962", "\\leftmoon": "\u263E", "\\leftouterjoin": "\u27D5", "\\leftrightarrow": "\u2194", "\\leftrightarrowcircle": "\u2948", "\\leftrightarrows": "\u21C6", "\\leftrightarrowtriangle": "\u21FF", "\\leftrightharpoon": "\u294A", "\\leftrightharpoondowndown": "\u2950", "\\leftrightharpoondownup": "\u294B", "\\leftrightharpoons": "\u21CB", "\\leftrightharpoonsdown": "\u2967", "\\leftrightharpoonsup": "\u2966", "\\leftrightharpoonupdown": "\u294A", "\\leftrightharpoonupup": "\u294E", "\\leftrightsquigarrow": "\u21AD", "\\leftslice": "\u2AA6", "\\leftsquigarrow": "\u21DC", "\\lefttail": "\u2919", "\\leftthreearrows": "\u2B31", "\\leftthreetimes": "\u22CB", "\\leftwavearrow": "\u219C", "\\leftwhitearrow": "\u21E6", "\\leo": "\u264C", "\\leq": "\u2264", "\\leqq": "\u2266", "\\leqqslant": "\u2AF9", "\\leqslant": "\u2A7D", "\\lescc": "\u2AA8", "\\lesdot": "\u2A7F", "\\lesdoto": "\u2A81", "\\lesdotor": "\u2A83", "\\lesges": "\u2A93", "\\less": "<", "\\lessapprox": "\u2A85", "\\lessdot": "\u22D6", "\\lesseqgtr": "\u22DA", "\\lesseqqgtr": "\u2A8B", "\\lessequivlnt": "\u2272", "\\lessgtr": "\u2276", "\\lesssim": "\u2272", "\\lfbowtie": "\u29D1", "\\lfloor": "\u230A", "\\lftimes": "\u29D4", "\\lgE": "\u2A91", "\\lgblkcircle": "\u2B24", "\\lgblksquare": "\u2B1B", "\\lgroup": "\u27EE", "\\lgwhtcircle": "\u25EF", "\\lgwhtsquare": "\u2B1C", "\\lhd": "\u25C1", "\\libra": "\u264E", "\\lightning": "\u21AF", "\\limg": "\u2987", "\\linefeed": "\u21B4", "\\ll": "\u226A", "\\llangle": "\u2989", "\\llarc": "\u25DF", "\\llblacktriangle": "\u25E3", "\\llbracket": "\u27E6", "\\llcorner": "\u231E", "\\llcurly": "\u2ABB", "\\lll": "\u22D8", "\\lllnest": "\u2AF7", "\\llparenthesis": "\u2987", "\\lltriangle": "\u25FA", "\\lmoustache": "\u23B0", "\\lnapprox": "\u2A89", "\\lneq": "\u2A87", "\\lneqq": "\u2268", "\\lnot": "\xAC", "\\lnsim": "\u22E6", "\\longdashv": "\u27DE", "\\longdivision": "\u27CC", "\\longleftarrow": "\u27F5", "\\longleftrightarrow": "\u27F7", "\\longleftsquigarrow": "\u2B33", "\\longmapsfrom": "\u27FB", "\\longmapsto": "\u27FC", "\\longrightarrow": "\u27F6", "\\longrightsquigarrow": "\u27FF", "\\looparrowleft": "\u21AB", "\\looparrowright": "\u21AC", "\\lowint": "\u2A1C", "\\lozenge": "\u25CA", "\\lozengeminus": "\u27E0", "\\lparen": "(", "\\lparenextender": "\u239C", "\\lparenlend": "\u239D", "\\lparenless": "\u2993", "\\lparenuend": "\u239B", "\\lrarc": "\u25DE", "\\lrblacktriangle": "\u25E2", "\\lrcorner": "\u231F", "\\lrtriangle": "\u25FF", "\\lrtriangleeq": "\u29E1", "\\lsime": "\u2A8D", "\\lsimg": "\u2A8F", "\\lsqhook": "\u2ACD", "\\ltcc": "\u2AA6", "\\ltcir": "\u2A79", "\\ltimes": "\u22C9", "\\ltlarr": "\u2976", "\\ltquest": "\u2A7B", "\\ltrivb": "\u29CF", "\\lvboxline": "\u23B8", "\\lvec": "\u20D0", "\\lvertneqq": "\u2268\uFE00", "\\lvzigzag": "\u29D8", "\\male": "\u2642", "\\maltese": "\u2720", "\\mapsdown": "\u21A7", "\\mapsfrom": "\u21A4", "\\mapsto": "\u21A6", "\\mapsup": "\u21A5", "\\mathampersand": "&", "\\mathatsign": "@", "\\mathbb{0}": "\u{1D7D8}", "\\mathbb{1}": "\u{1D7D9}", "\\mathbb{2}": "\u{1D7DA}", "\\mathbb{3}": "\u{1D7DB}", "\\mathbb{4}": "\u{1D7DC}", "\\mathbb{5}": "\u{1D7DD}", "\\mathbb{6}": "\u{1D7DE}", "\\mathbb{7}": "\u{1D7DF}", "\\mathbb{8}": "\u{1D7E0}", "\\mathbb{9}": "\u{1D7E1}", "\\mathbb{A}": "\u{1D538}", "\\mathbb{B}": "\u{1D539}", "\\mathbb{C}": "\u2102", "\\mathbb{D}": "\u{1D53B}", "\\mathbb{E}": "\u{1D53C}", "\\mathbb{F}": "\u{1D53D}", "\\mathbb{G}": "\u{1D53E}", "\\mathbb{H}": "\u210D", "\\mathbb{I}": "\u{1D540}", "\\mathbb{J}": "\u{1D541}", "\\mathbb{K}": "\u{1D542}", "\\mathbb{L}": "\u{1D543}", "\\mathbb{M}": "\u{1D544}", "\\mathbb{N}": "\u2115", "\\mathbb{O}": "\u{1D546}", "\\mathbb{P}": "\u2119", "\\mathbb{Q}": "\u211A", "\\mathbb{R}": "\u211D", "\\mathbb{S}": "\u{1D54A}", "\\mathbb{T}": "\u{1D54B}", "\\mathbb{U}": "\u{1D54C}", "\\mathbb{V}": "\u{1D54D}", "\\mathbb{W}": "\u{1D54E}", "\\mathbb{X}": "\u{1D54F}", "\\mathbb{Y}": "\u{1D550}", "\\mathbb{Z}": "\u2124", "\\mathbb{\\Gamma}": "\u213E", "\\mathbb{\\Pi}": "\u213F", "\\mathbb{\\Sigma}": "\u2140", "\\mathbb{\\gamma}": "\u213D", "\\mathbb{\\pi}": "\u213C", "\\mathbb{a}": "\u{1D552}", "\\mathbb{b}": "\u{1D553}", "\\mathbb{c}": "\u{1D554}", "\\mathbb{d}": "\u{1D555}", "\\mathbb{e}": "\u{1D556}", "\\mathbb{f}": "\u{1D557}", "\\mathbb{g}": "\u{1D558}", "\\mathbb{h}": "\u{1D559}", "\\mathbb{i}": "\u{1D55A}", "\\mathbb{j}": "\u{1D55B}", "\\mathbb{k}": "\u{1D55C}", "\\mathbb{l}": "\u{1D55D}", "\\mathbb{m}": "\u{1D55E}", "\\mathbb{n}": "\u{1D55F}", "\\mathbb{o}": "\u{1D560}", "\\mathbb{p}": "\u{1D561}", "\\mathbb{q}": "\u{1D562}", "\\mathbb{r}": "\u{1D563}", "\\mathbb{s}": "\u{1D564}", "\\mathbb{t}": "\u{1D565}", "\\mathbb{u}": "\u{1D566}", "\\mathbb{v}": "\u{1D567}", "\\mathbb{w}": "\u{1D568}", "\\mathbb{x}": "\u{1D569}", "\\mathbb{y}": "\u{1D56A}", "\\mathbb{z}": "\u{1D56B}", "\\mathbf{0}": "\u{1D7CE}", "\\mathbf{1}": "\u{1D7CF}", "\\mathbf{2}": "\u{1D7D0}", "\\mathbf{3}": "\u{1D7D1}", "\\mathbf{4}": "\u{1D7D2}", "\\mathbf{5}": "\u{1D7D3}", "\\mathbf{6}": "\u{1D7D4}", "\\mathbf{7}": "\u{1D7D5}", "\\mathbf{8}": "\u{1D7D6}", "\\mathbf{9}": "\u{1D7D7}", "\\mathbf{A}": "\u{1D400}", "\\mathbf{B}": "\u{1D401}", "\\mathbf{C}": "\u{1D402}", "\\mathbf{D}": "\u{1D403}", "\\mathbf{E}": "\u{1D404}", "\\mathbf{F}": "\u{1D405}", "\\mathbf{G}": "\u{1D406}", "\\mathbf{H}": "\u{1D407}", "\\mathbf{I}": "\u{1D408}", "\\mathbf{J}": "\u{1D409}", "\\mathbf{K}": "\u{1D40A}", "\\mathbf{L}": "\u{1D40B}", "\\mathbf{M}": "\u{1D40C}", "\\mathbf{N}": "\u{1D40D}", "\\mathbf{O}": "\u{1D40E}", "\\mathbf{P}": "\u{1D40F}", "\\mathbf{Q}": "\u{1D410}", "\\mathbf{R}": "\u{1D411}", "\\mathbf{S}": "\u{1D412}", "\\mathbf{T}": "\u{1D413}", "\\mathbf{U}": "\u{1D414}", "\\mathbf{V}": "\u{1D415}", "\\mathbf{W}": "\u{1D416}", "\\mathbf{X}": "\u{1D417}", "\\mathbf{Y}": "\u{1D418}", "\\mathbf{Z}": "\u{1D419}", "\\mathbf{\\Delta}": "\u{1D6AB}", "\\mathbf{\\Gamma}": "\u{1D6AA}", "\\mathbf{\\Lambda}": "\u{1D6B2}", "\\mathbf{\\Omega}": "\u{1D6C0}", "\\mathbf{\\Phi}": "\u{1D6BD}", "\\mathbf{\\Pi}": "\u{1D6B7}", "\\mathbf{\\Psi}": "\u{1D6BF}", "\\mathbf{\\Sigma}": "\u{1D6BA}", "\\mathbf{\\Theta}": "\u{1D6AF}", "\\mathbf{\\Upsilon}": "\u{1D6BC}", "\\mathbf{\\Xi}": "\u{1D6B5}", "\\mathbf{\\alpha}": "\u{1D6C2}", "\\mathbf{\\beta}": "\u{1D6C3}", "\\mathbf{\\delta}": "\u{1D6C5}", "\\mathbf{\\epsilon}": "\u{1D6C6}", "\\mathbf{\\eta}": "\u{1D6C8}", "\\mathbf{\\gamma}": "\u{1D6C4}", "\\mathbf{\\lambda}": "\u{1D6CC}", "\\mathbf{\\nabla}": "\u{1D6C1}", "\\mathbf{\\omega}": "\u{1D6DA}", "\\mathbf{\\phi}": "\u{1D6D7}", "\\mathbf{\\pi}": "\u{1D6D1}", "\\mathbf{\\psi}": "\u{1D6D9}", "\\mathbf{\\sigma}": "\u{1D6D4}", "\\mathbf{\\theta}": "\u{1D6C9}", "\\mathbf{\\upsilon}": "\u{1D6D6}", "\\mathbf{\\varkappa}": "\u{1D6DE}", "\\mathbf{\\varpi}": "\u{1D6E1}", "\\mathbf{\\varrho}": "\u{1D6E0}", "\\mathbf{\\varsigma}": "\u{1D6D3}", "\\mathbf{\\vartheta}": "\u{1D6B9}", "\\mathbf{\\xi}": "\u{1D6CF}", "\\mathbf{\\zeta}": "\u{1D6C7}", "\\mathbf{a}": "\u{1D41A}", "\\mathbf{b}": "\u{1D41B}", "\\mathbf{c}": "\u{1D41C}", "\\mathbf{d}": "\u{1D41D}", "\\mathbf{e}": "\u{1D41E}", "\\mathbf{f}": "\u{1D41F}", "\\mathbf{g}": "\u{1D420}", "\\mathbf{h}": "\u{1D421}", "\\mathbf{i}": "\u{1D422}", "\\mathbf{j}": "\u{1D423}", "\\mathbf{k}": "\u{1D424}", "\\mathbf{l}": "\u{1D425}", "\\mathbf{m}": "\u{1D426}", "\\mathbf{n}": "\u{1D427}", "\\mathbf{o}": "\u{1D428}", "\\mathbf{p}": "\u{1D429}", "\\mathbf{q}": "\u{1D42A}", "\\mathbf{r}": "\u{1D42B}", "\\mathbf{s}": "\u{1D42C}", "\\mathbf{t}": "\u{1D42D}", "\\mathbf{u}": "\u{1D42E}", "\\mathbf{v}": "\u{1D42F}", "\\mathbf{w}": "\u{1D430}", "\\mathbf{x}": "\u{1D431}", "\\mathbf{y}": "\u{1D432}", "\\mathbf{z}": "\u{1D433}", "\\mathbin{{:}\\!\\!{-}\\!\\!{:}}": "\u223A", "\\mathbit{A}": "\u{1D468}", "\\mathbit{B}": "\u{1D469}", "\\mathbit{C}": "\u{1D46A}", "\\mathbit{D}": "\u{1D46B}", "\\mathbit{E}": "\u{1D46C}", "\\mathbit{F}": "\u{1D46D}", "\\mathbit{G}": "\u{1D46E}", "\\mathbit{H}": "\u{1D46F}", "\\mathbit{I}": "\u{1D470}", "\\mathbit{J}": "\u{1D471}", "\\mathbit{K}": "\u{1D472}", "\\mathbit{L}": "\u{1D473}", "\\mathbit{M}": "\u{1D474}", "\\mathbit{N}": "\u{1D475}", "\\mathbit{O}": "\u{1D476}", "\\mathbit{P}": "\u{1D477}", "\\mathbit{Q}": "\u{1D478}", "\\mathbit{R}": "\u{1D479}", "\\mathbit{S}": "\u{1D47A}", "\\mathbit{T}": "\u{1D47B}", "\\mathbit{U}": "\u{1D47C}", "\\mathbit{V}": "\u{1D47D}", "\\mathbit{W}": "\u{1D47E}", "\\mathbit{X}": "\u{1D47F}", "\\mathbit{Y}": "\u{1D480}", "\\mathbit{Z}": "\u{1D481}", "\\mathbit{\\Delta}": "\u{1D71F}", "\\mathbit{\\Gamma}": "\u{1D71E}", "\\mathbit{\\Lambda}": "\u{1D726}", "\\mathbit{\\Omega}": "\u{1D734}", "\\mathbit{\\Phi}": "\u{1D731}", "\\mathbit{\\Pi}": "\u{1D72B}", "\\mathbit{\\Psi}": "\u{1D733}", "\\mathbit{\\Sigma}": "\u{1D72E}", "\\mathbit{\\Theta}": "\u{1D723}", "\\mathbit{\\Upsilon}": "\u{1D730}", "\\mathbit{\\Xi}": "\u{1D729}", "\\mathbit{\\alpha}": "\u{1D736}", "\\mathbit{\\beta}": "\u{1D737}", "\\mathbit{\\chi}": "\u{1D74C}", "\\mathbit{\\delta}": "\u{1D739}", "\\mathbit{\\epsilon}": "\u{1D73A}", "\\mathbit{\\eta}": "\u{1D73C}", "\\mathbit{\\gamma}": "\u{1D738}", "\\mathbit{\\imath}": "\u{1D73E}", "\\mathbit{\\kappa}": "\u{1D73F}", "\\mathbit{\\lambda}": "\u{1D740}", "\\mathbit{\\nabla}": "\u{1D735}", "\\mathbit{\\omega}": "\u{1D74E}", "\\mathbit{\\phi}": "\u{1D753}", "\\mathbit{\\pi}": "\u{1D745}", "\\mathbit{\\psi}": "\u{1D74D}", "\\mathbit{\\rho}": "\u{1D746}", "\\mathbit{\\sigma}": "\u{1D748}", "\\mathbit{\\tau}": "\u{1D749}", "\\mathbit{\\theta}": "\u{1D73D}", "\\mathbit{\\upsilon}": "\u{1D74A}", "\\mathbit{\\varkappa}": "\u{1D752}", "\\mathbit{\\varphi}": "\u{1D74B}", "\\mathbit{\\varpi}": "\u{1D755}", "\\mathbit{\\varrho}": "\u{1D754}", "\\mathbit{\\varsigma}": "\u{1D747}", "\\mathbit{\\vartheta}": "\u{1D751}", "\\mathbit{\\xi}": "\u{1D743}", "\\mathbit{\\zeta}": "\u{1D73B}", "\\mathbit{a}": "\u{1D482}", "\\mathbit{b}": "\u{1D483}", "\\mathbit{c}": "\u{1D484}", "\\mathbit{d}": "\u{1D485}", "\\mathbit{e}": "\u{1D486}", "\\mathbit{f}": "\u{1D487}", "\\mathbit{g}": "\u{1D488}", "\\mathbit{h}": "\u{1D489}", "\\mathbit{i}": "\u{1D48A}", "\\mathbit{j}": "\u{1D48B}", "\\mathbit{k}": "\u{1D48C}", "\\mathbit{l}": "\u{1D48D}", "\\mathbit{m}": "\u{1D48E}", "\\mathbit{n}": "\u{1D48F}", "\\mathbit{o}": "\u{1D490}", "\\mathbit{p}": "\u{1D491}", "\\mathbit{q}": "\u{1D492}", "\\mathbit{r}": "\u{1D493}", "\\mathbit{s}": "\u{1D494}", "\\mathbit{t}": "\u{1D495}", "\\mathbit{u}": "\u{1D496}", "\\mathbit{v}": "\u{1D497}", "\\mathbit{w}": "\u{1D498}", "\\mathbit{x}": "\u{1D499}", "\\mathbit{y}": "\u{1D49A}", "\\mathbit{z}": "\u{1D49B}", "\\mathcolon": ":", "\\mathcomma": ",", "\\mathdollar": "$", "\\mathexclam": "!", "\\mathfrak{A}": "\u{1D504}", "\\mathfrak{B}": "\u{1D505}", "\\mathfrak{C}": "\u212D", "\\mathfrak{D}": "\u{1D507}", "\\mathfrak{E}": "\u{1D508}", "\\mathfrak{F}": "\u{1D509}", "\\mathfrak{G}": "\u{1D50A}", "\\mathfrak{H}": "\u210C", "\\mathfrak{I}": "\u2111", "\\mathfrak{J}": "\u{1D50D}", "\\mathfrak{K}": "\u{1D50E}", "\\mathfrak{L}": "\u{1D50F}", "\\mathfrak{M}": "\u{1D510}", "\\mathfrak{N}": "\u{1D511}", "\\mathfrak{O}": "\u{1D512}", "\\mathfrak{P}": "\u{1D513}", "\\mathfrak{Q}": "\u{1D514}", "\\mathfrak{R}": "\u211C", "\\mathfrak{S}": "\u{1D516}", "\\mathfrak{T}": "\u{1D517}", "\\mathfrak{U}": "\u{1D518}", "\\mathfrak{V}": "\u{1D519}", "\\mathfrak{W}": "\u{1D51A}", "\\mathfrak{X}": "\u{1D51B}", "\\mathfrak{Y}": "\u{1D51C}", "\\mathfrak{Z}": "\u2128", "\\mathfrak{a}": "\u{1D51E}", "\\mathfrak{b}": "\u{1D51F}", "\\mathfrak{c}": "\u{1D520}", "\\mathfrak{d}": "\u{1D521}", "\\mathfrak{e}": "\u{1D522}", "\\mathfrak{f}": "\u{1D523}", "\\mathfrak{g}": "\u{1D524}", "\\mathfrak{h}": "\u{1D525}", "\\mathfrak{i}": "\u{1D526}", "\\mathfrak{j}": "\u{1D527}", "\\mathfrak{k}": "\u{1D528}", "\\mathfrak{l}": "\u{1D529}", "\\mathfrak{m}": "\u{1D52A}", "\\mathfrak{n}": "\u{1D52B}", "\\mathfrak{o}": "\u{1D52C}", "\\mathfrak{p}": "\u{1D52D}", "\\mathfrak{q}": "\u{1D52E}", "\\mathfrak{r}": "\u{1D52F}", "\\mathfrak{s}": "\u{1D530}", "\\mathfrak{t}": "\u{1D531}", "\\mathfrak{u}": "\u{1D532}", "\\mathfrak{v}": "\u{1D533}", "\\mathfrak{w}": "\u{1D534}", "\\mathfrak{x}": "\u{1D535}", "\\mathfrak{y}": "\u{1D536}", "\\mathfrak{z}": "\u{1D537}", "\\mathhyphen": "\u2010", "\\mathmit{A}": "\u{1D4D0}", "\\mathmit{B}": "\u{1D4D1}", "\\mathmit{C}": "\u{1D4D2}", "\\mathmit{D}": "\u{1D4D3}", "\\mathmit{E}": "\u{1D4D4}", "\\mathmit{F}": "\u{1D4D5}", "\\mathmit{G}": "\u{1D4D6}", "\\mathmit{H}": "\u{1D4D7}", "\\mathmit{I}": "\u{1D4D8}", "\\mathmit{J}": "\u{1D4D9}", "\\mathmit{K}": "\u{1D4DA}", "\\mathmit{L}": "\u{1D4DB}", "\\mathmit{M}": "\u{1D4DC}", "\\mathmit{N}": "\u{1D4DD}", "\\mathmit{O}": "\u{1D4DE}", "\\mathmit{P}": "\u{1D4DF}", "\\mathmit{Q}": "\u{1D4E0}", "\\mathmit{R}": "\u{1D4E1}", "\\mathmit{S}": "\u{1D4E2}", "\\mathmit{T}": "\u{1D4E3}", "\\mathmit{U}": "\u{1D4E4}", "\\mathmit{V}": "\u{1D4E5}", "\\mathmit{W}": "\u{1D4E6}", "\\mathmit{X}": "\u{1D4E7}", "\\mathmit{Y}": "\u{1D4E8}", "\\mathmit{Z}": "\u{1D4E9}", "\\mathmit{a}": "\u{1D4EA}", "\\mathmit{b}": "\u{1D4EB}", "\\mathmit{c}": "\u{1D4EC}", "\\mathmit{d}": "\u{1D4ED}", "\\mathmit{e}": "\u{1D4EE}", "\\mathmit{f}": "\u{1D4EF}", "\\mathmit{g}": "\u{1D4F0}", "\\mathmit{h}": "\u{1D4F1}", "\\mathmit{i}": "\u{1D4F2}", "\\mathmit{j}": "\u{1D4F3}", "\\mathmit{k}": "\u{1D4F4}", "\\mathmit{l}": "\u{1D4F5}", "\\mathmit{m}": "\u{1D4F6}", "\\mathmit{n}": "\u{1D4F7}", "\\mathmit{o}": "\u{1D4F8}", "\\mathmit{p}": "\u{1D4F9}", "\\mathmit{q}": "\u{1D4FA}", "\\mathmit{r}": "\u{1D4FB}", "\\mathmit{s}": "\u{1D4FC}", "\\mathmit{t}": "\u{1D4FD}", "\\mathmit{u}": "\u{1D4FE}", "\\mathmit{v}": "\u{1D4FF}", "\\mathmit{w}": "\u{1D500}", "\\mathmit{x}": "\u{1D501}", "\\mathmit{y}": "\u{1D502}", "\\mathmit{z}": "\u{1D503}", "\\mathoctothorpe": "#", "\\mathparagraph": "\xB6", "\\mathpercent": "%", "\\mathperiod": ".", "\\mathplus": "+", "\\mathquestion": "?", "\\mathratio": "\u2236", "\\mathring": "\u030A", "\\mathrm{'Y}": "\u03A5\u0301", "\\mathrm{'\\Omega}": "\u03A9\u0301", "\\mathrm{\\ddot{I}}": "\u0399\u0308", "\\mathrm{\\ddot{Y}}": "\u03A5\u0308", "\\mathscr{A}": "\u{1D49C}", "\\mathscr{B}": "\u212C", "\\mathscr{C}": "\u{1D49E}", "\\mathscr{D}": "\u{1D49F}", "\\mathscr{E}": "\u2130", "\\mathscr{F}": "\u2131", "\\mathscr{G}": "\u{1D4A2}", "\\mathscr{H}": "\u210B", "\\mathscr{I}": "\u2110", "\\mathscr{J}": "\u{1D4A5}", "\\mathscr{K}": "\u{1D4A6}", "\\mathscr{L}": "\u2112", "\\mathscr{M}": "\u2133", "\\mathscr{N}": "\u{1D4A9}", "\\mathscr{O}": "\u{1D4AA}", "\\mathscr{P}": "\u{1D4AB}", "\\mathscr{Q}": "\u{1D4AC}", "\\mathscr{R}": "\u211B", "\\mathscr{S}": "\u{1D4AE}", "\\mathscr{T}": "\u{1D4AF}", "\\mathscr{U}": "\u{1D4B0}", "\\mathscr{V}": "\u{1D4B1}", "\\mathscr{W}": "\u{1D4B2}", "\\mathscr{X}": "\u{1D4B3}", "\\mathscr{Y}": "\u{1D4B4}", "\\mathscr{Z}": "\u{1D4B5}", "\\mathscr{a}": "\u{1D4B6}", "\\mathscr{b}": "\u{1D4B7}", "\\mathscr{c}": "\u{1D4B8}", "\\mathscr{d}": "\u{1D4B9}", "\\mathscr{e}": "\u212F", "\\mathscr{f}": "\u{1D4BB}", "\\mathscr{g}": "\u210A", "\\mathscr{h}": "\u{1D4BD}", "\\mathscr{i}": "\u{1D4BE}", "\\mathscr{j}": "\u{1D4BF}", "\\mathscr{k}": "\u{1D4C0}", "\\mathscr{l}": "\u{1D4C1}", "\\mathscr{m}": "\u{1D4C2}", "\\mathscr{n}": "\u{1D4C3}", "\\mathscr{o}": "\u2134", "\\mathscr{p}": "\u{1D4C5}", "\\mathscr{q}": "\u{1D4C6}", "\\mathscr{r}": "\u{1D4C7}", "\\mathscr{s}": "\u{1D4C8}", "\\mathscr{t}": "\u{1D4C9}", "\\mathscr{u}": "\u{1D4CA}", "\\mathscr{v}": "\u{1D4CB}", "\\mathscr{w}": "\u{1D4CC}", "\\mathscr{x}": "\u{1D4CD}", "\\mathscr{y}": "\u{1D4CE}", "\\mathscr{z}": "\u{1D4CF}", "\\mathsection": "\xA7", "\\mathsemicolon": ";", "\\mathsfbfsl{A}": "\u{1D63C}", "\\mathsfbfsl{B}": "\u{1D63D}", "\\mathsfbfsl{C}": "\u{1D63E}", "\\mathsfbfsl{D}": "\u{1D63F}", "\\mathsfbfsl{E}": "\u{1D640}", "\\mathsfbfsl{F}": "\u{1D641}", "\\mathsfbfsl{G}": "\u{1D642}", "\\mathsfbfsl{H}": "\u{1D643}", "\\mathsfbfsl{I}": "\u{1D644}", "\\mathsfbfsl{J}": "\u{1D645}", "\\mathsfbfsl{K}": "\u{1D646}", "\\mathsfbfsl{L}": "\u{1D647}", "\\mathsfbfsl{M}": "\u{1D648}", "\\mathsfbfsl{N}": "\u{1D649}", "\\mathsfbfsl{O}": "\u{1D64A}", "\\mathsfbfsl{P}": "\u{1D64B}", "\\mathsfbfsl{Q}": "\u{1D64C}", "\\mathsfbfsl{R}": "\u{1D64D}", "\\mathsfbfsl{S}": "\u{1D64E}", "\\mathsfbfsl{T}": "\u{1D64F}", "\\mathsfbfsl{U}": "\u{1D650}", "\\mathsfbfsl{V}": "\u{1D651}", "\\mathsfbfsl{W}": "\u{1D652}", "\\mathsfbfsl{X}": "\u{1D653}", "\\mathsfbfsl{Y}": "\u{1D654}", "\\mathsfbfsl{Z}": "\u{1D655}", "\\mathsfbfsl{\\Delta}": "\u{1D793}", "\\mathsfbfsl{\\Gamma}": "\u{1D792}", "\\mathsfbfsl{\\Lambda}": "\u{1D79A}", "\\mathsfbfsl{\\Omega}": "\u{1D7A8}", "\\mathsfbfsl{\\Phi}": "\u{1D7A5}", "\\mathsfbfsl{\\Pi}": "\u{1D79F}", "\\mathsfbfsl{\\Psi}": "\u{1D7A7}", "\\mathsfbfsl{\\Sigma}": "\u{1D7A2}", "\\mathsfbfsl{\\Theta}": "\u{1D797}", "\\mathsfbfsl{\\Upsilon}": "\u{1D7A4}", "\\mathsfbfsl{\\Xi}": "\u{1D79D}", "\\mathsfbfsl{\\alpha}": "\u{1D7AA}", "\\mathsfbfsl{\\beta}": "\u{1D7AB}", "\\mathsfbfsl{\\chi}": "\u{1D7C0}", "\\mathsfbfsl{\\delta}": "\u{1D7AD}", "\\mathsfbfsl{\\eta}": "\u{1D7B0}", "\\mathsfbfsl{\\gamma}": "\u{1D7AC}", "\\mathsfbfsl{\\imath}": "\u{1D7B2}", "\\mathsfbfsl{\\kappa}": "\u{1D7B3}", "\\mathsfbfsl{\\lambda}": "\u{1D7B4}", "\\mathsfbfsl{\\nabla}": "\u{1D7A9}", "\\mathsfbfsl{\\omega}": "\u{1D7C2}", "\\mathsfbfsl{\\phi}": "\u{1D7C7}", "\\mathsfbfsl{\\pi}": "\u{1D7B9}", "\\mathsfbfsl{\\psi}": "\u{1D7C1}", "\\mathsfbfsl{\\rho}": "\u{1D7BA}", "\\mathsfbfsl{\\sigma}": "\u{1D7BC}", "\\mathsfbfsl{\\tau}": "\u{1D7BD}", "\\mathsfbfsl{\\theta}": "\u{1D7B1}", "\\mathsfbfsl{\\upsilon}": "\u{1D7BE}", "\\mathsfbfsl{\\varepsilon}": "\u{1D7AE}", "\\mathsfbfsl{\\varkappa}": "\u{1D7C6}", "\\mathsfbfsl{\\varphi}": "\u{1D7BF}", "\\mathsfbfsl{\\varpi}": "\u{1D7C9}", "\\mathsfbfsl{\\varrho}": "\u{1D7C8}", "\\mathsfbfsl{\\varsigma}": "\u{1D7BB}", "\\mathsfbfsl{\\vartheta}": "\u{1D7C5}", "\\mathsfbfsl{\\xi}": "\u{1D7B7}", "\\mathsfbfsl{\\zeta}": "\u{1D7AF}", "\\mathsfbfsl{a}": "\u{1D656}", "\\mathsfbfsl{b}": "\u{1D657}", "\\mathsfbfsl{c}": "\u{1D658}", "\\mathsfbfsl{d}": "\u{1D659}", "\\mathsfbfsl{e}": "\u{1D65A}", "\\mathsfbfsl{f}": "\u{1D65B}", "\\mathsfbfsl{g}": "\u{1D65C}", "\\mathsfbfsl{h}": "\u{1D65D}", "\\mathsfbfsl{i}": "\u{1D65E}", "\\mathsfbfsl{j}": "\u{1D65F}", "\\mathsfbfsl{k}": "\u{1D660}", "\\mathsfbfsl{l}": "\u{1D661}", "\\mathsfbfsl{m}": "\u{1D662}", "\\mathsfbfsl{n}": "\u{1D663}", "\\mathsfbfsl{o}": "\u{1D664}", "\\mathsfbfsl{p}": "\u{1D665}", "\\mathsfbfsl{q}": "\u{1D666}", "\\mathsfbfsl{r}": "\u{1D667}", "\\mathsfbfsl{s}": "\u{1D668}", "\\mathsfbfsl{t}": "\u{1D669}", "\\mathsfbfsl{u}": "\u{1D66A}", "\\mathsfbfsl{v}": "\u{1D66B}", "\\mathsfbfsl{w}": "\u{1D66C}", "\\mathsfbfsl{x}": "\u{1D66D}", "\\mathsfbfsl{y}": "\u{1D66E}", "\\mathsfbfsl{z}": "\u{1D66F}", "\\mathsfbf{0}": "\u{1D7EC}", "\\mathsfbf{1}": "\u{1D7ED}", "\\mathsfbf{2}": "\u{1D7EE}", "\\mathsfbf{3}": "\u{1D7EF}", "\\mathsfbf{4}": "\u{1D7F0}", "\\mathsfbf{5}": "\u{1D7F1}", "\\mathsfbf{6}": "\u{1D7F2}", "\\mathsfbf{7}": "\u{1D7F3}", "\\mathsfbf{8}": "\u{1D7F4}", "\\mathsfbf{9}": "\u{1D7F5}", "\\mathsfbf{A}": "\u{1D5D4}", "\\mathsfbf{B}": "\u{1D5D5}", "\\mathsfbf{C}": "\u{1D5D6}", "\\mathsfbf{D}": "\u{1D5D7}", "\\mathsfbf{E}": "\u{1D5D8}", "\\mathsfbf{F}": "\u{1D5D9}", "\\mathsfbf{G}": "\u{1D5DA}", "\\mathsfbf{H}": "\u{1D5DB}", "\\mathsfbf{I}": "\u{1D5DC}", "\\mathsfbf{J}": "\u{1D5DD}", "\\mathsfbf{K}": "\u{1D5DE}", "\\mathsfbf{L}": "\u{1D5DF}", "\\mathsfbf{M}": "\u{1D5E0}", "\\mathsfbf{N}": "\u{1D5E1}", "\\mathsfbf{O}": "\u{1D5E2}", "\\mathsfbf{P}": "\u{1D5E3}", "\\mathsfbf{Q}": "\u{1D5E4}", "\\mathsfbf{R}": "\u{1D5E5}", "\\mathsfbf{S}": "\u{1D5E6}", "\\mathsfbf{T}": "\u{1D5E7}", "\\mathsfbf{U}": "\u{1D5E8}", "\\mathsfbf{V}": "\u{1D5E9}", "\\mathsfbf{W}": "\u{1D5EA}", "\\mathsfbf{X}": "\u{1D5EB}", "\\mathsfbf{Y}": "\u{1D5EC}", "\\mathsfbf{Z}": "\u{1D5ED}", "\\mathsfbf{\\Delta}": "\u{1D759}", "\\mathsfbf{\\Gamma}": "\u{1D758}", "\\mathsfbf{\\Lambda}": "\u{1D760}", "\\mathsfbf{\\Omega}": "\u{1D76E}", "\\mathsfbf{\\Phi}": "\u{1D76B}", "\\mathsfbf{\\Pi}": "\u{1D765}", "\\mathsfbf{\\Psi}": "\u{1D76D}", "\\mathsfbf{\\Sigma}": "\u{1D768}", "\\mathsfbf{\\Theta}": "\u{1D75D}", "\\mathsfbf{\\Upsilon}": "\u{1D76A}", "\\mathsfbf{\\Xi}": "\u{1D763}", "\\mathsfbf{\\alpha}": "\u{1D770}", "\\mathsfbf{\\beta}": "\u{1D771}", "\\mathsfbf{\\chi}": "\u{1D786}", "\\mathsfbf{\\delta}": "\u{1D773}", "\\mathsfbf{\\eta}": "\u{1D776}", "\\mathsfbf{\\gamma}": "\u{1D772}", "\\mathsfbf{\\imath}": "\u{1D778}", "\\mathsfbf{\\kappa}": "\u{1D779}", "\\mathsfbf{\\lambda}": "\u{1D77A}", "\\mathsfbf{\\nabla}": "\u{1D76F}", "\\mathsfbf{\\omega}": "\u{1D788}", "\\mathsfbf{\\phi}": "\u{1D78D}", "\\mathsfbf{\\pi}": "\u{1D77F}", "\\mathsfbf{\\psi}": "\u{1D787}", "\\mathsfbf{\\rho}": "\u{1D780}", "\\mathsfbf{\\sigma}": "\u{1D782}", "\\mathsfbf{\\tau}": "\u{1D783}", "\\mathsfbf{\\theta}": "\u{1D777}", "\\mathsfbf{\\upsilon}": "\u{1D784}", "\\mathsfbf{\\varepsilon}": "\u{1D774}", "\\mathsfbf{\\varkappa}": "\u{1D78C}", "\\mathsfbf{\\varphi}": "\u{1D785}", "\\mathsfbf{\\varpi}": "\u{1D78F}", "\\mathsfbf{\\varrho}": "\u{1D78E}", "\\mathsfbf{\\varsigma}": "\u{1D781}", "\\mathsfbf{\\vartheta}": "\u{1D78B}", "\\mathsfbf{\\xi}": "\u{1D77D}", "\\mathsfbf{\\zeta}": "\u{1D775}", "\\mathsfbf{a}": "\u{1D5EE}", "\\mathsfbf{b}": "\u{1D5EF}", "\\mathsfbf{c}": "\u{1D5F0}", "\\mathsfbf{d}": "\u{1D5F1}", "\\mathsfbf{e}": "\u{1D5F2}", "\\mathsfbf{f}": "\u{1D5F3}", "\\mathsfbf{g}": "\u{1D5F4}", "\\mathsfbf{h}": "\u{1D5F5}", "\\mathsfbf{i}": "\u{1D5F6}", "\\mathsfbf{j}": "\u{1D5F7}", "\\mathsfbf{k}": "\u{1D5F8}", "\\mathsfbf{l}": "\u{1D5F9}", "\\mathsfbf{m}": "\u{1D5FA}", "\\mathsfbf{n}": "\u{1D5FB}", "\\mathsfbf{o}": "\u{1D5FC}", "\\mathsfbf{p}": "\u{1D5FD}", "\\mathsfbf{q}": "\u{1D5FE}", "\\mathsfbf{r}": "\u{1D5FF}", "\\mathsfbf{s}": "\u{1D600}", "\\mathsfbf{t}": "\u{1D601}", "\\mathsfbf{u}": "\u{1D602}", "\\mathsfbf{v}": "\u{1D603}", "\\mathsfbf{w}": "\u{1D604}", "\\mathsfbf{x}": "\u{1D605}", "\\mathsfbf{y}": "\u{1D606}", "\\mathsfbf{z}": "\u{1D607}", "\\mathsfsl{A}": "\u{1D608}", "\\mathsfsl{B}": "\u{1D609}", "\\mathsfsl{C}": "\u{1D60A}", "\\mathsfsl{D}": "\u{1D60B}", "\\mathsfsl{E}": "\u{1D60C}", "\\mathsfsl{F}": "\u{1D60D}", "\\mathsfsl{G}": "\u{1D60E}", "\\mathsfsl{H}": "\u{1D60F}", "\\mathsfsl{I}": "\u{1D610}", "\\mathsfsl{J}": "\u{1D611}", "\\mathsfsl{K}": "\u{1D612}", "\\mathsfsl{L}": "\u{1D613}", "\\mathsfsl{M}": "\u{1D614}", "\\mathsfsl{N}": "\u{1D615}", "\\mathsfsl{O}": "\u{1D616}", "\\mathsfsl{P}": "\u{1D617}", "\\mathsfsl{Q}": "\u{1D618}", "\\mathsfsl{R}": "\u{1D619}", "\\mathsfsl{S}": "\u{1D61A}", "\\mathsfsl{T}": "\u{1D61B}", "\\mathsfsl{U}": "\u{1D61C}", "\\mathsfsl{V}": "\u{1D61D}", "\\mathsfsl{W}": "\u{1D61E}", "\\mathsfsl{X}": "\u{1D61F}", "\\mathsfsl{Y}": "\u{1D620}", "\\mathsfsl{Z}": "\u{1D621}", "\\mathsfsl{a}": "\u{1D622}", "\\mathsfsl{b}": "\u{1D623}", "\\mathsfsl{c}": "\u{1D624}", "\\mathsfsl{d}": "\u{1D625}", "\\mathsfsl{e}": "\u{1D626}", "\\mathsfsl{f}": "\u{1D627}", "\\mathsfsl{g}": "\u{1D628}", "\\mathsfsl{h}": "\u{1D629}", "\\mathsfsl{i}": "\u{1D62A}", "\\mathsfsl{j}": "\u{1D62B}", "\\mathsfsl{k}": "\u{1D62C}", "\\mathsfsl{l}": "\u{1D62D}", "\\mathsfsl{m}": "\u{1D62E}", "\\mathsfsl{n}": "\u{1D62F}", "\\mathsfsl{o}": "\u{1D630}", "\\mathsfsl{p}": "\u{1D631}", "\\mathsfsl{q}": "\u{1D632}", "\\mathsfsl{r}": "\u{1D633}", "\\mathsfsl{s}": "\u{1D634}", "\\mathsfsl{t}": "\u{1D635}", "\\mathsfsl{u}": "\u{1D636}", "\\mathsfsl{v}": "\u{1D637}", "\\mathsfsl{w}": "\u{1D638}", "\\mathsfsl{x}": "\u{1D639}", "\\mathsfsl{y}": "\u{1D63A}", "\\mathsfsl{z}": "\u{1D63B}", "\\mathsf{0}": "\u{1D7E2}", "\\mathsf{1}": "\u{1D7E3}", "\\mathsf{2}": "\u{1D7E4}", "\\mathsf{3}": "\u{1D7E5}", "\\mathsf{4}": "\u{1D7E6}", "\\mathsf{5}": "\u{1D7E7}", "\\mathsf{6}": "\u{1D7E8}", "\\mathsf{7}": "\u{1D7E9}", "\\mathsf{8}": "\u{1D7EA}", "\\mathsf{9}": "\u{1D7EB}", "\\mathsf{A}": "\u{1D5A0}", "\\mathsf{B}": "\u{1D5A1}", "\\mathsf{C}": "\u{1D5A2}", "\\mathsf{D}": "\u{1D5A3}", "\\mathsf{E}": "\u{1D5A4}", "\\mathsf{F}": "\u{1D5A5}", "\\mathsf{G}": "\u{1D5A6}", "\\mathsf{H}": "\u{1D5A7}", "\\mathsf{I}": "\u{1D5A8}", "\\mathsf{J}": "\u{1D5A9}", "\\mathsf{K}": "\u{1D5AA}", "\\mathsf{L}": "\u{1D5AB}", "\\mathsf{M}": "\u{1D5AC}", "\\mathsf{N}": "\u{1D5AD}", "\\mathsf{O}": "\u{1D5AE}", "\\mathsf{P}": "\u{1D5AF}", "\\mathsf{Q}": "\u{1D5B0}", "\\mathsf{R}": "\u{1D5B1}", "\\mathsf{S}": "\u{1D5B2}", "\\mathsf{T}": "\u{1D5B3}", "\\mathsf{U}": "\u{1D5B4}", "\\mathsf{V}": "\u{1D5B5}", "\\mathsf{W}": "\u{1D5B6}", "\\mathsf{X}": "\u{1D5B7}", "\\mathsf{Y}": "\u{1D5B8}", "\\mathsf{Z}": "\u{1D5B9}", "\\mathsf{a}": "\u{1D5BA}", "\\mathsf{b}": "\u{1D5BB}", "\\mathsf{c}": "\u{1D5BC}", "\\mathsf{d}": "\u{1D5BD}", "\\mathsf{e}": "\u{1D5BE}", "\\mathsf{f}": "\u{1D5BF}", "\\mathsf{g}": "\u{1D5C0}", "\\mathsf{h}": "\u{1D5C1}", "\\mathsf{i}": "\u{1D5C2}", "\\mathsf{j}": "\u{1D5C3}", "\\mathsf{k}": "\u{1D5C4}", "\\mathsf{l}": "\u{1D5C5}", "\\mathsf{m}": "\u{1D5C6}", "\\mathsf{n}": "\u{1D5C7}", "\\mathsf{o}": "\u{1D5C8}", "\\mathsf{p}": "\u{1D5C9}", "\\mathsf{q}": "\u{1D5CA}", "\\mathsf{r}": "\u{1D5CB}", "\\mathsf{s}": "\u{1D5CC}", "\\mathsf{t}": "\u{1D5CD}", "\\mathsf{u}": "\u{1D5CE}", "\\mathsf{v}": "\u{1D5CF}", "\\mathsf{w}": "\u{1D5D0}", "\\mathsf{x}": "\u{1D5D1}", "\\mathsf{y}": "\u{1D5D2}", "\\mathsf{z}": "\u{1D5D3}", "\\mathslash": "/", "\\mathsterling": "\xA3", "\\mathtt{0}": "\u{1D7F6}", "\\mathtt{1}": "\u{1D7F7}", "\\mathtt{2}": "\u{1D7F8}", "\\mathtt{3}": "\u{1D7F9}", "\\mathtt{4}": "\u{1D7FA}", "\\mathtt{5}": "\u{1D7FB}", "\\mathtt{6}": "\u{1D7FC}", "\\mathtt{7}": "\u{1D7FD}", "\\mathtt{8}": "\u{1D7FE}", "\\mathtt{9}": "\u{1D7FF}", "\\mathtt{A}": "\u{1D670}", "\\mathtt{B}": "\u{1D671}", "\\mathtt{C}": "\u{1D672}", "\\mathtt{D}": "\u{1D673}", "\\mathtt{E}": "\u{1D674}", "\\mathtt{F}": "\u{1D675}", "\\mathtt{G}": "\u{1D676}", "\\mathtt{H}": "\u{1D677}", "\\mathtt{I}": "\u{1D678}", "\\mathtt{J}": "\u{1D679}", "\\mathtt{K}": "\u{1D67A}", "\\mathtt{L}": "\u{1D67B}", "\\mathtt{M}": "\u{1D67C}", "\\mathtt{N}": "\u{1D67D}", "\\mathtt{O}": "\u{1D67E}", "\\mathtt{P}": "\u{1D67F}", "\\mathtt{Q}": "\u{1D680}", "\\mathtt{R}": "\u{1D681}", "\\mathtt{S}": "\u{1D682}", "\\mathtt{T}": "\u{1D683}", "\\mathtt{U}": "\u{1D684}", "\\mathtt{V}": "\u{1D685}", "\\mathtt{W}": "\u{1D686}", "\\mathtt{X}": "\u{1D687}", "\\mathtt{Y}": "\u{1D688}", "\\mathtt{Z}": "\u{1D689}", "\\mathtt{a}": "\u{1D68A}", "\\mathtt{b}": "\u{1D68B}", "\\mathtt{c}": "\u{1D68C}", "\\mathtt{d}": "\u{1D68D}", "\\mathtt{e}": "\u{1D68E}", "\\mathtt{f}": "\u{1D68F}", "\\mathtt{g}": "\u{1D690}", "\\mathtt{h}": "\u{1D691}", "\\mathtt{i}": "\u{1D692}", "\\mathtt{j}": "\u{1D693}", "\\mathtt{k}": "\u{1D694}", "\\mathtt{l}": "\u{1D695}", "\\mathtt{m}": "\u{1D696}", "\\mathtt{n}": "\u{1D697}", "\\mathtt{o}": "\u{1D698}", "\\mathtt{p}": "\u{1D699}", "\\mathtt{q}": "\u{1D69A}", "\\mathtt{r}": "\u{1D69B}", "\\mathtt{s}": "\u{1D69C}", "\\mathtt{t}": "\u{1D69D}", "\\mathtt{u}": "\u{1D69E}", "\\mathtt{v}": "\u{1D69F}", "\\mathtt{w}": "\u{1D6A0}", "\\mathtt{x}": "\u{1D6A1}", "\\mathtt{y}": "\u{1D6A2}", "\\mathtt{z}": "\u{1D6A3}", "\\mathunderbar": "\u0332", "\\mathvisiblespace": "\u2423", "\\mbfA": "\u{1D400}", "\\mbfAlpha": "\u{1D6A8}", "\\mbfB": "\u{1D401}", "\\mbfBeta": "\u{1D6A9}", "\\mbfC": "\u{1D402}", "\\mbfChi": "\u{1D6BE}", "\\mbfD": "\u{1D403}", "\\mbfDelta": "\u{1D6AB}", "\\mbfDigamma": "\u{1D7CA}", "\\mbfE": "\u{1D404}", "\\mbfEpsilon": "\u{1D6AC}", "\\mbfEta": "\u{1D6AE}", "\\mbfF": "\u{1D405}", "\\mbfG": "\u{1D406}", "\\mbfGamma": "\u{1D6AA}", "\\mbfH": "\u{1D407}", "\\mbfI": "\u{1D408}", "\\mbfIota": "\u{1D6B0}", "\\mbfJ": "\u{1D409}", "\\mbfK": "\u{1D40A}", "\\mbfKappa": "\u{1D6B1}", "\\mbfL": "\u{1D40B}", "\\mbfLambda": "\u{1D6B2}", "\\mbfM": "\u{1D40C}", "\\mbfMu": "\u{1D6B3}", "\\mbfN": "\u{1D40D}", "\\mbfNu": "\u{1D6B4}", "\\mbfO": "\u{1D40E}", "\\mbfOmega": "\u{1D6C0}", "\\mbfOmicron": "\u{1D6B6}", "\\mbfP": "\u{1D40F}", "\\mbfPhi": "\u{1D6BD}", "\\mbfPi": "\u{1D6B7}", "\\mbfPsi": "\u{1D6BF}", "\\mbfQ": "\u{1D410}", "\\mbfR": "\u{1D411}", "\\mbfRho": "\u{1D6B8}", "\\mbfS": "\u{1D412}", "\\mbfSigma": "\u{1D6BA}", "\\mbfT": "\u{1D413}", "\\mbfTau": "\u{1D6BB}", "\\mbfTheta": "\u{1D6AF}", "\\mbfU": "\u{1D414}", "\\mbfUpsilon": "\u{1D6BC}", "\\mbfV": "\u{1D415}", "\\mbfW": "\u{1D416}", "\\mbfX": "\u{1D417}", "\\mbfXi": "\u{1D6B5}", "\\mbfY": "\u{1D418}", "\\mbfZ": "\u{1D419}", "\\mbfZeta": "\u{1D6AD}", "\\mbfa": "\u{1D41A}", "\\mbfalpha": "\u{1D6C2}", "\\mbfb": "\u{1D41B}", "\\mbfbeta": "\u{1D6C3}", "\\mbfc": "\u{1D41C}", "\\mbfchi": "\u{1D6D8}", "\\mbfd": "\u{1D41D}", "\\mbfdelta": "\u{1D6C5}", "\\mbfdigamma": "\u{1D7CB}", "\\mbfe": "\u{1D41E}", "\\mbfeight": "\u{1D7D6}", "\\mbfepsilon": "\u{1D6DC}", "\\mbfeta": "\u{1D6C8}", "\\mbff": "\u{1D41F}", "\\mbffive": "\u{1D7D3}", "\\mbffour": "\u{1D7D2}", "\\mbffrakA": "\u{1D56C}", "\\mbffrakB": "\u{1D56D}", "\\mbffrakC": "\u{1D56E}", "\\mbffrakD": "\u{1D56F}", "\\mbffrakE": "\u{1D570}", "\\mbffrakF": "\u{1D571}", "\\mbffrakG": "\u{1D572}", "\\mbffrakH": "\u{1D573}", "\\mbffrakI": "\u{1D574}", "\\mbffrakJ": "\u{1D575}", "\\mbffrakK": "\u{1D576}", "\\mbffrakL": "\u{1D577}", "\\mbffrakM": "\u{1D578}", "\\mbffrakN": "\u{1D579}", "\\mbffrakO": "\u{1D57A}", "\\mbffrakP": "\u{1D57B}", "\\mbffrakQ": "\u{1D57C}", "\\mbffrakR": "\u{1D57D}", "\\mbffrakS": "\u{1D57E}", "\\mbffrakT": "\u{1D57F}", "\\mbffrakU": "\u{1D580}", "\\mbffrakV": "\u{1D581}", "\\mbffrakW": "\u{1D582}", "\\mbffrakX": "\u{1D583}", "\\mbffrakY": "\u{1D584}", "\\mbffrakZ": "\u{1D585}", "\\mbffraka": "\u{1D586}", "\\mbffrakb": "\u{1D587}", "\\mbffrakc": "\u{1D588}", "\\mbffrakd": "\u{1D589}", "\\mbffrake": "\u{1D58A}", "\\mbffrakf": "\u{1D58B}", "\\mbffrakg": "\u{1D58C}", "\\mbffrakh": "\u{1D58D}", "\\mbffraki": "\u{1D58E}", "\\mbffrakj": "\u{1D58F}", "\\mbffrakk": "\u{1D590}", "\\mbffrakl": "\u{1D591}", "\\mbffrakm": "\u{1D592}", "\\mbffrakn": "\u{1D593}", "\\mbffrako": "\u{1D594}", "\\mbffrakp": "\u{1D595}", "\\mbffrakq": "\u{1D596}", "\\mbffrakr": "\u{1D597}", "\\mbffraks": "\u{1D598}", "\\mbffrakt": "\u{1D599}", "\\mbffraku": "\u{1D59A}", "\\mbffrakv": "\u{1D59B}", "\\mbffrakw": "\u{1D59C}", "\\mbffrakx": "\u{1D59D}", "\\mbffraky": "\u{1D59E}", "\\mbffrakz": "\u{1D59F}", "\\mbfg": "\u{1D420}", "\\mbfgamma": "\u{1D6C4}", "\\mbfh": "\u{1D421}", "\\mbfi": "\u{1D422}", "\\mbfiota": "\u{1D6CA}", "\\mbfitA": "\u{1D468}", "\\mbfitAlpha": "\u{1D71C}", "\\mbfitB": "\u{1D469}", "\\mbfitBeta": "\u{1D71D}", "\\mbfitC": "\u{1D46A}", "\\mbfitChi": "\u{1D732}", "\\mbfitD": "\u{1D46B}", "\\mbfitDelta": "\u{1D71F}", "\\mbfitE": "\u{1D46C}", "\\mbfitEpsilon": "\u{1D720}", "\\mbfitEta": "\u{1D722}", "\\mbfitF": "\u{1D46D}", "\\mbfitG": "\u{1D46E}", "\\mbfitGamma": "\u{1D71E}", "\\mbfitH": "\u{1D46F}", "\\mbfitI": "\u{1D470}", "\\mbfitIota": "\u{1D724}", "\\mbfitJ": "\u{1D471}", "\\mbfitK": "\u{1D472}", "\\mbfitKappa": "\u{1D725}", "\\mbfitL": "\u{1D473}", "\\mbfitLambda": "\u{1D726}", "\\mbfitM": "\u{1D474}", "\\mbfitMu": "\u{1D727}", "\\mbfitN": "\u{1D475}", "\\mbfitNu": "\u{1D728}", "\\mbfitO": "\u{1D476}", "\\mbfitOmega": "\u{1D734}", "\\mbfitOmicron": "\u{1D72A}", "\\mbfitP": "\u{1D477}", "\\mbfitPhi": "\u{1D731}", "\\mbfitPi": "\u{1D72B}", "\\mbfitPsi": "\u{1D733}", "\\mbfitQ": "\u{1D478}", "\\mbfitR": "\u{1D479}", "\\mbfitRho": "\u{1D72C}", "\\mbfitS": "\u{1D47A}", "\\mbfitSigma": "\u{1D72E}", "\\mbfitT": "\u{1D47B}", "\\mbfitTau": "\u{1D72F}", "\\mbfitTheta": "\u{1D723}", "\\mbfitU": "\u{1D47C}", "\\mbfitUpsilon": "\u{1D730}", "\\mbfitV": "\u{1D47D}", "\\mbfitW": "\u{1D47E}", "\\mbfitX": "\u{1D47F}", "\\mbfitXi": "\u{1D729}", "\\mbfitY": "\u{1D480}", "\\mbfitZ": "\u{1D481}", "\\mbfitZeta": "\u{1D721}", "\\mbfita": "\u{1D482}", "\\mbfitalpha": "\u{1D736}", "\\mbfitb": "\u{1D483}", "\\mbfitbeta": "\u{1D737}", "\\mbfitc": "\u{1D484}", "\\mbfitchi": "\u{1D74C}", "\\mbfitd": "\u{1D485}", "\\mbfitdelta": "\u{1D739}", "\\mbfite": "\u{1D486}", "\\mbfitepsilon": "\u{1D750}", "\\mbfiteta": "\u{1D73C}", "\\mbfitf": "\u{1D487}", "\\mbfitg": "\u{1D488}", "\\mbfitgamma": "\u{1D738}", "\\mbfith": "\u{1D489}", "\\mbfiti": "\u{1D48A}", "\\mbfitiota": "\u{1D73E}", "\\mbfitj": "\u{1D48B}", "\\mbfitk": "\u{1D48C}", "\\mbfitkappa": "\u{1D73F}", "\\mbfitl": "\u{1D48D}", "\\mbfitlambda": "\u{1D740}", "\\mbfitm": "\u{1D48E}", "\\mbfitmu": "\u{1D741}", "\\mbfitn": "\u{1D48F}", "\\mbfitnabla": "\u{1D735}", "\\mbfitnu": "\u{1D742}", "\\mbfito": "\u{1D490}", "\\mbfitomega": "\u{1D74E}", "\\mbfitomicron": "\u{1D744}", "\\mbfitp": "\u{1D491}", "\\mbfitpartial": "\u{1D74F}", "\\mbfitphi": "\u{1D753}", "\\mbfitpi": "\u{1D745}", "\\mbfitpsi": "\u{1D74D}", "\\mbfitq": "\u{1D492}", "\\mbfitr": "\u{1D493}", "\\mbfitrho": "\u{1D746}", "\\mbfits": "\u{1D494}", "\\mbfitsansA": "\u{1D63C}", "\\mbfitsansAlpha": "\u{1D790}", "\\mbfitsansB": "\u{1D63D}", "\\mbfitsansBeta": "\u{1D791}", "\\mbfitsansC": "\u{1D63E}", "\\mbfitsansChi": "\u{1D7A6}", "\\mbfitsansD": "\u{1D63F}", "\\mbfitsansDelta": "\u{1D793}", "\\mbfitsansE": "\u{1D640}", "\\mbfitsansEpsilon": "\u{1D794}", "\\mbfitsansEta": "\u{1D796}", "\\mbfitsansF": "\u{1D641}", "\\mbfitsansG": "\u{1D642}", "\\mbfitsansGamma": "\u{1D792}", "\\mbfitsansH": "\u{1D643}", "\\mbfitsansI": "\u{1D644}", "\\mbfitsansIota": "\u{1D798}", "\\mbfitsansJ": "\u{1D645}", "\\mbfitsansK": "\u{1D646}", "\\mbfitsansKappa": "\u{1D799}", "\\mbfitsansL": "\u{1D647}", "\\mbfitsansLambda": "\u{1D79A}", "\\mbfitsansM": "\u{1D648}", "\\mbfitsansMu": "\u{1D79B}", "\\mbfitsansN": "\u{1D649}", "\\mbfitsansNu": "\u{1D79C}", "\\mbfitsansO": "\u{1D64A}", "\\mbfitsansOmega": "\u{1D7A8}", "\\mbfitsansOmicron": "\u{1D79E}", "\\mbfitsansP": "\u{1D64B}", "\\mbfitsansPhi": "\u{1D7A5}", "\\mbfitsansPi": "\u{1D79F}", "\\mbfitsansPsi": "\u{1D7A7}", "\\mbfitsansQ": "\u{1D64C}", "\\mbfitsansR": "\u{1D64D}", "\\mbfitsansRho": "\u{1D7A0}", "\\mbfitsansS": "\u{1D64E}", "\\mbfitsansSigma": "\u{1D7A2}", "\\mbfitsansT": "\u{1D64F}", "\\mbfitsansTau": "\u{1D7A3}", "\\mbfitsansTheta": "\u{1D797}", "\\mbfitsansU": "\u{1D650}", "\\mbfitsansUpsilon": "\u{1D7A4}", "\\mbfitsansV": "\u{1D651}", "\\mbfitsansW": "\u{1D652}", "\\mbfitsansX": "\u{1D653}", "\\mbfitsansXi": "\u{1D79D}", "\\mbfitsansY": "\u{1D654}", "\\mbfitsansZ": "\u{1D655}", "\\mbfitsansZeta": "\u{1D795}", "\\mbfitsansa": "\u{1D656}", "\\mbfitsansalpha": "\u{1D7AA}", "\\mbfitsansb": "\u{1D657}", "\\mbfitsansbeta": "\u{1D7AB}", "\\mbfitsansc": "\u{1D658}", "\\mbfitsanschi": "\u{1D7C0}", "\\mbfitsansd": "\u{1D659}", "\\mbfitsansdelta": "\u{1D7AD}", "\\mbfitsanse": "\u{1D65A}", "\\mbfitsansepsilon": "\u{1D7C4}", "\\mbfitsanseta": "\u{1D7B0}", "\\mbfitsansf": "\u{1D65B}", "\\mbfitsansg": "\u{1D65C}", "\\mbfitsansgamma": "\u{1D7AC}", "\\mbfitsansh": "\u{1D65D}", "\\mbfitsansi": "\u{1D65E}", "\\mbfitsansiota": "\u{1D7B2}", "\\mbfitsansj": "\u{1D65F}", "\\mbfitsansk": "\u{1D660}", "\\mbfitsanskappa": "\u{1D7B3}", "\\mbfitsansl": "\u{1D661}", "\\mbfitsanslambda": "\u{1D7B4}", "\\mbfitsansm": "\u{1D662}", "\\mbfitsansmu": "\u{1D7B5}", "\\mbfitsansn": "\u{1D663}", "\\mbfitsansnabla": "\u{1D7A9}", "\\mbfitsansnu": "\u{1D7B6}", "\\mbfitsanso": "\u{1D664}", "\\mbfitsansomega": "\u{1D7C2}", "\\mbfitsansomicron": "\u{1D7B8}", "\\mbfitsansp": "\u{1D665}", "\\mbfitsanspartial": "\u{1D7C3}", "\\mbfitsansphi": "\u{1D7C7}", "\\mbfitsanspi": "\u{1D7B9}", "\\mbfitsanspsi": "\u{1D7C1}", "\\mbfitsansq": "\u{1D666}", "\\mbfitsansr": "\u{1D667}", "\\mbfitsansrho": "\u{1D7BA}", "\\mbfitsanss": "\u{1D668}", "\\mbfitsanssigma": "\u{1D7BC}", "\\mbfitsanst": "\u{1D669}", "\\mbfitsanstau": "\u{1D7BD}", "\\mbfitsanstheta": "\u{1D7B1}", "\\mbfitsansu": "\u{1D66A}", "\\mbfitsansupsilon": "\u{1D7BE}", "\\mbfitsansv": "\u{1D66B}", "\\mbfitsansvarTheta": "\u{1D7A1}", "\\mbfitsansvarepsilon": "\u{1D7AE}", "\\mbfitsansvarkappa": "\u{1D7C6}", "\\mbfitsansvarphi": "\u{1D7BF}", "\\mbfitsansvarpi": "\u{1D7C9}", "\\mbfitsansvarrho": "\u{1D7C8}", "\\mbfitsansvarsigma": "\u{1D7BB}", "\\mbfitsansvartheta": "\u{1D7C5}", "\\mbfitsansw": "\u{1D66C}", "\\mbfitsansx": "\u{1D66D}", "\\mbfitsansxi": "\u{1D7B7}", "\\mbfitsansy": "\u{1D66E}", "\\mbfitsansz": "\u{1D66F}", "\\mbfitsanszeta": "\u{1D7AF}", "\\mbfitsigma": "\u{1D748}", "\\mbfitt": "\u{1D495}", "\\mbfittau": "\u{1D749}", "\\mbfittheta": "\u{1D73D}", "\\mbfitu": "\u{1D496}", "\\mbfitupsilon": "\u{1D74A}", "\\mbfitv": "\u{1D497}", "\\mbfitvarTheta": "\u{1D72D}", "\\mbfitvarepsilon": "\u{1D73A}", "\\mbfitvarkappa": "\u{1D752}", "\\mbfitvarphi": "\u{1D74B}", "\\mbfitvarpi": "\u{1D755}", "\\mbfitvarrho": "\u{1D754}", "\\mbfitvarsigma": "\u{1D747}", "\\mbfitvartheta": "\u{1D751}", "\\mbfitw": "\u{1D498}", "\\mbfitx": "\u{1D499}", "\\mbfitxi": "\u{1D743}", "\\mbfity": "\u{1D49A}", "\\mbfitz": "\u{1D49B}", "\\mbfitzeta": "\u{1D73B}", "\\mbfj": "\u{1D423}", "\\mbfk": "\u{1D424}", "\\mbfkappa": "\u{1D6CB}", "\\mbfl": "\u{1D425}", "\\mbflambda": "\u{1D6CC}", "\\mbfm": "\u{1D426}", "\\mbfmu": "\u{1D6CD}", "\\mbfn": "\u{1D427}", "\\mbfnabla": "\u{1D6C1}", "\\mbfnine": "\u{1D7D7}", "\\mbfnu": "\u{1D6CE}", "\\mbfo": "\u{1D428}", "\\mbfomega": "\u{1D6DA}", "\\mbfomicron": "\u{1D6D0}", "\\mbfone": "\u{1D7CF}", "\\mbfp": "\u{1D429}", "\\mbfpartial": "\u{1D6DB}", "\\mbfphi": "\u{1D6DF}", "\\mbfpi": "\u{1D6D1}", "\\mbfpsi": "\u{1D6D9}", "\\mbfq": "\u{1D42A}", "\\mbfr": "\u{1D42B}", "\\mbfrho": "\u{1D6D2}", "\\mbfs": "\u{1D42C}", "\\mbfsansA": "\u{1D5D4}", "\\mbfsansAlpha": "\u{1D756}", "\\mbfsansB": "\u{1D5D5}", "\\mbfsansBeta": "\u{1D757}", "\\mbfsansC": "\u{1D5D6}", "\\mbfsansChi": "\u{1D76C}", "\\mbfsansD": "\u{1D5D7}", "\\mbfsansDelta": "\u{1D759}", "\\mbfsansE": "\u{1D5D8}", "\\mbfsansEpsilon": "\u{1D75A}", "\\mbfsansEta": "\u{1D75C}", "\\mbfsansF": "\u{1D5D9}", "\\mbfsansG": "\u{1D5DA}", "\\mbfsansGamma": "\u{1D758}", "\\mbfsansH": "\u{1D5DB}", "\\mbfsansI": "\u{1D5DC}", "\\mbfsansIota": "\u{1D75E}", "\\mbfsansJ": "\u{1D5DD}", "\\mbfsansK": "\u{1D5DE}", "\\mbfsansKappa": "\u{1D75F}", "\\mbfsansL": "\u{1D5DF}", "\\mbfsansLambda": "\u{1D760}", "\\mbfsansM": "\u{1D5E0}", "\\mbfsansMu": "\u{1D761}", "\\mbfsansN": "\u{1D5E1}", "\\mbfsansNu": "\u{1D762}", "\\mbfsansO": "\u{1D5E2}", "\\mbfsansOmega": "\u{1D76E}", "\\mbfsansOmicron": "\u{1D764}", "\\mbfsansP": "\u{1D5E3}", "\\mbfsansPhi": "\u{1D76B}", "\\mbfsansPi": "\u{1D765}", "\\mbfsansPsi": "\u{1D76D}", "\\mbfsansQ": "\u{1D5E4}", "\\mbfsansR": "\u{1D5E5}", "\\mbfsansRho": "\u{1D766}", "\\mbfsansS": "\u{1D5E6}", "\\mbfsansSigma": "\u{1D768}", "\\mbfsansT": "\u{1D5E7}", "\\mbfsansTau": "\u{1D769}", "\\mbfsansTheta": "\u{1D75D}", "\\mbfsansU": "\u{1D5E8}", "\\mbfsansUpsilon": "\u{1D76A}", "\\mbfsansV": "\u{1D5E9}", "\\mbfsansW": "\u{1D5EA}", "\\mbfsansX": "\u{1D5EB}", "\\mbfsansXi": "\u{1D763}", "\\mbfsansY": "\u{1D5EC}", "\\mbfsansZ": "\u{1D5ED}", "\\mbfsansZeta": "\u{1D75B}", "\\mbfsansa": "\u{1D5EE}", "\\mbfsansalpha": "\u{1D770}", "\\mbfsansb": "\u{1D5EF}", "\\mbfsansbeta": "\u{1D771}", "\\mbfsansc": "\u{1D5F0}", "\\mbfsanschi": "\u{1D786}", "\\mbfsansd": "\u{1D5F1}", "\\mbfsansdelta": "\u{1D773}", "\\mbfsanse": "\u{1D5F2}", "\\mbfsanseight": "\u{1D7F4}", "\\mbfsansepsilon": "\u{1D78A}", "\\mbfsanseta": "\u{1D776}", "\\mbfsansf": "\u{1D5F3}", "\\mbfsansfive": "\u{1D7F1}", "\\mbfsansfour": "\u{1D7F0}", "\\mbfsansg": "\u{1D5F4}", "\\mbfsansgamma": "\u{1D772}", "\\mbfsansh": "\u{1D5F5}", "\\mbfsansi": "\u{1D5F6}", "\\mbfsansiota": "\u{1D778}", "\\mbfsansj": "\u{1D5F7}", "\\mbfsansk": "\u{1D5F8}", "\\mbfsanskappa": "\u{1D779}", "\\mbfsansl": "\u{1D5F9}", "\\mbfsanslambda": "\u{1D77A}", "\\mbfsansm": "\u{1D5FA}", "\\mbfsansmu": "\u{1D77B}", "\\mbfsansn": "\u{1D5FB}", "\\mbfsansnabla": "\u{1D76F}", "\\mbfsansnine": "\u{1D7F5}", "\\mbfsansnu": "\u{1D77C}", "\\mbfsanso": "\u{1D5FC}", "\\mbfsansomega": "\u{1D788}", "\\mbfsansomicron": "\u{1D77E}", "\\mbfsansone": "\u{1D7ED}", "\\mbfsansp": "\u{1D5FD}", "\\mbfsanspartial": "\u{1D789}", "\\mbfsansphi": "\u{1D78D}", "\\mbfsanspi": "\u{1D77F}", "\\mbfsanspsi": "\u{1D787}", "\\mbfsansq": "\u{1D5FE}", "\\mbfsansr": "\u{1D5FF}", "\\mbfsansrho": "\u{1D780}", "\\mbfsanss": "\u{1D600}", "\\mbfsansseven": "\u{1D7F3}", "\\mbfsanssigma": "\u{1D782}", "\\mbfsanssix": "\u{1D7F2}", "\\mbfsanst": "\u{1D601}", "\\mbfsanstau": "\u{1D783}", "\\mbfsanstheta": "\u{1D777}", "\\mbfsansthree": "\u{1D7EF}", "\\mbfsanstwo": "\u{1D7EE}", "\\mbfsansu": "\u{1D602}", "\\mbfsansupsilon": "\u{1D784}", "\\mbfsansv": "\u{1D603}", "\\mbfsansvarTheta": "\u{1D767}", "\\mbfsansvarepsilon": "\u{1D774}", "\\mbfsansvarkappa": "\u{1D78C}", "\\mbfsansvarphi": "\u{1D785}", "\\mbfsansvarpi": "\u{1D78F}", "\\mbfsansvarrho": "\u{1D78E}", "\\mbfsansvarsigma": "\u{1D781}", "\\mbfsansvartheta": "\u{1D78B}", "\\mbfsansw": "\u{1D604}", "\\mbfsansx": "\u{1D605}", "\\mbfsansxi": "\u{1D77D}", "\\mbfsansy": "\u{1D606}", "\\mbfsansz": "\u{1D607}", "\\mbfsanszero": "\u{1D7EC}", "\\mbfsanszeta": "\u{1D775}", "\\mbfscrA": "\u{1D4D0}", "\\mbfscrB": "\u{1D4D1}", "\\mbfscrC": "\u{1D4D2}", "\\mbfscrD": "\u{1D4D3}", "\\mbfscrE": "\u{1D4D4}", "\\mbfscrF": "\u{1D4D5}", "\\mbfscrG": "\u{1D4D6}", "\\mbfscrH": "\u{1D4D7}", "\\mbfscrI": "\u{1D4D8}", "\\mbfscrJ": "\u{1D4D9}", "\\mbfscrK": "\u{1D4DA}", "\\mbfscrL": "\u{1D4DB}", "\\mbfscrM": "\u{1D4DC}", "\\mbfscrN": "\u{1D4DD}", "\\mbfscrO": "\u{1D4DE}", "\\mbfscrP": "\u{1D4DF}", "\\mbfscrQ": "\u{1D4E0}", "\\mbfscrR": "\u{1D4E1}", "\\mbfscrS": "\u{1D4E2}", "\\mbfscrT": "\u{1D4E3}", "\\mbfscrU": "\u{1D4E4}", "\\mbfscrV": "\u{1D4E5}", "\\mbfscrW": "\u{1D4E6}", "\\mbfscrX": "\u{1D4E7}", "\\mbfscrY": "\u{1D4E8}", "\\mbfscrZ": "\u{1D4E9}", "\\mbfscra": "\u{1D4EA}", "\\mbfscrb": "\u{1D4EB}", "\\mbfscrc": "\u{1D4EC}", "\\mbfscrd": "\u{1D4ED}", "\\mbfscre": "\u{1D4EE}", "\\mbfscrf": "\u{1D4EF}", "\\mbfscrg": "\u{1D4F0}", "\\mbfscrh": "\u{1D4F1}", "\\mbfscri": "\u{1D4F2}", "\\mbfscrj": "\u{1D4F3}", "\\mbfscrk": "\u{1D4F4}", "\\mbfscrl": "\u{1D4F5}", "\\mbfscrm": "\u{1D4F6}", "\\mbfscrn": "\u{1D4F7}", "\\mbfscro": "\u{1D4F8}", "\\mbfscrp": "\u{1D4F9}", "\\mbfscrq": "\u{1D4FA}", "\\mbfscrr": "\u{1D4FB}", "\\mbfscrs": "\u{1D4FC}", "\\mbfscrt": "\u{1D4FD}", "\\mbfscru": "\u{1D4FE}", "\\mbfscrv": "\u{1D4FF}", "\\mbfscrw": "\u{1D500}", "\\mbfscrx": "\u{1D501}", "\\mbfscry": "\u{1D502}", "\\mbfscrz": "\u{1D503}", "\\mbfseven": "\u{1D7D5}", "\\mbfsigma": "\u{1D6D4}", "\\mbfsix": "\u{1D7D4}", "\\mbft": "\u{1D42D}", "\\mbftau": "\u{1D6D5}", "\\mbftheta": "\u{1D6C9}", "\\mbfthree": "\u{1D7D1}", "\\mbftwo": "\u{1D7D0}", "\\mbfu": "\u{1D42E}", "\\mbfupsilon": "\u{1D6D6}", "\\mbfv": "\u{1D42F}", "\\mbfvarTheta": "\u{1D6B9}", "\\mbfvarepsilon": "\u{1D6C6}", "\\mbfvarkappa": "\u{1D6DE}", "\\mbfvarphi": "\u{1D6D7}", "\\mbfvarpi": "\u{1D6E1}", "\\mbfvarrho": "\u{1D6E0}", "\\mbfvarsigma": "\u{1D6D3}", "\\mbfvartheta": "\u{1D6DD}", "\\mbfw": "\u{1D430}", "\\mbfx": "\u{1D431}", "\\mbfxi": "\u{1D6CF}", "\\mbfy": "\u{1D432}", "\\mbfz": "\u{1D433}", "\\mbfzero": "\u{1D7CE}", "\\mbfzeta": "\u{1D6C7}", "\\mdblkcircle": "\u26AB", "\\mdblkdiamond": "\u2B25", "\\mdblklozenge": "\u2B27", "\\mdblksquare": "\u25FC", "\\mdlgblkcircle": "\u25CF", "\\mdlgblkdiamond": "\u25C6", "\\mdlgblklozenge": "\u29EB", "\\mdlgblksquare": "\u25A0", "\\mdlgwhtcircle": "\u25CB", "\\mdlgwhtdiamond": "\u25C7", "\\mdlgwhtlozenge": "\u25CA", "\\mdlgwhtsquare": "\u25A1", "\\mdsmblkcircle": "\u2981", "\\mdsmblksquare": "\u25FE", "\\mdsmwhtcircle": "\u26AC", "\\mdsmwhtsquare": "\u25FD", "\\mdwhtcircle": "\u26AA", "\\mdwhtdiamond": "\u2B26", "\\mdwhtlozenge": "\u2B28", "\\mdwhtsquare": "\u25FB", "\\measangledltosw": "\u29AF", "\\measangledrtose": "\u29AE", "\\measangleldtosw": "\u29AB", "\\measanglelutonw": "\u29A9", "\\measanglerdtose": "\u29AA", "\\measanglerutone": "\u29A8", "\\measangleultonw": "\u29AD", "\\measangleurtone": "\u29AC", "\\measeq": "\u225E", "\\measuredangle": "\u2221", "\\measuredangleleft": "\u299B", "\\measuredrightangle": "\u22BE", "\\medblackstar": "\u2B51", "\\medbullet": "\u26AB", "\\medcirc": "\u26AA", "\\medspace": "\u2005", "\\medwhitestar": "\u2B50", "\\mercury": "\u263F", "\\mfrakA": "\u{1D504}", "\\mfrakB": "\u{1D505}", "\\mfrakC": "\u212D", "\\mfrakD": "\u{1D507}", "\\mfrakE": "\u{1D508}", "\\mfrakF": "\u{1D509}", "\\mfrakG": "\u{1D50A}", "\\mfrakH": "\u210C", "\\mfrakJ": "\u{1D50D}", "\\mfrakK": "\u{1D50E}", "\\mfrakL": "\u{1D50F}", "\\mfrakM": "\u{1D510}", "\\mfrakN": "\u{1D511}", "\\mfrakO": "\u{1D512}", "\\mfrakP": "\u{1D513}", "\\mfrakQ": "\u{1D514}", "\\mfrakS": "\u{1D516}", "\\mfrakT": "\u{1D517}", "\\mfrakU": "\u{1D518}", "\\mfrakV": "\u{1D519}", "\\mfrakW": "\u{1D51A}", "\\mfrakX": "\u{1D51B}", "\\mfrakY": "\u{1D51C}", "\\mfrakZ": "\u2128", "\\mfraka": "\u{1D51E}", "\\mfrakb": "\u{1D51F}", "\\mfrakc": "\u{1D520}", "\\mfrakd": "\u{1D521}", "\\mfrake": "\u{1D522}", "\\mfrakf": "\u{1D523}", "\\mfrakg": "\u{1D524}", "\\mfrakh": "\u{1D525}", "\\mfraki": "\u{1D526}", "\\mfrakj": "\u{1D527}", "\\mfrakk": "\u{1D528}", "\\mfrakl": "\u{1D529}", "\\mfrakm": "\u{1D52A}", "\\mfrakn": "\u{1D52B}", "\\mfrako": "\u{1D52C}", "\\mfrakp": "\u{1D52D}", "\\mfrakq": "\u{1D52E}", "\\mfrakr": "\u{1D52F}", "\\mfraks": "\u{1D530}", "\\mfrakt": "\u{1D531}", "\\mfraku": "\u{1D532}", "\\mfrakv": "\u{1D533}", "\\mfrakw": "\u{1D534}", "\\mfrakx": "\u{1D535}", "\\mfraky": "\u{1D536}", "\\mfrakz": "\u{1D537}", "\\mho": "\u2127", "\\mid": "\u2223", "\\midbarvee": "\u2A5D", "\\midbarwedge": "\u2A5C", "\\midcir": "\u2AF0", "\\minus": "\u2212", "\\minusdot": "\u2A2A", "\\minusfdots": "\u2A2B", "\\minusrdots": "\u2A2C", "\\mitA": "\u{1D434}", "\\mitAlpha": "\u{1D6E2}", "\\mitB": "\u{1D435}", "\\mitBbbD": "\u2145", "\\mitBbbd": "\u2146", "\\mitBbbe": "\u2147", "\\mitBbbi": "\u2148", "\\mitBbbj": "\u2149", "\\mitBeta": "\u{1D6E3}", "\\mitC": "\u{1D436}", "\\mitChi": "\u{1D6F8}", "\\mitD": "\u{1D437}", "\\mitDelta": "\u{1D6E5}", "\\mitE": "\u{1D438}", "\\mitEpsilon": "\u{1D6E6}", "\\mitEta": "\u{1D6E8}", "\\mitF": "\u{1D439}", "\\mitG": "\u{1D43A}", "\\mitGamma": "\u{1D6E4}", "\\mitH": "\u{1D43B}", "\\mitI": "\u{1D43C}", "\\mitIota": "\u{1D6EA}", "\\mitJ": "\u{1D43D}", "\\mitK": "\u{1D43E}", "\\mitKappa": "\u{1D6EB}", "\\mitL": "\u{1D43F}", "\\mitLambda": "\u{1D6EC}", "\\mitM": "\u{1D440}", "\\mitMu": "\u{1D6ED}", "\\mitN": "\u{1D441}", "\\mitNu": "\u{1D6EE}", "\\mitO": "\u{1D442}", "\\mitOmega": "\u{1D6FA}", "\\mitOmicron": "\u{1D6F0}", "\\mitP": "\u{1D443}", "\\mitPhi": "\u{1D6F7}", "\\mitPi": "\u{1D6F1}", "\\mitPsi": "\u{1D6F9}", "\\mitQ": "\u{1D444}", "\\mitR": "\u{1D445}", "\\mitRho": "\u{1D6F2}", "\\mitS": "\u{1D446}", "\\mitSigma": "\u{1D6F4}", "\\mitT": "\u{1D447}", "\\mitTau": "\u{1D6F5}", "\\mitTheta": "\u{1D6E9}", "\\mitU": "\u{1D448}", "\\mitUpsilon": "\u{1D6F6}", "\\mitV": "\u{1D449}", "\\mitW": "\u{1D44A}", "\\mitX": "\u{1D44B}", "\\mitXi": "\u{1D6EF}", "\\mitY": "\u{1D44C}", "\\mitZ": "\u{1D44D}", "\\mitZeta": "\u{1D6E7}", "\\mita": "\u{1D44E}", "\\mitalpha": "\u{1D6FC}", "\\mitb": "\u{1D44F}", "\\mitbeta": "\u{1D6FD}", "\\mitc": "\u{1D450}", "\\mitchi": "\u{1D712}", "\\mitd": "\u{1D451}", "\\mitdelta": "\u{1D6FF}", "\\mite": "\u{1D452}", "\\mitepsilon": "\u{1D716}", "\\miteta": "\u{1D702}", "\\mitf": "\u{1D453}", "\\mitg": "\u{1D454}", "\\mitgamma": "\u{1D6FE}", "\\miti": "\u{1D456}", "\\mitiota": "\u{1D704}", "\\mitj": "\u{1D457}", "\\mitk": "\u{1D458}", "\\mitkappa": "\u{1D705}", "\\mitl": "\u{1D459}", "\\mitlambda": "\u{1D706}", "\\mitm": "\u{1D45A}", "\\mitmu": "\u{1D707}", "\\mitn": "\u{1D45B}", "\\mitnabla": "\u{1D6FB}", "\\mitnu": "\u{1D708}", "\\mito": "\u{1D45C}", "\\mitomega": "\u{1D714}", "\\mitomicron": "\u{1D70A}", "\\mitp": "\u{1D45D}", "\\mitpartial": "\u{1D715}", "\\mitphi": "\u{1D719}", "\\mitpi": "\u{1D70B}", "\\mitpsi": "\u{1D713}", "\\mitq": "\u{1D45E}", "\\mitr": "\u{1D45F}", "\\mitrho": "\u{1D70C}", "\\mits": "\u{1D460}", "\\mitsansA": "\u{1D608}", "\\mitsansB": "\u{1D609}", "\\mitsansC": "\u{1D60A}", "\\mitsansD": "\u{1D60B}", "\\mitsansE": "\u{1D60C}", "\\mitsansF": "\u{1D60D}", "\\mitsansG": "\u{1D60E}", "\\mitsansH": "\u{1D60F}", "\\mitsansI": "\u{1D610}", "\\mitsansJ": "\u{1D611}", "\\mitsansK": "\u{1D612}", "\\mitsansL": "\u{1D613}", "\\mitsansM": "\u{1D614}", "\\mitsansN": "\u{1D615}", "\\mitsansO": "\u{1D616}", "\\mitsansP": "\u{1D617}", "\\mitsansQ": "\u{1D618}", "\\mitsansR": "\u{1D619}", "\\mitsansS": "\u{1D61A}", "\\mitsansT": "\u{1D61B}", "\\mitsansU": "\u{1D61C}", "\\mitsansV": "\u{1D61D}", "\\mitsansW": "\u{1D61E}", "\\mitsansX": "\u{1D61F}", "\\mitsansY": "\u{1D620}", "\\mitsansZ": "\u{1D621}", "\\mitsansa": "\u{1D622}", "\\mitsansb": "\u{1D623}", "\\mitsansc": "\u{1D624}", "\\mitsansd": "\u{1D625}", "\\mitsanse": "\u{1D626}", "\\mitsansf": "\u{1D627}", "\\mitsansg": "\u{1D628}", "\\mitsansh": "\u{1D629}", "\\mitsansi": "\u{1D62A}", "\\mitsansj": "\u{1D62B}", "\\mitsansk": "\u{1D62C}", "\\mitsansl": "\u{1D62D}", "\\mitsansm": "\u{1D62E}", "\\mitsansn": "\u{1D62F}", "\\mitsanso": "\u{1D630}", "\\mitsansp": "\u{1D631}", "\\mitsansq": "\u{1D632}", "\\mitsansr": "\u{1D633}", "\\mitsanss": "\u{1D634}", "\\mitsanst": "\u{1D635}", "\\mitsansu": "\u{1D636}", "\\mitsansv": "\u{1D637}", "\\mitsansw": "\u{1D638}", "\\mitsansx": "\u{1D639}", "\\mitsansy": "\u{1D63A}", "\\mitsansz": "\u{1D63B}", "\\mitsigma": "\u{1D70E}", "\\mitt": "\u{1D461}", "\\mittau": "\u{1D70F}", "\\mittheta": "\u{1D703}", "\\mitu": "\u{1D462}", "\\mitupsilon": "\u{1D710}", "\\mitv": "\u{1D463}", "\\mitvarTheta": "\u{1D6F3}", "\\mitvarepsilon": "\u{1D700}", "\\mitvarkappa": "\u{1D718}", "\\mitvarphi": "\u{1D711}", "\\mitvarpi": "\u{1D71B}", "\\mitvarrho": "\u{1D71A}", "\\mitvarsigma": "\u{1D70D}", "\\mitvartheta": "\u{1D717}", "\\mitw": "\u{1D464}", "\\mitx": "\u{1D465}", "\\mitxi": "\u{1D709}", "\\mity": "\u{1D466}", "\\mitz": "\u{1D467}", "\\mitzeta": "\u{1D701}", "\\mkern1mu": "\u200A", "\\mlcp": "\u2ADB", "\\models": "\u22A7", "\\modtwosum": "\u2A0A", "\\mp": "\u2213", "\\msansA": "\u{1D5A0}", "\\msansB": "\u{1D5A1}", "\\msansC": "\u{1D5A2}", "\\msansD": "\u{1D5A3}", "\\msansE": "\u{1D5A4}", "\\msansF": "\u{1D5A5}", "\\msansG": "\u{1D5A6}", "\\msansH": "\u{1D5A7}", "\\msansI": "\u{1D5A8}", "\\msansJ": "\u{1D5A9}", "\\msansK": "\u{1D5AA}", "\\msansL": "\u{1D5AB}", "\\msansM": "\u{1D5AC}", "\\msansN": "\u{1D5AD}", "\\msansO": "\u{1D5AE}", "\\msansP": "\u{1D5AF}", "\\msansQ": "\u{1D5B0}", "\\msansR": "\u{1D5B1}", "\\msansS": "\u{1D5B2}", "\\msansT": "\u{1D5B3}", "\\msansU": "\u{1D5B4}", "\\msansV": "\u{1D5B5}", "\\msansW": "\u{1D5B6}", "\\msansX": "\u{1D5B7}", "\\msansY": "\u{1D5B8}", "\\msansZ": "\u{1D5B9}", "\\msansa": "\u{1D5BA}", "\\msansb": "\u{1D5BB}", "\\msansc": "\u{1D5BC}", "\\msansd": "\u{1D5BD}", "\\msanse": "\u{1D5BE}", "\\msanseight": "\u{1D7EA}", "\\msansf": "\u{1D5BF}", "\\msansfive": "\u{1D7E7}", "\\msansfour": "\u{1D7E6}", "\\msansg": "\u{1D5C0}", "\\msansh": "\u{1D5C1}", "\\msansi": "\u{1D5C2}", "\\msansj": "\u{1D5C3}", "\\msansk": "\u{1D5C4}", "\\msansl": "\u{1D5C5}", "\\msansm": "\u{1D5C6}", "\\msansn": "\u{1D5C7}", "\\msansnine": "\u{1D7EB}", "\\msanso": "\u{1D5C8}", "\\msansone": "\u{1D7E3}", "\\msansp": "\u{1D5C9}", "\\msansq": "\u{1D5CA}", "\\msansr": "\u{1D5CB}", "\\msanss": "\u{1D5CC}", "\\msansseven": "\u{1D7E9}", "\\msanssix": "\u{1D7E8}", "\\msanst": "\u{1D5CD}", "\\msansthree": "\u{1D7E5}", "\\msanstwo": "\u{1D7E4}", "\\msansu": "\u{1D5CE}", "\\msansv": "\u{1D5CF}", "\\msansw": "\u{1D5D0}", "\\msansx": "\u{1D5D1}", "\\msansy": "\u{1D5D2}", "\\msansz": "\u{1D5D3}", "\\msanszero": "\u{1D7E2}", "\\mscrA": "\u{1D49C}", "\\mscrB": "\u212C", "\\mscrC": "\u{1D49E}", "\\mscrD": "\u{1D49F}", "\\mscrE": "\u2130", "\\mscrF": "\u2131", "\\mscrG": "\u{1D4A2}", "\\mscrH": "\u210B", "\\mscrI": "\u2110", "\\mscrJ": "\u{1D4A5}", "\\mscrK": "\u{1D4A6}", "\\mscrL": "\u2112", "\\mscrM": "\u2133", "\\mscrN": "\u{1D4A9}", "\\mscrO": "\u{1D4AA}", "\\mscrP": "\u{1D4AB}", "\\mscrQ": "\u{1D4AC}", "\\mscrR": "\u211B", "\\mscrS": "\u{1D4AE}", "\\mscrT": "\u{1D4AF}", "\\mscrU": "\u{1D4B0}", "\\mscrV": "\u{1D4B1}", "\\mscrW": "\u{1D4B2}", "\\mscrX": "\u{1D4B3}", "\\mscrY": "\u{1D4B4}", "\\mscrZ": "\u{1D4B5}", "\\mscra": "\u{1D4B6}", "\\mscrb": "\u{1D4B7}", "\\mscrc": "\u{1D4B8}", "\\mscrd": "\u{1D4B9}", "\\mscre": "\u212F", "\\mscrf": "\u{1D4BB}", "\\mscrg": "\u210A", "\\mscrh": "\u{1D4BD}", "\\mscri": "\u{1D4BE}", "\\mscrj": "\u{1D4BF}", "\\mscrk": "\u{1D4C0}", "\\mscrl": "\u{1D4C1}", "\\mscrm": "\u{1D4C2}", "\\mscrn": "\u{1D4C3}", "\\mscro": "\u2134", "\\mscrp": "\u{1D4C5}", "\\mscrq": "\u{1D4C6}", "\\mscrr": "\u{1D4C7}", "\\mscrs": "\u{1D4C8}", "\\mscrt": "\u{1D4C9}", "\\mscru": "\u{1D4CA}", "\\mscrv": "\u{1D4CB}", "\\mscrw": "\u{1D4CC}", "\\mscrx": "\u{1D4CD}", "\\mscry": "\u{1D4CE}", "\\mscrz": "\u{1D4CF}", "\\mttA": "\u{1D670}", "\\mttB": "\u{1D671}", "\\mttC": "\u{1D672}", "\\mttD": "\u{1D673}", "\\mttE": "\u{1D674}", "\\mttF": "\u{1D675}", "\\mttG": "\u{1D676}", "\\mttH": "\u{1D677}", "\\mttI": "\u{1D678}", "\\mttJ": "\u{1D679}", "\\mttK": "\u{1D67A}", "\\mttL": "\u{1D67B}", "\\mttM": "\u{1D67C}", "\\mttN": "\u{1D67D}", "\\mttO": "\u{1D67E}", "\\mttP": "\u{1D67F}", "\\mttQ": "\u{1D680}", "\\mttR": "\u{1D681}", "\\mttS": "\u{1D682}", "\\mttT": "\u{1D683}", "\\mttU": "\u{1D684}", "\\mttV": "\u{1D685}", "\\mttW": "\u{1D686}", "\\mttX": "\u{1D687}", "\\mttY": "\u{1D688}", "\\mttZ": "\u{1D689}", "\\mtta": "\u{1D68A}", "\\mttb": "\u{1D68B}", "\\mttc": "\u{1D68C}", "\\mttd": "\u{1D68D}", "\\mtte": "\u{1D68E}", "\\mtteight": "\u{1D7FE}", "\\mttf": "\u{1D68F}", "\\mttfive": "\u{1D7FB}", "\\mttfour": "\u{1D7FA}", "\\mttg": "\u{1D690}", "\\mtth": "\u{1D691}", "\\mtti": "\u{1D692}", "\\mttj": "\u{1D693}", "\\mttk": "\u{1D694}", "\\mttl": "\u{1D695}", "\\mttm": "\u{1D696}", "\\mttn": "\u{1D697}", "\\mttnine": "\u{1D7FF}", "\\mtto": "\u{1D698}", "\\mttone": "\u{1D7F7}", "\\mttp": "\u{1D699}", "\\mttq": "\u{1D69A}", "\\mttr": "\u{1D69B}", "\\mtts": "\u{1D69C}", "\\mttseven": "\u{1D7FD}", "\\mttsix": "\u{1D7FC}", "\\mttt": "\u{1D69D}", "\\mttthree": "\u{1D7F9}", "\\mtttwo": "\u{1D7F8}", "\\mttu": "\u{1D69E}", "\\mttv": "\u{1D69F}", "\\mttw": "\u{1D6A0}", "\\mttx": "\u{1D6A1}", "\\mtty": "\u{1D6A2}", "\\mttz": "\u{1D6A3}", "\\mttzero": "\u{1D7F6}", "\\mu": "\u{1D707}", "\\multimap": "\u22B8", "\\multimapboth": "\u29DF", "\\multimapinv": "\u27DC", "\\mupAlpha": "\u0391", "\\mupBeta": "\u0392", "\\mupChi": "\u03A7", "\\mupDelta": "\u0394", "\\mupEpsilon": "\u0395", "\\mupEta": "\u0397", "\\mupGamma": "\u0393", "\\mupIota": "\u0399", "\\mupKappa": "\u039A", "\\mupLambda": "\u039B", "\\mupMu": "\u039C", "\\mupNu": "\u039D", "\\mupOmega": "\u03A9", "\\mupOmicron": "\u039F", "\\mupPhi": "\u03A6", "\\mupPi": "\u03A0", "\\mupPsi": "\u03A8", "\\mupRho": "\u03A1", "\\mupSigma": "\u03A3", "\\mupTau": "\u03A4", "\\mupTheta": "\u0398", "\\mupUpsilon": "\u03A5", "\\mupXi": "\u039E", "\\mupZeta": "\u0396", "\\mupalpha": "\u03B1", "\\mupbeta": "\u03B2", "\\mupchi": "\u03C7", "\\mupdelta": "\u03B4", "\\mupepsilon": "\u03F5", "\\mupeta": "\u03B7", "\\mupgamma": "\u03B3", "\\mupiota": "\u03B9", "\\mupkappa": "\u03BA", "\\muplambda": "\u03BB", "\\mupmu": "\u03BC", "\\mupnu": "\u03BD", "\\mupomega": "\u03C9", "\\mupomicron": "\u03BF", "\\mupphi": "\u03D5", "\\muppi": "\u03C0", "\\muppsi": "\u03C8", "\\muprho": "\u03C1", "\\mupsigma": "\u03C3", "\\muptau": "\u03C4", "\\muptheta": "\u03B8", "\\mupupsilon": "\u03C5", "\\mupvarTheta": "\u03F4", "\\mupvarepsilon": "\u03B5", "\\mupvarkappa": "\u03F0", "\\mupvarphi": "\u03C6", "\\mupvarpi": "\u03D6", "\\mupvarrho": "\u03F1", "\\mupvarsigma": "\u03C2", "\\mupvartheta": "\u03D1", "\\mupxi": "\u03BE", "\\mupzeta": "\u03B6", "\\m{e}": "\u03B5", "\\nHdownarrow": "\u21DF", "\\nHuparrow": "\u21DE", "\\nLeftarrow": "\u21D0\u0338", "\\nLeftrightarrow": "\u21D4\u0338", "\\nRightarrow": "\u21D2\u0338", "\\nVDash": "\u22AB\u0338", "\\nVdash": "\u22A9\u0338", "\\nVleftarrow": "\u21FA", "\\nVleftarrowtail": "\u2B3A", "\\nVleftrightarrow": "\u21FC", "\\nVrightarrow": "\u21FB", "\\nVrightarrowtail": "\u2915", "\\nVtwoheadleftarrow": "\u2B35", "\\nVtwoheadleftarrowtail": "\u2B3D", "\\nVtwoheadrightarrow": "\u2901", "\\nVtwoheadrightarrowtail": "\u2918", "\\nabla": "\u{1D6FB}", "\\napprox": "\u2248\u0338", "\\nasymp": "\u224D\u0338", "\\natural": "\u266E", "\\ncong": "\u2245\u0338", "\\ne": "=\u0338", "\\nearrow": "\u2197", "\\neg": "\xAC", "\\neovnwarrow": "\u2931", "\\neovsearrow": "\u292E", "\\neptune": "\u2646", "\\neq": "=\u0338", "\\nequiv": "\u2261\u0338", "\\neswarrow": "\u2922", "\\neuter": "\u26B2", "\\nexists": "\u2203\u0338", "\\ng": "\u014B", "\\ngeq": "\u2265\u0338", "\\ngeqslant": "\u2A7E\u0338", "\\ngtr": ">\u0338", "\\ngtrless": "\u2277\u0338", "\\ngtrsim": "\u2273\u0338", "\\nhVvert": "\u2AF5", "\\nhpar": "\u2AF2", "\\ni": "\u220B", "\\niobar": "\u22FE", "\\nis": "\u22FC", "\\nisd": "\u22FA", "\\nleftarrow": "\u2190\u0338", "\\nleftrightarrow": "\u2194\u0338", "\\nleq": "\u2264\u0338", "\\nleqslant": "\u2A7D\u0338", "\\nless": "<\u0338", "\\nlessgtr": "\u2276\u0338", "\\nlesssim": "\u2272\u0338", "\\nmid": "\u2223\u0338", "\\nni": "\u220B\u0338", "\\nobreakspace": "\xA0", "\\nolinebreak": "\u2060", "\\not": "\u0338", "\\not<": "<\u0338", "\\not>": ">\u0338", "\\not\\apid": "\u224B\u0338", "\\not\\approx": "\u2248\u0338", "\\not\\cong": "\u2245\u0338", "\\not\\doteq": "\u2250\u0338", "\\not\\equiv": "\u2261\u0338", "\\not\\geq": "\u2265\u0338", "\\not\\in": "\u2208\u0338", "\\not\\leq": "\u2264\u0338", "\\not\\ni": "\u220B\u0338", "\\not\\prec": "\u227A\u0338", "\\not\\preceq": "\u2AAF\u0338", "\\not\\sim": "\u223C\u0338", "\\not\\simeq": "\u2243\u0338", "\\not\\sqsubseteq": "\u2291\u0338", "\\not\\sqsupseteq": "\u2292\u0338", "\\not\\subset": "\u2282\u0338", "\\not\\subseteq": "\u2286\u0338", "\\not\\succ": "\u227B\u0338", "\\not\\succeq": "\u2AB0\u0338", "\\not\\supset": "\u2283\u0338", "\\not\\supseteq": "\u2287\u0338", "\\notaccent": "\u0338", "\\notbackslash": "\u2340", "\\notgreaterless": "\u2277\u0338", "\\notin": "\u2208\u0338", "\\notlessgreater": "\u2276\u0338", "\\notslash": "\u233F", "\\nparallel": "\u2225\u0338", "\\npolint": "\u2A14", "\\nprec": "\u227A\u0338", "\\npreccurlyeq": "\u227C\u0338", "\\npreceq": "\u227C\u0338", "\\nrightarrow": "\u2192\u0338", "\\nsim": "\u223C\u0338", "\\nsime": "\u2243\u0338", "\\nsimeq": "\u2243\u0338", "\\nsqsubseteq": "\u2291\u0338", "\\nsqsupseteq": "\u2292\u0338", "\\nsubset": "\u2282\u0338", "\\nsubseteq": "\u2286\u0338", "\\nsubseteqq": "\u2AC5\u0338", "\\nsucc": "\u227B\u0338", "\\nsucccurlyeq": "\u227D\u0338", "\\nsucceq": "\u227D\u0338", "\\nsupset": "\u2283\u0338", "\\nsupseteq": "\u2287\u0338", "\\nsupseteqq": "\u2AC6\u0338", "\\ntriangleleft": "\u22B2\u0338", "\\ntrianglelefteq": "\u22B4\u0338", "\\ntriangleright": "\u22B3\u0338", "\\ntrianglerighteq": "\u22B5\u0338", "\\nu": "\u03BD", "\\nvDash": "\u22A8\u0338", "\\nvLeftarrow": "\u2902", "\\nvLeftrightarrow": "\u2904", "\\nvRightarrow": "\u2903", "\\nvartriangleleft": "\u22B2\u0338", "\\nvartriangleright": "\u22B3\u0338", "\\nvdash": "\u22A2\u0338", "\\nvinfty": "\u29DE", "\\nvleftarrow": "\u21F7", "\\nvleftarrowtail": "\u2B39", "\\nvleftrightarrow": "\u21F9", "\\nvrightarrow": "\u21F8", "\\nvrightarrowtail": "\u2914", "\\nvtwoheadleftarrow": "\u2B34", "\\nvtwoheadleftarrowtail": "\u2B3C", "\\nvtwoheadrightarrow": "\u2900", "\\nvtwoheadrightarrowtail": "\u2917", "\\nwarrow": "\u2196", "\\nwovnearrow": "\u2932", "\\nwsearrow": "\u2921", "\\o": "\xF8", "\\obar": "\u233D", "\\obot": "\u29BA", "\\obrbrak": "\u23E0", "\\obslash": "\u29B8", "\\ocirc": "\u030A", "\\ocirc{u}": "u\u030A", "\\ocommatopright": "\u0315", "\\odiv": "\u2A38", "\\odot": "\u2299", "\\odotslashdot": "\u29BC", "\\oe": "\u0153", "\\ogreaterthan": "\u29C1", "\\oiiint": "\u2230", "\\oiint": "\u222F", "\\oint": "\u222E", "\\ointctrclockwise": "\u2233", "\\olcross": "\u29BB", "\\olessthan": "\u29C0", "\\omega": "\u03C9", "\\ominus": "\u2296", "\\openbracketleft": "\u301A", "\\openbracketright": "\u301B", "\\operp": "\u29B9", "\\oplus": "\u2295", "\\opluslhrim": "\u2A2D", "\\oplusrhrim": "\u2A2E", "\\original": "\u22B6", "\\origof": "\u22B6", "\\oslash": "\u2298", "\\otimes": "\u2297", "\\otimeshat": "\u2A36", "\\otimeslhrim": "\u2A34", "\\otimesrhrim": "\u2A35", "\\oturnedcomma": "\u0312", "\\overbar": "\u0305", "\\overbrace": "\u23DE", "\\overbracket": "\u23B4", "\\overleftarrow.unicode-math": "\u20D6", "\\overleftharpoon": "\u20D0", "\\overleftrightarrow": "\u20E1", "\\overline": "\u0305", "\\overparen": "\u23DC", "\\overrightarrow": "\u20D7", "\\overrightharpoon": "\u20D1", "\\ovhook": "\u0309", "\\parallel": "\u2225", "\\parallelogram": "\u25B1", "\\parallelogramblack": "\u25B0", "\\parsim": "\u2AF3", "\\partial": "\u2202", "\\partialmeetcontraction": "\u2AA3", "\\pencil": "\u270E", "\\pentagon": "\u2B20", "\\pentagonblack": "\u2B1F", "\\perp": "\u27C2", "\\perps": "\u2AE1", "\\perspcorrespond": "\u2A5E", "\\pfun": "\u21F8", "\\phi": "\u03D5", "\\pi": "\u03C0", "\\pinj": "\u2914", "\\pisces": "\u2653", "\\pitchfork": "\u22D4", "\\plusdot": "\u2A25", "\\pluseqq": "\u2A72", "\\plushat": "\u2A23", "\\plussim": "\u2A26", "\\plussubtwo": "\u2A27", "\\plustrif": "\u2A28", "\\pluto": "\u2647", "\\pm": "\xB1", "\\pmboxdrawuni{2501}": "\u2501", "\\pmboxdrawuni{2503}": "\u2503", "\\pmboxdrawuni{250D}": "\u250D", "\\pmboxdrawuni{250E}": "\u250E", "\\pmboxdrawuni{250F}": "\u250F", "\\pmboxdrawuni{2511}": "\u2511", "\\pmboxdrawuni{2512}": "\u2512", "\\pmboxdrawuni{2513}": "\u2513", "\\pmboxdrawuni{2515}": "\u2515", "\\pmboxdrawuni{2516}": "\u2516", "\\pmboxdrawuni{2517}": "\u2517", "\\pmboxdrawuni{2519}": "\u2519", "\\pmboxdrawuni{251A}": "\u251A", "\\pmboxdrawuni{251B}": "\u251B", "\\pmboxdrawuni{251D}": "\u251D", "\\pmboxdrawuni{251E}": "\u251E", "\\pmboxdrawuni{251F}": "\u251F", "\\pmboxdrawuni{2520}": "\u2520", "\\pmboxdrawuni{2521}": "\u2521", "\\pmboxdrawuni{2522}": "\u2522", "\\pmboxdrawuni{2523}": "\u2523", "\\pmboxdrawuni{2525}": "\u2525", "\\pmboxdrawuni{2526}": "\u2526", "\\pmboxdrawuni{2527}": "\u2527", "\\pmboxdrawuni{2528}": "\u2528", "\\pmboxdrawuni{2529}": "\u2529", "\\pmboxdrawuni{252A}": "\u252A", "\\pmboxdrawuni{252B}": "\u252B", "\\pmboxdrawuni{252D}": "\u252D", "\\pmboxdrawuni{252E}": "\u252E", "\\pmboxdrawuni{252F}": "\u252F", "\\pmboxdrawuni{2530}": "\u2530", "\\pmboxdrawuni{2531}": "\u2531", "\\pmboxdrawuni{2532}": "\u2532", "\\pmboxdrawuni{2533}": "\u2533", "\\pmboxdrawuni{2535}": "\u2535", "\\pmboxdrawuni{2536}": "\u2536", "\\pmboxdrawuni{2537}": "\u2537", "\\pmboxdrawuni{2538}": "\u2538", "\\pmboxdrawuni{2539}": "\u2539", "\\pmboxdrawuni{253A}": "\u253A", "\\pmboxdrawuni{253B}": "\u253B", "\\pmboxdrawuni{253D}": "\u253D", "\\pmboxdrawuni{253E}": "\u253E", "\\pmboxdrawuni{253F}": "\u253F", "\\pmboxdrawuni{2540}": "\u2540", "\\pmboxdrawuni{2541}": "\u2541", "\\pmboxdrawuni{2542}": "\u2542", "\\pmboxdrawuni{2543}": "\u2543", "\\pmboxdrawuni{2544}": "\u2544", "\\pmboxdrawuni{2545}": "\u2545", "\\pmboxdrawuni{2546}": "\u2546", "\\pmboxdrawuni{2547}": "\u2547", "\\pmboxdrawuni{2548}": "\u2548", "\\pmboxdrawuni{2549}": "\u2549", "\\pmboxdrawuni{254A}": "\u254A", "\\pmboxdrawuni{254B}": "\u254B", "\\pmboxdrawuni{2574}": "\u2574", "\\pmboxdrawuni{2575}": "\u2575", "\\pmboxdrawuni{2576}": "\u2576", "\\pmboxdrawuni{2577}": "\u2577", "\\pmboxdrawuni{2578}": "\u2578", "\\pmboxdrawuni{2579}": "\u2579", "\\pmboxdrawuni{257A}": "\u257A", "\\pmboxdrawuni{257B}": "\u257B", "\\pmboxdrawuni{257C}": "\u257C", "\\pmboxdrawuni{257D}": "\u257D", "\\pmboxdrawuni{257E}": "\u257E", "\\pmboxdrawuni{257F}": "\u257F", "\\pmboxdrawuni{2581}": "\u2581", "\\pmboxdrawuni{2582}": "\u2582", "\\pmboxdrawuni{2583}": "\u2583", "\\pmboxdrawuni{2585}": "\u2585", "\\pmboxdrawuni{2586}": "\u2586", "\\pmboxdrawuni{2587}": "\u2587", "\\pmboxdrawuni{2589}": "\u2589", "\\pmboxdrawuni{258A}": "\u258A", "\\pmboxdrawuni{258B}": "\u258B", "\\pmboxdrawuni{258D}": "\u258D", "\\pmboxdrawuni{258E}": "\u258E", "\\pmboxdrawuni{258F}": "\u258F", "\\pmboxdrawuni{2594}": "\u2594", "\\pmboxdrawuni{2595}": "\u2595", "\\pmboxdrawuni{2596}": "\u2596", "\\pmboxdrawuni{2597}": "\u2597", "\\pmboxdrawuni{2598}": "\u2598", "\\pmboxdrawuni{2599}": "\u2599", "\\pmboxdrawuni{259A}": "\u259A", "\\pmboxdrawuni{259B}": "\u259B", "\\pmboxdrawuni{259C}": "\u259C", "\\pmboxdrawuni{259D}": "\u259D", "\\pmboxdrawuni{259E}": "\u259E", "\\pmboxdrawuni{259F}": "\u259F", "\\pointint": "\u2A15", "\\pointright": "\u261E", "\\postalmark": "\u3012", "\\pounds": "\xA3", "\\prec": "\u227A", "\\precapprox": "\u2AB7", "\\preccurlyeq": "\u227C", "\\precedesnotsimilar": "\u22E8", "\\preceq": "\u2AAF", "\\preceqq": "\u2AB3", "\\precnapprox": "\u2AB9", "\\precneq": "\u2AB1", "\\precneqq": "\u2AB5", "\\precnsim": "\u22E8", "\\precsim": "\u227E", "\\prime": "\u2032", "\\prod": "\u220F", "\\profline": "\u2312", "\\profsurf": "\u2313", "\\propto": "\u221D", "\\prurel": "\u22B0", "\\psi": "\u03C8", "\\psur": "\u2900", "\\pullback": "\u27D3", "\\pushout": "\u27D4", "\\qoppa": "\u03D9", "\\qprime": "\u2057", "\\qquad": "\u2003\u2003", "\\quad": "\u2003", "\\quarternote": "\u2669", "\\questeq": "\u225F", "\\quotedblbase": "\u201F", "\\quotesinglbase": "\u201A", "\\r": "\u030A", "\\rAngle": "\u27EB", "\\rBrace": "\u2984", "\\rBrack": "\u27E7", "\\rParen": "\u2986", "\\radiation": "\u2622", "\\rang": "\u27EB", "\\rangle": "\u27E9", "\\rangledot": "\u2992", "\\rangledownzigzagarrow": "\u237C", "\\rbag": "\u27C6", "\\rblkbrbrak": "\u2998", "\\rblot": "\u298A", "\\rbrace": "}", "\\rbracelend": "\u23AD", "\\rbracemid": "\u23AC", "\\rbraceuend": "\u23AB", "\\rbrack": "]", "\\rbrackextender": "\u23A5", "\\rbracklend": "\u23A6", "\\rbracklrtick": "\u298E", "\\rbrackubar": "\u298C", "\\rbrackuend": "\u23A4", "\\rbrackurtick": "\u2990", "\\rbrbrak": "\u3015", "\\rceil": "\u2309", "\\rcirclerightint": "\u2233", "\\rcurvyangle": "\u29FD", "\\rdiagovfdiag": "\u292B", "\\rdiagovsearrow": "\u2930", "\\recorder": "\u2315", "\\recycle": "\u267B", "\\reflectbox{\\carriagereturn}": "\u21B3", "\\revangle": "\u29A3", "\\revangleubar": "\u29A5", "\\revemptyset": "\u29B0", "\\reversesolidus": "\u29F5", "\\revnmid": "\u2AEE", "\\rfbowtie": "\u29D2", "\\rfloor": "\u230B", "\\rftimes": "\u29D5", "\\rgroup": "\u27EF", "\\rhd": "\u25B7", "\\rho": "\u03C1", "\\right": "", "\\rightangle": "\u221F", "\\rightanglearc": "\u22BE", "\\rightanglemdot": "\u299D", "\\rightanglesqr": "\u299C", "\\rightarrow": "\u2192", "\\rightarrowapprox": "\u2975", "\\rightarrowbackapprox": "\u2B48", "\\rightarrowbar": "\u21E5", "\\rightarrowbsimilar": "\u2B4C", "\\rightarrowdiamond": "\u291E", "\\rightarrowgtr": "\u2B43", "\\rightarrowonoplus": "\u27F4", "\\rightarrowplus": "\u2945", "\\rightarrowshortleftarrow": "\u2942", "\\rightarrowsimilar": "\u2974", "\\rightarrowsupset": "\u2B44", "\\rightarrowtail": "\u21A3", "\\rightarrowtriangle": "\u21FE", "\\rightarrowx": "\u2947", "\\rightbarharpoon": "\u296C", "\\rightbkarrow": "\u290D", "\\rightcurvedarrow": "\u2933", "\\rightdasharrow": "\u21E2", "\\rightdbltail": "\u291C", "\\rightdotarrow": "\u2911", "\\rightdowncurvedarrow": "\u2937", "\\rightfishtail": "\u297D", "\\rightharpoonaccent": "\u20D1", "\\rightharpoondown": "\u21C1", "\\rightharpoondownbar": "\u2957", "\\rightharpoonsupdown": "\u2964", "\\rightharpoonup": "\u21C0", "\\rightharpoonupbar": "\u2953", "\\rightharpoonupdash": "\u296C", "\\rightimply": "\u2970", "\\rightleftarrows": "\u21C4", "\\rightleftharpoon": "\u294B", "\\rightleftharpoons": "\u21CC", "\\rightleftharpoonsdown": "\u2969", "\\rightleftharpoonsup": "\u2968", "\\rightmoon": "\u263D", "\\rightouterjoin": "\u27D6", "\\rightpentagon": "\u2B54", "\\rightpentagonblack": "\u2B53", "\\rightrightarrows": "\u21C9", "\\rightrightharpoons": "\u2964", "\\rightslice": "\u2AA7", "\\rightsquigarrow": "\u21DD", "\\righttail": "\u291A", "\\rightthreearrows": "\u21F6", "\\rightthreetimes": "\u22CC", "\\rightwavearrow": "\u219D", "\\rightwhitearrow": "\u21E8", "\\rimg": "\u2988", "\\ringplus": "\u2A22", "\\risingdotseq": "\u2253", "\\rmoustache": "\u23B1", "\\rparen": ")", "\\rparenextender": "\u239F", "\\rparengtr": "\u2994", "\\rparenlend": "\u23A0", "\\rparenuend": "\u239E", "\\rppolint": "\u2A12", "\\rrangle": "\u298A", "\\rrbracket": "\u27E7", "\\rrparenthesis": "\u2988", "\\rsolbar": "\u29F7", "\\rsqhook": "\u2ACE", "\\rsub": "\u2A65", "\\rtimes": "\u22CA", "\\rtriltri": "\u29CE", "\\ruledelayed": "\u29F4", "\\rule{1em}{1pt}": "\u2015", "\\rvboxline": "\u23B9", "\\rvzigzag": "\u29D9", "\\r{}": "\u02DA", "\\sagittarius": "\u2650", "\\sampi": "\u03E1", "\\sansLmirrored": "\u2143", "\\sansLturned": "\u2142", "\\saturn": "\u2644", "\\scorpio": "\u264F", "\\scpolint": "\u2A13", "\\scurel": "\u22B1", "\\searrow": "\u2198", "\\seovnearrow": "\u292D", "\\setminus": "\u29F5", "\\sharp": "\u266F", "\\shortdowntack": "\u2ADF", "\\shortlefttack": "\u2ADE", "\\shortrightarrowleftarrow": "\u2944", "\\shortuptack": "\u2AE0", "\\shuffle": "\u29E2", "\\sigma": "\u03C3", "\\sim": "\u223C", "\\sim\\joinrel\\leadsto": "\u27FF", "\\sime": "\u2243", "\\simeq": "\u2243", "\\simgE": "\u2AA0", "\\simgtr": "\u2A9E", "\\similarleftarrow": "\u2B49", "\\similarrightarrow": "\u2972", "\\simlE": "\u2A9F", "\\simless": "\u2A9D", "\\simminussim": "\u2A6C", "\\simneqq": "\u2246", "\\simplus": "\u2A24", "\\simrdots": "\u2A6B", "\\sinewave": "\u223F", "\\sixteenthnote": "\u266C", "\\skull": "\u2620", "\\slash": "/\u200B", "\\smallblacktriangleleft": "\u25C2", "\\smallblacktriangleright": "\u25B8", "\\smallin": "\u220A", "\\smallni": "\u220D", "\\smalltriangleleft": "\u25C3", "\\smalltriangleright": "\u25B9", "\\smashtimes": "\u2A33", "\\smblkcircle": "\u2022", "\\smblkdiamond": "\u2B29", "\\smblklozenge": "\u2B2A", "\\smblksquare": "\u25AA", "\\smeparsl": "\u29E4", "\\smile": "\u2323", "\\smiley": "\u263A", "\\smt": "\u2AAA", "\\smte": "\u2AAC", "\\smwhitestar": "\u2B52", "\\smwhtcircle": "\u25E6", "\\smwhtdiamond": "\u22C4", "\\smwhtlozenge": "\u2B2B", "\\smwhtsquare": "\u25AB", "\\spadesuit": "\u2660", "\\sphericalangle": "\u2222", "\\sphericalangleup": "\u29A1", "\\spot": "\u2981", "\\sqcap": "\u2293", "\\sqcup": "\u2294", "\\sqint": "\u2A16", "\\sqlozenge": "\u2311", "\\sqrint": "\u2A16", "\\sqrt": "\u221A", "\\sqrt[3]": "\u221B", "\\sqrt[4]": "\u221C", "\\sqrtbottom": "\u23B7", "\\sqsubset": "\u228F", "\\sqsubseteq": "\u2291", "\\sqsubsetneq": "\u22E4", "\\sqsupset": "\u2290", "\\sqsupseteq": "\u2292", "\\sqsupsetneq": "\u22E5", "\\square": "\u25FB", "\\squarebotblack": "\u2B13", "\\squarecrossfill": "\u25A9", "\\squarehfill": "\u25A4", "\\squarehvfill": "\u25A6", "\\squareleftblack": "\u25E7", "\\squarellblack": "\u2B15", "\\squarellquad": "\u25F1", "\\squarelrblack": "\u25EA", "\\squarelrquad": "\u25F2", "\\squareneswfill": "\u25A8", "\\squarenwsefill": "\u25A7", "\\squarerightblack": "\u25E8", "\\squaretopblack": "\u2B12", "\\squareulblack": "\u25E9", "\\squareulquad": "\u25F0", "\\squareurblack": "\u2B14", "\\squareurquad": "\u25F3", "\\squarevfill": "\u25A5", "\\squoval": "\u25A2", "\\ss": "\xDF", "\\sslash": "\u2AFD", "\\stackrel{*}{=}": "\u2A6E", "\\star": "\u22C6", "\\stareq": "\u225B", "\\starequal": "\u225B", "\\steaming": "\u2615", "\\stigma": "\u03DB", "\\strns": "\u23E4", "\\subedot": "\u2AC3", "\\submult": "\u2AC1", "\\subrarr": "\u2979", "\\subset": "\u2282", "\\subsetapprox": "\u2AC9", "\\subsetcirc": "\u27C3", "\\subsetdot": "\u2ABD", "\\subseteq": "\u2286", "\\subseteqq": "\u2AC5", "\\subsetneq": "\u228A", "\\subsetneqq": "\u2ACB", "\\subsetplus": "\u2ABF", "\\subsim": "\u2AC7", "\\subsub": "\u2AD5", "\\subsup": "\u2AD3", "\\succ": "\u227B", "\\succapprox": "\u2AB8", "\\succcurlyeq": "\u227D", "\\succeq": "\u2AB0", "\\succeqq": "\u2AB4", "\\succnapprox": "\u2ABA", "\\succneq": "\u2AB2", "\\succneqq": "\u2AB6", "\\succnsim": "\u22E9", "\\succsim": "\u227F", "\\sum": "\u2211", "\\sumbottom": "\u23B3", "\\sumint": "\u2A0B", "\\sumtop": "\u23B2", "\\sun": "\u263C", "\\supdsub": "\u2AD8", "\\supedot": "\u2AC4", "\\suphsol": "\u27C9", "\\suphsub": "\u2AD7", "\\suplarr": "\u297B", "\\supmult": "\u2AC2", "\\supset": "\u2283", "\\supsetapprox": "\u2ACA", "\\supsetcirc": "\u27C4", "\\supsetdot": "\u2ABE", "\\supseteq": "\u2287", "\\supseteqq": "\u2AC6", "\\supsetneq": "\u228B", "\\supsetneqq": "\u2ACC", "\\supsetplus": "\u2AC0", "\\supsim": "\u2AC8", "\\supsub": "\u2AD4", "\\supsup": "\u2AD6", "\\surd": "\u221A", "\\surfintegral": "\u222F", "\\swarrow": "\u2199", "\\swords": "\u2694", "\\talloblong": "\u2AFE", "\\tau": "\u03C4", "\\taurus": "\u2649", "\\textGamma": "\u0393", "\\textOmega": "\u03A9", "\\textPhi": "\u03A6", "\\textSFi": "\u250C", "\\textSFii": "\u2514", "\\textSFiii": "\u2510", "\\textSFiv": "\u2518", "\\textSFix": "\u2524", "\\textSFl": "\u2558", "\\textSFli": "\u2552", "\\textSFlii": "\u2553", "\\textSFliii": "\u256B", "\\textSFliv": "\u256A", "\\textSFv": "\u253C", "\\textSFvi": "\u252C", "\\textSFvii": "\u2534", "\\textSFviii": "\u251C", "\\textSFx": "\u2500", "\\textSFxi": "\u2502", "\\textSFxix": "\u2561", "\\textSFxl": "\u2569", "\\textSFxli": "\u2566", "\\textSFxlii": "\u2560", "\\textSFxliii": "\u2550", "\\textSFxliv": "\u256C", "\\textSFxlix": "\u2559", "\\textSFxlv": "\u2567", "\\textSFxlvi": "\u2568", "\\textSFxlvii": "\u2564", "\\textSFxlviii": "\u2565", "\\textSFxx": "\u2562", "\\textSFxxi": "\u2556", "\\textSFxxii": "\u2555", "\\textSFxxiii": "\u2563", "\\textSFxxiv": "\u2551", "\\textSFxxv": "\u2557", "\\textSFxxvi": "\u255D", "\\textSFxxvii": "\u255C", "\\textSFxxviii": "\u255B", "\\textSFxxxix": "\u2554", "\\textSFxxxvi": "\u255E", "\\textSFxxxvii": "\u255F", "\\textSFxxxviii": "\u255A", "\\textSigma": "\u03A3", "\\textTheta": "\u03F4", "\\textTstroke": "\u0166", "\\textacutedbl": "\u02DD", "\\textacutemacron": "\u0301\u0304", "\\textacutewedge": "\u0301\u030C", "\\textadvancing": "\u0318", "\\textalpha": "\u03B1", "\\textapproxequal": "\u2248", "\\textasciiacute": "\xB4", "\\textasciibreve": "\u02D8", "\\textasciicaron": "\u02C7", "\\textasciicircum": "^", "\\textasciidieresis": "\xA8", "\\textasciigrave": "\u02CB", "\\textasciimacron": "\xAF", "\\textasciitilde": "~", "\\textasteriskcentered": "*", "\\textbackslash": "\\", "\\textbaht": "\u0E3F", "\\textbar": "|", "\\textbardbl": "\u2016", "\\textbeta": "\u03B2", "\\textbigcircle": "\u25EF", "\\textblacksquare": "\u25A0", "\\textblank": "\u2422", "\\textblock": "\u2588", "\\textbraceleft": "{", "\\textbraceright": "}", "\\textbrevemacron": "\u0306\u0304", "\\textbrokenbar": "\xA6", "\\textbullet": "\u2022", "\\textcap": "\u2227", "\\textcelsius": "\u2103", "\\textcent": "\xA2", "\\textcircledP": "\u2117", "\\textcircled{R}": "\xAE", "\\textcircumdot": "\u0302\u0307", "\\textcolonmonetary": "\u20A1", "\\textcommabelow": "\u0326", "\\textcompwordmark": "\u200C", "\\textcontourintegral": "\u222E", "\\textcopyright": "\xA9", "\\textcorner": "\u031A", "\\textcrh": "\u0127", "\\textcurrency": "\xA4", "\\textdagger": "\u2020", "\\textdaggerdbl": "\u2021", "\\textdbllowline": "\u2017", "\\textdegree": "\xB0", "\\textdelta": "\u03B4", "\\textdh": "\xF0", "\\textdiscount": "\u2052", "\\textdiv": "\xF7", "\\textdkshade": "\u2593", "\\textdnblock": "\u2584", "\\textdollar": "$", "\\textdong": "\u20AB", "\\textdotacute": "\u0307\u0301", "\\textdotbreve": "\u0310", "\\textdoublebarpipe": "\u01C2", "\\textdoublegrave": "\u030F", "\\textdoublepipe": "\u01C2", "\\textdoublevbaraccent": "\u030E", "\\textdownarrow": "\u2193", "\\textelement": "\u2208", "\\textellipsis": "\u2026", "\\textemdash": "\u2014", "\\textendash": "\u2013", "\\texteopen": "\u03B5", "\\textepsilon": "\u03B5", "\\texteqsim": "\u2242", "\\textequivalence": "\u2261", "\\textesh": "\u01AA", "\\textestimated": "\u212E", "\\texteuro": "\u20AC", "\\textexclamdown": "\xA1", "\\textflorin": "\u0192", "\\textfractionsolidus": "\u2044", "\\textfrac{0}{3}": "\u2189", "\\textfrac{1}": "\u215F", "\\textfrac{1}{10}": "\u2152", "\\textfrac{1}{3}": "\u2153", "\\textfrac{1}{5}": "\u2155", "\\textfrac{1}{6}": "\u2159", "\\textfrac{1}{7}": "\u2150", "\\textfrac{1}{8}": "\u215B", "\\textfrac{1}{9}": "\u2151", "\\textfrac{2}{3}": "\u2154", "\\textfrac{2}{5}": "\u2156", "\\textfrac{3}{5}": "\u2157", "\\textfrac{3}{8}": "\u215C", "\\textfrac{4}{5}": "\u2158", "\\textfrac{5}{6}": "\u215A", "\\textfrac{5}{8}": "\u215D", "\\textfrac{7}{8}": "\u215E", "\\textgravedot": "\u0300\u0307", "\\textgravemacron": "\u0300\u0304", "\\textgreater": ">", "\\textgreaterequal": "\u2265", "\\texthorizontalbar": "\u2015", "\\texthvlig": "\u0195", "\\textincrement": "\u2206", "\\textinfinity": "\u221E", "\\textintegral": "\u222B", "\\textinterrobang": "\u203D", "\\textintersection": "\u2229", "\\textinvsubbridge": "\u033A", "\\textipa{O}": "\u0254", "\\textipa{\\textnrleg}": "\u019E", "\\textipa{\\textturna}": "\u0250", "\\textkra": "\u0138", "\\textlangle": "\u3008", "\\textleftarrow": "\u2190", "\\textless": "<", "\\textlessequal": "\u2264", "\\textlfblock": "\u258C", "\\textlira": "\u20A4", "\\textlnot": "\xAC", "\\textlowering": "\u031E", "\\textlozenge": "\u25CA", "\\textltshade": "\u2591", "\\textmalteseH": "\u0126", "\\textmalteseh": "\u0127", "\\textmho": "\u2127", "\\textmu": "\xB5", "\\textmusicalnote": "\u266A", "\\textnaira": "\u20A6", "\\textniepsilon": "\u03B5", "\\textnotequal": "=\u0338", "\\textnsuperior": "\u207F", "\\textnumero": "\u2116", "\\textohm": "\u03A9", "\\textonehalf": "\xBD", "\\textonequarter": "\xBC", "\\textonesuperior": "\xB9", "\\textopenbullet": "\u25E6", "\\textordfeminine": "\xAA", "\\textordmasculine": "\xBA", "\\textovercross": "\u033D", "\\textparagraph": "\xB6", "\\textpartial": "\u2202", "\\textperiodcentered": "\u02D9", "\\textpertenthousand": "\u2031", "\\textperthousand": "\u2030", "\\textpeseta": "\u20A7", "\\textpeso": "\u20B1", "\\textphi": "\u0278", "\\textpi": "\u03C0", "\\textpm": "\xB1", "\\textproduct": "\u220F", "\\textquestiondown": "\xBF", "\\textquotedbl": '"', "\\textquotedblleft": "\u201C", "\\textquotedblright": "\u201D", "\\textquoteleft": "\u2018", "\\textquoteright": "\u2019", "\\textraising": "\u031D", "\\textrangle": "\u3009", "\\textrecipe": "\u211E", "\\textreferencemark": "\u203B", "\\textregistered": "\xAE", "\\textretracting": "\u0319", "\\textrevlogicalnot": "\u2310", "\\textrevscripta": "\u0264", "\\textrightarrow": "\u2192", "\\textringmacron": "\u030A\u0304", "\\textriota": "\u2129", "\\textrtaild": "\u0256", "\\textrtblock": "\u2590", "\\textschwa": "\u0259", "\\textseagull": "\u033C", "\\textsection": "\xA7", "\\textservicemark": "\u2120", "\\textshade": "\u2592", "\\textsigma": "\u03C3", "\\textsterling": "\xA3", "\\textsubarch": "\u032F", "\\textsubbar": "\u0331", "\\textsubbridge": "\u032A", "\\textsubbridge{d}": "\u0256", "\\textsubgrave": "\u0316", "\\textsublhalfring": "\u031C", "\\textsubplus": "\u031F", "\\textsubrhalfring": "\u0339", "\\textsubring": "\u0325", "\\textsubscript{0}": "\u2080", "\\textsubscript{1}": "\u2081", "\\textsubscript{2}": "\u2082", "\\textsubscript{3}": "\u2083", "\\textsubscript{4}": "\u2084", "\\textsubscript{5}": "\u2085", "\\textsubscript{6}": "\u2086", "\\textsubscript{7}": "\u2087", "\\textsubscript{8}": "\u2088", "\\textsubscript{9}": "\u2089", "\\textsubscript{\\textschwa}": "\u2094", "\\textsubscript{a}": "\u2090", "\\textsubscript{e}": "\u2091", "\\textsubscript{h}": "\u2095", "\\textsubscript{k}": "\u2096", "\\textsubscript{l}": "\u2097", "\\textsubscript{m}": "\u2098", "\\textsubscript{n}": "\u2099", "\\textsubscript{o}": "\u2092", "\\textsubscript{p}": "\u209A", "\\textsubscript{s}": "\u209B", "\\textsubscript{t}": "\u209C", "\\textsubscript{x}": "\u2093", "\\textsubsquare": "\u033B", "\\textsubtilde": "\u0330", "\\textsubumlaut": "\u0324", "\\textsubwedge": "\u032C", "\\textsummation": "\u2211", "\\textsuperimposetilde": "\u0334", "\\textsuperscript{1}": "\xB9", "\\textsuperscript{2}": "\xB2", "\\textsuperscript{3}": "\xB3", "\\textsuperscript{4}": "\u2074", "\\textsuperscript{5}": "\u2075", "\\textsuperscript{6}": "\u2076", "\\textsuperscript{7}": "\u2077", "\\textsuperscript{8}": "\u2078", "\\textsuperscript{9}": "\u2079", "\\textsuperscript{A}": "\u1D2C", "\\textsuperscript{a}": "\u1D43", "\\textsuperscript{b}": "\u1D47", "\\textsuperscript{c}": "\u1D9C", "\\textsuperscript{d}": "\u1D48", "\\textsuperscript{e}": "\u1D49", "\\textsuperscript{f}": "\u1DA0", "\\textsuperscript{g}": "\u1D4D", "\\textsuperscript{h}": "\u02B0", "\\textsuperscript{i}": "\u2071", "\\textsuperscript{j}": "\u02B2", "\\textsuperscript{k}": "\u1D4F", "\\textsuperscript{l}": "\u02E1", "\\textsuperscript{m}": "\u1D50", "\\textsuperscript{n}": "\u207F", "\\textsuperscript{o}": "\u1D52", "\\textsuperscript{p}": "\u1D56", "\\textsuperscript{r}": "\u02B3", "\\textsuperscript{s}": "\u02E2", "\\textsuperscript{t}": "\u1D57", "\\textsuperscript{u}": "\u1D58", "\\textsuperscript{v}": "\u1D5B", "\\textsuperscript{w}": "\u02B7", "\\textsuperscript{x}": "\u02E3", "\\textsuperscript{y}": "\u02B8", "\\textsuperscript{z}": "\u1DBB", "\\textsurd": "\u221A", "\\textsyllabic": "\u0329", "\\texttau": "\u03C4", "\\texttheta": "\u03B8", "\\textthreequarters": "\xBE", "\\textthreesuperior": "\xB3", "\\texttildedot": "\u0303\u0307", "\\texttildelow": "\u02DC", "\\texttimes": "\xD7", "\\texttrademark": "\u2122", "\\texttstroke": "\u0167", "\\textturnk": "\u029E", "\\textturnm": "\u026F", "\\texttwosuperior": "\xB2", "\\textunderscore": "_", "\\textuparrow": "\u2191", "\\textupblock": "\u2580", "\\textvartheta": "\u03D1", "\\textvbaraccent": "\u030D", "\\textvisiblespace": "\u2294", "\\textwon": "\u20A9", "\\textyen": "\xA5", "\\th": "\xFE", "\\therefore": "\u2234", "\\thermod": "\u29E7", "\\theta": "\u03B8", "\\thickspace": "\u2005", "\\thinspace": "\u2009", "\\threedangle": "\u27C0", "\\threedotcolon": "\u2AF6", "\\threeunderdot": "\u20E8", "\\tieconcat": "\u2040", "\\tieinfty": "\u29DD", "\\tilde": "\u0303", "\\tildetrpl": "\u224B", "\\times": "\xD7", "\\timesbar": "\u2A31", "\\tminus": "\u29FF", "\\to": "\u2192", "\\toea": "\u2928", "\\tona": "\u2927", "\\tone{11}": "\u02E9", "\\tone{22}": "\u02E8", "\\tone{33}": "\u02E7", "\\tone{44}": "\u02E6", "\\tone{55}": "\u02E5", "\\top": "\u22A4", "\\topbot": "\u2336", "\\topcir": "\u2AF1", "\\topfork": "\u2ADA", "\\topsemicircle": "\u25E0", "\\tosa": "\u2929", "\\towa": "\u292A", "\\tplus": "\u29FE", "\\trapezium": "\u23E2", "\\trianglecdot": "\u25EC", "\\triangledown": "\u25BF", "\\triangleleft": "\u25C1", "\\triangleleftblack": "\u25ED", "\\trianglelefteq": "\u22B4", "\\triangleminus": "\u2A3A", "\\triangleodot": "\u29CA", "\\triangleplus": "\u2A39", "\\triangleq": "\u225C", "\\triangleright": "\u25B7", "\\trianglerightblack": "\u25EE", "\\trianglerighteq": "\u22B5", "\\triangles": "\u29CC", "\\triangleserifs": "\u29CD", "\\triangletimes": "\u2A3B", "\\triangleubar": "\u29CB", "\\tripleplus": "\u29FB", "\\trprime": "\u2034", "\\trslash": "\u2AFB", "\\truestate": "\u22A7", "\\turnangle": "\u29A2", "\\turnediota": "\u2129", "\\turnednot": "\u2319", "\\twocaps": "\u2A4B", "\\twocups": "\u2A4A", "\\twoheaddownarrow": "\u21A1", "\\twoheadleftarrow": "\u219E", "\\twoheadleftarrowtail": "\u2B3B", "\\twoheadleftdbkarrow": "\u2B37", "\\twoheadmapsfrom": "\u2B36", "\\twoheadmapsto": "\u2905", "\\twoheadrightarrow": "\u21A0", "\\twoheadrightarrowtail": "\u2916", "\\twoheaduparrow": "\u219F", "\\twoheaduparrowcircle": "\u2949", "\\twolowline": "\u2017", "\\twonotes": "\u266B", "\\typecolon": "\u2982", "\\t{ia}": "i\uFE20a\uFE21", "\\u": "\u0306", "\\ubrbrak": "\u23E1", "\\ularc": "\u25DC", "\\ulblacktriangle": "\u25E4", "\\ulcorner": "\u231C", "\\ultriangle": "\u25F8", "\\uminus": "\u2A41", "\\underbar": "\u0331", "\\underbrace": "\u23DF", "\\underbracket": "\u23B5", "\\underleftarrow": "\u20EE", "\\underleftharpoondown": "\u20ED", "\\underleftrightarrow": "\u034D", "\\underline": "\u0332", "\\underparen": "\u23DD", "\\underrightarrow": "\u20EF", "\\underrightharpoondown": "\u20EC", "\\unicodecdots": "\u22EF", "\\unicodeellipsis": "\u2026", "\\upDigamma": "\u03DC", "\\upand": "\u214B", "\\uparrow": "\u2191", "\\uparrowbarred": "\u2909", "\\uparrowoncircle": "\u29BD", "\\upbackepsilon": "\u03F6", "\\updasharrow": "\u21E1", "\\updigamma": "\u03DD", "\\updownarrow": "\u2195", "\\updownarrowbar": "\u21A8", "\\updownarrows": "\u21C5", "\\updownharpoonleftleft": "\u2951", "\\updownharpoonleftright": "\u294D", "\\updownharpoonrightleft": "\u294C", "\\updownharpoonrightright": "\u294F", "\\updownharpoonsleftright": "\u296E", "\\upfishtail": "\u297E", "\\upharpoonleft": "\u21BF", "\\upharpoonleftbar": "\u2960", "\\upharpoonright": "\u21BE", "\\upharpoonrightbar": "\u295C", "\\upharpoonsleftright": "\u2963", "\\upin": "\u27D2", "\\upint": "\u2A1B", "\\uplus": "\u228E", "\\uprightcurvearrow": "\u2934", "\\upsilon": "\u03C5", "\\upslopeellipsis": "\u22F0", "\\upuparrows": "\u21C8", "\\upupharpoons": "\u2963", "\\upvarTheta": "\u03F4", "\\upwhitearrow": "\u21E7", "\\uranus": "\u2645", "\\urarc": "\u25DD", "\\urblacktriangle": "\u25E5", "\\urcorner": "\u231D", "\\urtriangle": "\u25F9", "\\utilde": "\u0330", "\\v": "\u030C", "\\vBar": "\u2AE8", "\\vBarv": "\u2AE9", "\\vDash": "\u22A8", "\\vDdash": "\u2AE2", "\\varGamma": "\u0393", "\\varVdash": "\u2AE6", "\\varbarwedge": "\u2305", "\\varbeta": "\u03D0", "\\varcarriagereturn": "\u23CE", "\\varclubsuit": "\u2667", "\\vardiamondsuit": "\u2666", "\\vardoublebarwedge": "\u2306", "\\varepsilon": "\u03B5", "\\varheartsuit": "\u2665", "\\varhexagon": "\u2B21", "\\varhexagonblack": "\u2B22", "\\varhexagonlrbonds": "\u232C", "\\varisinobar": "\u22F6", "\\varisins": "\u22F3", "\\varkappa": "\u03F0", "\\varlrtriangle": "\u22BF", "\\varniobar": "\u22FD", "\\varnis": "\u22FB", "\\varnothing": "\u2205", "\\varointclockwise": "\u2232", "\\varphi": "\u03C6", "\\varpi": "\u03D6", "\\varprod": "\u2A09", "\\varrho": "\u03F1", "\\varsigma": "\u03C2", "\\varspadesuit": "\u2664", "\\varstar": "\u2736", "\\varsubsetneqq": "\u228A\uFE00", "\\varsupsetneq": "\u228B\uFE00", "\\vartheta": "\u03D1", "\\vartriangle": "\u25B5", "\\vartriangleleft": "\u22B2", "\\vartriangleright": "\u22B3", "\\varveebar": "\u2A61", "\\vbraceextender": "\u23AA", "\\vbrtri": "\u29D0", "\\vdash": "\u22A2", "\\vdots": "\u22EE", "\\vec": "\u20D7", "\\vectimes": "\u2A2F", "\\vee": "\u2228", "\\veebar": "\u22BB", "\\veedot": "\u27C7", "\\veedoublebar": "\u2A63", "\\veeeq": "\u225A", "\\veemidvert": "\u2A5B", "\\veeodot": "\u2A52", "\\veeonvee": "\u2A56", "\\veeonwedge": "\u2A59", "\\venus": "\u2640", "\\vert": "|", "\\vertoverlay": "\u20D2", "\\verymuchgreater": "\u22D9", "\\verymuchless": "\u22D8", "\\viewdata": "\u2317", "\\virgo": "\u264D", "\\vlongdash": "\u27DD", "\\volintegral": "\u2230", "\\vrectangle": "\u25AF", "\\vrectangleblack": "\u25AE", "\\vysmblkcircle": "\u2219", "\\vysmblksquare": "\u2B1D", "\\vysmwhtcircle": "\u2218", "\\vysmwhtsquare": "\u2B1E", "\\vzigzag": "\u299A", "\\v{\\i}": "i\u030C", "\\v{\\j}": "j\u030C", "\\warning": "\u26A0", "\\wasylozenge": "\u2311", "\\wedge": "\u2227", "\\wedgebar": "\u2A5F", "\\wedgedot": "\u27D1", "\\wedgedoublebar": "\u2A60", "\\wedgemidvert": "\u2A5A", "\\wedgeodot": "\u2A51", "\\wedgeonwedge": "\u2A55", "\\wedgeq": "\u2259", "\\whitearrowupfrombar": "\u21EA", "\\whiteinwhitetriangle": "\u27C1", "\\whitepointerleft": "\u25C5", "\\whitepointerright": "\u25BB", "\\whitesquaretickleft": "\u27E4", "\\whitesquaretickright": "\u27E5", "\\whthorzoval": "\u2B2D", "\\whtvertoval": "\u2B2F", "\\wideangledown": "\u29A6", "\\wideangleup": "\u29A7", "\\widebreve": "\u0306", "\\widebridgeabove": "\u20E9", "\\widecheck": "\u030C", "\\widehat": "\u2227", "\\wideoverbar": "\u0305", "\\widetilde": "\u0303", "\\wideutilde": "\u0330", "\\wp": "\u2118", "\\wr": "\u2240", "\\xbsol": "\u29F9", "\\xi": "\u03BE", "\\xsol": "\u29F8", "\\yinyang": "\u262F", "\\zcmp": "\u2A1F", "\\zeta": "\u03B6", "\\zhide": "\u29F9", "\\zpipe": "\u2A20", "\\zproject": "\u2A21", "\\{": "{", "\\}": "}", "\\~": "\u0303", "\\~{\\i}": "i\u0303", "\\\xB4": "\u0301", "^\\circ": "\xB0", "^{(}": "\u207D", "^{)}": "\u207E", "^{+}": "\u207A", "^{-}": "\u207B", "^{0}": "\u2070", "^{1}": "\xB9", "^{2}": "\xB2", "^{3}": "\xB3", "^{4}": "\u2074", "^{5}": "\u2075", "^{6}": "\u2076", "^{7}": "\u2077", "^{8}": "\u2078", "^{9}": "\u2079", "^{=}": "\u207C", "^{A}": "\u1D2C", "^{a}": "\u1D43", "^{b}": "\u1D47", "^{c}": "\u1D9C", "^{d}": "\u1D48", "^{e}": "\u1D49", "^{f}": "\u1DA0", "^{g}": "\u1D4D", "^{h}": "\u02B0", "^{i}": "\u2071", "^{j}": "\u02B2", "^{k}": "\u1D4F", "^{l}": "\u02E1", "^{m}": "\u1D50", "^{n}": "\u207F", "^{o}": "\u1D52", "^{p}": "\u1D56", "^{r}": "\u02B3", "^{s}": "\u02E2", "^{t}": "\u1D57", "^{u}": "\u1D58", "^{v}": "\u1D5B", "^{w}": "\u02B7", "^{x}": "\u02E3", "^{y}": "\u02B8", "^{z}": "\u1DBB", "_\\infty": " \u035A", "_{(}": "\u208D", "_{)}": "\u208E", "_{+}": "\u208A", "_{-}": "\u208B", "_{0}": "\u2080", "_{1}": "\u2081", "_{2}": "\u2082", "_{3}": "\u2083", "_{4}": "\u2084", "_{5}": "\u2085", "_{6}": "\u2086", "_{7}": "\u2087", "_{8}": "\u2088", "_{9}": "\u2089", "_{=}": "\u208C", "_{a}": "\u2090", "_{e}": "\u2091", "_{h}": "\u2095", "_{k}": "\u2096", "_{l}": "\u2097", "_{m}": "\u2098", "_{n}": "\u2099", "_{o}": "\u2092", "_{p}": "\u209A", "_{s}": "\u209B", "_{t}": "\u209C", "_{x}": "\u2093", "``": { text: "\u201C", math: "``" }, "textipa{\\textopeno}": "\u0252", "{'''}": { text: "{'''}", math: "\u2034" }, "{''}": { text: "{''}", math: "\u2033" }, "{\\'{}I}": "\u0399\u0301", "{\\'{}O}": "\u039F\u0301", "{\\aftergroup\\ignorespaces}": "\u200C", "{\\int\\!\\int\\!\\int}": "\u222D", "{\\int\\!\\int}": "\u222C", '{\\mathchar"2208}': "\u2316", "{\\not\\kern-0.3em\\times}": "\u224D\u0338", "{\\r A}": "A\u030A", "{\\r U}": "U\u030A", "{\\r a}": "a\u030A", "{\\r u}": "u\u030A", "{\\rlap{\\textbackslash}{{/}\\!\\!{/}}}": "\u2AFD\u20E5", "{\\u \\i}": "i\u0306", "{_\\ast}": "\u2217", "{{/}\\!\\!{/}}": "\u2AFD", "~": "\xA0" };
  }
});

// node_modules/unicode2latex/tables/combining.json
var require_combining = __commonJS({
  "node_modules/unicode2latex/tables/combining.json"(exports2, module2) {
    module2.exports = { macros: ["acute", "bar", "breve", "c", "candra", "check", "d", "ddot", "dot", "droang", "grave", "hat", "k", "mathring", "ocirc", "overbar", "overline", "r", "textacutemacron", "textacutewedge", "textadvancing", "textbrevemacron", "textcircumdot", "textcommabelow", "textcorner", "textdotacute", "textdotbreve", "textdoublegrave", "textdoublevbaraccent", "textgravedot", "textgravemacron", "textinvsubbridge", "textlowering", "textovercross", "textraising", "textretracting", "textringmacron", "textseagull", "textsubarch", "textsubbar", "textsubbridge", "textsubgrave", "textsublhalfring", "textsubplus", "textsubrhalfring", "textsubring", "textsubsquare", "textsubtilde", "textsubumlaut", "textsubwedge", "textsuperimposetilde", "textsyllabic", "texttildedot", "textvbaraccent", "tilde", "u", "underbar", "utilde", "v", "widebreve", "widecheck", "widehat", "wideoverbar", "widetilde", "wideutilde"], tolatex: { "\u0300": { mode: "text", macro: "`" }, "\u0301": { mode: "text", macro: "'" }, "\u0303": { mode: "text", macro: "~" }, "\u0305": { mode: "math", macro: "overline" }, "\u0306": { mode: "text", macro: "u" }, "\u0307": { mode: "text", macro: "." }, "\u0308": { mode: "text", macro: '"' }, "\u030A": { mode: "text", macro: "r" }, "\u030C": { mode: "text", macro: "v" }, "\u0310": { mode: "text", macro: "textdotbreve" }, "\u031A": { mode: "text", macro: "textcorner" }, "\u0331": { mode: "text", macro: "textsubbar" }, "\xB8": { mode: "text", macro: "c" }, "\u0300\u0304": { mode: "text", macro: "textgravemacron" }, "\u0300\u0307": { mode: "text", macro: "textgravedot" }, "\u0301\u0304": { mode: "text", macro: "textacutemacron" }, "\u0301\u030C": { mode: "text", macro: "textacutewedge" }, "\u0302\u0307": { mode: "text", macro: "textcircumdot" }, "\u0302": { mode: "text", macro: "^" }, "\u0303\u0307": { mode: "text", macro: "texttildedot" }, "\u0304": { mode: "text", macro: "=" }, "\u0304\u0300": { mode: "text", macro: "textgravemacron" }, "\u0306\u0304": { mode: "text", macro: "textbrevemacron" }, "\u0307\u0301": { mode: "text", macro: "textdotacute" }, "\u0307\u0306": { mode: "text", macro: "textdotbreve" }, "\u030A\u0304": { mode: "text", macro: "textringmacron" }, "\u030B": { mode: "text", macro: "H" }, "\u030D": { mode: "text", macro: "textvbaraccent" }, "\u030E": { mode: "text", macro: "textdoublevbaraccent" }, "\u030F": { mode: "text", macro: "textdoublegrave" }, "\u0316": { mode: "text", macro: "textsubgrave" }, "\u0318": { mode: "text", macro: "textadvancing" }, "\u0319": { mode: "text", macro: "textretracting" }, "\u031C": { mode: "text", macro: "textsublhalfring" }, "\u031D": { mode: "text", macro: "textraising" }, "\u031E": { mode: "text", macro: "textlowering" }, "\u031F": { mode: "text", macro: "textsubplus" }, "\u0323": { mode: "text", macro: "d" }, "\u0324": { mode: "text", macro: "textsubumlaut" }, "\u0325": { mode: "text", macro: "textsubring" }, "\u0326": { mode: "text", macro: "textcommabelow" }, "\u0327": { mode: "text", macro: "c" }, "\u0328": { mode: "text", macro: "k" }, "\u0329": { mode: "text", macro: "textsyllabic" }, "\u032A": { mode: "text", macro: "textsubbridge" }, "\u032C": { mode: "text", macro: "textsubwedge" }, "\u032F": { mode: "text", macro: "textsubarch" }, "\u0330": { mode: "text", macro: "textsubtilde" }, "\u0334": { mode: "text", macro: "textsuperimposetilde" }, "\u0339": { mode: "text", macro: "textsubrhalfring" }, "\u033A": { mode: "text", macro: "textinvsubbridge" }, "\u033B": { mode: "text", macro: "textsubsquare" }, "\u033C": { mode: "text", macro: "textseagull" }, "\u033D": { mode: "text", macro: "textovercross" } }, tounicode: { grave: "\u0300", acute: "\u0301", widetilde: "\u0303", tilde: "\u0303", overbar: "\u0305", bar: "\u0305", wideoverbar: "\u0305", overline: "\u0305", widebreve: "\u0306", breve: "\u0306", dot: "\u0307", ddot: "\u0308", ocirc: "\u030A", mathring: "\u030A", widecheck: "\u030C", check: "\u030C", candra: "\u0310", droang: "\u031A", utilde: "\u0330", wideutilde: "\u0330", underbar: "\u0331", widehat: "\u2227", hat: "\u2227", "`": "\u0300", textgravemacron: "\u0300\u0304", textgravedot: "\u0300\u0307", "'": "\u0301", "\xB4": "\u0301", textacutemacron: "\u0301\u0304", textacutewedge: "\u0301\u030C", textcircumdot: "\u0302\u0307", "^": "\u0302", "~": "\u0303", texttildedot: "\u0303\u0307", "=": "\u0304", u: "\u0306", textbrevemacron: "\u0306\u0304", ".": "\u0307", textdotacute: "\u0307\u0301", '"': "\u0308", r: "\u030A", textringmacron: "\u030A\u0304", H: "\u030B", v: "\u030C", textvbaraccent: "\u030D", textdoublevbaraccent: "\u030E", textdoublegrave: "\u030F", textdotbreve: "\u0310", textsubgrave: "\u0316", textadvancing: "\u0318", textretracting: "\u0319", textcorner: "\u031A", textsublhalfring: "\u031C", textraising: "\u031D", textlowering: "\u031E", textsubplus: "\u031F", d: "\u0323", textsubumlaut: "\u0324", textsubring: "\u0325", textcommabelow: "\u0326", c: "\u0327", k: "\u0328", textsyllabic: "\u0329", textsubbridge: "\u032A", textsubwedge: "\u032C", textsubarch: "\u032F", textsubtilde: "\u0330", textsubbar: "\u0331", textsuperimposetilde: "\u0334", textsubrhalfring: "\u0339", textinvsubbridge: "\u033A", textsubsquare: "\u033B", textseagull: "\u033C", textovercross: "\u033D" }, regex: "(\u0300\u0304|\u0304\u0300)|(\u0300\u0307|\u0307\u0300)|(\u0301\u0304|\u0304\u0301)|(\u0301\u030C|\u030C\u0301)|(\u0302\u0307|\u0307\u0302)|(\u0303\u0307|\u0307\u0303)|(\u0304\u0300|\u0300\u0304)|(\u0306\u0304|\u0304\u0306)|(\u0307\u0301|\u0301\u0307)|(\u0307\u0306|\u0306\u0307)|(\u030A\u0304|\u0304\u030A)|[\u0300\u0301\u0303\u0303\u0305\u0305\u0305\u0305\u0306\u0306\u0307\u0308\u030A\u030A\u030C\u030C\u0310\u031A\u0330\u0330\u0331\u2227\u2227\xB8\u0300\u0301\u0301\u0302\u0303\u0304\u0306\u0307\u0308\u030A\u030B\u030C\u030D\u030E\u030F\u0310\u0316\u0318\u0319\u031A\u031C\u031D\u031E\u031F\u0323\u0324\u0325\u0326\u0327\u0328\u0329\u032A\u032C\u032F\u0330\u0331\u0334\u0339\u033A\u033B\u033C\u033D]" };
  }
});

// node_modules/unicode2latex/index.js
var require_unicode2latex = __commonJS({
  "node_modules/unicode2latex/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Transform = exports2.replace_macro_spacers = exports2.combining = exports2.latex2unicode = exports2.minimal = exports2.bibtex = exports2.biblatex = void 0;
    exports2.biblatex = require_biblatex();
    exports2.bibtex = require_bibtex();
    exports2.minimal = require_minimal();
    var maps = { biblatex: exports2.biblatex, bibtex: exports2.bibtex, minimal: exports2.minimal };
    exports2.latex2unicode = require_latex2unicode();
    function permutations(str) {
      if (str.length === 0)
        return [];
      if (str.length === 1)
        return [str];
      const result = [];
      for (let i = 0; i < str.length; i++) {
        const firstChar = str[i];
        const remainingChars = str.slice(0, i) + str.slice(i + 1);
        const remainingPermutations = permutations(remainingChars);
        for (let j = 0; j < remainingPermutations.length; j++) {
          result.push(firstChar + remainingPermutations[j]);
        }
      }
      return result;
    }
    exports2.combining = require_combining();
    var combining_re = new RegExp(exports2.combining.regex);
    function replace_macro_spacers(latex) {
      return latex.replace(/\0(\s)/g, "{}$1").replace(/\0([^;.,!?${}_^\\/])/g, " $1").replace(/\0/g, "");
    }
    exports2.replace_macro_spacers = replace_macro_spacers;
    var switchMode = {
      math: "text",
      text: "math"
    };
    var re = /(i\uFE20a\uFE21)|([^\u0300-\u036F][\u0300-\u036F]+)|([\uD800-\uDBFF][\uDC00-\uDFFF])|(.)/g;
    var Transform = class {
      constructor(mode, options = {}) {
        let map = Object.assign({}, maps[mode].base);
        const packages = maps[mode].package;
        for (const pkg of (options.packages || []).map((p) => packages[p]).filter((p) => p)) {
          map = Object.assign(Object.assign({}, map), pkg);
        }
        for (const mode2 of ["text", "math"]) {
          if (!(mode2 in options))
            continue;
          for (const c of options[mode2]) {
            if (mode2 in map[c])
              map[c] = { [mode2]: map[c][mode2] };
          }
        }
        for (const c of options.ascii || "") {
          if (exports2.bibtex.base[c])
            map[c] = exports2.bibtex.base[c];
        }
        if (options.charmap) {
          for (const [u, t] of Object.entries(options.charmap)) {
            map[u.normalize("NFC")] = map[u.normalize("NFD")] = t;
          }
        }
        this.mode = mode;
        this.map = map;
      }
      tolatex(text, options = {}) {
        const { bracemath, preservemacrospacers, packages } = Object.assign({ bracemath: false, preservemacrospacers: false, packages: /* @__PURE__ */ new Set() }, options);
        let mode = "text";
        let braced = 0;
        const switchTo = {
          math: bracemath ? "{$" : "$",
          text: bracemath ? "$}" : "$"
        };
        let mapped;
        let switched;
        let m;
        let cd;
        let latex = "";
        text.normalize("NFD").replace(re, (match, tie, cdpair, pair, single) => {
          mapped = null;
          if (tie && !this.map[tie]) {
            mapped = { text: "ia" };
          } else {
            mapped = this.map[tie] || this.map[pair] || this.map[single] || this.map[cdpair];
          }
          if (!mapped && this.mode !== "minimal" && cdpair) {
            let char = cdpair[0];
            let cdmode = "";
            cdpair = cdpair.substr(1).replace(combining_re, (cdc) => {
              cd = exports2.combining.tolatex[permutations(cdc).find((p) => exports2.combining.tolatex[p])];
              if (!cd)
                return cdc;
              if (!cdmode) {
                cdmode = cd.mode;
                char = (this.map[char] || { text: char, math: char })[cdmode];
              }
              if (cdmode !== cd.mode)
                return cdc;
              const cmd = cd.macro.match(/[a-z]/i);
              if (this.mode === "bibtex" && cd.mode === "text") {
                char = `{\\${cd.macro}${cmd ? " " : ""}${char}}`;
              } else if (cmd && char.length === 1) {
                char = `\\${cd.macro} ${char}`;
              } else if (cmd) {
                char = `\\${cd.macro}{${char}}`;
              } else {
                char = `\\${cd.macro}${char}`;
              }
              return "";
            });
            if (!cdpair)
              mapped = { [cdmode]: char };
          }
          if (!mapped)
            mapped = { text: match };
          if (!mapped[mode]) {
            mode = switchMode[mode];
            latex += switchTo[mode];
            switched = true;
          } else {
            switched = false;
          }
          switch (mapped[mode]) {
            case "\\{":
              braced += 1;
              break;
            case "\\}":
              braced -= 1;
              break;
          }
          if (braced < 0) {
            latex += "\\vphantom\\{";
            braced = 0;
          }
          if (switched && mode === "text" && (m = latex.match(/([\^_])\{(.)\}(\$\}?)$/))) {
            latex = latex.slice(0, latex.length - m[0].length) + m[1] + m[2] + m[3];
          }
          latex += mapped[mode];
          if (mapped.macrospacer)
            latex += "\0";
          if (!switched && mode === "math" && (m = latex.match(/(([\^_])\{[^{}]+)\}\2{(.\})$/))) {
            latex = latex.slice(0, latex.length - m[0].length) + m[1] + m[3];
          }
          if (mapped.alt) {
            for (const pkg of mapped.alt) {
              packages.add(pkg);
            }
          }
          return match;
        });
        switch (braced) {
          case 0:
            break;
          case 1:
            latex += "\\vphantom\\}";
            break;
          default:
            latex += `\\vphantom{${"\\}".repeat(braced)}}`;
            break;
        }
        if (mode === "math")
          latex += switchTo.text;
        if (!preservemacrospacers)
          latex = replace_macro_spacers(latex);
        return latex.normalize("NFC");
      }
    };
    exports2.Transform = Transform;
  }
});

// node_modules/xregexp/tools/output/categories.js
var require_categories = __commonJS({
  "node_modules/xregexp/tools/output/categories.js"(exports2, module2) {
    module2.exports = [
      {
        "name": "C",
        "alias": "Other",
        "isBmpLast": true,
        "bmp": "\0-\x7F-\x9F\xAD\u0378\u0379\u0380-\u0383\u038B\u038D\u03A2\u0530\u0557\u0558\u058B\u058C\u0590\u05C8-\u05CF\u05EB-\u05EE\u05F5-\u0605\u061C\u06DD\u070E\u070F\u074B\u074C\u07B2-\u07BF\u07FB\u07FC\u082E\u082F\u083F\u085C\u085D\u085F\u086B-\u086F\u088F-\u0897\u08E2\u0984\u098D\u098E\u0991\u0992\u09A9\u09B1\u09B3-\u09B5\u09BA\u09BB\u09C5\u09C6\u09C9\u09CA\u09CF-\u09D6\u09D8-\u09DB\u09DE\u09E4\u09E5\u09FF\u0A00\u0A04\u0A0B-\u0A0E\u0A11\u0A12\u0A29\u0A31\u0A34\u0A37\u0A3A\u0A3B\u0A3D\u0A43-\u0A46\u0A49\u0A4A\u0A4E-\u0A50\u0A52-\u0A58\u0A5D\u0A5F-\u0A65\u0A77-\u0A80\u0A84\u0A8E\u0A92\u0AA9\u0AB1\u0AB4\u0ABA\u0ABB\u0AC6\u0ACA\u0ACE\u0ACF\u0AD1-\u0ADF\u0AE4\u0AE5\u0AF2-\u0AF8\u0B00\u0B04\u0B0D\u0B0E\u0B11\u0B12\u0B29\u0B31\u0B34\u0B3A\u0B3B\u0B45\u0B46\u0B49\u0B4A\u0B4E-\u0B54\u0B58-\u0B5B\u0B5E\u0B64\u0B65\u0B78-\u0B81\u0B84\u0B8B-\u0B8D\u0B91\u0B96-\u0B98\u0B9B\u0B9D\u0BA0-\u0BA2\u0BA5-\u0BA7\u0BAB-\u0BAD\u0BBA-\u0BBD\u0BC3-\u0BC5\u0BC9\u0BCE\u0BCF\u0BD1-\u0BD6\u0BD8-\u0BE5\u0BFB-\u0BFF\u0C0D\u0C11\u0C29\u0C3A\u0C3B\u0C45\u0C49\u0C4E-\u0C54\u0C57\u0C5B\u0C5C\u0C5E\u0C5F\u0C64\u0C65\u0C70-\u0C76\u0C8D\u0C91\u0CA9\u0CB4\u0CBA\u0CBB\u0CC5\u0CC9\u0CCE-\u0CD4\u0CD7-\u0CDC\u0CDF\u0CE4\u0CE5\u0CF0\u0CF3-\u0CFF\u0D0D\u0D11\u0D45\u0D49\u0D50-\u0D53\u0D64\u0D65\u0D80\u0D84\u0D97-\u0D99\u0DB2\u0DBC\u0DBE\u0DBF\u0DC7-\u0DC9\u0DCB-\u0DCE\u0DD5\u0DD7\u0DE0-\u0DE5\u0DF0\u0DF1\u0DF5-\u0E00\u0E3B-\u0E3E\u0E5C-\u0E80\u0E83\u0E85\u0E8B\u0EA4\u0EA6\u0EBE\u0EBF\u0EC5\u0EC7\u0ECE\u0ECF\u0EDA\u0EDB\u0EE0-\u0EFF\u0F48\u0F6D-\u0F70\u0F98\u0FBD\u0FCD\u0FDB-\u0FFF\u10C6\u10C8-\u10CC\u10CE\u10CF\u1249\u124E\u124F\u1257\u1259\u125E\u125F\u1289\u128E\u128F\u12B1\u12B6\u12B7\u12BF\u12C1\u12C6\u12C7\u12D7\u1311\u1316\u1317\u135B\u135C\u137D-\u137F\u139A-\u139F\u13F6\u13F7\u13FE\u13FF\u169D-\u169F\u16F9-\u16FF\u1716-\u171E\u1737-\u173F\u1754-\u175F\u176D\u1771\u1774-\u177F\u17DE\u17DF\u17EA-\u17EF\u17FA-\u17FF\u180E\u181A-\u181F\u1879-\u187F\u18AB-\u18AF\u18F6-\u18FF\u191F\u192C-\u192F\u193C-\u193F\u1941-\u1943\u196E\u196F\u1975-\u197F\u19AC-\u19AF\u19CA-\u19CF\u19DB-\u19DD\u1A1C\u1A1D\u1A5F\u1A7D\u1A7E\u1A8A-\u1A8F\u1A9A-\u1A9F\u1AAE\u1AAF\u1ACF-\u1AFF\u1B4D-\u1B4F\u1B7F\u1BF4-\u1BFB\u1C38-\u1C3A\u1C4A-\u1C4C\u1C89-\u1C8F\u1CBB\u1CBC\u1CC8-\u1CCF\u1CFB-\u1CFF\u1F16\u1F17\u1F1E\u1F1F\u1F46\u1F47\u1F4E\u1F4F\u1F58\u1F5A\u1F5C\u1F5E\u1F7E\u1F7F\u1FB5\u1FC5\u1FD4\u1FD5\u1FDC\u1FF0\u1FF1\u1FF5\u1FFF\u200B-\u200F\u202A-\u202E\u2060-\u206F\u2072\u2073\u208F\u209D-\u209F\u20C1-\u20CF\u20F1-\u20FF\u218C-\u218F\u2427-\u243F\u244B-\u245F\u2B74\u2B75\u2B96\u2CF4-\u2CF8\u2D26\u2D28-\u2D2C\u2D2E\u2D2F\u2D68-\u2D6E\u2D71-\u2D7E\u2D97-\u2D9F\u2DA7\u2DAF\u2DB7\u2DBF\u2DC7\u2DCF\u2DD7\u2DDF\u2E5E-\u2E7F\u2E9A\u2EF4-\u2EFF\u2FD6-\u2FEF\u2FFC-\u2FFF\u3040\u3097\u3098\u3100-\u3104\u3130\u318F\u31E4-\u31EF\u321F\uA48D-\uA48F\uA4C7-\uA4CF\uA62C-\uA63F\uA6F8-\uA6FF\uA7CB-\uA7CF\uA7D2\uA7D4\uA7DA-\uA7F1\uA82D-\uA82F\uA83A-\uA83F\uA878-\uA87F\uA8C6-\uA8CD\uA8DA-\uA8DF\uA954-\uA95E\uA97D-\uA97F\uA9CE\uA9DA-\uA9DD\uA9FF\uAA37-\uAA3F\uAA4E\uAA4F\uAA5A\uAA5B\uAAC3-\uAADA\uAAF7-\uAB00\uAB07\uAB08\uAB0F\uAB10\uAB17-\uAB1F\uAB27\uAB2F\uAB6C-\uAB6F\uABEE\uABEF\uABFA-\uABFF\uD7A4-\uD7AF\uD7C7-\uD7CA\uD7FC-\uF8FF\uFA6E\uFA6F\uFADA-\uFAFF\uFB07-\uFB12\uFB18-\uFB1C\uFB37\uFB3D\uFB3F\uFB42\uFB45\uFBC3-\uFBD2\uFD90\uFD91\uFDC8-\uFDCE\uFDD0-\uFDEF\uFE1A-\uFE1F\uFE53\uFE67\uFE6C-\uFE6F\uFE75\uFEFD-\uFF00\uFFBF-\uFFC1\uFFC8\uFFC9\uFFD0\uFFD1\uFFD8\uFFD9\uFFDD-\uFFDF\uFFE7\uFFEF-\uFFFB\uFFFE\uFFFF",
        "astral": "\uD800[\uDC0C\uDC27\uDC3B\uDC3E\uDC4E\uDC4F\uDC5E-\uDC7F\uDCFB-\uDCFF\uDD03-\uDD06\uDD34-\uDD36\uDD8F\uDD9D-\uDD9F\uDDA1-\uDDCF\uDDFE-\uDE7F\uDE9D-\uDE9F\uDED1-\uDEDF\uDEFC-\uDEFF\uDF24-\uDF2C\uDF4B-\uDF4F\uDF7B-\uDF7F\uDF9E\uDFC4-\uDFC7\uDFD6-\uDFFF]|\uD801[\uDC9E\uDC9F\uDCAA-\uDCAF\uDCD4-\uDCD7\uDCFC-\uDCFF\uDD28-\uDD2F\uDD64-\uDD6E\uDD7B\uDD8B\uDD93\uDD96\uDDA2\uDDB2\uDDBA\uDDBD-\uDDFF\uDF37-\uDF3F\uDF56-\uDF5F\uDF68-\uDF7F\uDF86\uDFB1\uDFBB-\uDFFF]|\uD802[\uDC06\uDC07\uDC09\uDC36\uDC39-\uDC3B\uDC3D\uDC3E\uDC56\uDC9F-\uDCA6\uDCB0-\uDCDF\uDCF3\uDCF6-\uDCFA\uDD1C-\uDD1E\uDD3A-\uDD3E\uDD40-\uDD7F\uDDB8-\uDDBB\uDDD0\uDDD1\uDE04\uDE07-\uDE0B\uDE14\uDE18\uDE36\uDE37\uDE3B-\uDE3E\uDE49-\uDE4F\uDE59-\uDE5F\uDEA0-\uDEBF\uDEE7-\uDEEA\uDEF7-\uDEFF\uDF36-\uDF38\uDF56\uDF57\uDF73-\uDF77\uDF92-\uDF98\uDF9D-\uDFA8\uDFB0-\uDFFF]|\uD803[\uDC49-\uDC7F\uDCB3-\uDCBF\uDCF3-\uDCF9\uDD28-\uDD2F\uDD3A-\uDE5F\uDE7F\uDEAA\uDEAE\uDEAF\uDEB2-\uDEFF\uDF28-\uDF2F\uDF5A-\uDF6F\uDF8A-\uDFAF\uDFCC-\uDFDF\uDFF7-\uDFFF]|\uD804[\uDC4E-\uDC51\uDC76-\uDC7E\uDCBD\uDCC3-\uDCCF\uDCE9-\uDCEF\uDCFA-\uDCFF\uDD35\uDD48-\uDD4F\uDD77-\uDD7F\uDDE0\uDDF5-\uDDFF\uDE12\uDE3F-\uDE7F\uDE87\uDE89\uDE8E\uDE9E\uDEAA-\uDEAF\uDEEB-\uDEEF\uDEFA-\uDEFF\uDF04\uDF0D\uDF0E\uDF11\uDF12\uDF29\uDF31\uDF34\uDF3A\uDF45\uDF46\uDF49\uDF4A\uDF4E\uDF4F\uDF51-\uDF56\uDF58-\uDF5C\uDF64\uDF65\uDF6D-\uDF6F\uDF75-\uDFFF]|\uD805[\uDC5C\uDC62-\uDC7F\uDCC8-\uDCCF\uDCDA-\uDD7F\uDDB6\uDDB7\uDDDE-\uDDFF\uDE45-\uDE4F\uDE5A-\uDE5F\uDE6D-\uDE7F\uDEBA-\uDEBF\uDECA-\uDEFF\uDF1B\uDF1C\uDF2C-\uDF2F\uDF47-\uDFFF]|\uD806[\uDC3C-\uDC9F\uDCF3-\uDCFE\uDD07\uDD08\uDD0A\uDD0B\uDD14\uDD17\uDD36\uDD39\uDD3A\uDD47-\uDD4F\uDD5A-\uDD9F\uDDA8\uDDA9\uDDD8\uDDD9\uDDE5-\uDDFF\uDE48-\uDE4F\uDEA3-\uDEAF\uDEF9-\uDFFF]|\uD807[\uDC09\uDC37\uDC46-\uDC4F\uDC6D-\uDC6F\uDC90\uDC91\uDCA8\uDCB7-\uDCFF\uDD07\uDD0A\uDD37-\uDD39\uDD3B\uDD3E\uDD48-\uDD4F\uDD5A-\uDD5F\uDD66\uDD69\uDD8F\uDD92\uDD99-\uDD9F\uDDAA-\uDEDF\uDEF9-\uDFAF\uDFB1-\uDFBF\uDFF2-\uDFFE]|\uD808[\uDF9A-\uDFFF]|\uD809[\uDC6F\uDC75-\uDC7F\uDD44-\uDFFF]|[\uD80A\uD80E-\uD810\uD812-\uD819\uD824-\uD82A\uD82D\uD82E\uD830-\uD832\uD83F\uD87B-\uD87D\uD87F\uD885-\uDB3F\uDB41-\uDBFF][\uDC00-\uDFFF]|\uD80B[\uDC00-\uDF8F\uDFF3-\uDFFF]|\uD80D[\uDC2F-\uDFFF]|\uD811[\uDE47-\uDFFF]|\uD81A[\uDE39-\uDE3F\uDE5F\uDE6A-\uDE6D\uDEBF\uDECA-\uDECF\uDEEE\uDEEF\uDEF6-\uDEFF\uDF46-\uDF4F\uDF5A\uDF62\uDF78-\uDF7C\uDF90-\uDFFF]|\uD81B[\uDC00-\uDE3F\uDE9B-\uDEFF\uDF4B-\uDF4E\uDF88-\uDF8E\uDFA0-\uDFDF\uDFE5-\uDFEF\uDFF2-\uDFFF]|\uD821[\uDFF8-\uDFFF]|\uD823[\uDCD6-\uDCFF\uDD09-\uDFFF]|\uD82B[\uDC00-\uDFEF\uDFF4\uDFFC\uDFFF]|\uD82C[\uDD23-\uDD4F\uDD53-\uDD63\uDD68-\uDD6F\uDEFC-\uDFFF]|\uD82F[\uDC6B-\uDC6F\uDC7D-\uDC7F\uDC89-\uDC8F\uDC9A\uDC9B\uDCA0-\uDFFF]|\uD833[\uDC00-\uDEFF\uDF2E\uDF2F\uDF47-\uDF4F\uDFC4-\uDFFF]|\uD834[\uDCF6-\uDCFF\uDD27\uDD28\uDD73-\uDD7A\uDDEB-\uDDFF\uDE46-\uDEDF\uDEF4-\uDEFF\uDF57-\uDF5F\uDF79-\uDFFF]|\uD835[\uDC55\uDC9D\uDCA0\uDCA1\uDCA3\uDCA4\uDCA7\uDCA8\uDCAD\uDCBA\uDCBC\uDCC4\uDD06\uDD0B\uDD0C\uDD15\uDD1D\uDD3A\uDD3F\uDD45\uDD47-\uDD49\uDD51\uDEA6\uDEA7\uDFCC\uDFCD]|\uD836[\uDE8C-\uDE9A\uDEA0\uDEB0-\uDFFF]|\uD837[\uDC00-\uDEFF\uDF1F-\uDFFF]|\uD838[\uDC07\uDC19\uDC1A\uDC22\uDC25\uDC2B-\uDCFF\uDD2D-\uDD2F\uDD3E\uDD3F\uDD4A-\uDD4D\uDD50-\uDE8F\uDEAF-\uDEBF\uDEFA-\uDEFE\uDF00-\uDFFF]|\uD839[\uDC00-\uDFDF\uDFE7\uDFEC\uDFEF\uDFFF]|\uD83A[\uDCC5\uDCC6\uDCD7-\uDCFF\uDD4C-\uDD4F\uDD5A-\uDD5D\uDD60-\uDFFF]|\uD83B[\uDC00-\uDC70\uDCB5-\uDD00\uDD3E-\uDDFF\uDE04\uDE20\uDE23\uDE25\uDE26\uDE28\uDE33\uDE38\uDE3A\uDE3C-\uDE41\uDE43-\uDE46\uDE48\uDE4A\uDE4C\uDE50\uDE53\uDE55\uDE56\uDE58\uDE5A\uDE5C\uDE5E\uDE60\uDE63\uDE65\uDE66\uDE6B\uDE73\uDE78\uDE7D\uDE7F\uDE8A\uDE9C-\uDEA0\uDEA4\uDEAA\uDEBC-\uDEEF\uDEF2-\uDFFF]|\uD83C[\uDC2C-\uDC2F\uDC94-\uDC9F\uDCAF\uDCB0\uDCC0\uDCD0\uDCF6-\uDCFF\uDDAE-\uDDE5\uDE03-\uDE0F\uDE3C-\uDE3F\uDE49-\uDE4F\uDE52-\uDE5F\uDE66-\uDEFF]|\uD83D[\uDED8-\uDEDC\uDEED-\uDEEF\uDEFD-\uDEFF\uDF74-\uDF7F\uDFD9-\uDFDF\uDFEC-\uDFEF\uDFF1-\uDFFF]|\uD83E[\uDC0C-\uDC0F\uDC48-\uDC4F\uDC5A-\uDC5F\uDC88-\uDC8F\uDCAE\uDCAF\uDCB2-\uDCFF\uDE54-\uDE5F\uDE6E\uDE6F\uDE75-\uDE77\uDE7D-\uDE7F\uDE87-\uDE8F\uDEAD-\uDEAF\uDEBB-\uDEBF\uDEC6-\uDECF\uDEDA-\uDEDF\uDEE8-\uDEEF\uDEF7-\uDEFF\uDF93\uDFCB-\uDFEF\uDFFA-\uDFFF]|\uD869[\uDEE0-\uDEFF]|\uD86D[\uDF39-\uDF3F]|\uD86E[\uDC1E\uDC1F]|\uD873[\uDEA2-\uDEAF]|\uD87A[\uDFE1-\uDFFF]|\uD87E[\uDE1E-\uDFFF]|\uD884[\uDF4B-\uDFFF]|\uDB40[\uDC00-\uDCFF\uDDF0-\uDFFF]"
      },
      {
        "name": "Cc",
        "alias": "Control",
        "bmp": "\0-\x7F-\x9F"
      },
      {
        "name": "Cf",
        "alias": "Format",
        "bmp": "\xAD\u0600-\u0605\u061C\u06DD\u070F\u0890\u0891\u08E2\u180E\u200B-\u200F\u202A-\u202E\u2060-\u2064\u2066-\u206F\uFEFF\uFFF9-\uFFFB",
        "astral": "\uD804[\uDCBD\uDCCD]|\uD80D[\uDC30-\uDC38]|\uD82F[\uDCA0-\uDCA3]|\uD834[\uDD73-\uDD7A]|\uDB40[\uDC01\uDC20-\uDC7F]"
      },
      {
        "name": "Cn",
        "alias": "Unassigned",
        "bmp": "\u0378\u0379\u0380-\u0383\u038B\u038D\u03A2\u0530\u0557\u0558\u058B\u058C\u0590\u05C8-\u05CF\u05EB-\u05EE\u05F5-\u05FF\u070E\u074B\u074C\u07B2-\u07BF\u07FB\u07FC\u082E\u082F\u083F\u085C\u085D\u085F\u086B-\u086F\u088F\u0892-\u0897\u0984\u098D\u098E\u0991\u0992\u09A9\u09B1\u09B3-\u09B5\u09BA\u09BB\u09C5\u09C6\u09C9\u09CA\u09CF-\u09D6\u09D8-\u09DB\u09DE\u09E4\u09E5\u09FF\u0A00\u0A04\u0A0B-\u0A0E\u0A11\u0A12\u0A29\u0A31\u0A34\u0A37\u0A3A\u0A3B\u0A3D\u0A43-\u0A46\u0A49\u0A4A\u0A4E-\u0A50\u0A52-\u0A58\u0A5D\u0A5F-\u0A65\u0A77-\u0A80\u0A84\u0A8E\u0A92\u0AA9\u0AB1\u0AB4\u0ABA\u0ABB\u0AC6\u0ACA\u0ACE\u0ACF\u0AD1-\u0ADF\u0AE4\u0AE5\u0AF2-\u0AF8\u0B00\u0B04\u0B0D\u0B0E\u0B11\u0B12\u0B29\u0B31\u0B34\u0B3A\u0B3B\u0B45\u0B46\u0B49\u0B4A\u0B4E-\u0B54\u0B58-\u0B5B\u0B5E\u0B64\u0B65\u0B78-\u0B81\u0B84\u0B8B-\u0B8D\u0B91\u0B96-\u0B98\u0B9B\u0B9D\u0BA0-\u0BA2\u0BA5-\u0BA7\u0BAB-\u0BAD\u0BBA-\u0BBD\u0BC3-\u0BC5\u0BC9\u0BCE\u0BCF\u0BD1-\u0BD6\u0BD8-\u0BE5\u0BFB-\u0BFF\u0C0D\u0C11\u0C29\u0C3A\u0C3B\u0C45\u0C49\u0C4E-\u0C54\u0C57\u0C5B\u0C5C\u0C5E\u0C5F\u0C64\u0C65\u0C70-\u0C76\u0C8D\u0C91\u0CA9\u0CB4\u0CBA\u0CBB\u0CC5\u0CC9\u0CCE-\u0CD4\u0CD7-\u0CDC\u0CDF\u0CE4\u0CE5\u0CF0\u0CF3-\u0CFF\u0D0D\u0D11\u0D45\u0D49\u0D50-\u0D53\u0D64\u0D65\u0D80\u0D84\u0D97-\u0D99\u0DB2\u0DBC\u0DBE\u0DBF\u0DC7-\u0DC9\u0DCB-\u0DCE\u0DD5\u0DD7\u0DE0-\u0DE5\u0DF0\u0DF1\u0DF5-\u0E00\u0E3B-\u0E3E\u0E5C-\u0E80\u0E83\u0E85\u0E8B\u0EA4\u0EA6\u0EBE\u0EBF\u0EC5\u0EC7\u0ECE\u0ECF\u0EDA\u0EDB\u0EE0-\u0EFF\u0F48\u0F6D-\u0F70\u0F98\u0FBD\u0FCD\u0FDB-\u0FFF\u10C6\u10C8-\u10CC\u10CE\u10CF\u1249\u124E\u124F\u1257\u1259\u125E\u125F\u1289\u128E\u128F\u12B1\u12B6\u12B7\u12BF\u12C1\u12C6\u12C7\u12D7\u1311\u1316\u1317\u135B\u135C\u137D-\u137F\u139A-\u139F\u13F6\u13F7\u13FE\u13FF\u169D-\u169F\u16F9-\u16FF\u1716-\u171E\u1737-\u173F\u1754-\u175F\u176D\u1771\u1774-\u177F\u17DE\u17DF\u17EA-\u17EF\u17FA-\u17FF\u181A-\u181F\u1879-\u187F\u18AB-\u18AF\u18F6-\u18FF\u191F\u192C-\u192F\u193C-\u193F\u1941-\u1943\u196E\u196F\u1975-\u197F\u19AC-\u19AF\u19CA-\u19CF\u19DB-\u19DD\u1A1C\u1A1D\u1A5F\u1A7D\u1A7E\u1A8A-\u1A8F\u1A9A-\u1A9F\u1AAE\u1AAF\u1ACF-\u1AFF\u1B4D-\u1B4F\u1B7F\u1BF4-\u1BFB\u1C38-\u1C3A\u1C4A-\u1C4C\u1C89-\u1C8F\u1CBB\u1CBC\u1CC8-\u1CCF\u1CFB-\u1CFF\u1F16\u1F17\u1F1E\u1F1F\u1F46\u1F47\u1F4E\u1F4F\u1F58\u1F5A\u1F5C\u1F5E\u1F7E\u1F7F\u1FB5\u1FC5\u1FD4\u1FD5\u1FDC\u1FF0\u1FF1\u1FF5\u1FFF\u2065\u2072\u2073\u208F\u209D-\u209F\u20C1-\u20CF\u20F1-\u20FF\u218C-\u218F\u2427-\u243F\u244B-\u245F\u2B74\u2B75\u2B96\u2CF4-\u2CF8\u2D26\u2D28-\u2D2C\u2D2E\u2D2F\u2D68-\u2D6E\u2D71-\u2D7E\u2D97-\u2D9F\u2DA7\u2DAF\u2DB7\u2DBF\u2DC7\u2DCF\u2DD7\u2DDF\u2E5E-\u2E7F\u2E9A\u2EF4-\u2EFF\u2FD6-\u2FEF\u2FFC-\u2FFF\u3040\u3097\u3098\u3100-\u3104\u3130\u318F\u31E4-\u31EF\u321F\uA48D-\uA48F\uA4C7-\uA4CF\uA62C-\uA63F\uA6F8-\uA6FF\uA7CB-\uA7CF\uA7D2\uA7D4\uA7DA-\uA7F1\uA82D-\uA82F\uA83A-\uA83F\uA878-\uA87F\uA8C6-\uA8CD\uA8DA-\uA8DF\uA954-\uA95E\uA97D-\uA97F\uA9CE\uA9DA-\uA9DD\uA9FF\uAA37-\uAA3F\uAA4E\uAA4F\uAA5A\uAA5B\uAAC3-\uAADA\uAAF7-\uAB00\uAB07\uAB08\uAB0F\uAB10\uAB17-\uAB1F\uAB27\uAB2F\uAB6C-\uAB6F\uABEE\uABEF\uABFA-\uABFF\uD7A4-\uD7AF\uD7C7-\uD7CA\uD7FC-\uD7FF\uFA6E\uFA6F\uFADA-\uFAFF\uFB07-\uFB12\uFB18-\uFB1C\uFB37\uFB3D\uFB3F\uFB42\uFB45\uFBC3-\uFBD2\uFD90\uFD91\uFDC8-\uFDCE\uFDD0-\uFDEF\uFE1A-\uFE1F\uFE53\uFE67\uFE6C-\uFE6F\uFE75\uFEFD\uFEFE\uFF00\uFFBF-\uFFC1\uFFC8\uFFC9\uFFD0\uFFD1\uFFD8\uFFD9\uFFDD-\uFFDF\uFFE7\uFFEF-\uFFF8\uFFFE\uFFFF",
        "astral": "\uD800[\uDC0C\uDC27\uDC3B\uDC3E\uDC4E\uDC4F\uDC5E-\uDC7F\uDCFB-\uDCFF\uDD03-\uDD06\uDD34-\uDD36\uDD8F\uDD9D-\uDD9F\uDDA1-\uDDCF\uDDFE-\uDE7F\uDE9D-\uDE9F\uDED1-\uDEDF\uDEFC-\uDEFF\uDF24-\uDF2C\uDF4B-\uDF4F\uDF7B-\uDF7F\uDF9E\uDFC4-\uDFC7\uDFD6-\uDFFF]|\uD801[\uDC9E\uDC9F\uDCAA-\uDCAF\uDCD4-\uDCD7\uDCFC-\uDCFF\uDD28-\uDD2F\uDD64-\uDD6E\uDD7B\uDD8B\uDD93\uDD96\uDDA2\uDDB2\uDDBA\uDDBD-\uDDFF\uDF37-\uDF3F\uDF56-\uDF5F\uDF68-\uDF7F\uDF86\uDFB1\uDFBB-\uDFFF]|\uD802[\uDC06\uDC07\uDC09\uDC36\uDC39-\uDC3B\uDC3D\uDC3E\uDC56\uDC9F-\uDCA6\uDCB0-\uDCDF\uDCF3\uDCF6-\uDCFA\uDD1C-\uDD1E\uDD3A-\uDD3E\uDD40-\uDD7F\uDDB8-\uDDBB\uDDD0\uDDD1\uDE04\uDE07-\uDE0B\uDE14\uDE18\uDE36\uDE37\uDE3B-\uDE3E\uDE49-\uDE4F\uDE59-\uDE5F\uDEA0-\uDEBF\uDEE7-\uDEEA\uDEF7-\uDEFF\uDF36-\uDF38\uDF56\uDF57\uDF73-\uDF77\uDF92-\uDF98\uDF9D-\uDFA8\uDFB0-\uDFFF]|\uD803[\uDC49-\uDC7F\uDCB3-\uDCBF\uDCF3-\uDCF9\uDD28-\uDD2F\uDD3A-\uDE5F\uDE7F\uDEAA\uDEAE\uDEAF\uDEB2-\uDEFF\uDF28-\uDF2F\uDF5A-\uDF6F\uDF8A-\uDFAF\uDFCC-\uDFDF\uDFF7-\uDFFF]|\uD804[\uDC4E-\uDC51\uDC76-\uDC7E\uDCC3-\uDCCC\uDCCE\uDCCF\uDCE9-\uDCEF\uDCFA-\uDCFF\uDD35\uDD48-\uDD4F\uDD77-\uDD7F\uDDE0\uDDF5-\uDDFF\uDE12\uDE3F-\uDE7F\uDE87\uDE89\uDE8E\uDE9E\uDEAA-\uDEAF\uDEEB-\uDEEF\uDEFA-\uDEFF\uDF04\uDF0D\uDF0E\uDF11\uDF12\uDF29\uDF31\uDF34\uDF3A\uDF45\uDF46\uDF49\uDF4A\uDF4E\uDF4F\uDF51-\uDF56\uDF58-\uDF5C\uDF64\uDF65\uDF6D-\uDF6F\uDF75-\uDFFF]|\uD805[\uDC5C\uDC62-\uDC7F\uDCC8-\uDCCF\uDCDA-\uDD7F\uDDB6\uDDB7\uDDDE-\uDDFF\uDE45-\uDE4F\uDE5A-\uDE5F\uDE6D-\uDE7F\uDEBA-\uDEBF\uDECA-\uDEFF\uDF1B\uDF1C\uDF2C-\uDF2F\uDF47-\uDFFF]|\uD806[\uDC3C-\uDC9F\uDCF3-\uDCFE\uDD07\uDD08\uDD0A\uDD0B\uDD14\uDD17\uDD36\uDD39\uDD3A\uDD47-\uDD4F\uDD5A-\uDD9F\uDDA8\uDDA9\uDDD8\uDDD9\uDDE5-\uDDFF\uDE48-\uDE4F\uDEA3-\uDEAF\uDEF9-\uDFFF]|\uD807[\uDC09\uDC37\uDC46-\uDC4F\uDC6D-\uDC6F\uDC90\uDC91\uDCA8\uDCB7-\uDCFF\uDD07\uDD0A\uDD37-\uDD39\uDD3B\uDD3E\uDD48-\uDD4F\uDD5A-\uDD5F\uDD66\uDD69\uDD8F\uDD92\uDD99-\uDD9F\uDDAA-\uDEDF\uDEF9-\uDFAF\uDFB1-\uDFBF\uDFF2-\uDFFE]|\uD808[\uDF9A-\uDFFF]|\uD809[\uDC6F\uDC75-\uDC7F\uDD44-\uDFFF]|[\uD80A\uD80E-\uD810\uD812-\uD819\uD824-\uD82A\uD82D\uD82E\uD830-\uD832\uD83F\uD87B-\uD87D\uD87F\uD885-\uDB3F\uDB41-\uDB7F][\uDC00-\uDFFF]|\uD80B[\uDC00-\uDF8F\uDFF3-\uDFFF]|\uD80D[\uDC2F\uDC39-\uDFFF]|\uD811[\uDE47-\uDFFF]|\uD81A[\uDE39-\uDE3F\uDE5F\uDE6A-\uDE6D\uDEBF\uDECA-\uDECF\uDEEE\uDEEF\uDEF6-\uDEFF\uDF46-\uDF4F\uDF5A\uDF62\uDF78-\uDF7C\uDF90-\uDFFF]|\uD81B[\uDC00-\uDE3F\uDE9B-\uDEFF\uDF4B-\uDF4E\uDF88-\uDF8E\uDFA0-\uDFDF\uDFE5-\uDFEF\uDFF2-\uDFFF]|\uD821[\uDFF8-\uDFFF]|\uD823[\uDCD6-\uDCFF\uDD09-\uDFFF]|\uD82B[\uDC00-\uDFEF\uDFF4\uDFFC\uDFFF]|\uD82C[\uDD23-\uDD4F\uDD53-\uDD63\uDD68-\uDD6F\uDEFC-\uDFFF]|\uD82F[\uDC6B-\uDC6F\uDC7D-\uDC7F\uDC89-\uDC8F\uDC9A\uDC9B\uDCA4-\uDFFF]|\uD833[\uDC00-\uDEFF\uDF2E\uDF2F\uDF47-\uDF4F\uDFC4-\uDFFF]|\uD834[\uDCF6-\uDCFF\uDD27\uDD28\uDDEB-\uDDFF\uDE46-\uDEDF\uDEF4-\uDEFF\uDF57-\uDF5F\uDF79-\uDFFF]|\uD835[\uDC55\uDC9D\uDCA0\uDCA1\uDCA3\uDCA4\uDCA7\uDCA8\uDCAD\uDCBA\uDCBC\uDCC4\uDD06\uDD0B\uDD0C\uDD15\uDD1D\uDD3A\uDD3F\uDD45\uDD47-\uDD49\uDD51\uDEA6\uDEA7\uDFCC\uDFCD]|\uD836[\uDE8C-\uDE9A\uDEA0\uDEB0-\uDFFF]|\uD837[\uDC00-\uDEFF\uDF1F-\uDFFF]|\uD838[\uDC07\uDC19\uDC1A\uDC22\uDC25\uDC2B-\uDCFF\uDD2D-\uDD2F\uDD3E\uDD3F\uDD4A-\uDD4D\uDD50-\uDE8F\uDEAF-\uDEBF\uDEFA-\uDEFE\uDF00-\uDFFF]|\uD839[\uDC00-\uDFDF\uDFE7\uDFEC\uDFEF\uDFFF]|\uD83A[\uDCC5\uDCC6\uDCD7-\uDCFF\uDD4C-\uDD4F\uDD5A-\uDD5D\uDD60-\uDFFF]|\uD83B[\uDC00-\uDC70\uDCB5-\uDD00\uDD3E-\uDDFF\uDE04\uDE20\uDE23\uDE25\uDE26\uDE28\uDE33\uDE38\uDE3A\uDE3C-\uDE41\uDE43-\uDE46\uDE48\uDE4A\uDE4C\uDE50\uDE53\uDE55\uDE56\uDE58\uDE5A\uDE5C\uDE5E\uDE60\uDE63\uDE65\uDE66\uDE6B\uDE73\uDE78\uDE7D\uDE7F\uDE8A\uDE9C-\uDEA0\uDEA4\uDEAA\uDEBC-\uDEEF\uDEF2-\uDFFF]|\uD83C[\uDC2C-\uDC2F\uDC94-\uDC9F\uDCAF\uDCB0\uDCC0\uDCD0\uDCF6-\uDCFF\uDDAE-\uDDE5\uDE03-\uDE0F\uDE3C-\uDE3F\uDE49-\uDE4F\uDE52-\uDE5F\uDE66-\uDEFF]|\uD83D[\uDED8-\uDEDC\uDEED-\uDEEF\uDEFD-\uDEFF\uDF74-\uDF7F\uDFD9-\uDFDF\uDFEC-\uDFEF\uDFF1-\uDFFF]|\uD83E[\uDC0C-\uDC0F\uDC48-\uDC4F\uDC5A-\uDC5F\uDC88-\uDC8F\uDCAE\uDCAF\uDCB2-\uDCFF\uDE54-\uDE5F\uDE6E\uDE6F\uDE75-\uDE77\uDE7D-\uDE7F\uDE87-\uDE8F\uDEAD-\uDEAF\uDEBB-\uDEBF\uDEC6-\uDECF\uDEDA-\uDEDF\uDEE8-\uDEEF\uDEF7-\uDEFF\uDF93\uDFCB-\uDFEF\uDFFA-\uDFFF]|\uD869[\uDEE0-\uDEFF]|\uD86D[\uDF39-\uDF3F]|\uD86E[\uDC1E\uDC1F]|\uD873[\uDEA2-\uDEAF]|\uD87A[\uDFE1-\uDFFF]|\uD87E[\uDE1E-\uDFFF]|\uD884[\uDF4B-\uDFFF]|\uDB40[\uDC00\uDC02-\uDC1F\uDC80-\uDCFF\uDDF0-\uDFFF]|[\uDBBF\uDBFF][\uDFFE\uDFFF]"
      },
      {
        "name": "Co",
        "alias": "Private_Use",
        "bmp": "\uE000-\uF8FF",
        "astral": "[\uDB80-\uDBBE\uDBC0-\uDBFE][\uDC00-\uDFFF]|[\uDBBF\uDBFF][\uDC00-\uDFFD]"
      },
      {
        "name": "Cs",
        "alias": "Surrogate",
        "bmp": "\uD800-\uDFFF"
      },
      {
        "name": "L",
        "alias": "Letter",
        "bmp": "A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC",
        "astral": "\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67\uDF80-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD23\uDE80-\uDEA9\uDEB0\uDEB1\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDF70-\uDF81\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC71\uDC72\uDC75\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A\uDF40-\uDF46]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCDF\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEB0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|\uD80B[\uDF90-\uDFF0]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE70-\uDEBE\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE7F\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82B[\uDFF0-\uDFF3\uDFF5-\uDFFB\uDFFD\uDFFE]|\uD82C[\uDC00-\uDD22\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD837[\uDF00-\uDF1E]|\uD838[\uDD00-\uDD2C\uDD37-\uDD3D\uDD4E\uDE90-\uDEAD\uDEC0-\uDEEB]|\uD839[\uDFE0-\uDFE6\uDFE8-\uDFEB\uDFED\uDFEE\uDFF0-\uDFFE]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD4B]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF38\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A]"
      },
      {
        "name": "LC",
        "alias": "Cased_Letter",
        "bmp": "A-Za-z\xB5\xC0-\xD6\xD8-\xF6\xF8-\u01BA\u01BC-\u01BF\u01C4-\u0293\u0295-\u02AF\u0370-\u0373\u0376\u0377\u037B-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0560-\u0588\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FD-\u10FF\u13A0-\u13F5\u13F8-\u13FD\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2134\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C7B\u2C7E-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA640-\uA66D\uA680-\uA69B\uA722-\uA76F\uA771-\uA787\uA78B-\uA78E\uA790-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F5\uA7F6\uA7FA\uAB30-\uAB5A\uAB60-\uAB68\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF21-\uFF3A\uFF41-\uFF5A",
        "astral": "\uD801[\uDC00-\uDC4F\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC]|\uD803[\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD806[\uDCA0-\uDCDF]|\uD81B[\uDE40-\uDE7F]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD837[\uDF00-\uDF09\uDF0B-\uDF1E]|\uD83A[\uDD00-\uDD43]"
      },
      {
        "name": "Ll",
        "alias": "Lowercase_Letter",
        "bmp": "a-z\xB5\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0560-\u0588\u10D0-\u10FA\u10FD-\u10FF\u13F8-\u13FD\u1C80-\u1C88\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5F\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7AF\uA7B5\uA7B7\uA7B9\uA7BB\uA7BD\uA7BF\uA7C1\uA7C3\uA7C8\uA7CA\uA7D1\uA7D3\uA7D5\uA7D7\uA7D9\uA7F6\uA7FA\uAB30-\uAB5A\uAB60-\uAB68\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A",
        "astral": "\uD801[\uDC28-\uDC4F\uDCD8-\uDCFB\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC]|\uD803[\uDCC0-\uDCF2]|\uD806[\uDCC0-\uDCDF]|\uD81B[\uDE60-\uDE7F]|\uD835[\uDC1A-\uDC33\uDC4E-\uDC54\uDC56-\uDC67\uDC82-\uDC9B\uDCB6-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDCEA-\uDD03\uDD1E-\uDD37\uDD52-\uDD6B\uDD86-\uDD9F\uDDBA-\uDDD3\uDDEE-\uDE07\uDE22-\uDE3B\uDE56-\uDE6F\uDE8A-\uDEA5\uDEC2-\uDEDA\uDEDC-\uDEE1\uDEFC-\uDF14\uDF16-\uDF1B\uDF36-\uDF4E\uDF50-\uDF55\uDF70-\uDF88\uDF8A-\uDF8F\uDFAA-\uDFC2\uDFC4-\uDFC9\uDFCB]|\uD837[\uDF00-\uDF09\uDF0B-\uDF1E]|\uD83A[\uDD22-\uDD43]"
      },
      {
        "name": "Lm",
        "alias": "Modifier_Letter",
        "bmp": "\u02B0-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0374\u037A\u0559\u0640\u06E5\u06E6\u07F4\u07F5\u07FA\u081A\u0824\u0828\u08C9\u0971\u0E46\u0EC6\u10FC\u17D7\u1843\u1AA7\u1C78-\u1C7D\u1D2C-\u1D6A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C\u2C7D\u2D6F\u2E2F\u3005\u3031-\u3035\u303B\u309D\u309E\u30FC-\u30FE\uA015\uA4F8-\uA4FD\uA60C\uA67F\uA69C\uA69D\uA717-\uA71F\uA770\uA788\uA7F2-\uA7F4\uA7F8\uA7F9\uA9CF\uA9E6\uAA70\uAADD\uAAF3\uAAF4\uAB5C-\uAB5F\uAB69\uFF70\uFF9E\uFF9F",
        "astral": "\uD801[\uDF80-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|\uD81A[\uDF40-\uDF43]|\uD81B[\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD82B[\uDFF0-\uDFF3\uDFF5-\uDFFB\uDFFD\uDFFE]|\uD838[\uDD37-\uDD3D]|\u{1E94B}"
      },
      {
        "name": "Lo",
        "alias": "Other_Letter",
        "bmp": "\xAA\xBA\u01BB\u01C0-\u01C3\u0294\u05D0-\u05EA\u05EF-\u05F2\u0620-\u063F\u0641-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u0800-\u0815\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C8\u0904-\u0939\u093D\u0950\u0958-\u0961\u0972-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E45\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u1100-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17DC\u1820-\u1842\u1844-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C77\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u2135-\u2138\u2D30-\u2D67\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3006\u303C\u3041-\u3096\u309F\u30A1-\u30FA\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA014\uA016-\uA48C\uA4D0-\uA4F7\uA500-\uA60B\uA610-\uA61F\uA62A\uA62B\uA66E\uA6A0-\uA6E5\uA78F\uA7F7\uA7FB-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9E0-\uA9E4\uA9E7-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA6F\uAA71-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB\uAADC\uAAE0-\uAAEA\uAAF2\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF66-\uFF6F\uFF71-\uFF9D\uFFA0-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC",
        "astral": "\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC50-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDD00-\uDD23\uDE80-\uDEA9\uDEB0\uDEB1\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDF70-\uDF81\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC71\uDC72\uDC75\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A\uDF40-\uDF46]|\uD806[\uDC00-\uDC2B\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEB0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|\uD80B[\uDF90-\uDFF0]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE70-\uDEBE\uDED0-\uDEED\uDF00-\uDF2F\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF4A\uDF50]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82C[\uDC00-\uDD22\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\u{1DF0A}|\uD838[\uDD00-\uDD2C\uDD4E\uDE90-\uDEAD\uDEC0-\uDEEB]|\uD839[\uDFE0-\uDFE6\uDFE8-\uDFEB\uDFED\uDFEE\uDFF0-\uDFFE]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF38\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A]"
      },
      {
        "name": "Lt",
        "alias": "Titlecase_Letter",
        "bmp": "\u01C5\u01C8\u01CB\u01F2\u1F88-\u1F8F\u1F98-\u1F9F\u1FA8-\u1FAF\u1FBC\u1FCC\u1FFC"
      },
      {
        "name": "Lu",
        "alias": "Uppercase_Letter",
        "bmp": "A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1C90-\u1CBA\u1CBD-\u1CBF\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2F\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AE\uA7B0-\uA7B4\uA7B6\uA7B8\uA7BA\uA7BC\uA7BE\uA7C0\uA7C2\uA7C4-\uA7C7\uA7C9\uA7D0\uA7D6\uA7D8\uA7F5\uFF21-\uFF3A",
        "astral": "\uD801[\uDC00-\uDC27\uDCB0-\uDCD3\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95]|\uD803[\uDC80-\uDCB2]|\uD806[\uDCA0-\uDCBF]|\uD81B[\uDE40-\uDE5F]|\uD835[\uDC00-\uDC19\uDC34-\uDC4D\uDC68-\uDC81\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB5\uDCD0-\uDCE9\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD38\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD6C-\uDD85\uDDA0-\uDDB9\uDDD4-\uDDED\uDE08-\uDE21\uDE3C-\uDE55\uDE70-\uDE89\uDEA8-\uDEC0\uDEE2-\uDEFA\uDF1C-\uDF34\uDF56-\uDF6E\uDF90-\uDFA8\uDFCA]|\uD83A[\uDD00-\uDD21]"
      },
      {
        "name": "M",
        "alias": "Mark",
        "bmp": "\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0898-\u089F\u08CA-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0C00-\u0C04\u0C3C\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F\u109A-\u109D\u135D-\u135F\u1712-\u1715\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u180B-\u180D\u180F\u1885\u1886\u18A9\u1920-\u192B\u1930-\u193B\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F\u1AB0-\u1ACE\u1B00-\u1B04\u1B34-\u1B44\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BE6-\u1BF3\u1C24-\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DFF\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9E5\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F",
        "astral": "\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD803[\uDD24-\uDD27\uDEAB\uDEAC\uDF46-\uDF50\uDF82-\uDF85]|\uD804[\uDC00-\uDC02\uDC38-\uDC46\uDC70\uDC73\uDC74\uDC7F-\uDC82\uDCB0-\uDCBA\uDCC2\uDD00-\uDD02\uDD27-\uDD34\uDD45\uDD46\uDD73\uDD80-\uDD82\uDDB3-\uDDC0\uDDC9-\uDDCC\uDDCE\uDDCF\uDE2C-\uDE37\uDE3E\uDEDF-\uDEEA\uDF00-\uDF03\uDF3B\uDF3C\uDF3E-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC35-\uDC46\uDC5E\uDCB0-\uDCC3\uDDAF-\uDDB5\uDDB8-\uDDC0\uDDDC\uDDDD\uDE30-\uDE40\uDEAB-\uDEB7\uDF1D-\uDF2B]|\uD806[\uDC2C-\uDC3A\uDD30-\uDD35\uDD37\uDD38\uDD3B-\uDD3E\uDD40\uDD42\uDD43\uDDD1-\uDDD7\uDDDA-\uDDE0\uDDE4\uDE01-\uDE0A\uDE33-\uDE39\uDE3B-\uDE3E\uDE47\uDE51-\uDE5B\uDE8A-\uDE99]|\uD807[\uDC2F-\uDC36\uDC38-\uDC3F\uDC92-\uDCA7\uDCA9-\uDCB6\uDD31-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD45\uDD47\uDD8A-\uDD8E\uDD90\uDD91\uDD93-\uDD97\uDEF3-\uDEF6]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF4F\uDF51-\uDF87\uDF8F-\uDF92\uDFE4\uDFF0\uDFF1]|\uD82F[\uDC9D\uDC9E]|\uD833[\uDF00-\uDF2D\uDF30-\uDF46]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A\uDD30-\uDD36\uDEAE\uDEEC-\uDEEF]|\uD83A[\uDCD0-\uDCD6\uDD44-\uDD4A]|\uDB40[\uDD00-\uDDEF]"
      },
      {
        "name": "Mc",
        "alias": "Spacing_Mark",
        "bmp": "\u0903\u093B\u093E-\u0940\u0949-\u094C\u094E\u094F\u0982\u0983\u09BE-\u09C0\u09C7\u09C8\u09CB\u09CC\u09D7\u0A03\u0A3E-\u0A40\u0A83\u0ABE-\u0AC0\u0AC9\u0ACB\u0ACC\u0B02\u0B03\u0B3E\u0B40\u0B47\u0B48\u0B4B\u0B4C\u0B57\u0BBE\u0BBF\u0BC1\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCC\u0BD7\u0C01-\u0C03\u0C41-\u0C44\u0C82\u0C83\u0CBE\u0CC0-\u0CC4\u0CC7\u0CC8\u0CCA\u0CCB\u0CD5\u0CD6\u0D02\u0D03\u0D3E-\u0D40\u0D46-\u0D48\u0D4A-\u0D4C\u0D57\u0D82\u0D83\u0DCF-\u0DD1\u0DD8-\u0DDF\u0DF2\u0DF3\u0F3E\u0F3F\u0F7F\u102B\u102C\u1031\u1038\u103B\u103C\u1056\u1057\u1062-\u1064\u1067-\u106D\u1083\u1084\u1087-\u108C\u108F\u109A-\u109C\u1715\u1734\u17B6\u17BE-\u17C5\u17C7\u17C8\u1923-\u1926\u1929-\u192B\u1930\u1931\u1933-\u1938\u1A19\u1A1A\u1A55\u1A57\u1A61\u1A63\u1A64\u1A6D-\u1A72\u1B04\u1B35\u1B3B\u1B3D-\u1B41\u1B43\u1B44\u1B82\u1BA1\u1BA6\u1BA7\u1BAA\u1BE7\u1BEA-\u1BEC\u1BEE\u1BF2\u1BF3\u1C24-\u1C2B\u1C34\u1C35\u1CE1\u1CF7\u302E\u302F\uA823\uA824\uA827\uA880\uA881\uA8B4-\uA8C3\uA952\uA953\uA983\uA9B4\uA9B5\uA9BA\uA9BB\uA9BE-\uA9C0\uAA2F\uAA30\uAA33\uAA34\uAA4D\uAA7B\uAA7D\uAAEB\uAAEE\uAAEF\uAAF5\uABE3\uABE4\uABE6\uABE7\uABE9\uABEA\uABEC",
        "astral": "\uD804[\uDC00\uDC02\uDC82\uDCB0-\uDCB2\uDCB7\uDCB8\uDD2C\uDD45\uDD46\uDD82\uDDB3-\uDDB5\uDDBF\uDDC0\uDDCE\uDE2C-\uDE2E\uDE32\uDE33\uDE35\uDEE0-\uDEE2\uDF02\uDF03\uDF3E\uDF3F\uDF41-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63]|\uD805[\uDC35-\uDC37\uDC40\uDC41\uDC45\uDCB0-\uDCB2\uDCB9\uDCBB-\uDCBE\uDCC1\uDDAF-\uDDB1\uDDB8-\uDDBB\uDDBE\uDE30-\uDE32\uDE3B\uDE3C\uDE3E\uDEAC\uDEAE\uDEAF\uDEB6\uDF20\uDF21\uDF26]|\uD806[\uDC2C-\uDC2E\uDC38\uDD30-\uDD35\uDD37\uDD38\uDD3D\uDD40\uDD42\uDDD1-\uDDD3\uDDDC-\uDDDF\uDDE4\uDE39\uDE57\uDE58\uDE97]|\uD807[\uDC2F\uDC3E\uDCA9\uDCB1\uDCB4\uDD8A-\uDD8E\uDD93\uDD94\uDD96\uDEF5\uDEF6]|\uD81B[\uDF51-\uDF87\uDFF0\uDFF1]|\uD834[\uDD65\uDD66\uDD6D-\uDD72]"
      },
      {
        "name": "Me",
        "alias": "Enclosing_Mark",
        "bmp": "\u0488\u0489\u1ABE\u20DD-\u20E0\u20E2-\u20E4\uA670-\uA672"
      },
      {
        "name": "Mn",
        "alias": "Nonspacing_Mark",
        "bmp": "\u0300-\u036F\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0898-\u089F\u08CA-\u08E1\u08E3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962\u0963\u0981\u09BC\u09C1-\u09C4\u09CD\u09E2\u09E3\u09FE\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01\u0B3C\u0B3F\u0B41-\u0B44\u0B4D\u0B55\u0B56\u0B62\u0B63\u0B82\u0BC0\u0BCD\u0C00\u0C04\u0C3C\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81\u0CBC\u0CBF\u0CC6\u0CCC\u0CCD\u0CE2\u0CE3\u0D00\u0D01\u0D3B\u0D3C\u0D41-\u0D44\u0D4D\u0D62\u0D63\u0D81\u0DCA\u0DD2-\u0DD4\u0DD6\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732\u1733\u1752\u1753\u1772\u1773\u17B4\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u180F\u1885\u1886\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1A17\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1ABD\u1ABF-\u1ACE\u1B00-\u1B03\u1B34\u1B36-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DFF\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302D\u3099\u309A\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA825\uA826\uA82C\uA8C4\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9BD\uA9E5\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEC\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F",
        "astral": "\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD803[\uDD24-\uDD27\uDEAB\uDEAC\uDF46-\uDF50\uDF82-\uDF85]|\uD804[\uDC01\uDC38-\uDC46\uDC70\uDC73\uDC74\uDC7F-\uDC81\uDCB3-\uDCB6\uDCB9\uDCBA\uDCC2\uDD00-\uDD02\uDD27-\uDD2B\uDD2D-\uDD34\uDD73\uDD80\uDD81\uDDB6-\uDDBE\uDDC9-\uDDCC\uDDCF\uDE2F-\uDE31\uDE34\uDE36\uDE37\uDE3E\uDEDF\uDEE3-\uDEEA\uDF00\uDF01\uDF3B\uDF3C\uDF40\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC38-\uDC3F\uDC42-\uDC44\uDC46\uDC5E\uDCB3-\uDCB8\uDCBA\uDCBF\uDCC0\uDCC2\uDCC3\uDDB2-\uDDB5\uDDBC\uDDBD\uDDBF\uDDC0\uDDDC\uDDDD\uDE33-\uDE3A\uDE3D\uDE3F\uDE40\uDEAB\uDEAD\uDEB0-\uDEB5\uDEB7\uDF1D-\uDF1F\uDF22-\uDF25\uDF27-\uDF2B]|\uD806[\uDC2F-\uDC37\uDC39\uDC3A\uDD3B\uDD3C\uDD3E\uDD43\uDDD4-\uDDD7\uDDDA\uDDDB\uDDE0\uDE01-\uDE0A\uDE33-\uDE38\uDE3B-\uDE3E\uDE47\uDE51-\uDE56\uDE59-\uDE5B\uDE8A-\uDE96\uDE98\uDE99]|\uD807[\uDC30-\uDC36\uDC38-\uDC3D\uDC3F\uDC92-\uDCA7\uDCAA-\uDCB0\uDCB2\uDCB3\uDCB5\uDCB6\uDD31-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD45\uDD47\uDD90\uDD91\uDD95\uDD97\uDEF3\uDEF4]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF4F\uDF8F-\uDF92\uDFE4]|\uD82F[\uDC9D\uDC9E]|\uD833[\uDF00-\uDF2D\uDF30-\uDF46]|\uD834[\uDD67-\uDD69\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A\uDD30-\uDD36\uDEAE\uDEEC-\uDEEF]|\uD83A[\uDCD0-\uDCD6\uDD44-\uDD4A]|\uDB40[\uDD00-\uDDEF]"
      },
      {
        "name": "N",
        "alias": "Number",
        "bmp": "0-9\xB2\xB3\xB9\xBC-\xBE\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u09F4-\u09F9\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0B72-\u0B77\u0BE6-\u0BF2\u0C66-\u0C6F\u0C78-\u0C7E\u0CE6-\u0CEF\u0D58-\u0D5E\u0D66-\u0D78\u0DE6-\u0DEF\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F33\u1040-\u1049\u1090-\u1099\u1369-\u137C\u16EE-\u16F0\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1946-\u194F\u19D0-\u19DA\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\u2070\u2074-\u2079\u2080-\u2089\u2150-\u2182\u2185-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3007\u3021-\u3029\u3038-\u303A\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA620-\uA629\uA6E6-\uA6EF\uA830-\uA835\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uA9F0-\uA9F9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19",
        "astral": "\uD800[\uDD07-\uDD33\uDD40-\uDD78\uDD8A\uDD8B\uDEE1-\uDEFB\uDF20-\uDF23\uDF41\uDF4A\uDFD1-\uDFD5]|\uD801[\uDCA0-\uDCA9]|\uD802[\uDC58-\uDC5F\uDC79-\uDC7F\uDCA7-\uDCAF\uDCFB-\uDCFF\uDD16-\uDD1B\uDDBC\uDDBD\uDDC0-\uDDCF\uDDD2-\uDDFF\uDE40-\uDE48\uDE7D\uDE7E\uDE9D-\uDE9F\uDEEB-\uDEEF\uDF58-\uDF5F\uDF78-\uDF7F\uDFA9-\uDFAF]|\uD803[\uDCFA-\uDCFF\uDD30-\uDD39\uDE60-\uDE7E\uDF1D-\uDF26\uDF51-\uDF54\uDFC5-\uDFCB]|\uD804[\uDC52-\uDC6F\uDCF0-\uDCF9\uDD36-\uDD3F\uDDD0-\uDDD9\uDDE1-\uDDF4\uDEF0-\uDEF9]|\uD805[\uDC50-\uDC59\uDCD0-\uDCD9\uDE50-\uDE59\uDEC0-\uDEC9\uDF30-\uDF3B]|\uD806[\uDCE0-\uDCF2\uDD50-\uDD59]|\uD807[\uDC50-\uDC6C\uDD50-\uDD59\uDDA0-\uDDA9\uDFC0-\uDFD4]|\uD809[\uDC00-\uDC6E]|\uD81A[\uDE60-\uDE69\uDEC0-\uDEC9\uDF50-\uDF59\uDF5B-\uDF61]|\uD81B[\uDE80-\uDE96]|\uD834[\uDEE0-\uDEF3\uDF60-\uDF78]|\uD835[\uDFCE-\uDFFF]|\uD838[\uDD40-\uDD49\uDEF0-\uDEF9]|\uD83A[\uDCC7-\uDCCF\uDD50-\uDD59]|\uD83B[\uDC71-\uDCAB\uDCAD-\uDCAF\uDCB1-\uDCB4\uDD01-\uDD2D\uDD2F-\uDD3D]|\uD83C[\uDD00-\uDD0C]|\uD83E[\uDFF0-\uDFF9]"
      },
      {
        "name": "Nd",
        "alias": "Decimal_Number",
        "bmp": "0-9\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0BE6-\u0BEF\u0C66-\u0C6F\u0CE6-\u0CEF\u0D66-\u0D6F\u0DE6-\u0DEF\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F29\u1040-\u1049\u1090-\u1099\u17E0-\u17E9\u1810-\u1819\u1946-\u194F\u19D0-\u19D9\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\uA620-\uA629\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uA9F0-\uA9F9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19",
        "astral": "\uD801[\uDCA0-\uDCA9]|\uD803[\uDD30-\uDD39]|\uD804[\uDC66-\uDC6F\uDCF0-\uDCF9\uDD36-\uDD3F\uDDD0-\uDDD9\uDEF0-\uDEF9]|\uD805[\uDC50-\uDC59\uDCD0-\uDCD9\uDE50-\uDE59\uDEC0-\uDEC9\uDF30-\uDF39]|\uD806[\uDCE0-\uDCE9\uDD50-\uDD59]|\uD807[\uDC50-\uDC59\uDD50-\uDD59\uDDA0-\uDDA9]|\uD81A[\uDE60-\uDE69\uDEC0-\uDEC9\uDF50-\uDF59]|\uD835[\uDFCE-\uDFFF]|\uD838[\uDD40-\uDD49\uDEF0-\uDEF9]|\uD83A[\uDD50-\uDD59]|\uD83E[\uDFF0-\uDFF9]"
      },
      {
        "name": "Nl",
        "alias": "Letter_Number",
        "bmp": "\u16EE-\u16F0\u2160-\u2182\u2185-\u2188\u3007\u3021-\u3029\u3038-\u303A\uA6E6-\uA6EF",
        "astral": "\uD800[\uDD40-\uDD74\uDF41\uDF4A\uDFD1-\uDFD5]|\uD809[\uDC00-\uDC6E]"
      },
      {
        "name": "No",
        "alias": "Other_Number",
        "bmp": "\xB2\xB3\xB9\xBC-\xBE\u09F4-\u09F9\u0B72-\u0B77\u0BF0-\u0BF2\u0C78-\u0C7E\u0D58-\u0D5E\u0D70-\u0D78\u0F2A-\u0F33\u1369-\u137C\u17F0-\u17F9\u19DA\u2070\u2074-\u2079\u2080-\u2089\u2150-\u215F\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA830-\uA835",
        "astral": "\uD800[\uDD07-\uDD33\uDD75-\uDD78\uDD8A\uDD8B\uDEE1-\uDEFB\uDF20-\uDF23]|\uD802[\uDC58-\uDC5F\uDC79-\uDC7F\uDCA7-\uDCAF\uDCFB-\uDCFF\uDD16-\uDD1B\uDDBC\uDDBD\uDDC0-\uDDCF\uDDD2-\uDDFF\uDE40-\uDE48\uDE7D\uDE7E\uDE9D-\uDE9F\uDEEB-\uDEEF\uDF58-\uDF5F\uDF78-\uDF7F\uDFA9-\uDFAF]|\uD803[\uDCFA-\uDCFF\uDE60-\uDE7E\uDF1D-\uDF26\uDF51-\uDF54\uDFC5-\uDFCB]|\uD804[\uDC52-\uDC65\uDDE1-\uDDF4]|\uD805[\uDF3A\uDF3B]|\uD806[\uDCEA-\uDCF2]|\uD807[\uDC5A-\uDC6C\uDFC0-\uDFD4]|\uD81A[\uDF5B-\uDF61]|\uD81B[\uDE80-\uDE96]|\uD834[\uDEE0-\uDEF3\uDF60-\uDF78]|\uD83A[\uDCC7-\uDCCF]|\uD83B[\uDC71-\uDCAB\uDCAD-\uDCAF\uDCB1-\uDCB4\uDD01-\uDD2D\uDD2F-\uDD3D]|\uD83C[\uDD00-\uDD0C]"
      },
      {
        "name": "P",
        "alias": "Punctuation",
        "bmp": "!-#%-\\*,-\\/:;\\?@\\[-\\]_\\{\\}\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061D-\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1B7D\u1B7E\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u2E52-\u2E5D\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65",
        "astral": "\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\u{1056F}|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD803[\uDEAD\uDF55-\uDF59\uDF86-\uDF89]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC8\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5A\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDEB9\uDF3C-\uDF3E]|\uD806[\uDC3B\uDD44-\uDD46\uDDE2\uDE3F-\uDE46\uDE9A-\uDE9C\uDE9E-\uDEA2]|\uD807[\uDC41-\uDC45\uDC70\uDC71\uDEF7\uDEF8\uDFFF]|\uD809[\uDC70-\uDC74]|\uD80B[\uDFF1\uDFF2]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD81B[\uDE97-\uDE9A\uDFE2]|\u{1BC9F}|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F]"
      },
      {
        "name": "Pc",
        "alias": "Connector_Punctuation",
        "bmp": "_\u203F\u2040\u2054\uFE33\uFE34\uFE4D-\uFE4F\uFF3F"
      },
      {
        "name": "Pd",
        "alias": "Dash_Punctuation",
        "bmp": "\\-\u058A\u05BE\u1400\u1806\u2010-\u2015\u2E17\u2E1A\u2E3A\u2E3B\u2E40\u2E5D\u301C\u3030\u30A0\uFE31\uFE32\uFE58\uFE63\uFF0D",
        "astral": "\u{10EAD}"
      },
      {
        "name": "Pe",
        "alias": "Close_Punctuation",
        "bmp": "\\)\\]\\}\u0F3B\u0F3D\u169C\u2046\u207E\u208E\u2309\u230B\u232A\u2769\u276B\u276D\u276F\u2771\u2773\u2775\u27C6\u27E7\u27E9\u27EB\u27ED\u27EF\u2984\u2986\u2988\u298A\u298C\u298E\u2990\u2992\u2994\u2996\u2998\u29D9\u29DB\u29FD\u2E23\u2E25\u2E27\u2E29\u2E56\u2E58\u2E5A\u2E5C\u3009\u300B\u300D\u300F\u3011\u3015\u3017\u3019\u301B\u301E\u301F\uFD3E\uFE18\uFE36\uFE38\uFE3A\uFE3C\uFE3E\uFE40\uFE42\uFE44\uFE48\uFE5A\uFE5C\uFE5E\uFF09\uFF3D\uFF5D\uFF60\uFF63"
      },
      {
        "name": "Pf",
        "alias": "Final_Punctuation",
        "bmp": "\xBB\u2019\u201D\u203A\u2E03\u2E05\u2E0A\u2E0D\u2E1D\u2E21"
      },
      {
        "name": "Pi",
        "alias": "Initial_Punctuation",
        "bmp": "\xAB\u2018\u201B\u201C\u201F\u2039\u2E02\u2E04\u2E09\u2E0C\u2E1C\u2E20"
      },
      {
        "name": "Po",
        "alias": "Other_Punctuation",
        "bmp": "!-#%-'\\*,\\.\\/:;\\?@\\\xA1\xA7\xB6\xB7\xBF\u037E\u0387\u055A-\u055F\u0589\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061D-\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u166E\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u1805\u1807-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1B7D\u1B7E\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2016\u2017\u2020-\u2027\u2030-\u2038\u203B-\u203E\u2041-\u2043\u2047-\u2051\u2053\u2055-\u205E\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00\u2E01\u2E06-\u2E08\u2E0B\u2E0E-\u2E16\u2E18\u2E19\u2E1B\u2E1E\u2E1F\u2E2A-\u2E2E\u2E30-\u2E39\u2E3C-\u2E3F\u2E41\u2E43-\u2E4F\u2E52-\u2E54\u3001-\u3003\u303D\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFE10-\uFE16\uFE19\uFE30\uFE45\uFE46\uFE49-\uFE4C\uFE50-\uFE52\uFE54-\uFE57\uFE5F-\uFE61\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF07\uFF0A\uFF0C\uFF0E\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3C\uFF61\uFF64\uFF65",
        "astral": "\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\u{1056F}|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD803[\uDF55-\uDF59\uDF86-\uDF89]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC8\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5A\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDEB9\uDF3C-\uDF3E]|\uD806[\uDC3B\uDD44-\uDD46\uDDE2\uDE3F-\uDE46\uDE9A-\uDE9C\uDE9E-\uDEA2]|\uD807[\uDC41-\uDC45\uDC70\uDC71\uDEF7\uDEF8\uDFFF]|\uD809[\uDC70-\uDC74]|\uD80B[\uDFF1\uDFF2]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD81B[\uDE97-\uDE9A\uDFE2]|\u{1BC9F}|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F]"
      },
      {
        "name": "Ps",
        "alias": "Open_Punctuation",
        "bmp": "\\(\\[\\{\u0F3A\u0F3C\u169B\u201A\u201E\u2045\u207D\u208D\u2308\u230A\u2329\u2768\u276A\u276C\u276E\u2770\u2772\u2774\u27C5\u27E6\u27E8\u27EA\u27EC\u27EE\u2983\u2985\u2987\u2989\u298B\u298D\u298F\u2991\u2993\u2995\u2997\u29D8\u29DA\u29FC\u2E22\u2E24\u2E26\u2E28\u2E42\u2E55\u2E57\u2E59\u2E5B\u3008\u300A\u300C\u300E\u3010\u3014\u3016\u3018\u301A\u301D\uFD3F\uFE17\uFE35\uFE37\uFE39\uFE3B\uFE3D\uFE3F\uFE41\uFE43\uFE47\uFE59\uFE5B\uFE5D\uFF08\uFF3B\uFF5B\uFF5F\uFF62"
      },
      {
        "name": "S",
        "alias": "Symbol",
        "bmp": "\\$\\+<->\\^`\\|~\xA2-\xA6\xA8\xA9\xAC\xAE-\xB1\xB4\xB8\xD7\xF7\u02C2-\u02C5\u02D2-\u02DF\u02E5-\u02EB\u02ED\u02EF-\u02FF\u0375\u0384\u0385\u03F6\u0482\u058D-\u058F\u0606-\u0608\u060B\u060E\u060F\u06DE\u06E9\u06FD\u06FE\u07F6\u07FE\u07FF\u0888\u09F2\u09F3\u09FA\u09FB\u0AF1\u0B70\u0BF3-\u0BFA\u0C7F\u0D4F\u0D79\u0E3F\u0F01-\u0F03\u0F13\u0F15-\u0F17\u0F1A-\u0F1F\u0F34\u0F36\u0F38\u0FBE-\u0FC5\u0FC7-\u0FCC\u0FCE\u0FCF\u0FD5-\u0FD8\u109E\u109F\u1390-\u1399\u166D\u17DB\u1940\u19DE-\u19FF\u1B61-\u1B6A\u1B74-\u1B7C\u1FBD\u1FBF-\u1FC1\u1FCD-\u1FCF\u1FDD-\u1FDF\u1FED-\u1FEF\u1FFD\u1FFE\u2044\u2052\u207A-\u207C\u208A-\u208C\u20A0-\u20C0\u2100\u2101\u2103-\u2106\u2108\u2109\u2114\u2116-\u2118\u211E-\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u2140-\u2144\u214A-\u214D\u214F\u218A\u218B\u2190-\u2307\u230C-\u2328\u232B-\u2426\u2440-\u244A\u249C-\u24E9\u2500-\u2767\u2794-\u27C4\u27C7-\u27E5\u27F0-\u2982\u2999-\u29D7\u29DC-\u29FB\u29FE-\u2B73\u2B76-\u2B95\u2B97-\u2BFF\u2CE5-\u2CEA\u2E50\u2E51\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u2FF0-\u2FFB\u3004\u3012\u3013\u3020\u3036\u3037\u303E\u303F\u309B\u309C\u3190\u3191\u3196-\u319F\u31C0-\u31E3\u3200-\u321E\u322A-\u3247\u3250\u3260-\u327F\u328A-\u32B0\u32C0-\u33FF\u4DC0-\u4DFF\uA490-\uA4C6\uA700-\uA716\uA720\uA721\uA789\uA78A\uA828-\uA82B\uA836-\uA839\uAA77-\uAA79\uAB5B\uAB6A\uAB6B\uFB29\uFBB2-\uFBC2\uFD40-\uFD4F\uFDCF\uFDFC-\uFDFF\uFE62\uFE64-\uFE66\uFE69\uFF04\uFF0B\uFF1C-\uFF1E\uFF3E\uFF40\uFF5C\uFF5E\uFFE0-\uFFE6\uFFE8-\uFFEE\uFFFC\uFFFD",
        "astral": "\uD800[\uDD37-\uDD3F\uDD79-\uDD89\uDD8C-\uDD8E\uDD90-\uDD9C\uDDA0\uDDD0-\uDDFC]|\uD802[\uDC77\uDC78\uDEC8]|\u{1173F}|\uD807[\uDFD5-\uDFF1]|\uD81A[\uDF3C-\uDF3F\uDF45]|\u{1BC9C}|\uD833[\uDF50-\uDFC3]|\uD834[\uDC00-\uDCF5\uDD00-\uDD26\uDD29-\uDD64\uDD6A-\uDD6C\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDDEA\uDE00-\uDE41\uDE45\uDF00-\uDF56]|\uD835[\uDEC1\uDEDB\uDEFB\uDF15\uDF35\uDF4F\uDF6F\uDF89\uDFA9\uDFC3]|\uD836[\uDC00-\uDDFF\uDE37-\uDE3A\uDE6D-\uDE74\uDE76-\uDE83\uDE85\uDE86]|\uD838[\uDD4F\uDEFF]|\uD83B[\uDCAC\uDCB0\uDD2E\uDEF0\uDEF1]|\uD83C[\uDC00-\uDC2B\uDC30-\uDC93\uDCA0-\uDCAE\uDCB1-\uDCBF\uDCC1-\uDCCF\uDCD1-\uDCF5\uDD0D-\uDDAD\uDDE6-\uDE02\uDE10-\uDE3B\uDE40-\uDE48\uDE50\uDE51\uDE60-\uDE65\uDF00-\uDFFF]|\uD83D[\uDC00-\uDED7\uDEDD-\uDEEC\uDEF0-\uDEFC\uDF00-\uDF73\uDF80-\uDFD8\uDFE0-\uDFEB\uDFF0]|\uD83E[\uDC00-\uDC0B\uDC10-\uDC47\uDC50-\uDC59\uDC60-\uDC87\uDC90-\uDCAD\uDCB0\uDCB1\uDD00-\uDE53\uDE60-\uDE6D\uDE70-\uDE74\uDE78-\uDE7C\uDE80-\uDE86\uDE90-\uDEAC\uDEB0-\uDEBA\uDEC0-\uDEC5\uDED0-\uDED9\uDEE0-\uDEE7\uDEF0-\uDEF6\uDF00-\uDF92\uDF94-\uDFCA]"
      },
      {
        "name": "Sc",
        "alias": "Currency_Symbol",
        "bmp": "\\$\xA2-\xA5\u058F\u060B\u07FE\u07FF\u09F2\u09F3\u09FB\u0AF1\u0BF9\u0E3F\u17DB\u20A0-\u20C0\uA838\uFDFC\uFE69\uFF04\uFFE0\uFFE1\uFFE5\uFFE6",
        "astral": "\uD807[\uDFDD-\uDFE0]|\u{1E2FF}|\u{1ECB0}"
      },
      {
        "name": "Sk",
        "alias": "Modifier_Symbol",
        "bmp": "\\^`\xA8\xAF\xB4\xB8\u02C2-\u02C5\u02D2-\u02DF\u02E5-\u02EB\u02ED\u02EF-\u02FF\u0375\u0384\u0385\u0888\u1FBD\u1FBF-\u1FC1\u1FCD-\u1FCF\u1FDD-\u1FDF\u1FED-\u1FEF\u1FFD\u1FFE\u309B\u309C\uA700-\uA716\uA720\uA721\uA789\uA78A\uAB5B\uAB6A\uAB6B\uFBB2-\uFBC2\uFF3E\uFF40\uFFE3",
        "astral": "\uD83C[\uDFFB-\uDFFF]"
      },
      {
        "name": "Sm",
        "alias": "Math_Symbol",
        "bmp": "\\+<->\\|~\xAC\xB1\xD7\xF7\u03F6\u0606-\u0608\u2044\u2052\u207A-\u207C\u208A-\u208C\u2118\u2140-\u2144\u214B\u2190-\u2194\u219A\u219B\u21A0\u21A3\u21A6\u21AE\u21CE\u21CF\u21D2\u21D4\u21F4-\u22FF\u2320\u2321\u237C\u239B-\u23B3\u23DC-\u23E1\u25B7\u25C1\u25F8-\u25FF\u266F\u27C0-\u27C4\u27C7-\u27E5\u27F0-\u27FF\u2900-\u2982\u2999-\u29D7\u29DC-\u29FB\u29FE-\u2AFF\u2B30-\u2B44\u2B47-\u2B4C\uFB29\uFE62\uFE64-\uFE66\uFF0B\uFF1C-\uFF1E\uFF5C\uFF5E\uFFE2\uFFE9-\uFFEC",
        "astral": "\uD835[\uDEC1\uDEDB\uDEFB\uDF15\uDF35\uDF4F\uDF6F\uDF89\uDFA9\uDFC3]|\uD83B[\uDEF0\uDEF1]"
      },
      {
        "name": "So",
        "alias": "Other_Symbol",
        "bmp": "\xA6\xA9\xAE\xB0\u0482\u058D\u058E\u060E\u060F\u06DE\u06E9\u06FD\u06FE\u07F6\u09FA\u0B70\u0BF3-\u0BF8\u0BFA\u0C7F\u0D4F\u0D79\u0F01-\u0F03\u0F13\u0F15-\u0F17\u0F1A-\u0F1F\u0F34\u0F36\u0F38\u0FBE-\u0FC5\u0FC7-\u0FCC\u0FCE\u0FCF\u0FD5-\u0FD8\u109E\u109F\u1390-\u1399\u166D\u1940\u19DE-\u19FF\u1B61-\u1B6A\u1B74-\u1B7C\u2100\u2101\u2103-\u2106\u2108\u2109\u2114\u2116\u2117\u211E-\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u214A\u214C\u214D\u214F\u218A\u218B\u2195-\u2199\u219C-\u219F\u21A1\u21A2\u21A4\u21A5\u21A7-\u21AD\u21AF-\u21CD\u21D0\u21D1\u21D3\u21D5-\u21F3\u2300-\u2307\u230C-\u231F\u2322-\u2328\u232B-\u237B\u237D-\u239A\u23B4-\u23DB\u23E2-\u2426\u2440-\u244A\u249C-\u24E9\u2500-\u25B6\u25B8-\u25C0\u25C2-\u25F7\u2600-\u266E\u2670-\u2767\u2794-\u27BF\u2800-\u28FF\u2B00-\u2B2F\u2B45\u2B46\u2B4D-\u2B73\u2B76-\u2B95\u2B97-\u2BFF\u2CE5-\u2CEA\u2E50\u2E51\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u2FF0-\u2FFB\u3004\u3012\u3013\u3020\u3036\u3037\u303E\u303F\u3190\u3191\u3196-\u319F\u31C0-\u31E3\u3200-\u321E\u322A-\u3247\u3250\u3260-\u327F\u328A-\u32B0\u32C0-\u33FF\u4DC0-\u4DFF\uA490-\uA4C6\uA828-\uA82B\uA836\uA837\uA839\uAA77-\uAA79\uFD40-\uFD4F\uFDCF\uFDFD-\uFDFF\uFFE4\uFFE8\uFFED\uFFEE\uFFFC\uFFFD",
        "astral": "\uD800[\uDD37-\uDD3F\uDD79-\uDD89\uDD8C-\uDD8E\uDD90-\uDD9C\uDDA0\uDDD0-\uDDFC]|\uD802[\uDC77\uDC78\uDEC8]|\u{1173F}|\uD807[\uDFD5-\uDFDC\uDFE1-\uDFF1]|\uD81A[\uDF3C-\uDF3F\uDF45]|\u{1BC9C}|\uD833[\uDF50-\uDFC3]|\uD834[\uDC00-\uDCF5\uDD00-\uDD26\uDD29-\uDD64\uDD6A-\uDD6C\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDDEA\uDE00-\uDE41\uDE45\uDF00-\uDF56]|\uD836[\uDC00-\uDDFF\uDE37-\uDE3A\uDE6D-\uDE74\uDE76-\uDE83\uDE85\uDE86]|\u{1E14F}|\uD83B[\uDCAC\uDD2E]|\uD83C[\uDC00-\uDC2B\uDC30-\uDC93\uDCA0-\uDCAE\uDCB1-\uDCBF\uDCC1-\uDCCF\uDCD1-\uDCF5\uDD0D-\uDDAD\uDDE6-\uDE02\uDE10-\uDE3B\uDE40-\uDE48\uDE50\uDE51\uDE60-\uDE65\uDF00-\uDFFA]|\uD83D[\uDC00-\uDED7\uDEDD-\uDEEC\uDEF0-\uDEFC\uDF00-\uDF73\uDF80-\uDFD8\uDFE0-\uDFEB\uDFF0]|\uD83E[\uDC00-\uDC0B\uDC10-\uDC47\uDC50-\uDC59\uDC60-\uDC87\uDC90-\uDCAD\uDCB0\uDCB1\uDD00-\uDE53\uDE60-\uDE6D\uDE70-\uDE74\uDE78-\uDE7C\uDE80-\uDE86\uDE90-\uDEAC\uDEB0-\uDEBA\uDEC0-\uDEC5\uDED0-\uDED9\uDEE0-\uDEE7\uDEF0-\uDEF6\uDF00-\uDF92\uDF94-\uDFCA]"
      },
      {
        "name": "Z",
        "alias": "Separator",
        "bmp": " \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000"
      },
      {
        "name": "Zl",
        "alias": "Line_Separator",
        "bmp": "\u2028"
      },
      {
        "name": "Zp",
        "alias": "Paragraph_Separator",
        "bmp": "\u2029"
      },
      {
        "name": "Zs",
        "alias": "Space_Separator",
        "bmp": " \xA0\u1680\u2000-\u200A\u202F\u205F\u3000"
      }
    ];
  }
});

// node_modules/@retorquere/bibtex-parser/re.js
var require_re = __commonJS({
  "node_modules/@retorquere/bibtex-parser/re.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.categories = void 0;
    exports2.match = match;
    function match(cats, extra, neg = false) {
      return `[${neg ? "^" : ""}${cats.map((cat) => cat.bmp).join("")}${extra || ""}]`;
    }
    exports2.categories = require_categories();
  }
});

// node_modules/@retorquere/bibtex-parser/yield.js
var require_yield = __commonJS({
  "node_modules/@retorquere/bibtex-parser/yield.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.playnice = playnice;
    async function playnice() {
      await new Promise((resolve) => setTimeout(resolve, 0));
    }
  }
});

// node_modules/@retorquere/bibtex-parser/verbatim.js
var require_verbatim = __commonJS({
  "node_modules/@retorquere/bibtex-parser/verbatim.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.promises = exports2.Library = void 0;
    exports2.parse = parse;
    var rx = __importStar(require_re());
    var yield_1 = require_yield();
    var ParsingError = class extends Error {
      constructor(message, parser) {
        message += ` at ${parser.location()}`;
        if (parser.parsing)
          message += ` in ${JSON.stringify(parser.parsing)}`;
        super(message);
        this.name = "ParsingError";
      }
    };
    var letter = new RegExp(rx.match(rx.categories.filter((cat) => cat.name.match(/^L[utlmo]$/))));
    var Library = class {
      constructor(input, options = {}) {
        this.entries = [];
        this.strings = {};
        this.comments = [];
        this.errors = [];
        this.preambles = [];
        this.default_strings = {
          JAN: "01",
          JANUARY: "01",
          FEB: "02",
          FEBRUARY: "02",
          MAR: "03",
          MARCH: "03",
          APR: "04",
          APRIL: "04",
          MAY: "05",
          JUN: "06",
          JUNE: "06",
          JUL: "07",
          JULY: "07",
          AUG: "08",
          AUGUST: "08",
          SEP: "09",
          SEPTEMBER: "09",
          OCT: "10",
          OCTOBER: "10",
          NOV: "11",
          NOVEMBER: "11",
          DEC: "12",
          DECEMBER: "12",
          ACMCS: "ACM Computing Surveys",
          ACTA: "Acta Informatica",
          CACM: "Communications of the ACM",
          IBMJRD: "IBM Journal of Research and Development",
          IBMSJ: "IBM Systems Journal",
          IEEESE: "IEEE Transactions on Software Engineering",
          IEEETC: "IEEE Transactions on Computers",
          IEEETCAD: "IEEE Transactions on Computer-Aided Design of Integrated Circuits",
          IPL: "Information Processing Letters",
          JACM: "Journal of the ACM",
          JCSS: "Journal of Computer and System Sciences",
          SCP: "Science of Computer Programming",
          SICOMP: "SIAM Journal on Computing",
          TOCS: "ACM Transactions on Computer Systems",
          TODS: "ACM Transactions on Database Systems",
          TOG: "ACM Transactions on Graphics",
          TOMS: "ACM Transactions on Mathematical Software",
          TOOIS: "ACM Transactions on Office Information Systems",
          TOPLAS: "ACM Transactions on Programming Languages and Systems",
          TCS: "Theoretical Computer Science"
        };
        this.pos = 0;
        this.linebreaks = [];
        this.max_entries = options.max_entries || 0;
        this.input = input;
        this.parsing = null;
        if (typeof options.strings === "string") {
          this.input = options.strings + "\n" + input;
        } else if (options.strings) {
          for (const [k, v] of Object.entries(options.strings)) {
            this.default_strings[k.toUpperCase()] = v;
          }
        }
        let pos = input.indexOf("\n");
        while (pos !== -1) {
          this.linebreaks.push(pos);
          pos = input.indexOf("\n", pos + 1);
        }
      }
      parse() {
        this.bibtex();
        this.entries.reverse();
      }
      async parseAsync() {
        await this.bibtexAsync();
        this.entries.reverse();
      }
      isWhitespace(s, horizontalOnly = false) {
        return s === " " || s === "	" || !horizontalOnly && (s === "\r" || s === "\n");
      }
      match(s, sws = true) {
        this.skipWhitespace();
        if (this.input.substr(this.pos, s.length) !== s) {
          throw new ParsingError(`Token mismatch, expected ${JSON.stringify(s)}, found ${JSON.stringify(this.input.substr(this.pos, 20))}...`, this);
        }
        this.pos += s.length;
        if (sws)
          this.skipWhitespace();
      }
      tryMatch(s, consume = false) {
        this.skipWhitespace();
        const match = this.input.substr(this.pos, s.length) === s;
        if (match && consume)
          this.pos += s.length;
        return match;
      }
      skipWhitespace() {
        while (this.pos < this.input.length && this.input[this.pos].match(/[ \t\r\n%]/)) {
          if (this.input[this.pos] === "%") {
            while (this.pos < this.input.length && this.input[this.pos] !== "\n")
              this.pos++;
          } else {
            this.pos++;
          }
        }
      }
      /*
      private fix_path() {
        // workaround for https://github.com/siefkenj/unified-latex/issues/94
        const path = '\\path|'
        const verb = path.replace('path', 'verb')
        if (this.input.substring(this.pos).startsWith(path)) {
          // eslint-disable-next-line prefer-template
          this.input = this.input.substring(0, this.pos) + verb + this.input.substring(this.pos + path.length)
        }
      }
      */
      value_braces() {
        let bracecount = 0;
        this.match("{", false);
        const start = this.pos;
        let math = false;
        while (true) {
          switch (this.input[this.pos]) {
            case "\\":
              this.pos += 1;
              break;
            case "{":
              bracecount++;
              break;
            case "}":
              if (bracecount === 0) {
                if (math)
                  throw new ParsingError("Unclosed math section", this);
                this.pos++;
                return this.input.substring(start, this.pos - 1);
              }
              bracecount--;
              break;
            case "$":
              math = !math;
              break;
          }
          this.pos++;
          if (this.pos >= this.input.length) {
            throw new ParsingError(`Unterminated brace-value ${JSON.stringify(this.input.substr(start, 20))}`, this);
          }
        }
      }
      value_quotes() {
        this.match('"', false);
        const start = this.pos;
        let bracecount = 0;
        while (true) {
          switch (this.input[this.pos]) {
            case "\\":
              this.pos += 1;
              break;
            case "{":
              bracecount++;
              break;
            case "}":
              bracecount--;
              break;
            case '"':
              if (bracecount <= 0) {
                this.pos++;
                return this.input.substring(start, this.pos - 1);
              }
          }
          this.pos++;
          if (this.pos >= this.input.length) {
            throw new ParsingError(`Unterminated quote-value ${JSON.stringify(this.input.substr(start, 20))}`, this);
          }
        }
      }
      single_value() {
        if (this.tryMatch("{")) {
          return this.value_braces();
        } else if (this.tryMatch('"')) {
          return this.value_quotes();
        } else {
          const bare = this.key();
          if (bare.match(/^\d+$/))
            return bare;
          const u_bare = bare.toUpperCase();
          const resolved = this.strings[u_bare] || this.default_strings[u_bare];
          if (typeof resolved === "undefined") {
            this.error({
              error: `Unresolved @string reference ${JSON.stringify(bare)}`,
              input: ""
            });
          }
          return resolved || `{{${bare}}}`;
        }
      }
      location() {
        const lines = this.input.substring(0, this.pos).split("\n");
        return `line ${lines.length}, column ${lines[lines.length - 1].length + 1}`;
      }
      error(err) {
        if (this.errors.find((e) => e.error === err.error))
          return;
        this.errors.push(err);
      }
      value() {
        const values = [];
        values.push(this.single_value());
        while (this.tryMatch("#")) {
          this.match("#");
          values.push(this.single_value());
        }
        return values.join("");
      }
      key(allow = "") {
        const start = this.pos;
        while (true) {
          if (this.pos === this.input.length) {
            throw new ParsingError("Runaway key", this);
          }
          if (this.input[this.pos].match(/[+'a-zA-Z0-9&;_:\\./-]/) || this.input[this.pos].match(letter) || allow.includes(this.input[this.pos])) {
            this.pos++;
          } else {
            return this.input.substring(start, this.pos);
          }
        }
      }
      key_equals_value(key) {
        key = key || this.key();
        if (!key)
          return;
        if (!this.tryMatch("=")) {
          throw new ParsingError(`${key} = value expected, equals sign missing: ${JSON.stringify(this.input.substr(this.pos, 20))}...`, this);
        }
        this.match("=");
        const val = this.value();
        if (this.parsing === "string") {
          this.strings[key.toUpperCase()] = val;
        } else {
          const bare = key.toLowerCase();
          let postfix = 0;
          while (typeof this.entries[0].fields[key = postfix ? `${bare}+duplicate-${postfix}` : bare] === "string") {
            postfix++;
          }
          this.entries[0].fields[key] = val;
        }
      }
      entry(d, guard) {
        if (this.tryMatch(guard))
          return;
        let key;
        if (this.tryMatch(",")) {
          key = "";
        } else {
          key = this.key('[]*"');
        }
        if (this.tryMatch("=")) {
          this.key_equals_value(key);
        } else {
          this.entries[0].key = key;
        }
        this.tryMatch(",", true);
        if (this.tryMatch(guard))
          return;
        this.key_equals_value();
        while (this.tryMatch(",", true)) {
          if (this.tryMatch(guard))
            return;
          this.key_equals_value();
        }
      }
      directive() {
        this.match("@");
        return this.key().toLowerCase();
      }
      string() {
        this.key_equals_value();
      }
      preamble() {
        this.preambles.push(this.value());
      }
      comment() {
        while (this.isWhitespace(this.input[this.pos], true))
          this.pos++;
        if (this.input[this.pos] === "{") {
          this.comments.push(this.value_braces());
        } else {
          const start = this.pos;
          while (this.input[this.pos] !== "\n" && this.pos < this.input.length)
            this.pos++;
          this.comments.push(this.input.substring(start, this.pos));
        }
      }
      hasMore() {
        if (this.max_entries && this.entries.length >= this.max_entries)
          return false;
        return this.pos < this.input.length;
      }
      bibtex() {
        while (this.hasMore()) {
          this.parseNext();
        }
      }
      async bibtexAsync() {
        let n = 1;
        while (this.hasMore()) {
          this.parseNext();
          if (n++ % 1e3 === 0)
            await (0, yield_1.playnice)();
        }
      }
      matchGuard() {
        for (const guard of ["{}", "()"]) {
          if (this.tryMatch(guard[0])) {
            this.match(guard[0]);
            return guard[1];
          }
        }
        throw new ParsingError(`Token mismatch, expected '{' or '(', found ${JSON.stringify(this.input.substr(this.pos, 20))}...`, this);
      }
      parseNext() {
        this.skipWhitespace();
        while (this.pos < this.input.length && this.input[this.pos] !== "@") {
          if (this.input[this.pos] === "%") {
            while (this.pos < this.input.length && this.input[this.pos] !== "\n")
              this.pos++;
          } else {
            this.pos++;
          }
        }
        if (this.pos >= this.input.length)
          return;
        let guard = "";
        const start = this.pos;
        try {
          const d = this.parsing = this.directive();
          switch (d) {
            case "string":
              guard = this.matchGuard();
              this.string();
              this.match(guard);
              break;
            case "preamble":
              this.preamble();
              break;
            case "comment":
              this.comment();
              break;
            default:
              guard = this.matchGuard();
              this.entries.unshift({ input: "", type: d, key: "", fields: {} });
              this.entry(d, guard);
              this.match(guard);
              this.entries[0].input = this.input.substring(start, this.pos).trim();
              break;
          }
        } catch (err) {
          if (err.name !== "ParsingError")
            throw err;
          this.pos = start + 1;
          while (this.pos < this.input.length && this.input[this.pos] !== "@")
            this.pos++;
          this.error({
            error: err.message,
            input: this.input.substring(start, this.pos)
          });
        }
      }
    };
    exports2.Library = Library;
    function parse(input, options = {}) {
      const parser = new Library(input, options);
      parser.parse();
      return parser;
    }
    exports2.promises = {
      async parse(input, options = {}) {
        const parser = new Library(input, options);
        await parser.parseAsync();
        return parser;
      }
    };
  }
});

// node_modules/@retorquere/bibtex-parser/jabref.js
var require_jabref = __commonJS({
  "node_modules/@retorquere/bibtex-parser/jabref.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parse = parse;
    function decode(s, sep = ";") {
      s = s.replace(/\r?\n/g, "");
      let pos = 0;
      const records = [""];
      while (pos < s.length) {
        switch (s[pos]) {
          case "\\":
            pos++;
            records[0] += s[pos];
            break;
          case sep:
            records.unshift("");
            break;
          default:
            records[0] += s[pos];
        }
        pos++;
      }
      return records.reverse().filter((record) => record);
    }
    function parse(comments) {
      const result = {
        root: [],
        groups: {}
      };
      const levels = [];
      const decoded = {
        fileDirectory: null,
        groupsversion: null,
        groupstree: null,
        grouping: null,
        databaseType: null
      };
      comments = comments.filter((comment) => {
        const m = comment.match(/^jabref-meta:\s*([^:]+):([\s\S]*)/);
        if (m) {
          decoded[m[1]] = decode(m[2]);
          return false;
        }
        return true;
      });
      if (decoded.groupsversion)
        result.groupsversion = parseInt(decoded.groupsversion[0].trim()) || decoded.groupsversion[0];
      if (decoded.fileDirectory)
        result.fileDirectory = decoded.fileDirectory[0];
      if (decoded.databaseType)
        result.databaseType = decoded.databaseType[0];
      for (const tree of ["groupstree", "grouping"]) {
        if (!decoded[tree])
          continue;
        for (const encoded of decoded[tree]) {
          const fields = decode(encoded);
          const level_type_name = decode(fields.shift(), ":");
          const m = /^([0-9]+) (.+)/.exec(level_type_name[0]);
          if (!m)
            break;
          const level = parseInt(m[1]);
          const type = m[2];
          if (type === "AllEntriesGroup")
            continue;
          const name = level_type_name[1];
          const intersection = decode(fields.shift())[0];
          const keys = tree === "grouping" ? [] : fields.map((field) => decode(field)[0]);
          const group = {
            name,
            entries: keys,
            groups: []
          };
          result.groups[name] = result.groups[name] || group;
          if (levels.length < level) {
            levels.push(group);
          } else {
            levels[level - 1] = group;
          }
          if (level === 1) {
            result.root.push(group);
          } else {
            const parent = levels[level - 2];
            switch (intersection) {
              case "0":
                break;
              case "1":
                group.entries = group.entries.filter((key) => parent.entries.includes(key));
                break;
              case "2":
                group.entries = group.entries.concat(parent.entries.filter((key) => !group.entries.includes(key)));
                break;
            }
            levels[level - 2].groups.push(group);
          }
        }
      }
      return { comments, jabref: result };
    }
  }
});

// node_modules/moo/moo.js
var require_moo = __commonJS({
  "node_modules/moo/moo.js"(exports2, module2) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define([], factory);
      } else if (typeof module2 === "object" && module2.exports) {
        module2.exports = factory();
      } else {
        root.moo = factory();
      }
    })(exports2, function() {
      "use strict";
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      var toString = Object.prototype.toString;
      var hasSticky = typeof new RegExp().sticky === "boolean";
      function isRegExp(o) {
        return o && toString.call(o) === "[object RegExp]";
      }
      function isObject(o) {
        return o && typeof o === "object" && !isRegExp(o) && !Array.isArray(o);
      }
      function reEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
      }
      function reGroups(s) {
        var re = new RegExp("|" + s);
        return re.exec("").length - 1;
      }
      function reCapture(s) {
        return "(" + s + ")";
      }
      function reUnion(regexps) {
        if (!regexps.length) return "(?!)";
        var source = regexps.map(function(s) {
          return "(?:" + s + ")";
        }).join("|");
        return "(?:" + source + ")";
      }
      function regexpOrLiteral(obj) {
        if (typeof obj === "string") {
          return "(?:" + reEscape(obj) + ")";
        } else if (isRegExp(obj)) {
          if (obj.ignoreCase) throw new Error("RegExp /i flag not allowed");
          if (obj.global) throw new Error("RegExp /g flag is implied");
          if (obj.sticky) throw new Error("RegExp /y flag is implied");
          if (obj.multiline) throw new Error("RegExp /m flag is implied");
          return obj.source;
        } else {
          throw new Error("Not a pattern: " + obj);
        }
      }
      function pad(s, length) {
        if (s.length > length) {
          return s;
        }
        return Array(length - s.length + 1).join(" ") + s;
      }
      function lastNLines(string, numLines) {
        var position = string.length;
        var lineBreaks = 0;
        while (true) {
          var idx = string.lastIndexOf("\n", position - 1);
          if (idx === -1) {
            break;
          } else {
            lineBreaks++;
          }
          position = idx;
          if (lineBreaks === numLines) {
            break;
          }
          if (position === 0) {
            break;
          }
        }
        var startPosition = lineBreaks < numLines ? 0 : position + 1;
        return string.substring(startPosition).split("\n");
      }
      function objectToRules(object) {
        var keys = Object.getOwnPropertyNames(object);
        var result = [];
        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          var thing = object[key];
          var rules = [].concat(thing);
          if (key === "include") {
            for (var j = 0; j < rules.length; j++) {
              result.push({ include: rules[j] });
            }
            continue;
          }
          var match = [];
          rules.forEach(function(rule) {
            if (isObject(rule)) {
              if (match.length) result.push(ruleOptions(key, match));
              result.push(ruleOptions(key, rule));
              match = [];
            } else {
              match.push(rule);
            }
          });
          if (match.length) result.push(ruleOptions(key, match));
        }
        return result;
      }
      function arrayToRules(array) {
        var result = [];
        for (var i = 0; i < array.length; i++) {
          var obj = array[i];
          if (obj.include) {
            var include = [].concat(obj.include);
            for (var j = 0; j < include.length; j++) {
              result.push({ include: include[j] });
            }
            continue;
          }
          if (!obj.type) {
            throw new Error("Rule has no type: " + JSON.stringify(obj));
          }
          result.push(ruleOptions(obj.type, obj));
        }
        return result;
      }
      function ruleOptions(type, obj) {
        if (!isObject(obj)) {
          obj = { match: obj };
        }
        if (obj.include) {
          throw new Error("Matching rules cannot also include states");
        }
        var options = {
          defaultType: type,
          lineBreaks: !!obj.error || !!obj.fallback,
          pop: false,
          next: null,
          push: null,
          error: false,
          fallback: false,
          value: null,
          type: null,
          shouldThrow: false
        };
        for (var key in obj) {
          if (hasOwnProperty.call(obj, key)) {
            options[key] = obj[key];
          }
        }
        if (typeof options.type === "string" && type !== options.type) {
          throw new Error("Type transform cannot be a string (type '" + options.type + "' for token '" + type + "')");
        }
        var match = options.match;
        options.match = Array.isArray(match) ? match : match ? [match] : [];
        options.match.sort(function(a, b) {
          return isRegExp(a) && isRegExp(b) ? 0 : isRegExp(b) ? -1 : isRegExp(a) ? 1 : b.length - a.length;
        });
        return options;
      }
      function toRules(spec) {
        return Array.isArray(spec) ? arrayToRules(spec) : objectToRules(spec);
      }
      var defaultErrorRule = ruleOptions("error", { lineBreaks: true, shouldThrow: true });
      function compileRules(rules, hasStates) {
        var errorRule = null;
        var fast = /* @__PURE__ */ Object.create(null);
        var fastAllowed = true;
        var unicodeFlag = null;
        var groups = [];
        var parts = [];
        for (var i = 0; i < rules.length; i++) {
          if (rules[i].fallback) {
            fastAllowed = false;
          }
        }
        for (var i = 0; i < rules.length; i++) {
          var options = rules[i];
          if (options.include) {
            throw new Error("Inheritance is not allowed in stateless lexers");
          }
          if (options.error || options.fallback) {
            if (errorRule) {
              if (!options.fallback === !errorRule.fallback) {
                throw new Error("Multiple " + (options.fallback ? "fallback" : "error") + " rules not allowed (for token '" + options.defaultType + "')");
              } else {
                throw new Error("fallback and error are mutually exclusive (for token '" + options.defaultType + "')");
              }
            }
            errorRule = options;
          }
          var match = options.match.slice();
          if (fastAllowed) {
            while (match.length && typeof match[0] === "string" && match[0].length === 1) {
              var word = match.shift();
              fast[word.charCodeAt(0)] = options;
            }
          }
          if (options.pop || options.push || options.next) {
            if (!hasStates) {
              throw new Error("State-switching options are not allowed in stateless lexers (for token '" + options.defaultType + "')");
            }
            if (options.fallback) {
              throw new Error("State-switching options are not allowed on fallback tokens (for token '" + options.defaultType + "')");
            }
          }
          if (match.length === 0) {
            continue;
          }
          fastAllowed = false;
          groups.push(options);
          for (var j = 0; j < match.length; j++) {
            var obj = match[j];
            if (!isRegExp(obj)) {
              continue;
            }
            if (unicodeFlag === null) {
              unicodeFlag = obj.unicode;
            } else if (unicodeFlag !== obj.unicode && options.fallback === false) {
              throw new Error("If one rule is /u then all must be");
            }
          }
          var pat = reUnion(match.map(regexpOrLiteral));
          var regexp = new RegExp(pat);
          if (regexp.test("")) {
            throw new Error("RegExp matches empty string: " + regexp);
          }
          var groupCount = reGroups(pat);
          if (groupCount > 0) {
            throw new Error("RegExp has capture groups: " + regexp + "\nUse (?: \u2026 ) instead");
          }
          if (!options.lineBreaks && regexp.test("\n")) {
            throw new Error("Rule should declare lineBreaks: " + regexp);
          }
          parts.push(reCapture(pat));
        }
        var fallbackRule = errorRule && errorRule.fallback;
        var flags = hasSticky && !fallbackRule ? "ym" : "gm";
        var suffix = hasSticky || fallbackRule ? "" : "|";
        if (unicodeFlag === true) flags += "u";
        var combined = new RegExp(reUnion(parts) + suffix, flags);
        return { regexp: combined, groups, fast, error: errorRule || defaultErrorRule };
      }
      function compile(rules) {
        var result = compileRules(toRules(rules));
        return new Lexer({ start: result }, "start");
      }
      function checkStateGroup(g, name, map) {
        var state = g && (g.push || g.next);
        if (state && !map[state]) {
          throw new Error("Missing state '" + state + "' (in token '" + g.defaultType + "' of state '" + name + "')");
        }
        if (g && g.pop && +g.pop !== 1) {
          throw new Error("pop must be 1 (in token '" + g.defaultType + "' of state '" + name + "')");
        }
      }
      function compileStates(states, start) {
        var all = states.$all ? toRules(states.$all) : [];
        delete states.$all;
        var keys = Object.getOwnPropertyNames(states);
        if (!start) start = keys[0];
        var ruleMap = /* @__PURE__ */ Object.create(null);
        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          ruleMap[key] = toRules(states[key]).concat(all);
        }
        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          var rules = ruleMap[key];
          var included = /* @__PURE__ */ Object.create(null);
          for (var j = 0; j < rules.length; j++) {
            var rule = rules[j];
            if (!rule.include) continue;
            var splice = [j, 1];
            if (rule.include !== key && !included[rule.include]) {
              included[rule.include] = true;
              var newRules = ruleMap[rule.include];
              if (!newRules) {
                throw new Error("Cannot include nonexistent state '" + rule.include + "' (in state '" + key + "')");
              }
              for (var k = 0; k < newRules.length; k++) {
                var newRule = newRules[k];
                if (rules.indexOf(newRule) !== -1) continue;
                splice.push(newRule);
              }
            }
            rules.splice.apply(rules, splice);
            j--;
          }
        }
        var map = /* @__PURE__ */ Object.create(null);
        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          map[key] = compileRules(ruleMap[key], true);
        }
        for (var i = 0; i < keys.length; i++) {
          var name = keys[i];
          var state = map[name];
          var groups = state.groups;
          for (var j = 0; j < groups.length; j++) {
            checkStateGroup(groups[j], name, map);
          }
          var fastKeys = Object.getOwnPropertyNames(state.fast);
          for (var j = 0; j < fastKeys.length; j++) {
            checkStateGroup(state.fast[fastKeys[j]], name, map);
          }
        }
        return new Lexer(map, start);
      }
      function keywordTransform(map) {
        var isMap = typeof Map !== "undefined";
        var reverseMap = isMap ? /* @__PURE__ */ new Map() : /* @__PURE__ */ Object.create(null);
        var types = Object.getOwnPropertyNames(map);
        for (var i = 0; i < types.length; i++) {
          var tokenType = types[i];
          var item = map[tokenType];
          var keywordList = Array.isArray(item) ? item : [item];
          keywordList.forEach(function(keyword) {
            if (typeof keyword !== "string") {
              throw new Error("keyword must be string (in keyword '" + tokenType + "')");
            }
            if (isMap) {
              reverseMap.set(keyword, tokenType);
            } else {
              reverseMap[keyword] = tokenType;
            }
          });
        }
        return function(k) {
          return isMap ? reverseMap.get(k) : reverseMap[k];
        };
      }
      var Lexer = function(states, state) {
        this.startState = state;
        this.states = states;
        this.buffer = "";
        this.stack = [];
        this.reset();
      };
      Lexer.prototype.reset = function(data, info) {
        this.buffer = data || "";
        this.index = 0;
        this.line = info ? info.line : 1;
        this.col = info ? info.col : 1;
        this.queuedToken = info ? info.queuedToken : null;
        this.queuedText = info ? info.queuedText : "";
        this.queuedThrow = info ? info.queuedThrow : null;
        this.setState(info ? info.state : this.startState);
        this.stack = info && info.stack ? info.stack.slice() : [];
        return this;
      };
      Lexer.prototype.save = function() {
        return {
          line: this.line,
          col: this.col,
          state: this.state,
          stack: this.stack.slice(),
          queuedToken: this.queuedToken,
          queuedText: this.queuedText,
          queuedThrow: this.queuedThrow
        };
      };
      Lexer.prototype.setState = function(state) {
        if (!state || this.state === state) return;
        this.state = state;
        var info = this.states[state];
        this.groups = info.groups;
        this.error = info.error;
        this.re = info.regexp;
        this.fast = info.fast;
      };
      Lexer.prototype.popState = function() {
        this.setState(this.stack.pop());
      };
      Lexer.prototype.pushState = function(state) {
        this.stack.push(this.state);
        this.setState(state);
      };
      var eat = hasSticky ? function(re, buffer) {
        return re.exec(buffer);
      } : function(re, buffer) {
        var match = re.exec(buffer);
        if (match[0].length === 0) {
          return null;
        }
        return match;
      };
      Lexer.prototype._getGroup = function(match) {
        var groupCount = this.groups.length;
        for (var i = 0; i < groupCount; i++) {
          if (match[i + 1] !== void 0) {
            return this.groups[i];
          }
        }
        throw new Error("Cannot find token type for matched text");
      };
      function tokenToString() {
        return this.value;
      }
      Lexer.prototype.next = function() {
        var index = this.index;
        if (this.queuedGroup) {
          var token = this._token(this.queuedGroup, this.queuedText, index);
          this.queuedGroup = null;
          this.queuedText = "";
          return token;
        }
        var buffer = this.buffer;
        if (index === buffer.length) {
          return;
        }
        var group = this.fast[buffer.charCodeAt(index)];
        if (group) {
          return this._token(group, buffer.charAt(index), index);
        }
        var re = this.re;
        re.lastIndex = index;
        var match = eat(re, buffer);
        var error = this.error;
        if (match == null) {
          return this._token(error, buffer.slice(index, buffer.length), index);
        }
        var group = this._getGroup(match);
        var text = match[0];
        if (error.fallback && match.index !== index) {
          this.queuedGroup = group;
          this.queuedText = text;
          return this._token(error, buffer.slice(index, match.index), index);
        }
        return this._token(group, text, index);
      };
      Lexer.prototype._token = function(group, text, offset) {
        var lineBreaks = 0;
        if (group.lineBreaks) {
          var matchNL = /\n/g;
          var nl = 1;
          if (text === "\n") {
            lineBreaks = 1;
          } else {
            while (matchNL.exec(text)) {
              lineBreaks++;
              nl = matchNL.lastIndex;
            }
          }
        }
        var token = {
          type: typeof group.type === "function" && group.type(text) || group.defaultType,
          value: typeof group.value === "function" ? group.value(text) : text,
          text,
          toString: tokenToString,
          offset,
          lineBreaks,
          line: this.line,
          col: this.col
        };
        var size = text.length;
        this.index += size;
        this.line += lineBreaks;
        if (lineBreaks !== 0) {
          this.col = size - nl + 1;
        } else {
          this.col += size;
        }
        if (group.shouldThrow) {
          var err = new Error(this.formatError(token, "invalid syntax"));
          throw err;
        }
        if (group.pop) this.popState();
        else if (group.push) this.pushState(group.push);
        else if (group.next) this.setState(group.next);
        return token;
      };
      if (typeof Symbol !== "undefined" && Symbol.iterator) {
        var LexerIterator = function(lexer) {
          this.lexer = lexer;
        };
        LexerIterator.prototype.next = function() {
          var token = this.lexer.next();
          return { value: token, done: !token };
        };
        LexerIterator.prototype[Symbol.iterator] = function() {
          return this;
        };
        Lexer.prototype[Symbol.iterator] = function() {
          return new LexerIterator(this);
        };
      }
      Lexer.prototype.formatError = function(token, message) {
        if (token == null) {
          var text = this.buffer.slice(this.index);
          var token = {
            text,
            offset: this.index,
            lineBreaks: text.indexOf("\n") === -1 ? 0 : 1,
            line: this.line,
            col: this.col
          };
        }
        var numLinesAround = 2;
        var firstDisplayedLine = Math.max(token.line - numLinesAround, 1);
        var lastDisplayedLine = token.line + numLinesAround;
        var lastLineDigits = String(lastDisplayedLine).length;
        var displayedLines = lastNLines(
          this.buffer,
          this.line - token.line + numLinesAround + 1
        ).slice(0, 5);
        var errorLines = [];
        errorLines.push(message + " at line " + token.line + " col " + token.col + ":");
        errorLines.push("");
        for (var i = 0; i < displayedLines.length; i++) {
          var line = displayedLines[i];
          var lineNo = firstDisplayedLine + i;
          errorLines.push(pad(String(lineNo), lastLineDigits) + "  " + line);
          if (lineNo === token.line) {
            errorLines.push(pad("", lastLineDigits + token.col + 1) + "^");
          }
        }
        return errorLines.join("\n");
      };
      Lexer.prototype.clone = function() {
        return new Lexer(this.states, this.state);
      };
      Lexer.prototype.has = function(tokenType) {
        return true;
      };
      return {
        compile,
        states: compileStates,
        error: Object.freeze({ error: true }),
        fallback: Object.freeze({ fallback: true }),
        keywords: keywordTransform
      };
    });
  }
});

// node_modules/@retorquere/bibtex-parser/prepositions.json
var require_prepositions = __commonJS({
  "node_modules/@retorquere/bibtex-parser/prepositions.json"(exports2, module2) {
    module2.exports = [
      "a",
      "about",
      "above",
      "according to",
      "across",
      "after",
      "against",
      "ahead of",
      "along",
      "although",
      "among",
      "an",
      "and",
      "apart from",
      "around",
      "as for",
      "as if",
      "as long as",
      "as of",
      "as per",
      "as regards",
      "as soon as",
      "as",
      "aside from",
      "at",
      "back to",
      "because of",
      "because",
      "before",
      "behind",
      "below",
      "beneath",
      "beside",
      "between",
      "but",
      "by",
      "close to",
      "down",
      "due to",
      "during",
      "except for",
      "far from",
      "for",
      "from",
      "if",
      "in",
      "inside of",
      "inside",
      "instead of",
      "into",
      "like",
      "near",
      "next to",
      "nor",
      "of",
      "off",
      "on",
      "onto",
      "or",
      "out",
      "outside of",
      "over",
      "owing to",
      "prior to",
      "pursuant to",
      "regardless of",
      "right of",
      "since",
      "so",
      "subsequent to",
      "the",
      "through",
      "to",
      "towards",
      "under",
      "underneath",
      "unless",
      "until",
      "up",
      "upon",
      "when",
      "while",
      "with",
      "within",
      "without",
      "yet"
    ];
  }
});

// node_modules/@retorquere/bibtex-parser/tokenizer.js
var require_tokenizer = __commonJS({
  "node_modules/@retorquere/bibtex-parser/tokenizer.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.tokenize = tokenize;
    var moo_1 = __importDefault(require_moo());
    var rx = __importStar(require_re());
    var L = rx.match(rx.categories.filter((cat) => cat.name === "L"));
    var LNM = rx.match(rx.categories.filter((cat) => cat.name.match(/^[LNM]/)), "\xAD\u2060");
    var W = `${LNM}*?${L}${LNM}*`;
    var B = `(?=(?:${rx.match(rx.categories.filter((cat) => cat.name.match(/^[LNM]/)), "\xAD\u2060").replace(/^./, "[^")}|$))`;
    var Word = new RegExp(`${W}${B}`);
    var P = new RegExp(rx.match(rx.categories.filter((cat) => cat.name.match(/^P/))));
    var Lu = rx.match(rx.categories.filter((cat) => cat.name === "Lu" || cat.name === "Lt"), "\u2060");
    var Acronym = new RegExp(`(?:(?:(?:${Lu}[.]){2,}${B})|(?:(?:vs?[.])(?=[ 	
\r\xA0])))`);
    var Contraction = new RegExp(`${W}['\u2019]${W}${B}`);
    var Whitespace = /[ \t\n\r\u00A0]+/;
    var Ordinal = new RegExp(`\\d+(?:st|nd|rd|th)${B}`);
    var Email = new RegExp(`[A-Za-z0-9._%+-]+@[A-Za-z0-9-]+(?:[.][A-Za-z0-9-]+)+${B}`);
    var Handle = new RegExp(`@[A-Za-z0-9-]{2,}${B}`);
    var IntOrVersion = new RegExp(`v?\\d+(?:\\.\\d+)*${B}`);
    var Domain = new RegExp(`${W}(?:[.]${W})+${B}`);
    var Website = new RegExp(`https?://${W}(?:[.]${W})+(?:[^.!? 	
\r\xA0]+|[.!?]${LNM})+`);
    var ComplexPreposition = /^([^ \t\n\r\u00A0]+)([ \t\n\r\u00A0]+)([^ \t\n\r\u00A0]+)(?:([ \t\n\r\u00A0]+)([^ \t\n\r\u00A0]+))?$/;
    function ci(s) {
      return s.replace(/[a-z]/ig, (match) => `[${match.toUpperCase()}${match.toLowerCase()}]`).replace(" ", Whitespace.source);
    }
    var prepositions = require_prepositions().sort().reverse().map(ci).join("|");
    var Preposition = new RegExp(`(?:${prepositions})${B}`);
    var lexer = moo_1.default.compile({
      "word-preposition": Preposition,
      "word-acronym": Acronym,
      "word-contraction": Contraction,
      "word-ordinal": Ordinal,
      email: Email,
      handle: Handle,
      website: Website,
      domain: Domain,
      word: Word,
      number: IntOrVersion,
      // eslint-disable-line id-blacklist
      "punctuation-end": /[?.!](?=[ \t\n\r\u00A0]|$)/,
      "punctuation-colon": /:(?=[ \t\n\r\u00A0])/,
      "punctuation-ellipsis": /[.][.][.]/,
      punctuation: P,
      whitespace: { match: /[ \t\n\r\u00A0]/, lineBreaks: true },
      other: { match: /[\s\S]/, lineBreaks: true }
    });
    var Shape = new class {
      constructor() {
        this.shapes = {};
        this.re = {
          X: new RegExp(rx.match(rx.categories.filter((cat) => cat.name === "Lu" || cat.name === "Lt"))),
          x: new RegExp(rx.match(rx.categories.filter((cat) => cat.name.match(/^L[^Cut]/)))),
          d: new RegExp(rx.match(rx.categories.filter((cat) => cat.name[0] === "N")))
        };
      }
      match(c) {
        if (c.match(this.re.d))
          return "d";
        if (c.toLowerCase() === c.toUpperCase())
          return c;
        if (c.match(this.re.X))
          return "X";
        if (c.match(this.re.x))
          return "x";
        if (c === "\u2019")
          return "'";
        if (c === "\u2013")
          return "-";
        if (c === "\u2060" || c === "\xAD")
          return "";
        return c;
      }
      fetch(c) {
        if (typeof this.shapes[c] === "undefined")
          this.shapes[c] = this.match(c);
        return this.shapes[c];
      }
      shape(t) {
        if (!this.shapes[t])
          this.shapes[t] = Array.from(t).map((c) => this.fetch(c)).join("");
        return this.shapes[t];
      }
    }();
    function combine(tokens) {
      const combined = Object.assign({}, tokens[0]);
      for (const t of tokens.slice(1)) {
        combined.text += t.text;
        combined.end = t.end;
        combined.shape += t.shape;
      }
      return combined;
    }
    function hyphenate(t) {
      if (t.type === "word")
        return "w";
      if (t.text === "-" || t.text === "\u2013")
        return "-";
      return " ";
    }
    function tokenize(title, markup) {
      if (markup)
        title = title.replace(markup, (match) => "\u2060".repeat(match.length));
      lexer.reset(title);
      const tokens = [];
      let sentenceStart = true;
      let subSentenceStart = false;
      for (const token of lexer) {
        const [type, subtype] = (token.type.includes("-") ? token.type : `${token.type}-`).split("-");
        tokens.push({
          type,
          subtype,
          text: token.text,
          start: token.offset,
          end: token.offset + token.text.length - 1,
          shape: Shape.shape(token.text),
          sentenceStart: type === "word" && sentenceStart,
          subSentenceStart: type === "word" && subSentenceStart
        });
        switch (token.type) {
          case "punctuation-end":
            sentenceStart = true;
            break;
          case "punctuation-colon":
            subSentenceStart = true;
            break;
          default:
            if (type.match(/word|number|handle|domain|website/)) {
              sentenceStart = false;
              subSentenceStart = false;
            }
            break;
        }
      }
      const stack = tokens.splice(0);
      let cpt;
      let cps;
      while (stack.length) {
        if (stack[0].subtype === "preposition" && (cpt = stack[0].text.match(ComplexPreposition)) && (cps = stack[0].shape.match(ComplexPreposition))) {
          const complex = stack.shift();
          let start = complex.start;
          let end;
          for (const i of Array.from({ length: 5 }, (_, n) => n + 1)) {
            if (!cpt[i])
              break;
            end = start + cps[i].length - 1;
            tokens.push(Object.assign(Object.assign({}, complex), {
              text: cpt[i],
              shape: cps[i],
              start,
              end,
              type: i % 2 ? complex.type : "whitespace",
              subtype: i % 2 ? complex.type : ""
            }));
            start = end + 1;
          }
          continue;
        }
        const pat = stack.map((t) => hyphenate(t)).join("");
        if (cpt = pat.match(/^w(-w)+(?= |$)/)) {
          const hyphenated = stack.splice(0, cpt[0].length);
          tokens.push(Object.assign(Object.assign({}, combine(hyphenated)), { hyphenated }));
          continue;
        }
        tokens.push(stack.shift());
      }
      return markup ? tokens.map((token) => Object.assign(Object.assign({}, token), { text: title.substring(token.start, token.end + 1) })) : tokens;
    }
  }
});

// node_modules/lodash.merge/index.js
var require_lodash = __commonJS({
  "node_modules/lodash.merge/index.js"(exports2, module2) {
    var LARGE_ARRAY_SIZE = 200;
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var HOT_COUNT = 800;
    var HOT_SPAN = 16;
    var MAX_SAFE_INTEGER = 9007199254740991;
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var asyncTag = "[object AsyncFunction]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var nullTag = "[object Null]";
    var objectTag = "[object Object]";
    var proxyTag = "[object Proxy]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var undefinedTag = "[object Undefined]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    var freeExports = typeof exports2 == "object" && exports2 && !exports2.nodeType && exports2;
    var freeModule = freeExports && typeof module2 == "object" && module2 && !module2.nodeType && module2;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;
    var nodeUtil = function() {
      try {
        var types = freeModule && freeModule.require && freeModule.require("util").types;
        if (types) {
          return types;
        }
        return freeProcess && freeProcess.binding && freeProcess.binding("util");
      } catch (e) {
      }
    }();
    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    function apply(func, thisArg, args) {
      switch (args.length) {
        case 0:
          return func.call(thisArg);
        case 1:
          return func.call(thisArg, args[0]);
        case 2:
          return func.call(thisArg, args[0], args[1]);
        case 3:
          return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }
    function baseTimes(n, iteratee) {
      var index = -1, result = Array(n);
      while (++index < n) {
        result[index] = iteratee(index);
      }
      return result;
    }
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }
    function getValue(object, key) {
      return object == null ? void 0 : object[key];
    }
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
    var arrayProto = Array.prototype;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var coreJsData = root["__core-js_shared__"];
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    var nativeObjectToString = objectProto.toString;
    var objectCtorString = funcToString.call(Object);
    var reIsNative = RegExp(
      "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    var Buffer2 = moduleExports ? root.Buffer : void 0;
    var Symbol2 = root.Symbol;
    var Uint8Array2 = root.Uint8Array;
    var allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : void 0;
    var getPrototype = overArg(Object.getPrototypeOf, Object);
    var objectCreate = Object.create;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var splice = arrayProto.splice;
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    var defineProperty = function() {
      try {
        var func = getNative(Object, "defineProperty");
        func({}, "", {});
        return func;
      } catch (e) {
      }
    }();
    var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;
    var nativeMax = Math.max;
    var nativeNow = Date.now;
    var Map2 = getNative(root, "Map");
    var nativeCreate = getNative(Object, "create");
    var baseCreate = /* @__PURE__ */ function() {
      function object() {
      }
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object();
        object.prototype = void 0;
        return result;
      };
    }();
    function Hash(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : void 0;
    }
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== void 0 : hasOwnProperty.call(data, key);
    }
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    function ListCache(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }
    function listCacheDelete(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }
    function listCacheGet(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      return index < 0 ? void 0 : data[index][1];
    }
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    function listCacheSet(key, value) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    function MapCache(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map2 || ListCache)(),
        "string": new Hash()
      };
    }
    function mapCacheDelete(key) {
      var result = getMapData(this, key)["delete"](key);
      this.size -= result ? 1 : 0;
      return result;
    }
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    function mapCacheSet(key, value) {
      var data = getMapData(this, key), size = data.size;
      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }
    function stackClear() {
      this.__data__ = new ListCache();
      this.size = 0;
    }
    function stackDelete(key) {
      var data = this.__data__, result = data["delete"](key);
      this.size = data.size;
      return result;
    }
    function stackGet(key) {
      return this.__data__.get(key);
    }
    function stackHas(key) {
      return this.__data__.has(key);
    }
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }
    Stack.prototype.clear = stackClear;
    Stack.prototype["delete"] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
        (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
        isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
        isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
        isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    function assignMergeValue(object, key, value) {
      if (value !== void 0 && !eq(object[key], value) || value === void 0 && !(key in object)) {
        baseAssignValue(object, key, value);
      }
    }
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === void 0 && !(key in object)) {
        baseAssignValue(object, key, value);
      }
    }
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    function baseAssignValue(object, key, value) {
      if (key == "__proto__" && defineProperty) {
        defineProperty(object, key, {
          "configurable": true,
          "enumerable": true,
          "value": value,
          "writable": true
        });
      } else {
        object[key] = value;
      }
    }
    var baseFor = createBaseFor();
    function baseGetTag(value) {
      if (value == null) {
        return value === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    function baseIsTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object), result = [];
      for (var key in object) {
        if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack());
        if (isObject(srcValue)) {
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        } else {
          var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : void 0;
          if (newValue === void 0) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : void 0;
      var isCommon = newValue === void 0;
      if (isCommon) {
        var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          } else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          } else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          } else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          } else {
            newValue = [];
          }
        } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          } else if (!isObject(objValue) || isFunction(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        } else {
          isCommon = false;
        }
      }
      if (isCommon) {
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack["delete"](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + "");
    }
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, "toString", {
        "configurable": true,
        "enumerable": false,
        "value": constant(string),
        "writable": true
      });
    };
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
      buffer.copy(result);
      return result;
    }
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array2(result).set(new Uint8Array2(arrayBuffer));
      return result;
    }
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }
    function copyArray(source, array) {
      var index = -1, length = source.length;
      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});
      var index = -1, length = props.length;
      while (++index < length) {
        var key = props[index];
        var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
        if (newValue === void 0) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : void 0, guard = length > 2 ? sources[2] : void 0;
        customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : void 0;
        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? void 0 : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : void 0;
    }
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
      try {
        value[symToStringTag] = void 0;
        var unmasked = true;
      } catch (e) {
      }
      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }
    function initCloneObject(object) {
      return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
    }
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && index in object) {
        return eq(object[index], value);
      }
      return false;
    }
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto;
    }
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }
    function overRest(func, start, transform) {
      start = nativeMax(start === void 0 ? func.length - 1 : start, 0);
      return function() {
        var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array(length);
        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }
    function safeGet(object, key) {
      if (key === "constructor" && typeof object[key] === "function") {
        return;
      }
      if (key == "__proto__") {
        return;
      }
      return object[key];
    }
    var setToString = shortOut(baseSetToString);
    function shortOut(func) {
      var count = 0, lastCalled = 0;
      return function() {
        var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(void 0, arguments);
      };
    }
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {
        }
        try {
          return func + "";
        } catch (e) {
        }
      }
      return "";
    }
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    var isArguments = baseIsArguments(/* @__PURE__ */ function() {
      return arguments;
    }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
    };
    var isArray = Array.isArray;
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }
    var isBuffer = nativeIsBuffer || stubFalse;
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return value != null && typeof value == "object";
    }
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
      return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
    }
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });
    function constant(value) {
      return function() {
        return value;
      };
    }
    function identity(value) {
      return value;
    }
    function stubFalse() {
      return false;
    }
    module2.exports = merge;
  }
});

// node_modules/@retorquere/bibtex-parser/merge.js
var require_merge = __commonJS({
  "node_modules/@retorquere/bibtex-parser/merge.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.merge = merge;
    var lodash_merge_1 = __importDefault(require_lodash());
    function merge(options, defaults) {
      return (0, lodash_merge_1.default)(defaults, options);
    }
  }
});

// node_modules/@retorquere/bibtex-parser/sentence-case.js
var require_sentence_case = __commonJS({
  "node_modules/@retorquere/bibtex-parser/sentence-case.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toSentenceCase = toSentenceCase;
    var tokenizer_1 = require_tokenizer();
    var merge_1 = require_merge();
    var rx = __importStar(require_re());
    var Lu = rx.match(rx.categories.filter((cat) => cat.name === "Lu" || cat.name === "Lt"));
    var Ll = rx.match(rx.categories.filter((cat) => cat.name === "Ll"));
    var connectedInnerWord = new RegExp(`-${Lu}${Ll}*(?=-|$)`, "g");
    function titleCase(s) {
      return s.replace(/^(.)(.+)/, (match, car, cdr) => `${car}${cdr.toLowerCase()}`);
    }
    function wordSC(token, allCaps, subSentence, hyphenated) {
      if (token.type === "domain")
        return token.text.toLowerCase();
      if (token.type !== "word")
        return token.text;
      if (token.text.match(/^I'/))
        return titleCase(token.text);
      if (subSentence && token.subSentenceStart && token.text.match(/^a$/i))
        return "a";
      if (subSentence && token.subSentenceStart || token.sentenceStart) {
        return allCaps ? titleCase(token.text) : token.text.replace(connectedInnerWord, (match) => match.toLowerCase());
      }
      if (token.subtype === "preposition")
        return token.text.toLowerCase();
      if (token.subtype === "acronym")
        return token.text;
      if (token.text.match(/^[B-Z]$/))
        return hyphenated ? token.text.toLowerCase() : token.text;
      const shape = token.shape.replace(/[^-Xxd]/g, "");
      if (shape.match(/^[Xd]+$/))
        return allCaps ? token.text.toLowerCase() : token.text;
      if (shape.match(/x.*X/))
        return token.text;
      return token.text.toLowerCase();
    }
    function toSentenceCase(title, options = {}) {
      options = (0, merge_1.merge)(options, {
        preserveQuoted: true,
        subSentenceCapitalization: true,
        guess: false
      });
      const allCaps = title === title.toUpperCase();
      const allLower = title === title.toLowerCase();
      if (options.guess && !allCaps && !allLower) {
        let $title = title;
        if (options.nocase)
          $title = $title.replace(options.nocase, (match) => match.match(/\s/) ? " " : "");
        if (options.markup)
          $title = $title.replace(options.markup, "");
        const guess = {
          words: (0, tokenizer_1.tokenize)($title),
          sc: 0,
          other: 0
        };
        guess.words.forEach((token, i) => {
          if (token.type === "word" && token.text.length > 1 && !token.subtype.match(/preposition|acronym|ordinal/) && (i === 0 || guess.words[i - 1].type === "whitespace")) {
            guess[token.shape.match(/^[^X]*x[^X]*$/) ? "sc" : "other"] += 1;
          }
        });
        if (guess.sc && guess.sc >= guess.other)
          return title;
      }
      if (allCaps && !title.match(/\s/))
        return title;
      const tokens = (0, tokenizer_1.tokenize)(title, options.markup);
      let sentenceCased = "";
      for (const token of tokens) {
        if (token.hyphenated && token.shape[0] === "x") {
          sentenceCased += token.text;
        } else if (token.hyphenated) {
          for (const t of token.hyphenated) {
            sentenceCased += wordSC(t, allCaps, options.subSentenceCapitalization, true);
          }
        } else {
          sentenceCased += wordSC(token, allCaps, options.subSentenceCapitalization, false);
        }
      }
      if (options.markup) {
        for (const match of title.matchAll(options.markup)) {
          sentenceCased = sentenceCased.substring(0, match.index) + match[0] + sentenceCased.substring(match.index + match[0].length);
        }
      }
      if (options.nocase) {
        sentenceCased = sentenceCased.replace(options.nocase, (match, tag, offset) => title.substring(offset, offset + match.length));
      }
      if (options.preserveQuoted) {
        for (const q of [/“.*?”/g, /‘.*?’/g, /".*?"/g]) {
          sentenceCased = sentenceCased.replace(q, (match, offset) => title.substring(offset, offset + match.length));
        }
      }
      return sentenceCased;
    }
  }
});

// node_modules/@retorquere/bibtex-parser/crossref.json
var require_crossref = __commonJS({
  "node_modules/@retorquere/bibtex-parser/crossref.json"(exports2, module2) {
    module2.exports = {
      "*": {
        "*": {
          verbb: "verba"
        }
      },
      article: {
        periodical: {
          journalsubtitle: "subtitle",
          journaltitle: "title"
        }
      },
      book: {
        mvbook: {
          mainsubtitle: "subtitle",
          maintitle: "title",
          maintitleaddon: "titleaddon"
        }
      },
      bookinbook: {
        book: {
          author: "author",
          bookauthor: "author",
          booksubtitle: "subtitle",
          booktitle: "title",
          booktitleaddon: "titleaddon"
        },
        mvbook: {
          author: "author",
          bookauthor: "author",
          mainsubtitle: "subtitle",
          maintitle: "title",
          maintitleaddon: "titleaddon"
        }
      },
      collection: {
        mvcollection: {
          mainsubtitle: "subtitle",
          maintitle: "title",
          maintitleaddon: "titleaddon"
        },
        mvreference: {
          mainsubtitle: "subtitle",
          maintitle: "title",
          maintitleaddon: "titleaddon"
        }
      },
      inbook: {
        "*": {
          bookauthor: "author"
        },
        book: {
          author: "author",
          bookauthor: "author",
          booksubtitle: "subtitle",
          booktitle: "title",
          booktitleaddon: "titleaddon"
        },
        mvbook: {
          author: "author",
          bookauthor: "author",
          mainsubtitle: "subtitle",
          maintitle: "title",
          maintitleaddon: "titleaddon"
        }
      },
      incollection: {
        collection: {
          booksubtitle: "subtitle",
          booktitle: "title",
          booktitleaddon: "titleaddon"
        },
        mvcollection: {
          mainsubtitle: "subtitle",
          maintitle: "title",
          maintitleaddon: "titleaddon"
        },
        mvreference: {
          mainsubtitle: "subtitle",
          maintitle: "title",
          maintitleaddon: "titleaddon"
        },
        reference: {
          booksubtitle: "subtitle",
          booktitle: "title",
          booktitleaddon: "titleaddon"
        }
      },
      inproceedings: {
        mvproceedings: {
          mainsubtitle: "subtitle",
          maintitle: "title",
          maintitleaddon: "titleaddon"
        },
        proceedings: {
          booksubtitle: "subtitle",
          booktitle: "title",
          booktitleaddon: "titleaddon"
        }
      },
      inreference: {
        collection: {
          booksubtitle: "subtitle",
          booktitle: "title",
          booktitleaddon: "titleaddon"
        },
        mvcollection: {
          mainsubtitle: "subtitle",
          maintitle: "title",
          maintitleaddon: "titleaddon"
        },
        mvreference: {
          mainsubtitle: "subtitle",
          maintitle: "title",
          maintitleaddon: "titleaddon"
        },
        reference: {
          booksubtitle: "subtitle",
          booktitle: "title",
          booktitleaddon: "titleaddon"
        }
      },
      proceedings: {
        mvproceedings: {
          mainsubtitle: "subtitle",
          maintitle: "title",
          maintitleaddon: "titleaddon"
        }
      },
      reference: {
        mvcollection: {
          mainsubtitle: "subtitle",
          maintitle: "title",
          maintitleaddon: "titleaddon"
        },
        mvreference: {
          mainsubtitle: "subtitle",
          maintitle: "title",
          maintitleaddon: "titleaddon"
        }
      },
      suppbook: {
        book: {
          author: "author",
          bookauthor: "author",
          booksubtitle: "subtitle",
          booktitle: "title",
          booktitleaddon: "titleaddon"
        },
        mvbook: {
          author: "author",
          bookauthor: "author",
          mainsubtitle: "subtitle",
          maintitle: "title",
          maintitleaddon: "titleaddon"
        }
      },
      suppcollection: {
        collection: {
          booksubtitle: "subtitle",
          booktitle: "title",
          booktitleaddon: "titleaddon"
        },
        mvcollection: {
          mainsubtitle: "subtitle",
          maintitle: "title",
          maintitleaddon: "titleaddon"
        },
        mvreference: {
          mainsubtitle: "subtitle",
          maintitle: "title",
          maintitleaddon: "titleaddon"
        },
        reference: {
          booksubtitle: "subtitle",
          booktitle: "title",
          booktitleaddon: "titleaddon"
        }
      },
      suppperiodical: {
        periodical: {
          journalsubtitle: "subtitle",
          journaltitle: "title"
        }
      }
    };
  }
});

// node_modules/@retorquere/bibtex-parser/fields.json
var require_fields = __commonJS({
  "node_modules/@retorquere/bibtex-parser/fields.json"(exports2, module2) {
    module2.exports = {
      article: [
        "abstract",
        "addendum",
        "annotation",
        "annotator",
        "author",
        "authortype",
        "bookpagination",
        "commentator",
        "crossref",
        "day",
        "doi",
        "editor",
        "editora",
        "editoratype",
        "editorb",
        "editorbtype",
        "editorc",
        "editorctype",
        "editortype",
        "eid",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "issn",
        "issue",
        "issuesubtitle",
        "issuetitle",
        "issuetitleaddon",
        "iswc",
        "journalsubtitle",
        "journaltitle",
        "journaltitleaddon",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "number",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlanguage",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pages",
        "pagination",
        "presort",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "series",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "translator",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "version",
        "volume",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      artwork: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      audio: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      bibnote: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      book: [
        "abstract",
        "addendum",
        "afterword",
        "annotation",
        "annotator",
        "author",
        "authortype",
        "bookpagination",
        "chapter",
        "commentator",
        "crossref",
        "day",
        "doi",
        "edition",
        "editor",
        "editora",
        "editoratype",
        "editorb",
        "editorbtype",
        "editorc",
        "editorctype",
        "editortype",
        "eid",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "foreword",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "introduction",
        "isan",
        "isbn",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "mainsubtitle",
        "maintitle",
        "maintitleaddon",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "number",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlanguage",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pages",
        "pagetotal",
        "pagination",
        "part",
        "presort",
        "publisher",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "series",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "translator",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "volume",
        "volumes",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      bookinbook: [
        "abstract",
        "addendum",
        "afterword",
        "annotation",
        "annotator",
        "author",
        "authortype",
        "bookauthor",
        "bookpagination",
        "booksubtitle",
        "booktitle",
        "booktitleaddon",
        "chapter",
        "commentator",
        "crossref",
        "day",
        "doi",
        "edition",
        "editor",
        "editora",
        "editoratype",
        "editorb",
        "editorbtype",
        "editorc",
        "editorctype",
        "editortype",
        "eid",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "foreword",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "introduction",
        "isan",
        "isbn",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "mainsubtitle",
        "maintitle",
        "maintitleaddon",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "number",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlanguage",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pages",
        "pagination",
        "part",
        "presort",
        "publisher",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "series",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "translator",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "volume",
        "volumes",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      booklet: [
        "abstract",
        "addendum",
        "annotation",
        "author",
        "authortype",
        "bookpagination",
        "chapter",
        "crossref",
        "day",
        "doi",
        "editor",
        "editortype",
        "eid",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "howpublished",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pages",
        "pagetotal",
        "pagination",
        "presort",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "type",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      collection: [
        "abstract",
        "addendum",
        "afterword",
        "annotation",
        "annotator",
        "authortype",
        "bookpagination",
        "chapter",
        "commentator",
        "crossref",
        "day",
        "doi",
        "edition",
        "editor",
        "editora",
        "editoratype",
        "editorb",
        "editorbtype",
        "editorc",
        "editorctype",
        "editortype",
        "eid",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "foreword",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "introduction",
        "isan",
        "isbn",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "mainsubtitle",
        "maintitle",
        "maintitleaddon",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "number",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlanguage",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pages",
        "pagetotal",
        "pagination",
        "part",
        "presort",
        "publisher",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "series",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "translator",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "volume",
        "volumes",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      commentary: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      customa: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      customb: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      customc: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      customd: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      custome: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      customf: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      dataset: [
        "abstract",
        "addendum",
        "annotation",
        "author",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "edition",
        "editor",
        "editortype",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "number",
        "options",
        "organization",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "publisher",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "series",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "type",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "version",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      image: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      inbook: [
        "abstract",
        "addendum",
        "afterword",
        "annotation",
        "annotator",
        "author",
        "authortype",
        "bookauthor",
        "bookpagination",
        "booksubtitle",
        "booktitle",
        "booktitleaddon",
        "chapter",
        "commentator",
        "crossref",
        "day",
        "doi",
        "edition",
        "editor",
        "editora",
        "editoratype",
        "editorb",
        "editorbtype",
        "editorc",
        "editorctype",
        "editortype",
        "eid",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "foreword",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "introduction",
        "isan",
        "isbn",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "mainsubtitle",
        "maintitle",
        "maintitleaddon",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "number",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlanguage",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pages",
        "pagination",
        "part",
        "presort",
        "publisher",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "series",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "translator",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "volume",
        "volumes",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      incollection: [
        "abstract",
        "addendum",
        "afterword",
        "annotation",
        "annotator",
        "author",
        "authortype",
        "bookpagination",
        "booksubtitle",
        "booktitle",
        "booktitleaddon",
        "chapter",
        "commentator",
        "crossref",
        "day",
        "doi",
        "edition",
        "editor",
        "editora",
        "editoratype",
        "editorb",
        "editorbtype",
        "editorc",
        "editorctype",
        "editortype",
        "eid",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "foreword",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "introduction",
        "isan",
        "isbn",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "mainsubtitle",
        "maintitle",
        "maintitleaddon",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "number",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlanguage",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pages",
        "pagination",
        "part",
        "presort",
        "publisher",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "series",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "translator",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "volume",
        "volumes",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      inproceedings: [
        "abstract",
        "addendum",
        "annotation",
        "author",
        "authortype",
        "bookpagination",
        "booksubtitle",
        "booktitle",
        "booktitleaddon",
        "chapter",
        "crossref",
        "day",
        "doi",
        "editor",
        "editortype",
        "eid",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "eventday",
        "eventendday",
        "eventendhour",
        "eventendminute",
        "eventendmonth",
        "eventendsecond",
        "eventendtimezone",
        "eventendyear",
        "eventendyeardivision",
        "eventhour",
        "eventminute",
        "eventmonth",
        "eventsecond",
        "eventtimezone",
        "eventtitle",
        "eventtitleaddon",
        "eventyear",
        "eventyeardivision",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "isbn",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "mainsubtitle",
        "maintitle",
        "maintitleaddon",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "number",
        "options",
        "organization",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pages",
        "pagination",
        "part",
        "presort",
        "publisher",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "series",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "venue",
        "verba",
        "verbb",
        "verbc",
        "volume",
        "volumes",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      inreference: [
        "abstract",
        "addendum",
        "afterword",
        "annotation",
        "annotator",
        "author",
        "authortype",
        "bookpagination",
        "booksubtitle",
        "booktitle",
        "booktitleaddon",
        "chapter",
        "commentator",
        "crossref",
        "day",
        "doi",
        "edition",
        "editor",
        "editora",
        "editoratype",
        "editorb",
        "editorbtype",
        "editorc",
        "editorctype",
        "editortype",
        "eid",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "foreword",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "introduction",
        "isan",
        "isbn",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "mainsubtitle",
        "maintitle",
        "maintitleaddon",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "number",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlanguage",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pages",
        "pagination",
        "part",
        "presort",
        "publisher",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "series",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "translator",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "volume",
        "volumes",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      jurisdiction: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      legal: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      legislation: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      letter: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      manual: [
        "abstract",
        "addendum",
        "annotation",
        "author",
        "authortype",
        "bookpagination",
        "chapter",
        "crossref",
        "day",
        "doi",
        "edition",
        "editor",
        "editortype",
        "eid",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "isbn",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "number",
        "options",
        "organization",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pages",
        "pagetotal",
        "pagination",
        "presort",
        "publisher",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "series",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "type",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "version",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      misc: [
        "abstract",
        "addendum",
        "annotation",
        "author",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "editor",
        "editortype",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "howpublished",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "options",
        "organization",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "type",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "version",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      movie: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      music: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      mvbook: [
        "abstract",
        "addendum",
        "afterword",
        "annotation",
        "annotator",
        "author",
        "authortype",
        "bookpagination",
        "commentator",
        "crossref",
        "day",
        "doi",
        "edition",
        "editor",
        "editora",
        "editoratype",
        "editorb",
        "editorbtype",
        "editorc",
        "editorctype",
        "editortype",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "foreword",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "introduction",
        "isan",
        "isbn",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "number",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlanguage",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagetotal",
        "pagination",
        "presort",
        "publisher",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "series",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "translator",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "volume",
        "volumes",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      mvcollection: [
        "abstract",
        "addendum",
        "afterword",
        "annotation",
        "annotator",
        "author",
        "authortype",
        "bookpagination",
        "commentator",
        "crossref",
        "day",
        "doi",
        "edition",
        "editor",
        "editora",
        "editoratype",
        "editorb",
        "editorbtype",
        "editorc",
        "editorctype",
        "editortype",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "foreword",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "introduction",
        "isan",
        "isbn",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "number",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlanguage",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "publisher",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "translator",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "volume",
        "volumes",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      mvproceedings: [
        "abstract",
        "addendum",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "editor",
        "editortype",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "eventday",
        "eventendday",
        "eventendhour",
        "eventendminute",
        "eventendmonth",
        "eventendsecond",
        "eventendtimezone",
        "eventendyear",
        "eventendyeardivision",
        "eventhour",
        "eventminute",
        "eventmonth",
        "eventsecond",
        "eventtimezone",
        "eventtitle",
        "eventtitleaddon",
        "eventyear",
        "eventyeardivision",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "isbn",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "number",
        "options",
        "organization",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagetotal",
        "pagination",
        "presort",
        "publisher",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "series",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "venue",
        "verba",
        "verbb",
        "verbc",
        "volumes",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      mvreference: [
        "abstract",
        "addendum",
        "afterword",
        "annotation",
        "annotator",
        "author",
        "authortype",
        "bookpagination",
        "commentator",
        "crossref",
        "day",
        "doi",
        "edition",
        "editor",
        "editora",
        "editoratype",
        "editorb",
        "editorbtype",
        "editorc",
        "editorctype",
        "editortype",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "foreword",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "introduction",
        "isan",
        "isbn",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "number",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlanguage",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "publisher",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "translator",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "volume",
        "volumes",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      online: [
        "abstract",
        "addendum",
        "annotation",
        "author",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "editor",
        "editortype",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "options",
        "organization",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "version",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      patent: [
        "abstract",
        "addendum",
        "annotation",
        "author",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "holder",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "number",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "type",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "version",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      performance: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      periodical: [
        "abstract",
        "addendum",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "editor",
        "editora",
        "editoratype",
        "editorb",
        "editorbtype",
        "editorc",
        "editorctype",
        "editortype",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "issn",
        "issue",
        "issuesubtitle",
        "issuetitle",
        "issuetitleaddon",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "number",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "series",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "volume",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      proceedings: [
        "abstract",
        "addendum",
        "annotation",
        "authortype",
        "bookpagination",
        "chapter",
        "crossref",
        "day",
        "doi",
        "editor",
        "editortype",
        "eid",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "eventday",
        "eventendday",
        "eventendhour",
        "eventendminute",
        "eventendmonth",
        "eventendsecond",
        "eventendtimezone",
        "eventendyear",
        "eventendyeardivision",
        "eventhour",
        "eventminute",
        "eventmonth",
        "eventsecond",
        "eventtimezone",
        "eventtitle",
        "eventtitleaddon",
        "eventyear",
        "eventyeardivision",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "isbn",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "mainsubtitle",
        "maintitle",
        "maintitleaddon",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "number",
        "options",
        "organization",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pages",
        "pagetotal",
        "pagination",
        "part",
        "presort",
        "publisher",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "series",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "venue",
        "verba",
        "verbb",
        "verbc",
        "volume",
        "volumes",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      reference: [
        "abstract",
        "addendum",
        "afterword",
        "annotation",
        "annotator",
        "authortype",
        "bookpagination",
        "chapter",
        "commentator",
        "crossref",
        "day",
        "doi",
        "edition",
        "editor",
        "editora",
        "editoratype",
        "editorb",
        "editorbtype",
        "editorc",
        "editorctype",
        "editortype",
        "eid",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "foreword",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "introduction",
        "isan",
        "isbn",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "mainsubtitle",
        "maintitle",
        "maintitleaddon",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "number",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlanguage",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pages",
        "pagetotal",
        "pagination",
        "part",
        "presort",
        "publisher",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "series",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "translator",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "volume",
        "volumes",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      report: [
        "abstract",
        "addendum",
        "annotation",
        "author",
        "authortype",
        "bookpagination",
        "chapter",
        "crossref",
        "day",
        "doi",
        "eid",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "institution",
        "isan",
        "ismn",
        "isrn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "number",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pages",
        "pagetotal",
        "pagination",
        "presort",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "type",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "version",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      review: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      set: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      software: [
        "abstract",
        "addendum",
        "annotation",
        "author",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "editor",
        "editortype",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "howpublished",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "options",
        "organization",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "type",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "version",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      standard: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      suppbook: [
        "abstract",
        "addendum",
        "afterword",
        "annotation",
        "annotator",
        "author",
        "authortype",
        "bookauthor",
        "bookpagination",
        "booksubtitle",
        "booktitle",
        "booktitleaddon",
        "chapter",
        "commentator",
        "crossref",
        "day",
        "doi",
        "edition",
        "editor",
        "editora",
        "editoratype",
        "editorb",
        "editorbtype",
        "editorc",
        "editorctype",
        "editortype",
        "eid",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "foreword",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "introduction",
        "isan",
        "isbn",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "mainsubtitle",
        "maintitle",
        "maintitleaddon",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "number",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlanguage",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pages",
        "pagination",
        "part",
        "presort",
        "publisher",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "series",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "translator",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "volume",
        "volumes",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      suppcollection: [
        "abstract",
        "addendum",
        "afterword",
        "annotation",
        "annotator",
        "author",
        "authortype",
        "bookpagination",
        "booksubtitle",
        "booktitle",
        "booktitleaddon",
        "chapter",
        "commentator",
        "crossref",
        "day",
        "doi",
        "edition",
        "editor",
        "editora",
        "editoratype",
        "editorb",
        "editorbtype",
        "editorc",
        "editorctype",
        "editortype",
        "eid",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "foreword",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "introduction",
        "isan",
        "isbn",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "mainsubtitle",
        "maintitle",
        "maintitleaddon",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "number",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlanguage",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pages",
        "pagination",
        "part",
        "presort",
        "publisher",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "series",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "translator",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "volume",
        "volumes",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      suppperiodical: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      thesis: [
        "abstract",
        "addendum",
        "annotation",
        "author",
        "authortype",
        "bookpagination",
        "chapter",
        "crossref",
        "day",
        "doi",
        "eid",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "institution",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pages",
        "pagetotal",
        "pagination",
        "presort",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "type",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      unpublished: [
        "abstract",
        "addendum",
        "annotation",
        "author",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "eventday",
        "eventendday",
        "eventendhour",
        "eventendminute",
        "eventendmonth",
        "eventendsecond",
        "eventendtimezone",
        "eventendyear",
        "eventendyeardivision",
        "eventhour",
        "eventminute",
        "eventmonth",
        "eventsecond",
        "eventtimezone",
        "eventtitle",
        "eventtitleaddon",
        "eventyear",
        "eventyeardivision",
        "execute",
        "file",
        "gender",
        "hour",
        "howpublished",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "language",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "location",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "note",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "pubstate",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "subtitle",
        "timezone",
        "title",
        "titleaddon",
        "type",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "venue",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      video: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ],
      xdata: [
        "abstract",
        "annotation",
        "authortype",
        "bookpagination",
        "crossref",
        "day",
        "doi",
        "endday",
        "endhour",
        "endminute",
        "endmonth",
        "endsecond",
        "endtimezone",
        "endyear",
        "endyeardivision",
        "entryset",
        "entrysubtype",
        "eprint",
        "eprintclass",
        "eprinttype",
        "execute",
        "file",
        "gender",
        "hour",
        "ids",
        "indexsorttitle",
        "indextitle",
        "isan",
        "ismn",
        "iswc",
        "keywords",
        "label",
        "langid",
        "langidopts",
        "library",
        "lista",
        "listb",
        "listc",
        "listd",
        "liste",
        "listf",
        "minute",
        "month",
        "namea",
        "nameaddon",
        "nameatype",
        "nameb",
        "namebtype",
        "namec",
        "namectype",
        "options",
        "origday",
        "origendday",
        "origendhour",
        "origendminute",
        "origendmonth",
        "origendsecond",
        "origendtimezone",
        "origendyear",
        "origendyeardivision",
        "orighour",
        "origlocation",
        "origminute",
        "origmonth",
        "origpublisher",
        "origsecond",
        "origtimezone",
        "origtitle",
        "origyear",
        "origyeardivision",
        "pagination",
        "presort",
        "related",
        "relatedoptions",
        "relatedstring",
        "relatedtype",
        "second",
        "shortauthor",
        "shorteditor",
        "shorthand",
        "shorthandintro",
        "shortjournal",
        "shortseries",
        "shorttitle",
        "sortkey",
        "sortname",
        "sortshorthand",
        "sorttitle",
        "sortyear",
        "timezone",
        "url",
        "urlday",
        "urlendday",
        "urlendhour",
        "urlendminute",
        "urlendmonth",
        "urlendsecond",
        "urlendtimezone",
        "urlendyear",
        "urlhour",
        "urlminute",
        "urlmonth",
        "urlsecond",
        "urltimezone",
        "urlyear",
        "usera",
        "userb",
        "userc",
        "userd",
        "usere",
        "userf",
        "verba",
        "verbb",
        "verbc",
        "xdata",
        "xref",
        "year",
        "yeardivision"
      ]
    };
  }
});

// node_modules/@retorquere/bibtex-parser/index.js
var require_bibtex_parser = __commonJS({
  "node_modules/@retorquere/bibtex-parser/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.English = exports2.FieldMode = exports2.tokenize = exports2.toSentenceCase = void 0;
    exports2.parse = parse;
    exports2.parseAsync = parseAsync;
    var unified_latex_util_replace_1 = require_unified_latex_util_replace();
    var unified_latex_util_pegjs_1 = require_unified_latex_util_pegjs();
    var unified_latex_util_visit_1 = require_unified_latex_util_visit();
    var unified_latex_util_print_raw_1 = require_unified_latex_util_print_raw();
    var unicode2latex_1 = require_unicode2latex();
    var bibtex = __importStar(require_verbatim());
    var JabRef = __importStar(require_jabref());
    var sentence_case_1 = require_sentence_case();
    var sentence_case_2 = require_sentence_case();
    Object.defineProperty(exports2, "toSentenceCase", { enumerable: true, get: function() {
      return sentence_case_2.toSentenceCase;
    } });
    var tokenizer_1 = require_tokenizer();
    var tokenizer_2 = require_tokenizer();
    Object.defineProperty(exports2, "tokenize", { enumerable: true, get: function() {
      return tokenizer_2.tokenize;
    } });
    var yield_1 = require_yield();
    var crossref_json_1 = __importDefault(require_crossref());
    var fields_json_1 = __importDefault(require_fields());
    var merge_1 = require_merge();
    function latexMode(node) {
      return node._renderInfo.mode;
    }
    function latex2unicode(tex, node) {
      const text = unicode2latex_1.latex2unicode[tex];
      if (typeof text === "string")
        return text;
      return text && text[latexMode(node)];
    }
    var open = {};
    var close = {};
    for (const tag of ["i", "b", "sc", "nc", "ncx", "br", "p", "li", "code"]) {
      open[tag] = `${tag}`;
      close[tag] = `/${tag}`;
    }
    var collapsable = /\x0E\/([a-z]+)\x0F(\s*)\x0E\1\x0F/ig;
    var Month = {
      jan: "1",
      january: "1",
      feb: "2",
      february: "2",
      mar: "3",
      march: "3",
      apr: "4",
      april: "4",
      may: "5",
      jun: "6",
      june: "6",
      jul: "7",
      july: "7",
      aug: "8",
      august: "8",
      sep: "9",
      september: "9",
      oct: "10",
      october: "10",
      nov: "11",
      november: "11",
      dec: "12",
      december: "12"
    };
    exports2.FieldMode = {
      creatorlist: [
        "author",
        "bookauthor",
        "collaborator",
        "commentator",
        "director",
        "editor",
        "editora",
        "editorb",
        "editors",
        "holder",
        "scriptwriter",
        "translator"
      ],
      title: [
        "title",
        "subtitle",
        "series",
        "shorttitle",
        "booktitle",
        // 'type',
        "origtitle",
        "maintitle",
        "eventtitle"
      ],
      verbatim: [
        "doi",
        "eprint",
        "file",
        "files",
        "pdf",
        "groups",
        // jabref unilaterally decided to make this non-standard field verbatim
        "ids",
        "url",
        "verba",
        "verbb",
        "verbc",
        /^keywords([+]duplicate-\d+)?$/,
        /^citeulike-linkout-[0-9]+$/,
        /^bdsk-url-[0-9]+$/
      ],
      richtext: [
        "annotation",
        "comment",
        "annote",
        "review",
        "notes",
        "note"
      ],
      literallist: [
        "institution",
        "publisher",
        "origpublisher",
        "organization",
        "location",
        "origlocation"
      ]
    };
    exports2.English = [
      "",
      "american",
      "british",
      "canadian",
      "english",
      "australian",
      "newzealand",
      "usenglish",
      "ukenglish",
      "en",
      "eng",
      "en-au",
      "en-bz",
      "en-ca",
      "en-cb",
      "en-gb",
      "en-ie",
      "en-jm",
      "en-nz",
      "en-ph",
      "en-tt",
      "en-us",
      "en-za",
      "en-zw",
      "anglais"
      // don't do this people
    ];
    var FieldAction = {
      removeOuterBraces: [
        "doi"
        // 'publisher',
        // 'location',
      ],
      parseInt: [
        "year",
        "month"
      ],
      noCrossRef: [
        "file"
      ]
    };
    var narguments = {
      advance: 1,
      ElsevierGlyph: 1,
      bar: 1,
      bibcyr: 1,
      bibstring: 1,
      chsf: 1,
      cite: 1,
      citeauthor: 1,
      cyrchar: 1,
      ding: 1,
      emph: 1,
      enquote: 1,
      frac: 2,
      hbox: 1,
      href: 2,
      hskip: 1,
      hspace: 1,
      ht: 1,
      mathrm: 1,
      mbox: 1,
      mkbibbold: 1,
      mkbibemph: 1,
      mkbibitalic: 1,
      mkbibquote: 1,
      newcommand: 2,
      noopsort: 1,
      ocirc: 1,
      overline: 1,
      ProvideTextCommandDefault: 2,
      rlap: 1,
      sb: 1,
      section: 1,
      sp: 1,
      subsection: 1,
      subsubsection: 1,
      subsubsubsection: 1,
      t: 1,
      textbf: 1,
      textcite: 1,
      textit: 1,
      textrm: 1,
      textsc: 1,
      textsl: 1,
      textsubscript: 1,
      textsuperscript: 1,
      texttt: 1,
      textup: 1,
      url: 1,
      vphantom: 1,
      vspace: 1,
      wd: 1,
      // math
      "math	_": 1,
      "math	^": 1
    };
    for (const m in unicode2latex_1.combining.tounicode) {
      narguments[m] = 1;
    }
    var BibTeXParser = class {
      constructor() {
        this.newcommands = {};
        this.unhandled = /* @__PURE__ */ new Set();
      }
      split(ast, sep, split) {
        const roots = [];
        const nodes = [...ast.content];
        const types = nodes.map((node) => {
          if (node.type === "whitespace")
            return " ";
          if (node.type === "string" && node.content.match(sep))
            return "&";
          return ".";
        }).join("");
        types.split(split).forEach((match, i) => {
          const content = match.length ? nodes.splice(0, match.length) : [];
          if (i % 2 === 0)
            roots.push({ type: "root", content });
        });
        return roots;
      }
      trimCreator(cr) {
        return JSON.parse(JSON.stringify(cr, (k, v) => typeof v === "string" ? v.trim() || void 0 : v));
      }
      parseCreator(ast) {
        if (ast.content.length === 1 && ast.content[0].type === "group")
          return this.trimCreator({ name: this.stringify(ast, { mode: "creatorlist" }) });
        const { parts, extended } = this.commaSeparatedCreator(ast);
        if (extended) {
          const name = {};
          for (const [attr, value] of Object.entries(extended)) {
            const rendered = this.stringify(value, { mode: "creatorlist" }).trim();
            switch (attr) {
              case "":
                break;
              case "given":
                name.firstName = rendered;
                break;
              case "family":
                name.lastName = rendered;
                break;
              case "given-i":
                name.initial = rendered;
                break;
              case "useprefix":
              case "juniorcomma":
                name[attr] = rendered.toLowerCase() === "true";
                break;
              default:
                name[attr] = rendered;
                break;
            }
          }
          return this.trimCreator(name);
        } else if (parts.length) {
          const nameparts = parts.map((part) => this.stringify(part, { mode: "creatorlist" }).trim());
          if (nameparts.length === 3 && nameparts[2] === "")
            nameparts.pop();
          if (nameparts.length > 3) {
            const key = this.current.key ? `@${this.current.key}: ` : "";
            this.bib.errors.push({
              error: `${key}unexpected ${nameparts.length}-part name "${nameparts.join(", ")}", dropping "${nameparts.slice(3).join(", ")}"`,
              input: nameparts.join(", ")
            });
          }
          let [lastName, suffix, firstName] = nameparts.length === 2 ? [nameparts[0], void 0, nameparts[1]] : nameparts.slice(0, 3);
          let prefix;
          const m = lastName.match(/^([a-z'. ]+) (.+)/);
          if (m) {
            prefix = m[1];
            lastName = m[2];
          }
          return this.trimCreator({
            lastName,
            firstName,
            prefix,
            suffix
          });
        } else {
          const nameparts = this.split(ast, /^$/, /( )/).map((part) => this.stringify(part, { mode: "creatorlist" })).filter((n) => n);
          if (nameparts.length === 1)
            return this.trimCreator({ lastName: nameparts[0] });
          const prefix = nameparts.findIndex((n) => n.match(/^[a-z]/));
          const postfix = prefix <= 0 ? -1 : nameparts.findIndex((n, i) => i > prefix && !n.match(/^[a-z]/));
          if (postfix === -1) {
            const lastName = nameparts.pop();
            return this.trimCreator({ lastName, firstName: nameparts.join(" ") });
          }
          return this.trimCreator({
            firstName: nameparts.slice(0, prefix).join(" "),
            prefix: nameparts.slice(prefix, postfix).join(" "),
            lastName: nameparts.slice(postfix).join(" ")
          });
        }
      }
      ligature(nodes) {
        if (latexMode(nodes[0]) !== "text")
          return null;
        const max = 3;
        const slice = nodes.slice(0, max);
        const type = slice.map((n) => n.type === "string" ? "s" : " ").join("");
        if (type[0] !== "s")
          return null;
        const content = slice.map((n) => n.type === "string" ? n.content : "");
        let latex;
        while (content.length) {
          if (type.startsWith("s".repeat(content.length)) && (latex = latex2unicode(content.join(""), slice[0]))) {
            try {
              return { type: "string", content: latex, _renderInfo: {} };
            } finally {
              nodes.splice(0, content.length);
            }
          }
          content.pop();
        }
        return null;
      }
      wraparg(node, macro) {
        if (macro.content.match(/^(itshape|textsl|textit|emph|mkbibemph)$/))
          node._renderInfo.emph = true;
        if (macro.content.match(/^(textbf|mkbibbold|bfseries)$/))
          node._renderInfo.bold = true;
        if (macro.content.match(/^(textsc)$/))
          node._renderInfo.smallCaps = true;
        if (macro.content.match(/^(texttt)$/))
          node._renderInfo.code = true;
        return { type: "argument", content: [node], openMark: "", closeMark: "", _renderInfo: { mode: node._renderInfo.mode } };
      }
      argtogroup(node) {
        if (node.content.length === 1 && node.content[0].type === "group")
          return node.content[0];
        return { type: "group", content: node.content };
      }
      argument(nodes, macro) {
        if (!nodes.length)
          return null;
        if (nodes[0].type === "whitespace")
          nodes.shift();
        if (!nodes.length)
          return null;
        if (nodes[0].type === "string") {
          const char = nodes[0].content[0];
          nodes[0].content = nodes[0].content.substr(1);
          const arg = Object.assign(Object.assign({}, nodes[0]), { content: char });
          if (!nodes[0].content)
            nodes.shift();
          return this.wraparg(arg, macro);
        }
        return this.wraparg(nodes.shift(), macro);
      }
      unsupported(node) {
        var _a;
        const tex = (0, unified_latex_util_print_raw_1.printRaw)(node);
        if (this.fallback)
          return (_a = this.fallback(node, tex, this.current)) !== null && _a !== void 0 ? _a : "";
        let id;
        switch (node.type) {
          case "macro":
            id = `${node.type}.${node.content}`;
            if (!this.unhandled.has(id)) {
              this.unhandled.add(id);
              this.bib.errors.push({ error: `unhandled ${node.type} ${(0, unified_latex_util_print_raw_1.printRaw)(node)}`, input: (0, unified_latex_util_print_raw_1.printRaw)(node) });
            }
            break;
          case "environment":
            id = `${node.type}.${node.env}`;
            if (!this.unhandled.has(id)) {
              this.unhandled.add(id);
              this.bib.errors.push({ error: `unhandled ${node.type} ${node.env} (${(0, unified_latex_util_print_raw_1.printRaw)(node)})`, input: (0, unified_latex_util_print_raw_1.printRaw)(node) });
            }
            break;
          default:
            this.bib.errors.push({ error: `unhandled ${node.type} (${(0, unified_latex_util_print_raw_1.printRaw)(node)})`, input: (0, unified_latex_util_print_raw_1.printRaw)(node) });
            break;
        }
        return tex;
      }
      wrap(text, tag, wrap = true) {
        if (!text || !wrap)
          return text || "";
        return `${tag}${text}/${tag}`;
      }
      registercommand(node) {
        const types = (nodes) => nodes.map((n) => n.type).join(".");
        const group = (arg, kind) => {
          if (!arg)
            throw new Error(`missing ${kind} for ${(0, unified_latex_util_print_raw_1.printRaw)(node)} @ ${JSON.stringify(node.position)}`);
          if (types(arg.content) !== "group")
            throw new Error(`Malformed ${kind} for ${(0, unified_latex_util_print_raw_1.printRaw)(node)} @ ${JSON.stringify(node.position)}`);
          return arg.content[0].content;
        };
        if (!node.args)
          throw new Error(`No arguments for ${(0, unified_latex_util_print_raw_1.printRaw)(node)} @ ${JSON.stringify(node.position)}`);
        const namearg = group(node.args[0], "name");
        if (types(namearg) !== "macro")
          throw new Error(`Unexpected name for ${(0, unified_latex_util_print_raw_1.printRaw)(node)} @ ${JSON.stringify(node.position)}`);
        this.newcommands[namearg[0].content] = node.args[1];
        return "";
      }
      subp(text, macro) {
        let subp = "";
        for (let char of text) {
          char = unicode2latex_1.latex2unicode[`${macro}{${char}}`];
          if (char) {
            subp += char;
          } else {
            const tag = { _: "sub", "^": "sup" }[macro];
            return `${tag}${text}/${tag}`;
          }
        }
        return subp;
      }
      macro(node, context) {
        var _a, _b, _c, _d, _e, _f, _g;
        const text = latex2unicode((0, unified_latex_util_print_raw_1.printRaw)(node), node);
        if (text)
          return text;
        let url;
        let label;
        let arg;
        let resolved;
        switch (node.content) {
          case "newcommand":
          case "ProvideTextCommandDefault":
            return this.registercommand(node);
          // too complex to deal with these
          case "raise":
          case "accent":
          case "def":
          case "hss":
          case "ifmmode":
          case "makeatletter":
          case "makeatother":
          case "scriptscriptstyle":
          case "setbox":
          case "dimen":
          case "advance":
            return "";
          case "vphantom":
          case "noopsort":
          case "left":
          case "right":
          case "ensuremath":
          case "wd":
          case "ht":
            return "";
          case "path":
            return "";
          // until https://github.com/siefkenj/unified-latex/issues/94 is fixed
          case "hspace":
          case "hskip":
            if (node.args && node.args.length) {
              if ((0, unified_latex_util_print_raw_1.printRaw)(node.args).match(/^[{]?0[a-z]*$/))
                return "";
              return " ";
            }
            return "";
          case "overline":
          case "bar":
            return node.args.map((a) => this.stringify(a, context)).join("").replace(/[a-z0-9]/ig, (m) => `${m}\u0305`);
          // accents dealt with by preprocessor
          case "textup":
          case "textsc":
          case "textrm":
          case "texttt":
          case "mathrm":
          case "mbox":
          case "hbox":
          case "rlap":
            return node.args.map((n) => this.stringify(n, context)).join("");
          case "href":
          case "url":
            if (node.args) {
              url = node.args[0];
              label = node.args[node.content === "url" ? 0 : 1];
            }
            return `<a href="${this.stringify(url, context)}">${this.stringify(label, context)}</a>`;
          case "relax":
          case "aftergroup":
          case "ignorespaces":
          case "em":
          case "it":
          case "tt":
          case "sl":
            return "";
          case "rm":
          case "sc":
            return "";
          // bold/emph/smallcaps is handled in the wrapper
          case "textbf":
          case "mkbibbold":
          case "textit":
          case "emph":
          case "mkbibemph":
            return this.stringify((_a = node.args) === null || _a === void 0 ? void 0 : _a[0], context);
          case "textsuperscript":
            return this.subp(this.stringify((_b = node.args) === null || _b === void 0 ? void 0 : _b[0], context), "^");
          case "textsubscript":
            return this.subp(this.stringify((_c = node.args) === null || _c === void 0 ? void 0 : _c[0], context), "_");
          case "_":
          case "^":
            switch (latexMode(node)) {
              case "math":
                return this.subp(this.stringify((_d = node.args) === null || _d === void 0 ? void 0 : _d[0], context), node.content);
              default:
                return node.content;
            }
          case "LaTeX":
            return this.wrap(`L${this.subp("A", "^")}T${this.subp("E", "_")}X`, "ncx");
          case "enquote":
          case "mkbibquote":
            return this.wrap(this.stringify((_e = node.args) === null || _e === void 0 ? void 0 : _e[0], context), "enquote");
          case "\\":
            return context.mode === "richtext" ? open.br : " ";
          case "par":
            return context.mode === "richtext" ? open.p : " ";
          case "item":
            return context.mode === "richtext" ? open.li : " ";
          case "section":
          case "subsection":
          case "subsubsection":
          case "subsubsubsection":
            return this.wrap(this.stringify((_f = node.args) === null || _f === void 0 ? void 0 : _f[0], context), `h${node.content.split("sub").length}`);
          case "frac":
            arg = node.args.map((a) => this.stringify(a, context));
            if (arg.length === 2 && (resolved = unicode2latex_1.latex2unicode[`\\frac${arg.map((a) => `{${a}}`).join("")}`]))
              return resolved;
            return arg.map((part, i) => this.subp(part, i ? "_" : "^")).join("\u2044");
          case "chsf":
          case "bibstring":
          case "cite":
          case "textcite":
          case "citeauthor":
            return this.wrap(this.stringify((_g = node.args) === null || _g === void 0 ? void 0 : _g[0], context), "ncx", context.mode === "title");
          default:
            if (this.newcommands[node.content])
              return this.stringify(this.newcommands[node.content], context);
            return this.unsupported(node);
        }
      }
      what(node) {
        var _a;
        if (!node)
          return "";
        switch (node.type) {
          case "macro":
            return `macro:${(_a = node._renderInfo.mode) !== null && _a !== void 0 ? _a : "text"}:${node.content}`;
          case "environment":
            return `env:${node.env}`;
          default:
            return node.type;
        }
      }
      environment(node, context) {
        while (node.content.length && this.what(node.content[0]).match(/^parbreak|whitespace|macro:text:par$/))
          node.content.shift();
        while (node.content.length && this.what(node.content[node.content.length - 1]).match(/^parbreak|whitespace|macro:text:par$/))
          node.content.pop();
        switch (node.env) {
          case "quotation":
            return this.wrap(node.content.map((n) => this.stringify(n, context)).join(""), "blockquote", context.mode === "richtext");
          case "itemize":
            return this.wrap(node.content.map((n) => this.stringify(n, context)).join(""), "ul", context.mode === "richtext");
          case "em":
            return this.wrap(node.content.map((n) => this.stringify(n, context)).join(""), "i", context.mode === "richtext");
          default:
            return this.unsupported(node);
        }
      }
      stringify(node, context) {
        let content = this.stringifyContent(node, context);
        if (content && node._renderInfo) {
          if (node._renderInfo.emph)
            content = `${open.i}${content}${close.i}`;
          if (node._renderInfo.bold)
            content = `${open.b}${content}${close.b}`;
          if (node._renderInfo.smallCaps)
            content = `${open.sc}${content}${close.sc}`;
          if (node._renderInfo.code)
            content = `${open.code}${content}${close.code}`;
          if (this.english && node._renderInfo.protectCase)
            content = `${open.nc}${content}${close.nc}`;
        }
        return content;
      }
      stringifyContent(node, context) {
        if (!node)
          return "";
        switch (node.type) {
          case "root":
          case "argument":
          case "group":
          case "inlinemath":
            return node.content.map((n) => this.stringify(n, context)).join("");
          case "string":
          case "verbatim":
            return node.content;
          case "macro":
            return this.macro(node, context);
          case "parbreak":
            return context.mode === "richtext" ? open.p : " ";
          case "whitespace":
            return node._renderInfo.mode === "math" ? "" : " ";
          case "comment":
            return "";
          case "environment":
            return this.environment(node, context);
          case "verb":
            return node.content;
          default:
            return this.unsupported(node);
        }
      }
      protect(node) {
        if (node.type === "inlinemath")
          return true;
        if (node.type !== "group")
          return false;
        if (!node.content.length)
          return false;
        return node.content[0].type !== "macro";
      }
      mode(field) {
        if (this.options.verbatimFields && this.options.verbatimFields.find((name) => typeof name === "string" ? name === field : field.match(name)))
          return "verbatim";
        let mode = "literal";
        for (const [selected, fields] of Object.entries(this.fieldMode)) {
          if (fields.find((match) => typeof match === "string" ? field === match : field.match(match)))
            mode = selected;
        }
        return mode;
      }
      restoreMarkup(s) {
        if (!s.includes(""))
          return s;
        const restored = [s.replace(/\x0E\/?ncx\x0F/ig, "")];
        while (restored[0] !== restored[1]) {
          restored.unshift(restored[0].replace(collapsable, "$2"));
        }
        return restored[0].replace(/(\x0Ep\x0F\s*){2,}/ig, "p").replace(/\s*(\x0E\/p\x0F){2,}/ig, "/p").replace(/\x0Eenquote\x0F/ig, "\u201C").replace(/\x0E\/enquote\x0F/ig, "\u201D").replace(/\x0Esc\x0F/ig, '<span style="font-variant:small-caps;">').replace(/\x0E\/sc\x0F/ig, "</span>").replace(/\x0Enc\x0F/ig, '<span class="nocase">').replace(/\x0E\/nc\x0F/ig, "</span>").replace(/\x0E/ig, "<").replace(/\x0F/ig, ">");
      }
      stringField(field, value, mode, guessSC) {
        if (field === "crossref")
          return value;
        if (FieldAction.parseInt.includes(field) && value.trim().match(/^-?\d+$/))
          return `${parseInt(value)}`;
        if (this.english && mode === "title") {
          value = (0, sentence_case_1.toSentenceCase)(value, {
            preserveQuoted: this.options.sentenceCase && this.options.sentenceCase.preserveQuoted,
            subSentenceCapitalization: this.options.sentenceCase && this.options.sentenceCase.subSentence,
            markup: /\x0E\/?([a-z]+)\x0F/ig,
            nocase: /\x0E(ncx?)\x0F.*?\x0E\/\1\x0F/ig,
            guess: guessSC
          });
          let cancel = (_match, stripped) => stripped;
          switch (this.options.caseProtection) {
            case "strict":
              cancel = (match, _stripped) => match;
              break;
            case "as-needed":
              cancel = (match, stripped) => {
                const words = (0, tokenizer_1.tokenize)(stripped, /\x0E\/?([a-z]+)\x0F/ig);
                return words.find((w) => w.shape.match(/^(?!.*X).*x.*$/)) ? match : this.wrap(stripped, "ncx");
              };
              break;
          }
          return value.replace(/\x0Enc\x0F(.*?)\x0E\/nc\x0F/ig, cancel);
        }
        return value;
      }
      commaSeparatedCreator(ast) {
        var _a;
        const result = {
          parts: []
        };
        if (!ast.content.find((node) => node.type === "string" && node.content === ","))
          return result;
        result.parts = this.split(ast, /^,$/, /(&)/);
        result.extended = {};
        for (const part of result.parts) {
          const start = ((_a = part.content[0]) === null || _a === void 0 ? void 0 : _a.type) === "whitespace" ? 1 : 0;
          let signature = part.content.slice(start, start + 4).map((node, i) => node._renderInfo.mode === "text" && node.type === "string" ? node.content.replace(i % 2 ? /[^=-]/g : /[^a-z]/gi, ".") : ".").join("");
          if (signature.match(/^[a-z]+(-[a-z]+)?=/i)) {
            signature = signature.replace(/=.*/, "").toLowerCase();
            result.extended[signature] = { type: "root", content: part.content.slice(signature.includes("-") ? start + 4 : start + 2) };
          } else {
            delete result.extended;
            break;
          }
        }
        return result;
      }
      field(entry, field, value) {
        const mode = entry.mode[field] = this.mode(field);
        const caseProtection = {
          present: false,
          intuitive: 0
          // a lot of people don't realise `some text \textit{in italics}` will protect 'in italics'
        };
        const ast = unified_latex_util_pegjs_1.LatexPegParser.parse(value);
        if (this.options.removeOuterBraces.includes(field) && ast.content.length === 1 && ast.content[0].type === "group") {
          ast.content = ast.content[0].content;
        }
        if (mode === "verbatim") {
          entry.fields[field] = (0, unified_latex_util_print_raw_1.printRaw)(ast);
          return;
        }
        if (this.english && mode === "title") {
          let root = [...ast.content];
          while (root.length) {
            const node = root.shift();
            if (this.protect(node))
              node._renderInfo = { root: true };
            if (node.type === "environment")
              root = [...root, ...node.content];
          }
        }
        (0, unified_latex_util_visit_1.visit)(ast, (node, info) => {
          if (!node._renderInfo)
            node._renderInfo = {};
          node._renderInfo.mode = info.context.inMathMode ? "math" : "text";
          if (mode === "title" && node.type === "inlinemath" && !info.parents.find((p) => p._renderInfo.protectCase))
            node._renderInfo.protectCase = true;
          if (!info.context.inMathMode) {
            if (mode === "title" && node._renderInfo.root && (node.type !== "group" || node.content[0].type !== "macro")) {
              node._renderInfo.protectCase = true;
              if (node.type === "group") {
                caseProtection.present = true;
                caseProtection.intuitive += 1;
              }
            }
            if (node.type === "macro" && typeof node.escapeToken !== "string")
              node.escapeToken = "\\";
            if (node.type === "environment" && node.env === "em")
              node._renderInfo.emph = true;
          }
        });
        if (this.options.raw) {
          switch (mode) {
            case "creatorlist":
              entry.fields[field] = this.split(ast, /^and$/i, /(^& | & | &$)/).map((cr) => {
                const { parts, extended } = this.commaSeparatedCreator(cr);
                if (parts.length === 2 && !extended) {
                  return this.trimCreator({ lastName: (0, unified_latex_util_print_raw_1.printRaw)(parts[0]), firstName: (0, unified_latex_util_print_raw_1.printRaw)(parts[1]) });
                }
                if (!parts.length) {
                  const nameparts = this.split(ast, /^$/, /( )/);
                  if (nameparts.length === 2) {
                    return this.trimCreator({
                      lastName: (0, unified_latex_util_print_raw_1.printRaw)(nameparts[1]),
                      firstName: (0, unified_latex_util_print_raw_1.printRaw)(nameparts[0])
                    });
                  }
                }
                return { name: (0, unified_latex_util_print_raw_1.printRaw)(cr) };
              });
              return;
            case "literallist":
              entry.fields[field] = this.split(ast, /^and$/i, /(^& | & | &$)/).map((elt) => (0, unified_latex_util_print_raw_1.printRaw)(elt));
              return;
            default:
              entry.fields[field] = (0, unified_latex_util_print_raw_1.printRaw)(ast);
              return;
          }
        }
        (0, unified_latex_util_visit_1.visit)(ast, (nodes, info) => {
          var _a;
          let node;
          const compacted = [];
          let inif = 0;
          while (nodes.length) {
            if (node = this.ligature(nodes)) {
              compacted.push(node);
              continue;
            }
            node = nodes.shift();
            if (node.type === "macro" && node.content === "ifdefined") {
              inif += 1;
              continue;
            } else if (node.type === "macro" && node.content === "else") {
              continue;
            } else if (node.type === "macro" && node.content === "fi") {
              inif = Math.max(inif - 1, 0);
              continue;
            } else if (inif) {
              continue;
            }
            const nargs = node.type === "macro" ? narguments[node.content] || narguments[`${info.context.inMathMode ? "math" : "text"}	${node.content}`] : 0;
            if (node.type === "macro" && nargs) {
              node.args = Array(nargs).fill(void 0).map((_i) => this.argument(nodes, node)).filter((arg) => arg);
              if (node.content.match(/^(url|href)$/) && node.args.length) {
                let url = node.args[0].content;
                if (url.length === 1 && url[0].type === "group")
                  url = url[0].content;
                node.args[0] = this.wraparg({ type: "string", content: (0, unified_latex_util_print_raw_1.printRaw)(url), _renderInfo: { mode: url[0]._renderInfo.mode } }, node);
              }
              caseProtection.intuitive -= node.args.filter((arg) => arg.content[0].type === "group" && arg.content[0]._renderInfo.protectCase).length;
            } else if (node.type === "macro" && node.content.match(/^[a-z]+$/i) && ((_a = nodes[0]) === null || _a === void 0 ? void 0 : _a.type) === "whitespace") {
              nodes.shift();
            }
            compacted.push(node);
          }
          if (!info.context.inMathMode) {
            for (const [macro, markup] of Object.entries({ em: "emph", it: "emph", sl: "emph", bf: "bold", sc: "smallCaps", tt: "code" })) {
              if (info.parents.find((p) => p._renderInfo[markup]))
                continue;
              compacted.forEach((markup_node, i) => {
                if (markup_node.type === "macro" && markup_node.content === macro) {
                  compacted.slice(i + 1).forEach((n) => n._renderInfo[markup] = true);
                }
              });
            }
          }
          nodes.push(...compacted);
        }, { test: Array.isArray, includeArrays: true });
        (0, unified_latex_util_replace_1.replaceNode)(ast, (node, _info) => {
          if (node.type !== "macro")
            return;
          if (node.escapeToken && unicode2latex_1.combining.tounicode[node.content]) {
            let arg;
            if (!node.args || node.args.length === 0 || node.args[0].content.length === 0) {
              arg = { type: "string", content: " ", _renderInfo: {} };
            } else if (node.args.length !== 1 || node.args[0].content.length !== 1) {
              return;
            } else {
              arg = node.args[0].content[0];
            }
            if (arg.type === "group") {
              switch (arg.content.length) {
                case 0:
                  arg = { type: "string", content: " ", _renderInfo: {} };
                  break;
                case 1:
                  arg = arg.content[0];
                  break;
                default:
                  return;
              }
            }
            switch (arg.type) {
              case "verbatim":
              case "string":
                return { type: "string", content: `${arg.content}${unicode2latex_1.combining.tounicode[node.content]}`, _renderInfo: {} };
              default:
                return;
            }
          }
          let latex = `${node.escapeToken}${node.content}`;
          latex += (node.args || []).map((arg) => (0, unified_latex_util_print_raw_1.printRaw)(this.argtogroup(arg))).join("");
          if (latex in unicode2latex_1.latex2unicode)
            return { type: "string", content: latex2unicode(latex, node), _renderInfo: {} };
        });
        switch (mode) {
          case "creatorlist":
            entry.fields[field] = this.split(ast, /^and$/i, /(^& | & | &$)/).map((cr) => this.parseCreator(cr)).filter((cr) => Object.keys(cr).length);
            break;
          case "literallist":
            entry.fields[field] = this.split(ast, /^and$/i, /(^& | & | &$)/).map((elt) => this.stringify(elt, { mode: "literal" }).trim());
            break;
          default:
            entry.fields[field] = this.stringField(
              field,
              this.stringify(ast, { mode }),
              mode,
              this.options.sentenceCase && this.options.sentenceCase.guess
              // && (!caseProtection.present || caseProtection.intuitive > 0)
            );
            break;
        }
        entry.fields[field] = JSON.parse(JSON.stringify(entry.fields[field], (k, v) => typeof v === "string" ? this.restoreMarkup(v) : v));
      }
      reset(options = {}) {
        var _a;
        if (options.sentenceCase === false) {
          options = Object.assign(Object.assign({}, options), { english: false, sentenceCase: {
            guess: false,
            subSentence: false,
            preserveQuoted: false
          } });
        }
        this.options = (0, merge_1.merge)(options, {
          caseProtection: "as-needed",
          applyCrossRef: (_a = options.applyCrossRef) !== null && _a !== void 0 ? _a : true,
          fieldMode: {},
          english: exports2.English,
          sentenceCase: {
            guess: true,
            preserveQuoted: true
          }
        });
        if (this.options.caseProtection === true)
          this.options.caseProtection = "as-needed";
        if (this.options.verbatimFields)
          this.options.verbatimFields = this.options.verbatimFields.map((f) => typeof f === "string" ? f.toLowerCase() : new RegExp(f.source, f.flags + (f.flags.includes("i") ? "" : "i")));
        if (typeof this.options.english === "boolean")
          this.options.english = this.options.english ? exports2.English : [];
        this.options.english = this.options.english.map((langid) => langid.toLowerCase());
        this.fieldMode = Object.entries(exports2.FieldMode).reduce((acc, [mode, test]) => {
          const strings = test.filter((fieldname_or_regex) => typeof fieldname_or_regex === "string" && !this.options.fieldMode[fieldname_or_regex]);
          const regexes = test.filter((fieldname_or_regex) => typeof fieldname_or_regex !== "string");
          acc[mode] = [...strings, ...regexes];
          return acc;
        }, {});
        for (const [field, mode] of Object.entries(this.options.fieldMode)) {
          this.fieldMode[mode].unshift(field);
        }
        if (!this.options.removeOuterBraces) {
          this.options.removeOuterBraces = [
            ...FieldAction.removeOuterBraces,
            ...this.fieldMode.title,
            ...this.fieldMode.verbatim
          ].filter((field) => typeof field === "string");
        }
        this.fallback = options.unsupported === "ignore" ? (_node, _tex) => "" : options.unsupported;
        this.bib = {
          errors: [],
          entries: [],
          comments: [],
          strings: {},
          preamble: [],
          jabref: null
        };
      }
      reparse(verbatim) {
        let langid = (verbatim.fields.langid || verbatim.fields.hyphenation || "").toLowerCase();
        if (!langid && this.options.languageAsLangid && verbatim.fields.language)
          langid = verbatim.fields.language.toLowerCase();
        this.english = this.options.english.includes(langid);
        const entry = this.current = {
          type: verbatim.type,
          key: verbatim.key,
          fields: {},
          mode: {},
          input: verbatim.input
        };
        let keywords = [];
        try {
          for (let [field, value] of Object.entries(verbatim.fields)) {
            if (!value.trim())
              continue;
            if (field.match(/^keywords([+]duplicate-\d+)?$/))
              field = "keywords";
            this.field(entry, field, value);
            if (field === "keywords") {
              keywords = [...keywords, ...entry.fields.keywords.split(/\s*[,;]\s*/)].map((k) => k.trim()).filter((k) => k);
              delete entry.fields.keywords;
            }
            if (!this.options.raw && typeof entry.fields[field] === "string") {
              entry.fields[field] = entry.fields[field].trim();
              if (field === "month")
                entry.fields[field] = Month[entry.fields[field].toLowerCase()] || entry.fields[field];
            }
          }
          if (keywords.length) {
            entry.fields.keywords = [...new Set(keywords)].sort((a, b) => a.toLowerCase().localeCompare(b.toLowerCase()));
            entry.mode.keywords = "verbatimlist";
          }
          this.bib.entries.push(entry);
        } catch (err) {
          this.bib.errors.push({ error: `${err.message}
${entry.input}`, input: entry.input });
        }
      }
      content(tex) {
        const entry = { key: "", type: "", fields: {}, mode: {}, input: tex };
        const english = this.english;
        this.english = false;
        this.field(entry, "tex", tex);
        this.english = english;
        return entry.fields.tex;
      }
      prep(base) {
        for (const preamble of base.preambles) {
          try {
            this.content(preamble);
          } catch (_a) {
          }
        }
        for (const [k, v] of Object.entries(base.strings)) {
          this.bib.strings[k] = this.content(v);
        }
      }
      finalize(base) {
        var _a;
        if (this.options.applyCrossRef) {
          const entries = {};
          for (const entry of this.bib.entries) {
            if (entry.key)
              entries[entry.key.toUpperCase()] = entry;
          }
          const order = [];
          for (const entry of this.bib.entries) {
            if (!entry.key || typeof entry.fields.crossref !== "string")
              continue;
            const crossref = entry.fields.crossref.toUpperCase();
            if (!entries[crossref])
              continue;
            const key = entry.key.toUpperCase();
            if (!order.includes(crossref))
              order.unshift(crossref);
            if (!order.includes(key))
              order.push(key);
          }
          const add = (obj, kind, field) => {
            obj[kind] = [.../* @__PURE__ */ new Set([...obj[kind], field])].sort();
          };
          for (const key of order) {
            const child = entries[key.toUpperCase()];
            const parent = entries[(_a = child.fields.crossref) === null || _a === void 0 ? void 0 : _a.toUpperCase()];
            if (!parent)
              continue;
            child.crossref = child.crossref || { donated: [], inherited: [] };
            parent.crossref = parent.crossref || { donated: [], inherited: [] };
            for (const mappings of [crossref_json_1.default[child.type], crossref_json_1.default["*"]].filter((m) => m)) {
              for (const mapping of [mappings[parent.type], mappings["*"]].filter((m) => m)) {
                for (const [childfield, parentfield] of Object.entries(mapping)) {
                  if (!child.fields[childfield] && parent.fields[parentfield]) {
                    child.fields[childfield] = parent.fields[parentfield];
                    add(child.crossref, "inherited", childfield);
                    add(parent.crossref, "donated", parentfield);
                  }
                }
                for (const field of fields_json_1.default[child.type] || []) {
                  if (FieldAction.noCrossRef.includes(field))
                    continue;
                  if (!child.fields[field] && parent.fields[field]) {
                    child.fields[field] = parent.fields[field];
                    add(child.crossref, "inherited", field);
                    add(parent.crossref, "donated", field);
                  }
                }
              }
            }
          }
          for (const entry of this.bib.entries) {
            if (entry.crossref && !entry.crossref.donated.length && !entry.crossref.inherited.length)
              delete entry.crossref;
          }
        }
        const { comments, jabref } = JabRef.parse(base.comments);
        this.bib.comments = comments;
        this.bib.jabref = jabref;
        this.bib.preamble = base.preambles;
        this.bib.errors = [...base.errors, ...this.bib.errors];
      }
      parse(input, options = {}) {
        this.reset(options);
        const base = bibtex.parse(input, { strings: options.strings });
        this.prep(base);
        for (const entry of base.entries) {
          this.reparse(entry);
        }
        this.finalize(base);
        return this.bib;
      }
      async parseAsync(input, options = {}) {
        this.reset(options);
        const base = await bibtex.promises.parse(input, { strings: options.strings });
        this.prep(base);
        let n = 1;
        for (const entry of base.entries) {
          this.reparse(entry);
          if (n++ % 1e3 === 0)
            await (0, yield_1.playnice)();
        }
        this.finalize(base);
        return this.bib;
      }
    };
    function parse(input, options = {}) {
      const parser = new BibTeXParser();
      return parser.parse(input, options);
    }
    async function parseAsync(input, options = {}) {
      const parser = new BibTeXParser();
      return await parser.parseAsync(input, options);
    }
  }
});

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => BibLaTeXPlugin
});
module.exports = __toCommonJS(main_exports);
var path2 = __toESM(require("path"));
var import_obsidian2 = require("obsidian");

// settings.ts
var path = __toESM(require("path"));
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  templatePath: "/",
  // default is to the root directory
  entryLimit: 5,
  // Default is 5
  filePrefix: "",
  // Default to no prefix
  fileDirectory: "/",
  // Default to the root directory
  templateDirectory: "/",
  // default to obsidian root directory
  templateFileName: ""
  // default is no template filename
};
var BibLaTeXPluginSettingTab = class extends import_obsidian.PluginSettingTab {
  // Ideally, replace 'any' with the specific plugin type (BibLaTeXPlugin)
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  // Display settings in the Obsidian settings panel
  display() {
    const { containerEl } = this;
    containerEl.empty();
    console.log("Loaded settings:", this.plugin.settings);
    containerEl.createEl("h2", { text: "Settings for BibLaTeX Plugin" });
    new import_obsidian.Setting(containerEl).setName("Template Directory").setDesc("Specify the directory containing your templates.").addDropdown((dropdown) => {
      const vaultPath = this.app.vault.adapter.basePath;
      const folders = this.app.vault.getAllLoadedFiles().filter((f) => f.children).map((folder) => folder.path);
      dropdown.addOption("/", "Vault Root");
      folders.forEach((folder) => dropdown.addOption(folder, folder));
      dropdown.setValue(this.plugin.settings.templateDirectory || "/");
      dropdown.onChange(async (value) => {
        this.plugin.settings.templateDirectory = value;
        await this.plugin.saveSettings();
        refreshTemplateFileDropdown();
      });
    });
    console.log("Template Directory setting added.");
    const refreshTemplateFileDropdown = () => {
      const existingTemplateFileSetting = containerEl.querySelector(".template-file-setting");
      if (existingTemplateFileSetting) {
        existingTemplateFileSetting.remove();
      }
      new import_obsidian.Setting(containerEl).setName("Template File").setDesc("Select a specific template file.").setClass("template-file-setting").addDropdown((dropdown) => {
        const vaultPath = this.app.vault.adapter.basePath;
        const templateDir = path.join(vaultPath, this.plugin.settings.templateDirectory || "/");
        const files = this.app.vault.getAllLoadedFiles().filter((f) => f.path.startsWith(templateDir) && !f.children).map((file) => file.path);
        dropdown.addOption("", "None");
        files.forEach((file) => dropdown.addOption(file, file));
        dropdown.setValue(this.plugin.settings.templateFileName || "");
        dropdown.onChange(async (value) => {
          this.plugin.settings.templateFileName = value;
          await this.plugin.saveSettings();
        });
      });
      console.log("Template File dropdown refreshed.");
    };
    refreshTemplateFileDropdown();
    new import_obsidian.Setting(containerEl).setName("Entry Limit").setDesc("Specify the maximum number of entries to process from each BibTeX file (1 or more). Default is 5.").addText(
      (text) => text.setPlaceholder("e.g., 5 or 10000").setValue(String(this.plugin.settings.entryLimit)).onChange(async (value) => {
        console.log("Entry Limit (raw):", value);
        const parsedValue = parseInt(value, 10);
        if (!isNaN(parsedValue) && parsedValue > 0) {
          this.plugin.settings.entryLimit = parsedValue;
          await this.plugin.saveSettings();
        }
      })
    );
    console.log("Entry Limit setting added.");
    new import_obsidian.Setting(containerEl).setName("File Prefix").setDesc("Specify a prefix for file names (default = none).").addText(
      (text) => text.setPlaceholder("e.g., Notes_").setValue(this.plugin.settings.filePrefix).onChange(async (value) => {
        this.plugin.settings.filePrefix = value;
        await this.plugin.saveSettings();
      })
    );
    console.log("File Prefix setting added.");
    new import_obsidian.Setting(containerEl).setName("File Directory").setDesc("Specify the directory for file creation (default is current).").addDropdown((dropdown) => {
      const vaultPath = this.app.vault.adapter.basePath;
      const folders = this.app.vault.getAllLoadedFiles().filter((f) => f.children).map((folder) => folder.path);
      dropdown.addOption("/", "Vault Root");
      folders.forEach((folder) => dropdown.addOption(folder, folder));
      dropdown.setValue(this.plugin.settings.fileDirectory);
      dropdown.onChange(async (value) => {
        this.plugin.settings.fileDirectory = value;
        await this.plugin.saveSettings();
      });
    });
    console.log("File Directory setting added.");
  }
};

// main.ts
var BibtexParser = require_bibtex_parser();
var BibLaTeXPlugin = class extends import_obsidian2.Plugin {
  // Plugin initialization and setup
  async onload() {
    console.log("BibLaTeX Plugin loaded.");
    await this.loadSettings();
    this.addSettingTab(new BibLaTeXPluginSettingTab(this.app, this));
    this.addCommand({
      id: "import-bibtex",
      name: "Import BibTeX",
      callback: async () => {
        console.log("Import BibTeX command executed.");
        await this.importBibTeX();
      }
    });
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  /**
   * Helper function to sanitize strings
   * Removes invalid characters for filenames or other uses.
   * @param {string} input - The string to sanitize.
   * @returns {string} Sanitized string.
   */
  sanitizeString(input) {
    return input.replace(/[\/\\:*?"<>|]/g, "_").trim();
  }
  /**
   * Helper function to process author names
   * @param {Array|Object|string} authorsRaw - Raw authors data
   * @returns {Object} Object with formatted tags and filenames
   */
  processAuthors(authorsRaw) {
    if (!authorsRaw || authorsRaw === "Unknown Author") {
      return {
        authorTags: ["#UnknownAuthor"],
        fileNameAuthor: "UnknownAuthor"
      };
    }
    let authorTags = [];
    let fileNameAuthor = "";
    if (typeof authorsRaw === "string") {
      const cleaned = authorsRaw.replace(/[{}]/g, "");
      const authorSplits = cleaned.split(/\s+and\s+/i);
      authorSplits.forEach((authorStr) => {
        const lastNameOnly = authorStr.trim().split(",")[0].trim();
        authorTags.push(`#${lastNameOnly}`);
      });
      fileNameAuthor = authorSplits.length > 1 ? `${authorTags[0].replace(/^#/, "")}_et_al` : authorTags[0].replace(/^#/, "");
    } else if (Array.isArray(authorsRaw)) {
      authorsRaw.forEach((a) => {
        const last = a.lastName || "Unknown";
        authorTags.push(`#${last}`);
      });
      fileNameAuthor = authorTags.length > 1 ? `${authorTags[0].replace(/^#/, "")}_et_al` : authorTags[0].replace(/^#/, "");
    }
    return { authorTags, fileNameAuthor };
  }
  async importBibTeX() {
    const files = this.app.vault.getFiles().filter((file) => file.extension === "bib");
    console.log("Found .bib files:", files.map((file) => file.path));
    if (files.length === 0) {
      new import_obsidian2.Notice("No BibTeX files found in your vault.");
      return;
    }
    const coreTemplatesSettings = this.app.internalPlugins.plugins["templates"]?.instance?.options;
    const coreTemplateFolder = coreTemplatesSettings?.folder;
    const templatePath = coreTemplateFolder ? `${coreTemplateFolder}/bibtex-template.md` : this.settings.templatePath;
    const templateFile = this.app.vault.getAbstractFileByPath(templatePath);
    if (!templateFile) {
      new import_obsidian2.Notice(`Template file not found: ${templatePath}`);
      console.error(`Template file not found: ${templatePath}`);
      return;
    }
    const templateContent = await this.app.vault.read(templateFile);
    for (const file of files) {
      try {
        const content = await this.app.vault.read(file);
        console.log(`Processing file: ${file.path}`);
        console.log("File content:", content);
        const parsedResult = BibtexParser.parse(content);
        const parsedEntries = parsedResult.entries;
        console.log("Parsed entries:", parsedEntries);
        for (const entry of parsedEntries.slice(0, this.settings.entryLimit)) {
          console.log("Parsed entry:", entry);
          const fields = entry.fields || {};
          const title = fields.title || "Untitled";
          const sanitizedTitle = this.sanitizeString(
            title.split(/\s+/).slice(0, 4).join(" ")
          );
          console.log("Sanitized Title:", sanitizedTitle);
          const authorsRaw = fields.author || "Unknown Author";
          const { authorTags, fileNameAuthor } = this.processAuthors(authorsRaw);
          if (typeof authorsRaw === "string") {
            const cleaned = authorsRaw.replace(/[{}]/g, "");
            const authorSplits = cleaned.split(/\s+and\s+/i);
            authorSplits.forEach((authorStr) => {
              const tag = this.buildAuthorTag(this.sanitizeString(authorStr.trim()));
              authorTags.push(`#${tag}`);
            });
          } else if (Array.isArray(authorsRaw)) {
            authorsRaw.forEach((a) => {
              const first = a.firstName || "";
              const last = a.lastName || "";
              const combined = `${first} ${last}`.trim();
              const tag = this.buildAuthorTag(combined);
              authorTags.push(`#${tag}`);
            });
          } else if (typeof authorsRaw === "object") {
            const first = authorsRaw.firstName || "";
            const last = authorsRaw.lastName || "";
            const combined = `${first} ${last}`.trim();
            authorTags.push(`#${this.buildAuthorTag(combined)}`);
          } else {
            authorTags.push("#UnknownAuthor");
          }
          const authorsInlineArray = `["${authorTags.join('","')}"]`;
          let keywordArray = [];
          if (typeof fields.keywords === "string" && fields.keywords.trim()) {
            const cleaned = fields.keywords.replace(/[{}]/g, "").trim();
            if (cleaned) {
              const splitted = cleaned.split(",").map((k) => k.trim());
              keywordArray = splitted.map((kw) => `#${kw.replace(/\s+/g, "_")}`);
            }
          } else if (Array.isArray(fields.keywords)) {
            keywordArray = fields.keywords.map((kw) => `#${this.sanitizeString(String(kw))}`);
          }
          const keywordsInlineArray = `["${keywordArray.join('","')}"]`;
          const year = fields.date?.split("-")[0] || fields.year || "Unknown Year";
          const abstract = fields.abstract || "No abstract provided.";
          const journaltitle = fields.journaltitle || "Unknown Journal";
          const citekey = entry.key || "UnknownKey";
          const createdDate = (/* @__PURE__ */ new Date()).toISOString().split("T")[0];
          const lastModified = fields["date-modified"] || createdDate;
          const url = fields.url || "No link provided";
          const replacements = {
            citekey,
            createdDate,
            lastModified,
            title,
            year,
            abstract,
            journaltitle,
            type: entry.type || "Unknown Type",
            publisher: fields.publisher || "Unknown Publisher",
            volume: fields.volume || "N/A",
            issue: fields.issue || "N/A",
            pages: fields.pages || "N/A",
            doi: fields.doi || "N/A",
            url,
            zoteroLink: url,
            conditionalFields: "",
            // Insert the inline YAML arrays
            authors: authorsInlineArray,
            // for {{authors}} in the template
            keywords: keywordsInlineArray
            // for {{keywords}} in the template
          };
          const populatedContent = templateContent.replace(/{{(.*?)}}/g, (_, key) => {
            const val = replacements[key.trim()];
            if (val === void 0) {
              console.warn(`Warning: No replacement found for placeholder "{{${key}}}".`);
              return `{{${key}}}`;
            }
            return val;
          });
          const folderPath = "LN Literature Notes";
          if (!this.app.vault.getAbstractFileByPath(folderPath)) {
            await this.app.vault.createFolder(folderPath);
          }
          const truncatedTitle = this.sanitizeString(
            title.split(/\s+/).slice(0, 4).join(" ")
          );
          const filePrefix = this.settings.filePrefix ? `${this.settings.filePrefix} ` : "";
          const vaultPath = this.app.vault.adapter.basePath;
          const resolvedTemplateDirectory = this.settings.templateDirectory === "/" ? vaultPath : path2.join(vaultPath, this.settings.templateDirectory);
          const templateFilePath = this.settings.templateFileName ? path2.join(resolvedTemplateDirectory, this.settings.templateFileName) : null;
          if (templateFilePath && !await this.app.vault.adapter.exists(templateFilePath)) {
            throw new Error(`Template file does not exist: ${templateFilePath}`);
          }
          const resolvedDirectory = path2.isAbsolute(this.settings.fileDirectory) ? this.settings.fileDirectory : path2.join(vaultPath, this.settings.fileDirectory);
          const fileDirectory = resolvedDirectory.endsWith("/") ? resolvedDirectory : `${resolvedDirectory}/`;
          const fileName = `${fileDirectory}${filePrefix}LNL ${fileNameAuthor} ${year} ${sanitizedTitle}.md`;
          if (!this.app.vault.getAbstractFileByPath(fileDirectory)) {
            await this.app.vault.createFolder(fileDirectory);
          }
          await this.app.vault.create(fileName, populatedContent);
          console.log(`Created Markdown file: ${fileName}`);
        }
      } catch (error) {
        console.error(`Error processing file ${file.path}:`, error);
      }
    }
    new import_obsidian2.Notice("BibTeX entries imported successfully!");
  }
  // helper plugin
  buildAuthorTag(authorStr) {
    const trimmed = authorStr.trim();
    if (!trimmed || trimmed.toLowerCase() === "unknown author") {
      return "UnknownAuthor";
    }
    if (trimmed.includes(",")) {
      const [last, firstRest] = trimmed.split(",", 2).map((s) => s.trim());
      const firstInitial = firstRest?.[0] ?? "";
      return `${last}${firstInitial}`;
    } else {
      const parts = trimmed.split(/\s+/);
      const last = parts.pop() || "";
      const first = parts.shift() || "";
      const firstInitial = first?.[0] ?? "";
      return `${last}${firstInitial}`;
    }
  }
  // Plugin cleanup (optional, for when the plugin is disabled)
  onunload() {
    console.log("BibLaTeX Plugin unloaded.");
  }
};
